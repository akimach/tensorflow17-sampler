/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@protobufjs/aspromise/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@protobufjs/aspromise/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = asPromise;\n\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\nfunction asPromise(fn, ctx /*, varargs */) {\n    var params = new Array(arguments.length - 1),\n        offset = 0,\n        index = 2,\n        pending = true;\n    while (index < arguments.length) params[offset++] = arguments[index++];\n    return new Promise(function executor(resolve, reject) {\n        params[offset] = function callback(err /*, varargs */) {\n            if (pending) {\n                pending = false;\n                if (err) reject(err);else {\n                    var params = new Array(arguments.length - 1),\n                        offset = 0;\n                    while (offset < params.length) params[offset++] = arguments[offset];\n                    resolve.apply(null, params);\n                }\n            }\n        };\n        try {\n            fn.apply(ctx || null, params);\n        } catch (err) {\n            if (pending) {\n                pending = false;\n                reject(err);\n            }\n        }\n    });\n}\n\n//# sourceURL=webpack:///./node_modules/@protobufjs/aspromise/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/base64/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@protobufjs/base64/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\n\nvar base64 = exports;\n\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\nbase64.length = function length(string) {\n    var p = string.length;\n    if (!p) return 0;\n    var n = 0;\n    while (--p % 4 > 1 && string.charAt(p) === \"=\") ++n;\n    return Math.ceil(string.length * 3) / 4 - n;\n};\n\n// Base64 encoding table\nvar b64 = new Array(64);\n\n// Base64 decoding table\nvar s64 = new Array(123);\n\n// 65..90, 97..122, 48..57, 43, 47\nfor (var i = 0; i < 64;) s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\n\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\nbase64.encode = function encode(buffer, start, end) {\n    var parts = null,\n        chunk = [];\n    var i = 0,\n        // output index\n    j = 0,\n        // goto index\n    t; // temporary\n    while (start < end) {\n        var b = buffer[start++];\n        switch (j) {\n            case 0:\n                chunk[i++] = b64[b >> 2];\n                t = (b & 3) << 4;\n                j = 1;\n                break;\n            case 1:\n                chunk[i++] = b64[t | b >> 4];\n                t = (b & 15) << 2;\n                j = 2;\n                break;\n            case 2:\n                chunk[i++] = b64[t | b >> 6];\n                chunk[i++] = b64[b & 63];\n                j = 0;\n                break;\n        }\n        if (i > 8191) {\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\n            i = 0;\n        }\n    }\n    if (j) {\n        chunk[i++] = b64[t];\n        chunk[i++] = 61;\n        if (j === 1) chunk[i++] = 61;\n    }\n    if (parts) {\n        if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\n        return parts.join(\"\");\n    }\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\n};\n\nvar invalidEncoding = \"invalid encoding\";\n\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\nbase64.decode = function decode(string, buffer, offset) {\n    var start = offset;\n    var j = 0,\n        // goto index\n    t; // temporary\n    for (var i = 0; i < string.length;) {\n        var c = string.charCodeAt(i++);\n        if (c === 61 && j > 1) break;\n        if ((c = s64[c]) === undefined) throw Error(invalidEncoding);\n        switch (j) {\n            case 0:\n                t = c;\n                j = 1;\n                break;\n            case 1:\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\n                t = c;\n                j = 2;\n                break;\n            case 2:\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\n                t = c;\n                j = 3;\n                break;\n            case 3:\n                buffer[offset++] = (t & 3) << 6 | c;\n                j = 0;\n                break;\n        }\n    }\n    if (j === 1) throw Error(invalidEncoding);\n    return offset - start;\n};\n\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\nbase64.test = function test(string) {\n    return (/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string)\n    );\n};\n\n//# sourceURL=webpack:///./node_modules/@protobufjs/base64/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/eventemitter/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@protobufjs/eventemitter/index.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = EventEmitter;\n\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\nfunction EventEmitter() {\n\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\n    this._listeners = {};\n}\n\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\n        fn: fn,\n        ctx: ctx || this\n    });\n    return this;\n};\n\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\nEventEmitter.prototype.off = function off(evt, fn) {\n    if (evt === undefined) this._listeners = {};else {\n        if (fn === undefined) this._listeners[evt] = [];else {\n            var listeners = this._listeners[evt];\n            for (var i = 0; i < listeners.length;) if (listeners[i].fn === fn) listeners.splice(i, 1);else ++i;\n        }\n    }\n    return this;\n};\n\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\nEventEmitter.prototype.emit = function emit(evt) {\n    var listeners = this._listeners[evt];\n    if (listeners) {\n        var args = [],\n            i = 1;\n        for (; i < arguments.length;) args.push(arguments[i++]);\n        for (i = 0; i < listeners.length;) listeners[i].fn.apply(listeners[i++].ctx, args);\n    }\n    return this;\n};\n\n//# sourceURL=webpack:///./node_modules/@protobufjs/eventemitter/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/float/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@protobufjs/float/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = factory(factory);\n\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\n\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n// Factory function for the purpose of node-based testing in modified global environments\nfunction factory(exports) {\n\n    // float: typed array\n    if (typeof Float32Array !== \"undefined\") (function () {\n\n        var f32 = new Float32Array([-0]),\n            f8b = new Uint8Array(f32.buffer),\n            le = f8b[3] === 128;\n\n        function writeFloat_f32_cpy(val, buf, pos) {\n            f32[0] = val;\n            buf[pos] = f8b[0];\n            buf[pos + 1] = f8b[1];\n            buf[pos + 2] = f8b[2];\n            buf[pos + 3] = f8b[3];\n        }\n\n        function writeFloat_f32_rev(val, buf, pos) {\n            f32[0] = val;\n            buf[pos] = f8b[3];\n            buf[pos + 1] = f8b[2];\n            buf[pos + 2] = f8b[1];\n            buf[pos + 3] = f8b[0];\n        }\n\n        /* istanbul ignore next */\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\n        /* istanbul ignore next */\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\n\n        function readFloat_f32_cpy(buf, pos) {\n            f8b[0] = buf[pos];\n            f8b[1] = buf[pos + 1];\n            f8b[2] = buf[pos + 2];\n            f8b[3] = buf[pos + 3];\n            return f32[0];\n        }\n\n        function readFloat_f32_rev(buf, pos) {\n            f8b[3] = buf[pos];\n            f8b[2] = buf[pos + 1];\n            f8b[1] = buf[pos + 2];\n            f8b[0] = buf[pos + 3];\n            return f32[0];\n        }\n\n        /* istanbul ignore next */\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\n        /* istanbul ignore next */\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\n\n        // float: ieee754\n    })();else (function () {\n\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\n            var sign = val < 0 ? 1 : 0;\n            if (sign) val = -val;\n            if (val === 0) writeUint(1 / val > 0 ? /* positive */0 : /* negative 0 */2147483648, buf, pos);else if (isNaN(val)) writeUint(2143289344, buf, pos);else if (val > 3.4028234663852886e+38) // +-Infinity\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);else if (val < 1.1754943508222875e-38) // denormal\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);else {\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\n            }\n        }\n\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\n\n        function readFloat_ieee754(readUint, buf, pos) {\n            var uint = readUint(buf, pos),\n                sign = (uint >> 31) * 2 + 1,\n                exponent = uint >>> 23 & 255,\n                mantissa = uint & 8388607;\n            return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal\n            ? sign * 1.401298464324817e-45 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\n        }\n\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\n    })();\n\n    // double: typed array\n    if (typeof Float64Array !== \"undefined\") (function () {\n\n        var f64 = new Float64Array([-0]),\n            f8b = new Uint8Array(f64.buffer),\n            le = f8b[7] === 128;\n\n        function writeDouble_f64_cpy(val, buf, pos) {\n            f64[0] = val;\n            buf[pos] = f8b[0];\n            buf[pos + 1] = f8b[1];\n            buf[pos + 2] = f8b[2];\n            buf[pos + 3] = f8b[3];\n            buf[pos + 4] = f8b[4];\n            buf[pos + 5] = f8b[5];\n            buf[pos + 6] = f8b[6];\n            buf[pos + 7] = f8b[7];\n        }\n\n        function writeDouble_f64_rev(val, buf, pos) {\n            f64[0] = val;\n            buf[pos] = f8b[7];\n            buf[pos + 1] = f8b[6];\n            buf[pos + 2] = f8b[5];\n            buf[pos + 3] = f8b[4];\n            buf[pos + 4] = f8b[3];\n            buf[pos + 5] = f8b[2];\n            buf[pos + 6] = f8b[1];\n            buf[pos + 7] = f8b[0];\n        }\n\n        /* istanbul ignore next */\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\n        /* istanbul ignore next */\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\n\n        function readDouble_f64_cpy(buf, pos) {\n            f8b[0] = buf[pos];\n            f8b[1] = buf[pos + 1];\n            f8b[2] = buf[pos + 2];\n            f8b[3] = buf[pos + 3];\n            f8b[4] = buf[pos + 4];\n            f8b[5] = buf[pos + 5];\n            f8b[6] = buf[pos + 6];\n            f8b[7] = buf[pos + 7];\n            return f64[0];\n        }\n\n        function readDouble_f64_rev(buf, pos) {\n            f8b[7] = buf[pos];\n            f8b[6] = buf[pos + 1];\n            f8b[5] = buf[pos + 2];\n            f8b[4] = buf[pos + 3];\n            f8b[3] = buf[pos + 4];\n            f8b[2] = buf[pos + 5];\n            f8b[1] = buf[pos + 6];\n            f8b[0] = buf[pos + 7];\n            return f64[0];\n        }\n\n        /* istanbul ignore next */\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\n        /* istanbul ignore next */\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\n\n        // double: ieee754\n    })();else (function () {\n\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\n            var sign = val < 0 ? 1 : 0;\n            if (sign) val = -val;\n            if (val === 0) {\n                writeUint(0, buf, pos + off0);\n                writeUint(1 / val > 0 ? /* positive */0 : /* negative 0 */2147483648, buf, pos + off1);\n            } else if (isNaN(val)) {\n                writeUint(0, buf, pos + off0);\n                writeUint(2146959360, buf, pos + off1);\n            } else if (val > 1.7976931348623157e+308) {\n                // +-Infinity\n                writeUint(0, buf, pos + off0);\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\n            } else {\n                var mantissa;\n                if (val < 2.2250738585072014e-308) {\n                    // denormal\n                    mantissa = val / 5e-324;\n                    writeUint(mantissa >>> 0, buf, pos + off0);\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\n                } else {\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\n                    if (exponent === 1024) exponent = 1023;\n                    mantissa = val * Math.pow(2, -exponent);\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\n                }\n            }\n        }\n\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\n\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\n            var lo = readUint(buf, pos + off0),\n                hi = readUint(buf, pos + off1);\n            var sign = (hi >> 31) * 2 + 1,\n                exponent = hi >>> 20 & 2047,\n                mantissa = 4294967296 * (hi & 1048575) + lo;\n            return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal\n            ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\n        }\n\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\n    })();\n\n    return exports;\n}\n\n// uint helpers\n\nfunction writeUintLE(val, buf, pos) {\n    buf[pos] = val & 255;\n    buf[pos + 1] = val >>> 8 & 255;\n    buf[pos + 2] = val >>> 16 & 255;\n    buf[pos + 3] = val >>> 24;\n}\n\nfunction writeUintBE(val, buf, pos) {\n    buf[pos] = val >>> 24;\n    buf[pos + 1] = val >>> 16 & 255;\n    buf[pos + 2] = val >>> 8 & 255;\n    buf[pos + 3] = val & 255;\n}\n\nfunction readUintLE(buf, pos) {\n    return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;\n}\n\nfunction readUintBE(buf, pos) {\n    return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;\n}\n\n//# sourceURL=webpack:///./node_modules/@protobufjs/float/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/inquire/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@protobufjs/inquire/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = inquire;\n\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\nfunction inquire(moduleName) {\n    try {\n        var mod = eval(\"quire\".replace(/^/, \"re\"))(moduleName); // eslint-disable-line no-eval\n        if (mod && (mod.length || Object.keys(mod).length)) return mod;\n    } catch (e) {} // eslint-disable-line no-empty\n    return null;\n}\n\n//# sourceURL=webpack:///./node_modules/@protobufjs/inquire/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/pool/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/pool/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = pool;\n\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\n\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\n\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\nfunction pool(alloc, slice, size) {\n    var SIZE = size || 8192;\n    var MAX = SIZE >>> 1;\n    var slab = null;\n    var offset = SIZE;\n    return function pool_alloc(size) {\n        if (size < 1 || size > MAX) return alloc(size);\n        if (offset + size > SIZE) {\n            slab = alloc(SIZE);\n            offset = 0;\n        }\n        var buf = slice.call(slab, offset, offset += size);\n        if (offset & 7) // align to 32 bit\n            offset = (offset | 7) + 1;\n        return buf;\n    };\n}\n\n//# sourceURL=webpack:///./node_modules/@protobufjs/pool/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/utf8/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/utf8/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\n\nvar utf8 = exports;\n\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\nutf8.length = function utf8_length(string) {\n    var len = 0,\n        c = 0;\n    for (var i = 0; i < string.length; ++i) {\n        c = string.charCodeAt(i);\n        if (c < 128) len += 1;else if (c < 2048) len += 2;else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\n            ++i;\n            len += 4;\n        } else len += 3;\n    }\n    return len;\n};\n\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\nutf8.read = function utf8_read(buffer, start, end) {\n    var len = end - start;\n    if (len < 1) return \"\";\n    var parts = null,\n        chunk = [],\n        i = 0,\n        // char offset\n    t; // temporary\n    while (start < end) {\n        t = buffer[start++];\n        if (t < 128) chunk[i++] = t;else if (t > 191 && t < 224) chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;else if (t > 239 && t < 365) {\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\n            chunk[i++] = 0xD800 + (t >> 10);\n            chunk[i++] = 0xDC00 + (t & 1023);\n        } else chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\n        if (i > 8191) {\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\n            i = 0;\n        }\n    }\n    if (parts) {\n        if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\n        return parts.join(\"\");\n    }\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\n};\n\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\nutf8.write = function utf8_write(string, buffer, offset) {\n    var start = offset,\n        c1,\n        // character 1\n    c2; // character 2\n    for (var i = 0; i < string.length; ++i) {\n        c1 = string.charCodeAt(i);\n        if (c1 < 128) {\n            buffer[offset++] = c1;\n        } else if (c1 < 2048) {\n            buffer[offset++] = c1 >> 6 | 192;\n            buffer[offset++] = c1 & 63 | 128;\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\n            ++i;\n            buffer[offset++] = c1 >> 18 | 240;\n            buffer[offset++] = c1 >> 12 & 63 | 128;\n            buffer[offset++] = c1 >> 6 & 63 | 128;\n            buffer[offset++] = c1 & 63 | 128;\n        } else {\n            buffer[offset++] = c1 >> 12 | 224;\n            buffer[offset++] = c1 >> 6 & 63 | 128;\n            buffer[offset++] = c1 & 63 | 128;\n        }\n    }\n    return offset - start;\n};\n\n//# sourceURL=webpack:///./node_modules/@protobufjs/utf8/index.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/data/compiled_api.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/data/compiled_api.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins*/\n\n\nvar $protobuf = __webpack_require__(/*! protobufjs/minimal */ \"./node_modules/protobufjs/minimal.js\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.tensorflow = function () {\n\n    /**\n     * Namespace tensorflow.\n     * @exports tensorflow\n     * @namespace\n     */\n    var tensorflow = {};\n\n    tensorflow.Any = function () {\n\n        /**\n         * Properties of an Any.\n         * @memberof tensorflow\n         * @interface IAny\n         * @property {string|null} [typeUrl] Any typeUrl\n         * @property {Uint8Array|null} [value] Any value\n         */\n\n        /**\n         * Constructs a new Any.\n         * @memberof tensorflow\n         * @classdesc Represents an Any.\n         * @implements IAny\n         * @constructor\n         * @param {tensorflow.IAny=} [properties] Properties to set\n         */\n        function Any(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Any typeUrl.\n         * @member {string} typeUrl\n         * @memberof tensorflow.Any\n         * @instance\n         */\n        Any.prototype.typeUrl = \"\";\n\n        /**\n         * Any value.\n         * @member {Uint8Array} value\n         * @memberof tensorflow.Any\n         * @instance\n         */\n        Any.prototype.value = $util.newBuffer([]);\n\n        /**\n         * Creates a new Any instance using the specified properties.\n         * @function create\n         * @memberof tensorflow.Any\n         * @static\n         * @param {tensorflow.IAny=} [properties] Properties to set\n         * @returns {tensorflow.Any} Any instance\n         */\n        Any.create = function create(properties) {\n            return new Any(properties);\n        };\n\n        /**\n         * Encodes the specified Any message. Does not implicitly {@link tensorflow.Any.verify|verify} messages.\n         * @function encode\n         * @memberof tensorflow.Any\n         * @static\n         * @param {tensorflow.IAny} message Any message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Any.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.typeUrl != null && message.hasOwnProperty(\"typeUrl\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.typeUrl);\n            if (message.value != null && message.hasOwnProperty(\"value\")) writer.uint32( /* id 2, wireType 2 =*/18).bytes(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Any message, length delimited. Does not implicitly {@link tensorflow.Any.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof tensorflow.Any\n         * @static\n         * @param {tensorflow.IAny} message Any message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Any.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Any message from the specified reader or buffer.\n         * @function decode\n         * @memberof tensorflow.Any\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {tensorflow.Any} Any\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Any.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n                message = new $root.tensorflow.Any();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.typeUrl = reader.string();\n                        break;\n                    case 2:\n                        message.value = reader.bytes();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Any message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof tensorflow.Any\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {tensorflow.Any} Any\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Any.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Any message.\n         * @function verify\n         * @memberof tensorflow.Any\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Any.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            if (message.typeUrl != null && message.hasOwnProperty(\"typeUrl\")) if (!$util.isString(message.typeUrl)) return \"typeUrl: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\")) if (!(message.value && typeof message.value.length === \"number\" || $util.isString(message.value))) return \"value: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates an Any message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof tensorflow.Any\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {tensorflow.Any} Any\n         */\n        Any.fromObject = function fromObject(object) {\n            if (object instanceof $root.tensorflow.Any) return object;\n            var message = new $root.tensorflow.Any();\n            if (object.typeUrl != null) message.typeUrl = String(object.typeUrl);\n            if (object.value != null) if (typeof object.value === \"string\") $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);else if (object.value.length) message.value = object.value;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Any message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof tensorflow.Any\n         * @static\n         * @param {tensorflow.Any} message Any\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Any.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (options.defaults) {\n                object.typeUrl = \"\";\n                object.value = options.bytes === String ? \"\" : [];\n            }\n            if (message.typeUrl != null && message.hasOwnProperty(\"typeUrl\")) object.typeUrl = message.typeUrl;\n            if (message.value != null && message.hasOwnProperty(\"value\")) object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;\n            return object;\n        };\n\n        /**\n         * Converts this Any to JSON.\n         * @function toJSON\n         * @memberof tensorflow.Any\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Any.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Any;\n    }();\n\n    /**\n     * DataType enum.\n     * @name tensorflow.DataType\n     * @enum {string}\n     * @property {number} DT_INVALID=0 DT_INVALID value\n     * @property {number} DT_FLOAT=1 DT_FLOAT value\n     * @property {number} DT_DOUBLE=2 DT_DOUBLE value\n     * @property {number} DT_INT32=3 DT_INT32 value\n     * @property {number} DT_UINT8=4 DT_UINT8 value\n     * @property {number} DT_INT16=5 DT_INT16 value\n     * @property {number} DT_INT8=6 DT_INT8 value\n     * @property {number} DT_STRING=7 DT_STRING value\n     * @property {number} DT_COMPLEX64=8 DT_COMPLEX64 value\n     * @property {number} DT_INT64=9 DT_INT64 value\n     * @property {number} DT_BOOL=10 DT_BOOL value\n     * @property {number} DT_QINT8=11 DT_QINT8 value\n     * @property {number} DT_QUINT8=12 DT_QUINT8 value\n     * @property {number} DT_QINT32=13 DT_QINT32 value\n     * @property {number} DT_BFLOAT16=14 DT_BFLOAT16 value\n     * @property {number} DT_FLOAT_REF=101 DT_FLOAT_REF value\n     * @property {number} DT_DOUBLE_REF=102 DT_DOUBLE_REF value\n     * @property {number} DT_INT32_REF=103 DT_INT32_REF value\n     * @property {number} DT_UINT8_REF=104 DT_UINT8_REF value\n     * @property {number} DT_INT16_REF=105 DT_INT16_REF value\n     * @property {number} DT_INT8_REF=106 DT_INT8_REF value\n     * @property {number} DT_STRING_REF=107 DT_STRING_REF value\n     * @property {number} DT_COMPLEX64_REF=108 DT_COMPLEX64_REF value\n     * @property {number} DT_INT64_REF=109 DT_INT64_REF value\n     * @property {number} DT_BOOL_REF=110 DT_BOOL_REF value\n     * @property {number} DT_QINT8_REF=111 DT_QINT8_REF value\n     * @property {number} DT_QUINT8_REF=112 DT_QUINT8_REF value\n     * @property {number} DT_QINT32_REF=113 DT_QINT32_REF value\n     * @property {number} DT_BFLOAT16_REF=114 DT_BFLOAT16_REF value\n     */\n    tensorflow.DataType = function () {\n        var valuesById = {},\n            values = Object.create(valuesById);\n        values[valuesById[0] = \"DT_INVALID\"] = 0;\n        values[valuesById[1] = \"DT_FLOAT\"] = 1;\n        values[valuesById[2] = \"DT_DOUBLE\"] = 2;\n        values[valuesById[3] = \"DT_INT32\"] = 3;\n        values[valuesById[4] = \"DT_UINT8\"] = 4;\n        values[valuesById[5] = \"DT_INT16\"] = 5;\n        values[valuesById[6] = \"DT_INT8\"] = 6;\n        values[valuesById[7] = \"DT_STRING\"] = 7;\n        values[valuesById[8] = \"DT_COMPLEX64\"] = 8;\n        values[valuesById[9] = \"DT_INT64\"] = 9;\n        values[valuesById[10] = \"DT_BOOL\"] = 10;\n        values[valuesById[11] = \"DT_QINT8\"] = 11;\n        values[valuesById[12] = \"DT_QUINT8\"] = 12;\n        values[valuesById[13] = \"DT_QINT32\"] = 13;\n        values[valuesById[14] = \"DT_BFLOAT16\"] = 14;\n        values[valuesById[101] = \"DT_FLOAT_REF\"] = 101;\n        values[valuesById[102] = \"DT_DOUBLE_REF\"] = 102;\n        values[valuesById[103] = \"DT_INT32_REF\"] = 103;\n        values[valuesById[104] = \"DT_UINT8_REF\"] = 104;\n        values[valuesById[105] = \"DT_INT16_REF\"] = 105;\n        values[valuesById[106] = \"DT_INT8_REF\"] = 106;\n        values[valuesById[107] = \"DT_STRING_REF\"] = 107;\n        values[valuesById[108] = \"DT_COMPLEX64_REF\"] = 108;\n        values[valuesById[109] = \"DT_INT64_REF\"] = 109;\n        values[valuesById[110] = \"DT_BOOL_REF\"] = 110;\n        values[valuesById[111] = \"DT_QINT8_REF\"] = 111;\n        values[valuesById[112] = \"DT_QUINT8_REF\"] = 112;\n        values[valuesById[113] = \"DT_QINT32_REF\"] = 113;\n        values[valuesById[114] = \"DT_BFLOAT16_REF\"] = 114;\n        return values;\n    }();\n\n    tensorflow.TensorShape = function () {\n\n        /**\n         * Properties of a TensorShape.\n         * @memberof tensorflow\n         * @interface ITensorShape\n         * @property {Array.<tensorflow.TensorShape.IDim>|null} [dim] TensorShape dim\n         * @property {boolean|null} [unknownRank] TensorShape unknownRank\n         */\n\n        /**\n         * Constructs a new TensorShape.\n         * @memberof tensorflow\n         * @classdesc Represents a TensorShape.\n         * @implements ITensorShape\n         * @constructor\n         * @param {tensorflow.ITensorShape=} [properties] Properties to set\n         */\n        function TensorShape(properties) {\n            this.dim = [];\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShape dim.\n         * @member {Array.<tensorflow.TensorShape.IDim>} dim\n         * @memberof tensorflow.TensorShape\n         * @instance\n         */\n        TensorShape.prototype.dim = $util.emptyArray;\n\n        /**\n         * TensorShape unknownRank.\n         * @member {boolean} unknownRank\n         * @memberof tensorflow.TensorShape\n         * @instance\n         */\n        TensorShape.prototype.unknownRank = false;\n\n        /**\n         * Creates a new TensorShape instance using the specified properties.\n         * @function create\n         * @memberof tensorflow.TensorShape\n         * @static\n         * @param {tensorflow.ITensorShape=} [properties] Properties to set\n         * @returns {tensorflow.TensorShape} TensorShape instance\n         */\n        TensorShape.create = function create(properties) {\n            return new TensorShape(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShape message. Does not implicitly {@link tensorflow.TensorShape.verify|verify} messages.\n         * @function encode\n         * @memberof tensorflow.TensorShape\n         * @static\n         * @param {tensorflow.ITensorShape} message TensorShape message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShape.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.dim != null && message.dim.length) for (var i = 0; i < message.dim.length; ++i) $root.tensorflow.TensorShape.Dim.encode(message.dim[i], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.unknownRank != null && message.hasOwnProperty(\"unknownRank\")) writer.uint32( /* id 3, wireType 0 =*/24).bool(message.unknownRank);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShape message, length delimited. Does not implicitly {@link tensorflow.TensorShape.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof tensorflow.TensorShape\n         * @static\n         * @param {tensorflow.ITensorShape} message TensorShape message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShape.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShape message from the specified reader or buffer.\n         * @function decode\n         * @memberof tensorflow.TensorShape\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {tensorflow.TensorShape} TensorShape\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShape.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n                message = new $root.tensorflow.TensorShape();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 2:\n                        if (!(message.dim && message.dim.length)) message.dim = [];\n                        message.dim.push($root.tensorflow.TensorShape.Dim.decode(reader, reader.uint32()));\n                        break;\n                    case 3:\n                        message.unknownRank = reader.bool();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShape message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof tensorflow.TensorShape\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {tensorflow.TensorShape} TensorShape\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShape.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShape message.\n         * @function verify\n         * @memberof tensorflow.TensorShape\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShape.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim)) return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.tensorflow.TensorShape.Dim.verify(message.dim[i]);\n                    if (error) return \"dim.\" + error;\n                }\n            }\n            if (message.unknownRank != null && message.hasOwnProperty(\"unknownRank\")) if (typeof message.unknownRank !== \"boolean\") return \"unknownRank: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TensorShape message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof tensorflow.TensorShape\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {tensorflow.TensorShape} TensorShape\n         */\n        TensorShape.fromObject = function fromObject(object) {\n            if (object instanceof $root.tensorflow.TensorShape) return object;\n            var message = new $root.tensorflow.TensorShape();\n            if (object.dim) {\n                if (!Array.isArray(object.dim)) throw TypeError(\".tensorflow.TensorShape.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\") throw TypeError(\".tensorflow.TensorShape.dim: object expected\");\n                    message.dim[i] = $root.tensorflow.TensorShape.Dim.fromObject(object.dim[i]);\n                }\n            }\n            if (object.unknownRank != null) message.unknownRank = Boolean(object.unknownRank);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShape message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof tensorflow.TensorShape\n         * @static\n         * @param {tensorflow.TensorShape} message TensorShape\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShape.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (options.arrays || options.defaults) object.dim = [];\n            if (options.defaults) object.unknownRank = false;\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j) object.dim[j] = $root.tensorflow.TensorShape.Dim.toObject(message.dim[j], options);\n            }\n            if (message.unknownRank != null && message.hasOwnProperty(\"unknownRank\")) object.unknownRank = message.unknownRank;\n            return object;\n        };\n\n        /**\n         * Converts this TensorShape to JSON.\n         * @function toJSON\n         * @memberof tensorflow.TensorShape\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShape.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShape.Dim = function () {\n\n            /**\n             * Properties of a Dim.\n             * @memberof tensorflow.TensorShape\n             * @interface IDim\n             * @property {number|Long|null} [size] Dim size\n             * @property {string|null} [name] Dim name\n             */\n\n            /**\n             * Constructs a new Dim.\n             * @memberof tensorflow.TensorShape\n             * @classdesc Represents a Dim.\n             * @implements IDim\n             * @constructor\n             * @param {tensorflow.TensorShape.IDim=} [properties] Properties to set\n             */\n            function Dim(properties) {\n                if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dim size.\n             * @member {number|Long} size\n             * @memberof tensorflow.TensorShape.Dim\n             * @instance\n             */\n            Dim.prototype.size = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n            /**\n             * Dim name.\n             * @member {string} name\n             * @memberof tensorflow.TensorShape.Dim\n             * @instance\n             */\n            Dim.prototype.name = \"\";\n\n            /**\n             * Creates a new Dim instance using the specified properties.\n             * @function create\n             * @memberof tensorflow.TensorShape.Dim\n             * @static\n             * @param {tensorflow.TensorShape.IDim=} [properties] Properties to set\n             * @returns {tensorflow.TensorShape.Dim} Dim instance\n             */\n            Dim.create = function create(properties) {\n                return new Dim(properties);\n            };\n\n            /**\n             * Encodes the specified Dim message. Does not implicitly {@link tensorflow.TensorShape.Dim.verify|verify} messages.\n             * @function encode\n             * @memberof tensorflow.TensorShape.Dim\n             * @static\n             * @param {tensorflow.TensorShape.IDim} message Dim message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dim.encode = function encode(message, writer) {\n                if (!writer) writer = $Writer.create();\n                if (message.size != null && message.hasOwnProperty(\"size\")) writer.uint32( /* id 1, wireType 0 =*/8).int64(message.size);\n                if (message.name != null && message.hasOwnProperty(\"name\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.name);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dim message, length delimited. Does not implicitly {@link tensorflow.TensorShape.Dim.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof tensorflow.TensorShape.Dim\n             * @static\n             * @param {tensorflow.TensorShape.IDim} message Dim message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dim.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dim message from the specified reader or buffer.\n             * @function decode\n             * @memberof tensorflow.TensorShape.Dim\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {tensorflow.TensorShape.Dim} Dim\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dim.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length,\n                    message = new $root.tensorflow.TensorShape.Dim();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            message.size = reader.int64();\n                            break;\n                        case 2:\n                            message.name = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dim message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof tensorflow.TensorShape.Dim\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {tensorflow.TensorShape.Dim} Dim\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dim.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dim message.\n             * @function verify\n             * @memberof tensorflow.TensorShape.Dim\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dim.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null) return \"object expected\";\n                if (message.size != null && message.hasOwnProperty(\"size\")) if (!$util.isInteger(message.size) && !(message.size && $util.isInteger(message.size.low) && $util.isInteger(message.size.high))) return \"size: integer|Long expected\";\n                if (message.name != null && message.hasOwnProperty(\"name\")) if (!$util.isString(message.name)) return \"name: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dim message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof tensorflow.TensorShape.Dim\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {tensorflow.TensorShape.Dim} Dim\n             */\n            Dim.fromObject = function fromObject(object) {\n                if (object instanceof $root.tensorflow.TensorShape.Dim) return object;\n                var message = new $root.tensorflow.TensorShape.Dim();\n                if (object.size != null) if ($util.Long) (message.size = $util.Long.fromValue(object.size)).unsigned = false;else if (typeof object.size === \"string\") message.size = parseInt(object.size, 10);else if (typeof object.size === \"number\") message.size = object.size;else if (typeof object.size === \"object\") message.size = new $util.LongBits(object.size.low >>> 0, object.size.high >>> 0).toNumber();\n                if (object.name != null) message.name = String(object.name);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dim message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof tensorflow.TensorShape.Dim\n             * @static\n             * @param {tensorflow.TensorShape.Dim} message Dim\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dim.toObject = function toObject(message, options) {\n                if (!options) options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else object.size = options.longs === String ? \"0\" : 0;\n                    object.name = \"\";\n                }\n                if (message.size != null && message.hasOwnProperty(\"size\")) if (typeof message.size === \"number\") object.size = options.longs === String ? String(message.size) : message.size;else object.size = options.longs === String ? $util.Long.prototype.toString.call(message.size) : options.longs === Number ? new $util.LongBits(message.size.low >>> 0, message.size.high >>> 0).toNumber() : message.size;\n                if (message.name != null && message.hasOwnProperty(\"name\")) object.name = message.name;\n                return object;\n            };\n\n            /**\n             * Converts this Dim to JSON.\n             * @function toJSON\n             * @memberof tensorflow.TensorShape.Dim\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dim.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dim;\n        }();\n\n        return TensorShape;\n    }();\n\n    tensorflow.Tensor = function () {\n\n        /**\n         * Properties of a Tensor.\n         * @memberof tensorflow\n         * @interface ITensor\n         * @property {tensorflow.DataType|null} [dtype] Tensor dtype\n         * @property {tensorflow.ITensorShape|null} [tensorShape] Tensor tensorShape\n         * @property {number|null} [versionNumber] Tensor versionNumber\n         * @property {Uint8Array|null} [tensorContent] Tensor tensorContent\n         * @property {Array.<number>|null} [floatVal] Tensor floatVal\n         * @property {Array.<number>|null} [doubleVal] Tensor doubleVal\n         * @property {Array.<number>|null} [intVal] Tensor intVal\n         * @property {Array.<Uint8Array>|null} [stringVal] Tensor stringVal\n         * @property {Array.<number>|null} [scomplexVal] Tensor scomplexVal\n         * @property {Array.<number|Long>|null} [int64Val] Tensor int64Val\n         * @property {Array.<boolean>|null} [boolVal] Tensor boolVal\n         * @property {Array.<number>|null} [uint32Val] Tensor uint32Val\n         * @property {Array.<number|Long>|null} [uint64Val] Tensor uint64Val\n         */\n\n        /**\n         * Constructs a new Tensor.\n         * @memberof tensorflow\n         * @classdesc Represents a Tensor.\n         * @implements ITensor\n         * @constructor\n         * @param {tensorflow.ITensor=} [properties] Properties to set\n         */\n        function Tensor(properties) {\n            this.floatVal = [];\n            this.doubleVal = [];\n            this.intVal = [];\n            this.stringVal = [];\n            this.scomplexVal = [];\n            this.int64Val = [];\n            this.boolVal = [];\n            this.uint32Val = [];\n            this.uint64Val = [];\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Tensor dtype.\n         * @member {tensorflow.DataType} dtype\n         * @memberof tensorflow.Tensor\n         * @instance\n         */\n        Tensor.prototype.dtype = 0;\n\n        /**\n         * Tensor tensorShape.\n         * @member {tensorflow.ITensorShape|null|undefined} tensorShape\n         * @memberof tensorflow.Tensor\n         * @instance\n         */\n        Tensor.prototype.tensorShape = null;\n\n        /**\n         * Tensor versionNumber.\n         * @member {number} versionNumber\n         * @memberof tensorflow.Tensor\n         * @instance\n         */\n        Tensor.prototype.versionNumber = 0;\n\n        /**\n         * Tensor tensorContent.\n         * @member {Uint8Array} tensorContent\n         * @memberof tensorflow.Tensor\n         * @instance\n         */\n        Tensor.prototype.tensorContent = $util.newBuffer([]);\n\n        /**\n         * Tensor floatVal.\n         * @member {Array.<number>} floatVal\n         * @memberof tensorflow.Tensor\n         * @instance\n         */\n        Tensor.prototype.floatVal = $util.emptyArray;\n\n        /**\n         * Tensor doubleVal.\n         * @member {Array.<number>} doubleVal\n         * @memberof tensorflow.Tensor\n         * @instance\n         */\n        Tensor.prototype.doubleVal = $util.emptyArray;\n\n        /**\n         * Tensor intVal.\n         * @member {Array.<number>} intVal\n         * @memberof tensorflow.Tensor\n         * @instance\n         */\n        Tensor.prototype.intVal = $util.emptyArray;\n\n        /**\n         * Tensor stringVal.\n         * @member {Array.<Uint8Array>} stringVal\n         * @memberof tensorflow.Tensor\n         * @instance\n         */\n        Tensor.prototype.stringVal = $util.emptyArray;\n\n        /**\n         * Tensor scomplexVal.\n         * @member {Array.<number>} scomplexVal\n         * @memberof tensorflow.Tensor\n         * @instance\n         */\n        Tensor.prototype.scomplexVal = $util.emptyArray;\n\n        /**\n         * Tensor int64Val.\n         * @member {Array.<number|Long>} int64Val\n         * @memberof tensorflow.Tensor\n         * @instance\n         */\n        Tensor.prototype.int64Val = $util.emptyArray;\n\n        /**\n         * Tensor boolVal.\n         * @member {Array.<boolean>} boolVal\n         * @memberof tensorflow.Tensor\n         * @instance\n         */\n        Tensor.prototype.boolVal = $util.emptyArray;\n\n        /**\n         * Tensor uint32Val.\n         * @member {Array.<number>} uint32Val\n         * @memberof tensorflow.Tensor\n         * @instance\n         */\n        Tensor.prototype.uint32Val = $util.emptyArray;\n\n        /**\n         * Tensor uint64Val.\n         * @member {Array.<number|Long>} uint64Val\n         * @memberof tensorflow.Tensor\n         * @instance\n         */\n        Tensor.prototype.uint64Val = $util.emptyArray;\n\n        /**\n         * Creates a new Tensor instance using the specified properties.\n         * @function create\n         * @memberof tensorflow.Tensor\n         * @static\n         * @param {tensorflow.ITensor=} [properties] Properties to set\n         * @returns {tensorflow.Tensor} Tensor instance\n         */\n        Tensor.create = function create(properties) {\n            return new Tensor(properties);\n        };\n\n        /**\n         * Encodes the specified Tensor message. Does not implicitly {@link tensorflow.Tensor.verify|verify} messages.\n         * @function encode\n         * @memberof tensorflow.Tensor\n         * @static\n         * @param {tensorflow.ITensor} message Tensor message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Tensor.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.dtype != null && message.hasOwnProperty(\"dtype\")) writer.uint32( /* id 1, wireType 0 =*/8).int32(message.dtype);\n            if (message.tensorShape != null && message.hasOwnProperty(\"tensorShape\")) $root.tensorflow.TensorShape.encode(message.tensorShape, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.versionNumber != null && message.hasOwnProperty(\"versionNumber\")) writer.uint32( /* id 3, wireType 0 =*/24).int32(message.versionNumber);\n            if (message.tensorContent != null && message.hasOwnProperty(\"tensorContent\")) writer.uint32( /* id 4, wireType 2 =*/34).bytes(message.tensorContent);\n            if (message.floatVal != null && message.floatVal.length) {\n                writer.uint32( /* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.floatVal.length; ++i) writer.float(message.floatVal[i]);\n                writer.ldelim();\n            }\n            if (message.doubleVal != null && message.doubleVal.length) {\n                writer.uint32( /* id 6, wireType 2 =*/50).fork();\n                for (var i = 0; i < message.doubleVal.length; ++i) writer.double(message.doubleVal[i]);\n                writer.ldelim();\n            }\n            if (message.intVal != null && message.intVal.length) {\n                writer.uint32( /* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.intVal.length; ++i) writer.int32(message.intVal[i]);\n                writer.ldelim();\n            }\n            if (message.stringVal != null && message.stringVal.length) for (var i = 0; i < message.stringVal.length; ++i) writer.uint32( /* id 8, wireType 2 =*/66).bytes(message.stringVal[i]);\n            if (message.scomplexVal != null && message.scomplexVal.length) {\n                writer.uint32( /* id 9, wireType 2 =*/74).fork();\n                for (var i = 0; i < message.scomplexVal.length; ++i) writer.float(message.scomplexVal[i]);\n                writer.ldelim();\n            }\n            if (message.int64Val != null && message.int64Val.length) {\n                writer.uint32( /* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.int64Val.length; ++i) writer.int64(message.int64Val[i]);\n                writer.ldelim();\n            }\n            if (message.boolVal != null && message.boolVal.length) {\n                writer.uint32( /* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.boolVal.length; ++i) writer.bool(message.boolVal[i]);\n                writer.ldelim();\n            }\n            if (message.uint32Val != null && message.uint32Val.length) {\n                writer.uint32( /* id 16, wireType 2 =*/130).fork();\n                for (var i = 0; i < message.uint32Val.length; ++i) writer.uint32(message.uint32Val[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Val != null && message.uint64Val.length) {\n                writer.uint32( /* id 17, wireType 2 =*/138).fork();\n                for (var i = 0; i < message.uint64Val.length; ++i) writer.uint64(message.uint64Val[i]);\n                writer.ldelim();\n            }\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Tensor message, length delimited. Does not implicitly {@link tensorflow.Tensor.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof tensorflow.Tensor\n         * @static\n         * @param {tensorflow.ITensor} message Tensor message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Tensor message from the specified reader or buffer.\n         * @function decode\n         * @memberof tensorflow.Tensor\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {tensorflow.Tensor} Tensor\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Tensor.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n                message = new $root.tensorflow.Tensor();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.dtype = reader.int32();\n                        break;\n                    case 2:\n                        message.tensorShape = $root.tensorflow.TensorShape.decode(reader, reader.uint32());\n                        break;\n                    case 3:\n                        message.versionNumber = reader.int32();\n                        break;\n                    case 4:\n                        message.tensorContent = reader.bytes();\n                        break;\n                    case 5:\n                        if (!(message.floatVal && message.floatVal.length)) message.floatVal = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2) message.floatVal.push(reader.float());\n                        } else message.floatVal.push(reader.float());\n                        break;\n                    case 6:\n                        if (!(message.doubleVal && message.doubleVal.length)) message.doubleVal = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2) message.doubleVal.push(reader.double());\n                        } else message.doubleVal.push(reader.double());\n                        break;\n                    case 7:\n                        if (!(message.intVal && message.intVal.length)) message.intVal = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2) message.intVal.push(reader.int32());\n                        } else message.intVal.push(reader.int32());\n                        break;\n                    case 8:\n                        if (!(message.stringVal && message.stringVal.length)) message.stringVal = [];\n                        message.stringVal.push(reader.bytes());\n                        break;\n                    case 9:\n                        if (!(message.scomplexVal && message.scomplexVal.length)) message.scomplexVal = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2) message.scomplexVal.push(reader.float());\n                        } else message.scomplexVal.push(reader.float());\n                        break;\n                    case 10:\n                        if (!(message.int64Val && message.int64Val.length)) message.int64Val = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2) message.int64Val.push(reader.int64());\n                        } else message.int64Val.push(reader.int64());\n                        break;\n                    case 11:\n                        if (!(message.boolVal && message.boolVal.length)) message.boolVal = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2) message.boolVal.push(reader.bool());\n                        } else message.boolVal.push(reader.bool());\n                        break;\n                    case 16:\n                        if (!(message.uint32Val && message.uint32Val.length)) message.uint32Val = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2) message.uint32Val.push(reader.uint32());\n                        } else message.uint32Val.push(reader.uint32());\n                        break;\n                    case 17:\n                        if (!(message.uint64Val && message.uint64Val.length)) message.uint64Val = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2) message.uint64Val.push(reader.uint64());\n                        } else message.uint64Val.push(reader.uint64());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Tensor message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof tensorflow.Tensor\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {tensorflow.Tensor} Tensor\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Tensor.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Tensor message.\n         * @function verify\n         * @memberof tensorflow.Tensor\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Tensor.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            if (message.dtype != null && message.hasOwnProperty(\"dtype\")) switch (message.dtype) {\n                default:\n                    return \"dtype: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 11:\n                case 12:\n                case 13:\n                case 14:\n                case 101:\n                case 102:\n                case 103:\n                case 104:\n                case 105:\n                case 106:\n                case 107:\n                case 108:\n                case 109:\n                case 110:\n                case 111:\n                case 112:\n                case 113:\n                case 114:\n                    break;\n            }\n            if (message.tensorShape != null && message.hasOwnProperty(\"tensorShape\")) {\n                var error = $root.tensorflow.TensorShape.verify(message.tensorShape);\n                if (error) return \"tensorShape.\" + error;\n            }\n            if (message.versionNumber != null && message.hasOwnProperty(\"versionNumber\")) if (!$util.isInteger(message.versionNumber)) return \"versionNumber: integer expected\";\n            if (message.tensorContent != null && message.hasOwnProperty(\"tensorContent\")) if (!(message.tensorContent && typeof message.tensorContent.length === \"number\" || $util.isString(message.tensorContent))) return \"tensorContent: buffer expected\";\n            if (message.floatVal != null && message.hasOwnProperty(\"floatVal\")) {\n                if (!Array.isArray(message.floatVal)) return \"floatVal: array expected\";\n                for (var i = 0; i < message.floatVal.length; ++i) if (typeof message.floatVal[i] !== \"number\") return \"floatVal: number[] expected\";\n            }\n            if (message.doubleVal != null && message.hasOwnProperty(\"doubleVal\")) {\n                if (!Array.isArray(message.doubleVal)) return \"doubleVal: array expected\";\n                for (var i = 0; i < message.doubleVal.length; ++i) if (typeof message.doubleVal[i] !== \"number\") return \"doubleVal: number[] expected\";\n            }\n            if (message.intVal != null && message.hasOwnProperty(\"intVal\")) {\n                if (!Array.isArray(message.intVal)) return \"intVal: array expected\";\n                for (var i = 0; i < message.intVal.length; ++i) if (!$util.isInteger(message.intVal[i])) return \"intVal: integer[] expected\";\n            }\n            if (message.stringVal != null && message.hasOwnProperty(\"stringVal\")) {\n                if (!Array.isArray(message.stringVal)) return \"stringVal: array expected\";\n                for (var i = 0; i < message.stringVal.length; ++i) if (!(message.stringVal[i] && typeof message.stringVal[i].length === \"number\" || $util.isString(message.stringVal[i]))) return \"stringVal: buffer[] expected\";\n            }\n            if (message.scomplexVal != null && message.hasOwnProperty(\"scomplexVal\")) {\n                if (!Array.isArray(message.scomplexVal)) return \"scomplexVal: array expected\";\n                for (var i = 0; i < message.scomplexVal.length; ++i) if (typeof message.scomplexVal[i] !== \"number\") return \"scomplexVal: number[] expected\";\n            }\n            if (message.int64Val != null && message.hasOwnProperty(\"int64Val\")) {\n                if (!Array.isArray(message.int64Val)) return \"int64Val: array expected\";\n                for (var i = 0; i < message.int64Val.length; ++i) if (!$util.isInteger(message.int64Val[i]) && !(message.int64Val[i] && $util.isInteger(message.int64Val[i].low) && $util.isInteger(message.int64Val[i].high))) return \"int64Val: integer|Long[] expected\";\n            }\n            if (message.boolVal != null && message.hasOwnProperty(\"boolVal\")) {\n                if (!Array.isArray(message.boolVal)) return \"boolVal: array expected\";\n                for (var i = 0; i < message.boolVal.length; ++i) if (typeof message.boolVal[i] !== \"boolean\") return \"boolVal: boolean[] expected\";\n            }\n            if (message.uint32Val != null && message.hasOwnProperty(\"uint32Val\")) {\n                if (!Array.isArray(message.uint32Val)) return \"uint32Val: array expected\";\n                for (var i = 0; i < message.uint32Val.length; ++i) if (!$util.isInteger(message.uint32Val[i])) return \"uint32Val: integer[] expected\";\n            }\n            if (message.uint64Val != null && message.hasOwnProperty(\"uint64Val\")) {\n                if (!Array.isArray(message.uint64Val)) return \"uint64Val: array expected\";\n                for (var i = 0; i < message.uint64Val.length; ++i) if (!$util.isInteger(message.uint64Val[i]) && !(message.uint64Val[i] && $util.isInteger(message.uint64Val[i].low) && $util.isInteger(message.uint64Val[i].high))) return \"uint64Val: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof tensorflow.Tensor\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {tensorflow.Tensor} Tensor\n         */\n        Tensor.fromObject = function fromObject(object) {\n            if (object instanceof $root.tensorflow.Tensor) return object;\n            var message = new $root.tensorflow.Tensor();\n            switch (object.dtype) {\n                case \"DT_INVALID\":\n                case 0:\n                    message.dtype = 0;\n                    break;\n                case \"DT_FLOAT\":\n                case 1:\n                    message.dtype = 1;\n                    break;\n                case \"DT_DOUBLE\":\n                case 2:\n                    message.dtype = 2;\n                    break;\n                case \"DT_INT32\":\n                case 3:\n                    message.dtype = 3;\n                    break;\n                case \"DT_UINT8\":\n                case 4:\n                    message.dtype = 4;\n                    break;\n                case \"DT_INT16\":\n                case 5:\n                    message.dtype = 5;\n                    break;\n                case \"DT_INT8\":\n                case 6:\n                    message.dtype = 6;\n                    break;\n                case \"DT_STRING\":\n                case 7:\n                    message.dtype = 7;\n                    break;\n                case \"DT_COMPLEX64\":\n                case 8:\n                    message.dtype = 8;\n                    break;\n                case \"DT_INT64\":\n                case 9:\n                    message.dtype = 9;\n                    break;\n                case \"DT_BOOL\":\n                case 10:\n                    message.dtype = 10;\n                    break;\n                case \"DT_QINT8\":\n                case 11:\n                    message.dtype = 11;\n                    break;\n                case \"DT_QUINT8\":\n                case 12:\n                    message.dtype = 12;\n                    break;\n                case \"DT_QINT32\":\n                case 13:\n                    message.dtype = 13;\n                    break;\n                case \"DT_BFLOAT16\":\n                case 14:\n                    message.dtype = 14;\n                    break;\n                case \"DT_FLOAT_REF\":\n                case 101:\n                    message.dtype = 101;\n                    break;\n                case \"DT_DOUBLE_REF\":\n                case 102:\n                    message.dtype = 102;\n                    break;\n                case \"DT_INT32_REF\":\n                case 103:\n                    message.dtype = 103;\n                    break;\n                case \"DT_UINT8_REF\":\n                case 104:\n                    message.dtype = 104;\n                    break;\n                case \"DT_INT16_REF\":\n                case 105:\n                    message.dtype = 105;\n                    break;\n                case \"DT_INT8_REF\":\n                case 106:\n                    message.dtype = 106;\n                    break;\n                case \"DT_STRING_REF\":\n                case 107:\n                    message.dtype = 107;\n                    break;\n                case \"DT_COMPLEX64_REF\":\n                case 108:\n                    message.dtype = 108;\n                    break;\n                case \"DT_INT64_REF\":\n                case 109:\n                    message.dtype = 109;\n                    break;\n                case \"DT_BOOL_REF\":\n                case 110:\n                    message.dtype = 110;\n                    break;\n                case \"DT_QINT8_REF\":\n                case 111:\n                    message.dtype = 111;\n                    break;\n                case \"DT_QUINT8_REF\":\n                case 112:\n                    message.dtype = 112;\n                    break;\n                case \"DT_QINT32_REF\":\n                case 113:\n                    message.dtype = 113;\n                    break;\n                case \"DT_BFLOAT16_REF\":\n                case 114:\n                    message.dtype = 114;\n                    break;\n            }\n            if (object.tensorShape != null) {\n                if (typeof object.tensorShape !== \"object\") throw TypeError(\".tensorflow.Tensor.tensorShape: object expected\");\n                message.tensorShape = $root.tensorflow.TensorShape.fromObject(object.tensorShape);\n            }\n            if (object.versionNumber != null) message.versionNumber = object.versionNumber | 0;\n            if (object.tensorContent != null) if (typeof object.tensorContent === \"string\") $util.base64.decode(object.tensorContent, message.tensorContent = $util.newBuffer($util.base64.length(object.tensorContent)), 0);else if (object.tensorContent.length) message.tensorContent = object.tensorContent;\n            if (object.floatVal) {\n                if (!Array.isArray(object.floatVal)) throw TypeError(\".tensorflow.Tensor.floatVal: array expected\");\n                message.floatVal = [];\n                for (var i = 0; i < object.floatVal.length; ++i) message.floatVal[i] = Number(object.floatVal[i]);\n            }\n            if (object.doubleVal) {\n                if (!Array.isArray(object.doubleVal)) throw TypeError(\".tensorflow.Tensor.doubleVal: array expected\");\n                message.doubleVal = [];\n                for (var i = 0; i < object.doubleVal.length; ++i) message.doubleVal[i] = Number(object.doubleVal[i]);\n            }\n            if (object.intVal) {\n                if (!Array.isArray(object.intVal)) throw TypeError(\".tensorflow.Tensor.intVal: array expected\");\n                message.intVal = [];\n                for (var i = 0; i < object.intVal.length; ++i) message.intVal[i] = object.intVal[i] | 0;\n            }\n            if (object.stringVal) {\n                if (!Array.isArray(object.stringVal)) throw TypeError(\".tensorflow.Tensor.stringVal: array expected\");\n                message.stringVal = [];\n                for (var i = 0; i < object.stringVal.length; ++i) if (typeof object.stringVal[i] === \"string\") $util.base64.decode(object.stringVal[i], message.stringVal[i] = $util.newBuffer($util.base64.length(object.stringVal[i])), 0);else if (object.stringVal[i].length) message.stringVal[i] = object.stringVal[i];\n            }\n            if (object.scomplexVal) {\n                if (!Array.isArray(object.scomplexVal)) throw TypeError(\".tensorflow.Tensor.scomplexVal: array expected\");\n                message.scomplexVal = [];\n                for (var i = 0; i < object.scomplexVal.length; ++i) message.scomplexVal[i] = Number(object.scomplexVal[i]);\n            }\n            if (object.int64Val) {\n                if (!Array.isArray(object.int64Val)) throw TypeError(\".tensorflow.Tensor.int64Val: array expected\");\n                message.int64Val = [];\n                for (var i = 0; i < object.int64Val.length; ++i) if ($util.Long) (message.int64Val[i] = $util.Long.fromValue(object.int64Val[i])).unsigned = false;else if (typeof object.int64Val[i] === \"string\") message.int64Val[i] = parseInt(object.int64Val[i], 10);else if (typeof object.int64Val[i] === \"number\") message.int64Val[i] = object.int64Val[i];else if (typeof object.int64Val[i] === \"object\") message.int64Val[i] = new $util.LongBits(object.int64Val[i].low >>> 0, object.int64Val[i].high >>> 0).toNumber();\n            }\n            if (object.boolVal) {\n                if (!Array.isArray(object.boolVal)) throw TypeError(\".tensorflow.Tensor.boolVal: array expected\");\n                message.boolVal = [];\n                for (var i = 0; i < object.boolVal.length; ++i) message.boolVal[i] = Boolean(object.boolVal[i]);\n            }\n            if (object.uint32Val) {\n                if (!Array.isArray(object.uint32Val)) throw TypeError(\".tensorflow.Tensor.uint32Val: array expected\");\n                message.uint32Val = [];\n                for (var i = 0; i < object.uint32Val.length; ++i) message.uint32Val[i] = object.uint32Val[i] >>> 0;\n            }\n            if (object.uint64Val) {\n                if (!Array.isArray(object.uint64Val)) throw TypeError(\".tensorflow.Tensor.uint64Val: array expected\");\n                message.uint64Val = [];\n                for (var i = 0; i < object.uint64Val.length; ++i) if ($util.Long) (message.uint64Val[i] = $util.Long.fromValue(object.uint64Val[i])).unsigned = true;else if (typeof object.uint64Val[i] === \"string\") message.uint64Val[i] = parseInt(object.uint64Val[i], 10);else if (typeof object.uint64Val[i] === \"number\") message.uint64Val[i] = object.uint64Val[i];else if (typeof object.uint64Val[i] === \"object\") message.uint64Val[i] = new $util.LongBits(object.uint64Val[i].low >>> 0, object.uint64Val[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof tensorflow.Tensor\n         * @static\n         * @param {tensorflow.Tensor} message Tensor\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Tensor.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floatVal = [];\n                object.doubleVal = [];\n                object.intVal = [];\n                object.stringVal = [];\n                object.scomplexVal = [];\n                object.int64Val = [];\n                object.boolVal = [];\n                object.uint32Val = [];\n                object.uint64Val = [];\n            }\n            if (options.defaults) {\n                object.dtype = options.enums === String ? \"DT_INVALID\" : 0;\n                object.tensorShape = null;\n                object.versionNumber = 0;\n                object.tensorContent = options.bytes === String ? \"\" : [];\n            }\n            if (message.dtype != null && message.hasOwnProperty(\"dtype\")) object.dtype = options.enums === String ? $root.tensorflow.DataType[message.dtype] : message.dtype;\n            if (message.tensorShape != null && message.hasOwnProperty(\"tensorShape\")) object.tensorShape = $root.tensorflow.TensorShape.toObject(message.tensorShape, options);\n            if (message.versionNumber != null && message.hasOwnProperty(\"versionNumber\")) object.versionNumber = message.versionNumber;\n            if (message.tensorContent != null && message.hasOwnProperty(\"tensorContent\")) object.tensorContent = options.bytes === String ? $util.base64.encode(message.tensorContent, 0, message.tensorContent.length) : options.bytes === Array ? Array.prototype.slice.call(message.tensorContent) : message.tensorContent;\n            if (message.floatVal && message.floatVal.length) {\n                object.floatVal = [];\n                for (var j = 0; j < message.floatVal.length; ++j) object.floatVal[j] = options.json && !isFinite(message.floatVal[j]) ? String(message.floatVal[j]) : message.floatVal[j];\n            }\n            if (message.doubleVal && message.doubleVal.length) {\n                object.doubleVal = [];\n                for (var j = 0; j < message.doubleVal.length; ++j) object.doubleVal[j] = options.json && !isFinite(message.doubleVal[j]) ? String(message.doubleVal[j]) : message.doubleVal[j];\n            }\n            if (message.intVal && message.intVal.length) {\n                object.intVal = [];\n                for (var j = 0; j < message.intVal.length; ++j) object.intVal[j] = message.intVal[j];\n            }\n            if (message.stringVal && message.stringVal.length) {\n                object.stringVal = [];\n                for (var j = 0; j < message.stringVal.length; ++j) object.stringVal[j] = options.bytes === String ? $util.base64.encode(message.stringVal[j], 0, message.stringVal[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringVal[j]) : message.stringVal[j];\n            }\n            if (message.scomplexVal && message.scomplexVal.length) {\n                object.scomplexVal = [];\n                for (var j = 0; j < message.scomplexVal.length; ++j) object.scomplexVal[j] = options.json && !isFinite(message.scomplexVal[j]) ? String(message.scomplexVal[j]) : message.scomplexVal[j];\n            }\n            if (message.int64Val && message.int64Val.length) {\n                object.int64Val = [];\n                for (var j = 0; j < message.int64Val.length; ++j) if (typeof message.int64Val[j] === \"number\") object.int64Val[j] = options.longs === String ? String(message.int64Val[j]) : message.int64Val[j];else object.int64Val[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Val[j]) : options.longs === Number ? new $util.LongBits(message.int64Val[j].low >>> 0, message.int64Val[j].high >>> 0).toNumber() : message.int64Val[j];\n            }\n            if (message.boolVal && message.boolVal.length) {\n                object.boolVal = [];\n                for (var j = 0; j < message.boolVal.length; ++j) object.boolVal[j] = message.boolVal[j];\n            }\n            if (message.uint32Val && message.uint32Val.length) {\n                object.uint32Val = [];\n                for (var j = 0; j < message.uint32Val.length; ++j) object.uint32Val[j] = message.uint32Val[j];\n            }\n            if (message.uint64Val && message.uint64Val.length) {\n                object.uint64Val = [];\n                for (var j = 0; j < message.uint64Val.length; ++j) if (typeof message.uint64Val[j] === \"number\") object.uint64Val[j] = options.longs === String ? String(message.uint64Val[j]) : message.uint64Val[j];else object.uint64Val[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Val[j]) : options.longs === Number ? new $util.LongBits(message.uint64Val[j].low >>> 0, message.uint64Val[j].high >>> 0).toNumber(true) : message.uint64Val[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Tensor to JSON.\n         * @function toJSON\n         * @memberof tensorflow.Tensor\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Tensor.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Tensor;\n    }();\n\n    tensorflow.AttrValue = function () {\n\n        /**\n         * Properties of an AttrValue.\n         * @memberof tensorflow\n         * @interface IAttrValue\n         * @property {tensorflow.AttrValue.IListValue|null} [list] AttrValue list\n         * @property {Uint8Array|null} [s] AttrValue s\n         * @property {number|Long|null} [i] AttrValue i\n         * @property {number|null} [f] AttrValue f\n         * @property {boolean|null} [b] AttrValue b\n         * @property {tensorflow.DataType|null} [type] AttrValue type\n         * @property {tensorflow.ITensorShape|null} [shape] AttrValue shape\n         * @property {tensorflow.ITensor|null} [tensor] AttrValue tensor\n         * @property {string|null} [placeholder] AttrValue placeholder\n         * @property {tensorflow.INameAttrList|null} [func] AttrValue func\n         */\n\n        /**\n         * Constructs a new AttrValue.\n         * @memberof tensorflow\n         * @classdesc Represents an AttrValue.\n         * @implements IAttrValue\n         * @constructor\n         * @param {tensorflow.IAttrValue=} [properties] Properties to set\n         */\n        function AttrValue(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttrValue list.\n         * @member {tensorflow.AttrValue.IListValue|null|undefined} list\n         * @memberof tensorflow.AttrValue\n         * @instance\n         */\n        AttrValue.prototype.list = null;\n\n        /**\n         * AttrValue s.\n         * @member {Uint8Array} s\n         * @memberof tensorflow.AttrValue\n         * @instance\n         */\n        AttrValue.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttrValue i.\n         * @member {number|Long} i\n         * @memberof tensorflow.AttrValue\n         * @instance\n         */\n        AttrValue.prototype.i = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n        /**\n         * AttrValue f.\n         * @member {number} f\n         * @memberof tensorflow.AttrValue\n         * @instance\n         */\n        AttrValue.prototype.f = 0;\n\n        /**\n         * AttrValue b.\n         * @member {boolean} b\n         * @memberof tensorflow.AttrValue\n         * @instance\n         */\n        AttrValue.prototype.b = false;\n\n        /**\n         * AttrValue type.\n         * @member {tensorflow.DataType} type\n         * @memberof tensorflow.AttrValue\n         * @instance\n         */\n        AttrValue.prototype.type = 0;\n\n        /**\n         * AttrValue shape.\n         * @member {tensorflow.ITensorShape|null|undefined} shape\n         * @memberof tensorflow.AttrValue\n         * @instance\n         */\n        AttrValue.prototype.shape = null;\n\n        /**\n         * AttrValue tensor.\n         * @member {tensorflow.ITensor|null|undefined} tensor\n         * @memberof tensorflow.AttrValue\n         * @instance\n         */\n        AttrValue.prototype.tensor = null;\n\n        /**\n         * AttrValue placeholder.\n         * @member {string} placeholder\n         * @memberof tensorflow.AttrValue\n         * @instance\n         */\n        AttrValue.prototype.placeholder = \"\";\n\n        /**\n         * AttrValue func.\n         * @member {tensorflow.INameAttrList|null|undefined} func\n         * @memberof tensorflow.AttrValue\n         * @instance\n         */\n        AttrValue.prototype.func = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * AttrValue value.\n         * @member {\"list\"|\"s\"|\"i\"|\"f\"|\"b\"|\"type\"|\"shape\"|\"tensor\"|\"placeholder\"|\"func\"|undefined} value\n         * @memberof tensorflow.AttrValue\n         * @instance\n         */\n        Object.defineProperty(AttrValue.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"list\", \"s\", \"i\", \"f\", \"b\", \"type\", \"shape\", \"tensor\", \"placeholder\", \"func\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new AttrValue instance using the specified properties.\n         * @function create\n         * @memberof tensorflow.AttrValue\n         * @static\n         * @param {tensorflow.IAttrValue=} [properties] Properties to set\n         * @returns {tensorflow.AttrValue} AttrValue instance\n         */\n        AttrValue.create = function create(properties) {\n            return new AttrValue(properties);\n        };\n\n        /**\n         * Encodes the specified AttrValue message. Does not implicitly {@link tensorflow.AttrValue.verify|verify} messages.\n         * @function encode\n         * @memberof tensorflow.AttrValue\n         * @static\n         * @param {tensorflow.IAttrValue} message AttrValue message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttrValue.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.list != null && message.hasOwnProperty(\"list\")) $root.tensorflow.AttrValue.ListValue.encode(message.list, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.s != null && message.hasOwnProperty(\"s\")) writer.uint32( /* id 2, wireType 2 =*/18).bytes(message.s);\n            if (message.i != null && message.hasOwnProperty(\"i\")) writer.uint32( /* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.f != null && message.hasOwnProperty(\"f\")) writer.uint32( /* id 4, wireType 5 =*/37).float(message.f);\n            if (message.b != null && message.hasOwnProperty(\"b\")) writer.uint32( /* id 5, wireType 0 =*/40).bool(message.b);\n            if (message.type != null && message.hasOwnProperty(\"type\")) writer.uint32( /* id 6, wireType 0 =*/48).int32(message.type);\n            if (message.shape != null && message.hasOwnProperty(\"shape\")) $root.tensorflow.TensorShape.encode(message.shape, writer.uint32( /* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.tensor != null && message.hasOwnProperty(\"tensor\")) $root.tensorflow.Tensor.encode(message.tensor, writer.uint32( /* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.placeholder != null && message.hasOwnProperty(\"placeholder\")) writer.uint32( /* id 9, wireType 2 =*/74).string(message.placeholder);\n            if (message.func != null && message.hasOwnProperty(\"func\")) $root.tensorflow.NameAttrList.encode(message.func, writer.uint32( /* id 10, wireType 2 =*/82).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttrValue message, length delimited. Does not implicitly {@link tensorflow.AttrValue.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof tensorflow.AttrValue\n         * @static\n         * @param {tensorflow.IAttrValue} message AttrValue message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttrValue.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttrValue message from the specified reader or buffer.\n         * @function decode\n         * @memberof tensorflow.AttrValue\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {tensorflow.AttrValue} AttrValue\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttrValue.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n                message = new $root.tensorflow.AttrValue();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.list = $root.tensorflow.AttrValue.ListValue.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.s = reader.bytes();\n                        break;\n                    case 3:\n                        message.i = reader.int64();\n                        break;\n                    case 4:\n                        message.f = reader.float();\n                        break;\n                    case 5:\n                        message.b = reader.bool();\n                        break;\n                    case 6:\n                        message.type = reader.int32();\n                        break;\n                    case 7:\n                        message.shape = $root.tensorflow.TensorShape.decode(reader, reader.uint32());\n                        break;\n                    case 8:\n                        message.tensor = $root.tensorflow.Tensor.decode(reader, reader.uint32());\n                        break;\n                    case 9:\n                        message.placeholder = reader.string();\n                        break;\n                    case 10:\n                        message.func = $root.tensorflow.NameAttrList.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttrValue message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof tensorflow.AttrValue\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {tensorflow.AttrValue} AttrValue\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttrValue.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttrValue message.\n         * @function verify\n         * @memberof tensorflow.AttrValue\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttrValue.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            var properties = {};\n            if (message.list != null && message.hasOwnProperty(\"list\")) {\n                properties.value = 1;\n                {\n                    var error = $root.tensorflow.AttrValue.ListValue.verify(message.list);\n                    if (error) return \"list.\" + error;\n                }\n            }\n            if (message.s != null && message.hasOwnProperty(\"s\")) {\n                if (properties.value === 1) return \"value: multiple values\";\n                properties.value = 1;\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s))) return \"s: buffer expected\";\n            }\n            if (message.i != null && message.hasOwnProperty(\"i\")) {\n                if (properties.value === 1) return \"value: multiple values\";\n                properties.value = 1;\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high))) return \"i: integer|Long expected\";\n            }\n            if (message.f != null && message.hasOwnProperty(\"f\")) {\n                if (properties.value === 1) return \"value: multiple values\";\n                properties.value = 1;\n                if (typeof message.f !== \"number\") return \"f: number expected\";\n            }\n            if (message.b != null && message.hasOwnProperty(\"b\")) {\n                if (properties.value === 1) return \"value: multiple values\";\n                properties.value = 1;\n                if (typeof message.b !== \"boolean\") return \"b: boolean expected\";\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                if (properties.value === 1) return \"value: multiple values\";\n                properties.value = 1;\n                switch (message.type) {\n                    default:\n                        return \"type: enum value expected\";\n                    case 0:\n                    case 1:\n                    case 2:\n                    case 3:\n                    case 4:\n                    case 5:\n                    case 6:\n                    case 7:\n                    case 8:\n                    case 9:\n                    case 10:\n                    case 11:\n                    case 12:\n                    case 13:\n                    case 14:\n                    case 101:\n                    case 102:\n                    case 103:\n                    case 104:\n                    case 105:\n                    case 106:\n                    case 107:\n                    case 108:\n                    case 109:\n                    case 110:\n                    case 111:\n                    case 112:\n                    case 113:\n                    case 114:\n                        break;\n                }\n            }\n            if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                if (properties.value === 1) return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.tensorflow.TensorShape.verify(message.shape);\n                    if (error) return \"shape.\" + error;\n                }\n            }\n            if (message.tensor != null && message.hasOwnProperty(\"tensor\")) {\n                if (properties.value === 1) return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.tensorflow.Tensor.verify(message.tensor);\n                    if (error) return \"tensor.\" + error;\n                }\n            }\n            if (message.placeholder != null && message.hasOwnProperty(\"placeholder\")) {\n                if (properties.value === 1) return \"value: multiple values\";\n                properties.value = 1;\n                if (!$util.isString(message.placeholder)) return \"placeholder: string expected\";\n            }\n            if (message.func != null && message.hasOwnProperty(\"func\")) {\n                if (properties.value === 1) return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.tensorflow.NameAttrList.verify(message.func);\n                    if (error) return \"func.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttrValue message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof tensorflow.AttrValue\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {tensorflow.AttrValue} AttrValue\n         */\n        AttrValue.fromObject = function fromObject(object) {\n            if (object instanceof $root.tensorflow.AttrValue) return object;\n            var message = new $root.tensorflow.AttrValue();\n            if (object.list != null) {\n                if (typeof object.list !== \"object\") throw TypeError(\".tensorflow.AttrValue.list: object expected\");\n                message.list = $root.tensorflow.AttrValue.ListValue.fromObject(object.list);\n            }\n            if (object.s != null) if (typeof object.s === \"string\") $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);else if (object.s.length) message.s = object.s;\n            if (object.i != null) if ($util.Long) (message.i = $util.Long.fromValue(object.i)).unsigned = false;else if (typeof object.i === \"string\") message.i = parseInt(object.i, 10);else if (typeof object.i === \"number\") message.i = object.i;else if (typeof object.i === \"object\") message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.f != null) message.f = Number(object.f);\n            if (object.b != null) message.b = Boolean(object.b);\n            switch (object.type) {\n                case \"DT_INVALID\":\n                case 0:\n                    message.type = 0;\n                    break;\n                case \"DT_FLOAT\":\n                case 1:\n                    message.type = 1;\n                    break;\n                case \"DT_DOUBLE\":\n                case 2:\n                    message.type = 2;\n                    break;\n                case \"DT_INT32\":\n                case 3:\n                    message.type = 3;\n                    break;\n                case \"DT_UINT8\":\n                case 4:\n                    message.type = 4;\n                    break;\n                case \"DT_INT16\":\n                case 5:\n                    message.type = 5;\n                    break;\n                case \"DT_INT8\":\n                case 6:\n                    message.type = 6;\n                    break;\n                case \"DT_STRING\":\n                case 7:\n                    message.type = 7;\n                    break;\n                case \"DT_COMPLEX64\":\n                case 8:\n                    message.type = 8;\n                    break;\n                case \"DT_INT64\":\n                case 9:\n                    message.type = 9;\n                    break;\n                case \"DT_BOOL\":\n                case 10:\n                    message.type = 10;\n                    break;\n                case \"DT_QINT8\":\n                case 11:\n                    message.type = 11;\n                    break;\n                case \"DT_QUINT8\":\n                case 12:\n                    message.type = 12;\n                    break;\n                case \"DT_QINT32\":\n                case 13:\n                    message.type = 13;\n                    break;\n                case \"DT_BFLOAT16\":\n                case 14:\n                    message.type = 14;\n                    break;\n                case \"DT_FLOAT_REF\":\n                case 101:\n                    message.type = 101;\n                    break;\n                case \"DT_DOUBLE_REF\":\n                case 102:\n                    message.type = 102;\n                    break;\n                case \"DT_INT32_REF\":\n                case 103:\n                    message.type = 103;\n                    break;\n                case \"DT_UINT8_REF\":\n                case 104:\n                    message.type = 104;\n                    break;\n                case \"DT_INT16_REF\":\n                case 105:\n                    message.type = 105;\n                    break;\n                case \"DT_INT8_REF\":\n                case 106:\n                    message.type = 106;\n                    break;\n                case \"DT_STRING_REF\":\n                case 107:\n                    message.type = 107;\n                    break;\n                case \"DT_COMPLEX64_REF\":\n                case 108:\n                    message.type = 108;\n                    break;\n                case \"DT_INT64_REF\":\n                case 109:\n                    message.type = 109;\n                    break;\n                case \"DT_BOOL_REF\":\n                case 110:\n                    message.type = 110;\n                    break;\n                case \"DT_QINT8_REF\":\n                case 111:\n                    message.type = 111;\n                    break;\n                case \"DT_QUINT8_REF\":\n                case 112:\n                    message.type = 112;\n                    break;\n                case \"DT_QINT32_REF\":\n                case 113:\n                    message.type = 113;\n                    break;\n                case \"DT_BFLOAT16_REF\":\n                case 114:\n                    message.type = 114;\n                    break;\n            }\n            if (object.shape != null) {\n                if (typeof object.shape !== \"object\") throw TypeError(\".tensorflow.AttrValue.shape: object expected\");\n                message.shape = $root.tensorflow.TensorShape.fromObject(object.shape);\n            }\n            if (object.tensor != null) {\n                if (typeof object.tensor !== \"object\") throw TypeError(\".tensorflow.AttrValue.tensor: object expected\");\n                message.tensor = $root.tensorflow.Tensor.fromObject(object.tensor);\n            }\n            if (object.placeholder != null) message.placeholder = String(object.placeholder);\n            if (object.func != null) {\n                if (typeof object.func !== \"object\") throw TypeError(\".tensorflow.AttrValue.func: object expected\");\n                message.func = $root.tensorflow.NameAttrList.fromObject(object.func);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttrValue message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof tensorflow.AttrValue\n         * @static\n         * @param {tensorflow.AttrValue} message AttrValue\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttrValue.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (message.list != null && message.hasOwnProperty(\"list\")) {\n                object.list = $root.tensorflow.AttrValue.ListValue.toObject(message.list, options);\n                if (options.oneofs) object.value = \"list\";\n            }\n            if (message.s != null && message.hasOwnProperty(\"s\")) {\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n                if (options.oneofs) object.value = \"s\";\n            }\n            if (message.i != null && message.hasOwnProperty(\"i\")) {\n                if (typeof message.i === \"number\") object.i = options.longs === String ? String(message.i) : message.i;else object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n                if (options.oneofs) object.value = \"i\";\n            }\n            if (message.f != null && message.hasOwnProperty(\"f\")) {\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n                if (options.oneofs) object.value = \"f\";\n            }\n            if (message.b != null && message.hasOwnProperty(\"b\")) {\n                object.b = message.b;\n                if (options.oneofs) object.value = \"b\";\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                object.type = options.enums === String ? $root.tensorflow.DataType[message.type] : message.type;\n                if (options.oneofs) object.value = \"type\";\n            }\n            if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                object.shape = $root.tensorflow.TensorShape.toObject(message.shape, options);\n                if (options.oneofs) object.value = \"shape\";\n            }\n            if (message.tensor != null && message.hasOwnProperty(\"tensor\")) {\n                object.tensor = $root.tensorflow.Tensor.toObject(message.tensor, options);\n                if (options.oneofs) object.value = \"tensor\";\n            }\n            if (message.placeholder != null && message.hasOwnProperty(\"placeholder\")) {\n                object.placeholder = message.placeholder;\n                if (options.oneofs) object.value = \"placeholder\";\n            }\n            if (message.func != null && message.hasOwnProperty(\"func\")) {\n                object.func = $root.tensorflow.NameAttrList.toObject(message.func, options);\n                if (options.oneofs) object.value = \"func\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this AttrValue to JSON.\n         * @function toJSON\n         * @memberof tensorflow.AttrValue\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttrValue.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        AttrValue.ListValue = function () {\n\n            /**\n             * Properties of a ListValue.\n             * @memberof tensorflow.AttrValue\n             * @interface IListValue\n             * @property {Array.<Uint8Array>|null} [s] ListValue s\n             * @property {Array.<number|Long>|null} [i] ListValue i\n             * @property {Array.<number>|null} [f] ListValue f\n             * @property {Array.<boolean>|null} [b] ListValue b\n             * @property {Array.<tensorflow.DataType>|null} [type] ListValue type\n             * @property {Array.<tensorflow.ITensorShape>|null} [shape] ListValue shape\n             * @property {Array.<tensorflow.ITensor>|null} [tensor] ListValue tensor\n             * @property {Array.<tensorflow.INameAttrList>|null} [func] ListValue func\n             */\n\n            /**\n             * Constructs a new ListValue.\n             * @memberof tensorflow.AttrValue\n             * @classdesc Represents a ListValue.\n             * @implements IListValue\n             * @constructor\n             * @param {tensorflow.AttrValue.IListValue=} [properties] Properties to set\n             */\n            function ListValue(properties) {\n                this.s = [];\n                this.i = [];\n                this.f = [];\n                this.b = [];\n                this.type = [];\n                this.shape = [];\n                this.tensor = [];\n                this.func = [];\n                if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ListValue s.\n             * @member {Array.<Uint8Array>} s\n             * @memberof tensorflow.AttrValue.ListValue\n             * @instance\n             */\n            ListValue.prototype.s = $util.emptyArray;\n\n            /**\n             * ListValue i.\n             * @member {Array.<number|Long>} i\n             * @memberof tensorflow.AttrValue.ListValue\n             * @instance\n             */\n            ListValue.prototype.i = $util.emptyArray;\n\n            /**\n             * ListValue f.\n             * @member {Array.<number>} f\n             * @memberof tensorflow.AttrValue.ListValue\n             * @instance\n             */\n            ListValue.prototype.f = $util.emptyArray;\n\n            /**\n             * ListValue b.\n             * @member {Array.<boolean>} b\n             * @memberof tensorflow.AttrValue.ListValue\n             * @instance\n             */\n            ListValue.prototype.b = $util.emptyArray;\n\n            /**\n             * ListValue type.\n             * @member {Array.<tensorflow.DataType>} type\n             * @memberof tensorflow.AttrValue.ListValue\n             * @instance\n             */\n            ListValue.prototype.type = $util.emptyArray;\n\n            /**\n             * ListValue shape.\n             * @member {Array.<tensorflow.ITensorShape>} shape\n             * @memberof tensorflow.AttrValue.ListValue\n             * @instance\n             */\n            ListValue.prototype.shape = $util.emptyArray;\n\n            /**\n             * ListValue tensor.\n             * @member {Array.<tensorflow.ITensor>} tensor\n             * @memberof tensorflow.AttrValue.ListValue\n             * @instance\n             */\n            ListValue.prototype.tensor = $util.emptyArray;\n\n            /**\n             * ListValue func.\n             * @member {Array.<tensorflow.INameAttrList>} func\n             * @memberof tensorflow.AttrValue.ListValue\n             * @instance\n             */\n            ListValue.prototype.func = $util.emptyArray;\n\n            /**\n             * Creates a new ListValue instance using the specified properties.\n             * @function create\n             * @memberof tensorflow.AttrValue.ListValue\n             * @static\n             * @param {tensorflow.AttrValue.IListValue=} [properties] Properties to set\n             * @returns {tensorflow.AttrValue.ListValue} ListValue instance\n             */\n            ListValue.create = function create(properties) {\n                return new ListValue(properties);\n            };\n\n            /**\n             * Encodes the specified ListValue message. Does not implicitly {@link tensorflow.AttrValue.ListValue.verify|verify} messages.\n             * @function encode\n             * @memberof tensorflow.AttrValue.ListValue\n             * @static\n             * @param {tensorflow.AttrValue.IListValue} message ListValue message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ListValue.encode = function encode(message, writer) {\n                if (!writer) writer = $Writer.create();\n                if (message.s != null && message.s.length) for (var i = 0; i < message.s.length; ++i) writer.uint32( /* id 2, wireType 2 =*/18).bytes(message.s[i]);\n                if (message.i != null && message.i.length) {\n                    writer.uint32( /* id 3, wireType 2 =*/26).fork();\n                    for (var i = 0; i < message.i.length; ++i) writer.int64(message.i[i]);\n                    writer.ldelim();\n                }\n                if (message.f != null && message.f.length) {\n                    writer.uint32( /* id 4, wireType 2 =*/34).fork();\n                    for (var i = 0; i < message.f.length; ++i) writer.float(message.f[i]);\n                    writer.ldelim();\n                }\n                if (message.b != null && message.b.length) {\n                    writer.uint32( /* id 5, wireType 2 =*/42).fork();\n                    for (var i = 0; i < message.b.length; ++i) writer.bool(message.b[i]);\n                    writer.ldelim();\n                }\n                if (message.type != null && message.type.length) {\n                    writer.uint32( /* id 6, wireType 2 =*/50).fork();\n                    for (var i = 0; i < message.type.length; ++i) writer.int32(message.type[i]);\n                    writer.ldelim();\n                }\n                if (message.shape != null && message.shape.length) for (var i = 0; i < message.shape.length; ++i) $root.tensorflow.TensorShape.encode(message.shape[i], writer.uint32( /* id 7, wireType 2 =*/58).fork()).ldelim();\n                if (message.tensor != null && message.tensor.length) for (var i = 0; i < message.tensor.length; ++i) $root.tensorflow.Tensor.encode(message.tensor[i], writer.uint32( /* id 8, wireType 2 =*/66).fork()).ldelim();\n                if (message.func != null && message.func.length) for (var i = 0; i < message.func.length; ++i) $root.tensorflow.NameAttrList.encode(message.func[i], writer.uint32( /* id 9, wireType 2 =*/74).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ListValue message, length delimited. Does not implicitly {@link tensorflow.AttrValue.ListValue.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof tensorflow.AttrValue.ListValue\n             * @static\n             * @param {tensorflow.AttrValue.IListValue} message ListValue message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ListValue.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ListValue message from the specified reader or buffer.\n             * @function decode\n             * @memberof tensorflow.AttrValue.ListValue\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {tensorflow.AttrValue.ListValue} ListValue\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ListValue.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length,\n                    message = new $root.tensorflow.AttrValue.ListValue();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 2:\n                            if (!(message.s && message.s.length)) message.s = [];\n                            message.s.push(reader.bytes());\n                            break;\n                        case 3:\n                            if (!(message.i && message.i.length)) message.i = [];\n                            if ((tag & 7) === 2) {\n                                var end2 = reader.uint32() + reader.pos;\n                                while (reader.pos < end2) message.i.push(reader.int64());\n                            } else message.i.push(reader.int64());\n                            break;\n                        case 4:\n                            if (!(message.f && message.f.length)) message.f = [];\n                            if ((tag & 7) === 2) {\n                                var end2 = reader.uint32() + reader.pos;\n                                while (reader.pos < end2) message.f.push(reader.float());\n                            } else message.f.push(reader.float());\n                            break;\n                        case 5:\n                            if (!(message.b && message.b.length)) message.b = [];\n                            if ((tag & 7) === 2) {\n                                var end2 = reader.uint32() + reader.pos;\n                                while (reader.pos < end2) message.b.push(reader.bool());\n                            } else message.b.push(reader.bool());\n                            break;\n                        case 6:\n                            if (!(message.type && message.type.length)) message.type = [];\n                            if ((tag & 7) === 2) {\n                                var end2 = reader.uint32() + reader.pos;\n                                while (reader.pos < end2) message.type.push(reader.int32());\n                            } else message.type.push(reader.int32());\n                            break;\n                        case 7:\n                            if (!(message.shape && message.shape.length)) message.shape = [];\n                            message.shape.push($root.tensorflow.TensorShape.decode(reader, reader.uint32()));\n                            break;\n                        case 8:\n                            if (!(message.tensor && message.tensor.length)) message.tensor = [];\n                            message.tensor.push($root.tensorflow.Tensor.decode(reader, reader.uint32()));\n                            break;\n                        case 9:\n                            if (!(message.func && message.func.length)) message.func = [];\n                            message.func.push($root.tensorflow.NameAttrList.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ListValue message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof tensorflow.AttrValue.ListValue\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {tensorflow.AttrValue.ListValue} ListValue\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ListValue.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ListValue message.\n             * @function verify\n             * @memberof tensorflow.AttrValue.ListValue\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ListValue.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null) return \"object expected\";\n                if (message.s != null && message.hasOwnProperty(\"s\")) {\n                    if (!Array.isArray(message.s)) return \"s: array expected\";\n                    for (var i = 0; i < message.s.length; ++i) if (!(message.s[i] && typeof message.s[i].length === \"number\" || $util.isString(message.s[i]))) return \"s: buffer[] expected\";\n                }\n                if (message.i != null && message.hasOwnProperty(\"i\")) {\n                    if (!Array.isArray(message.i)) return \"i: array expected\";\n                    for (var i = 0; i < message.i.length; ++i) if (!$util.isInteger(message.i[i]) && !(message.i[i] && $util.isInteger(message.i[i].low) && $util.isInteger(message.i[i].high))) return \"i: integer|Long[] expected\";\n                }\n                if (message.f != null && message.hasOwnProperty(\"f\")) {\n                    if (!Array.isArray(message.f)) return \"f: array expected\";\n                    for (var i = 0; i < message.f.length; ++i) if (typeof message.f[i] !== \"number\") return \"f: number[] expected\";\n                }\n                if (message.b != null && message.hasOwnProperty(\"b\")) {\n                    if (!Array.isArray(message.b)) return \"b: array expected\";\n                    for (var i = 0; i < message.b.length; ++i) if (typeof message.b[i] !== \"boolean\") return \"b: boolean[] expected\";\n                }\n                if (message.type != null && message.hasOwnProperty(\"type\")) {\n                    if (!Array.isArray(message.type)) return \"type: array expected\";\n                    for (var i = 0; i < message.type.length; ++i) switch (message.type[i]) {\n                        default:\n                            return \"type: enum value[] expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 101:\n                        case 102:\n                        case 103:\n                        case 104:\n                        case 105:\n                        case 106:\n                        case 107:\n                        case 108:\n                        case 109:\n                        case 110:\n                        case 111:\n                        case 112:\n                        case 113:\n                        case 114:\n                            break;\n                    }\n                }\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    if (!Array.isArray(message.shape)) return \"shape: array expected\";\n                    for (var i = 0; i < message.shape.length; ++i) {\n                        var error = $root.tensorflow.TensorShape.verify(message.shape[i]);\n                        if (error) return \"shape.\" + error;\n                    }\n                }\n                if (message.tensor != null && message.hasOwnProperty(\"tensor\")) {\n                    if (!Array.isArray(message.tensor)) return \"tensor: array expected\";\n                    for (var i = 0; i < message.tensor.length; ++i) {\n                        var error = $root.tensorflow.Tensor.verify(message.tensor[i]);\n                        if (error) return \"tensor.\" + error;\n                    }\n                }\n                if (message.func != null && message.hasOwnProperty(\"func\")) {\n                    if (!Array.isArray(message.func)) return \"func: array expected\";\n                    for (var i = 0; i < message.func.length; ++i) {\n                        var error = $root.tensorflow.NameAttrList.verify(message.func[i]);\n                        if (error) return \"func.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a ListValue message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof tensorflow.AttrValue.ListValue\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {tensorflow.AttrValue.ListValue} ListValue\n             */\n            ListValue.fromObject = function fromObject(object) {\n                if (object instanceof $root.tensorflow.AttrValue.ListValue) return object;\n                var message = new $root.tensorflow.AttrValue.ListValue();\n                if (object.s) {\n                    if (!Array.isArray(object.s)) throw TypeError(\".tensorflow.AttrValue.ListValue.s: array expected\");\n                    message.s = [];\n                    for (var i = 0; i < object.s.length; ++i) if (typeof object.s[i] === \"string\") $util.base64.decode(object.s[i], message.s[i] = $util.newBuffer($util.base64.length(object.s[i])), 0);else if (object.s[i].length) message.s[i] = object.s[i];\n                }\n                if (object.i) {\n                    if (!Array.isArray(object.i)) throw TypeError(\".tensorflow.AttrValue.ListValue.i: array expected\");\n                    message.i = [];\n                    for (var i = 0; i < object.i.length; ++i) if ($util.Long) (message.i[i] = $util.Long.fromValue(object.i[i])).unsigned = false;else if (typeof object.i[i] === \"string\") message.i[i] = parseInt(object.i[i], 10);else if (typeof object.i[i] === \"number\") message.i[i] = object.i[i];else if (typeof object.i[i] === \"object\") message.i[i] = new $util.LongBits(object.i[i].low >>> 0, object.i[i].high >>> 0).toNumber();\n                }\n                if (object.f) {\n                    if (!Array.isArray(object.f)) throw TypeError(\".tensorflow.AttrValue.ListValue.f: array expected\");\n                    message.f = [];\n                    for (var i = 0; i < object.f.length; ++i) message.f[i] = Number(object.f[i]);\n                }\n                if (object.b) {\n                    if (!Array.isArray(object.b)) throw TypeError(\".tensorflow.AttrValue.ListValue.b: array expected\");\n                    message.b = [];\n                    for (var i = 0; i < object.b.length; ++i) message.b[i] = Boolean(object.b[i]);\n                }\n                if (object.type) {\n                    if (!Array.isArray(object.type)) throw TypeError(\".tensorflow.AttrValue.ListValue.type: array expected\");\n                    message.type = [];\n                    for (var i = 0; i < object.type.length; ++i) switch (object.type[i]) {\n                        default:\n                        case \"DT_INVALID\":\n                        case 0:\n                            message.type[i] = 0;\n                            break;\n                        case \"DT_FLOAT\":\n                        case 1:\n                            message.type[i] = 1;\n                            break;\n                        case \"DT_DOUBLE\":\n                        case 2:\n                            message.type[i] = 2;\n                            break;\n                        case \"DT_INT32\":\n                        case 3:\n                            message.type[i] = 3;\n                            break;\n                        case \"DT_UINT8\":\n                        case 4:\n                            message.type[i] = 4;\n                            break;\n                        case \"DT_INT16\":\n                        case 5:\n                            message.type[i] = 5;\n                            break;\n                        case \"DT_INT8\":\n                        case 6:\n                            message.type[i] = 6;\n                            break;\n                        case \"DT_STRING\":\n                        case 7:\n                            message.type[i] = 7;\n                            break;\n                        case \"DT_COMPLEX64\":\n                        case 8:\n                            message.type[i] = 8;\n                            break;\n                        case \"DT_INT64\":\n                        case 9:\n                            message.type[i] = 9;\n                            break;\n                        case \"DT_BOOL\":\n                        case 10:\n                            message.type[i] = 10;\n                            break;\n                        case \"DT_QINT8\":\n                        case 11:\n                            message.type[i] = 11;\n                            break;\n                        case \"DT_QUINT8\":\n                        case 12:\n                            message.type[i] = 12;\n                            break;\n                        case \"DT_QINT32\":\n                        case 13:\n                            message.type[i] = 13;\n                            break;\n                        case \"DT_BFLOAT16\":\n                        case 14:\n                            message.type[i] = 14;\n                            break;\n                        case \"DT_FLOAT_REF\":\n                        case 101:\n                            message.type[i] = 101;\n                            break;\n                        case \"DT_DOUBLE_REF\":\n                        case 102:\n                            message.type[i] = 102;\n                            break;\n                        case \"DT_INT32_REF\":\n                        case 103:\n                            message.type[i] = 103;\n                            break;\n                        case \"DT_UINT8_REF\":\n                        case 104:\n                            message.type[i] = 104;\n                            break;\n                        case \"DT_INT16_REF\":\n                        case 105:\n                            message.type[i] = 105;\n                            break;\n                        case \"DT_INT8_REF\":\n                        case 106:\n                            message.type[i] = 106;\n                            break;\n                        case \"DT_STRING_REF\":\n                        case 107:\n                            message.type[i] = 107;\n                            break;\n                        case \"DT_COMPLEX64_REF\":\n                        case 108:\n                            message.type[i] = 108;\n                            break;\n                        case \"DT_INT64_REF\":\n                        case 109:\n                            message.type[i] = 109;\n                            break;\n                        case \"DT_BOOL_REF\":\n                        case 110:\n                            message.type[i] = 110;\n                            break;\n                        case \"DT_QINT8_REF\":\n                        case 111:\n                            message.type[i] = 111;\n                            break;\n                        case \"DT_QUINT8_REF\":\n                        case 112:\n                            message.type[i] = 112;\n                            break;\n                        case \"DT_QINT32_REF\":\n                        case 113:\n                            message.type[i] = 113;\n                            break;\n                        case \"DT_BFLOAT16_REF\":\n                        case 114:\n                            message.type[i] = 114;\n                            break;\n                    }\n                }\n                if (object.shape) {\n                    if (!Array.isArray(object.shape)) throw TypeError(\".tensorflow.AttrValue.ListValue.shape: array expected\");\n                    message.shape = [];\n                    for (var i = 0; i < object.shape.length; ++i) {\n                        if (typeof object.shape[i] !== \"object\") throw TypeError(\".tensorflow.AttrValue.ListValue.shape: object expected\");\n                        message.shape[i] = $root.tensorflow.TensorShape.fromObject(object.shape[i]);\n                    }\n                }\n                if (object.tensor) {\n                    if (!Array.isArray(object.tensor)) throw TypeError(\".tensorflow.AttrValue.ListValue.tensor: array expected\");\n                    message.tensor = [];\n                    for (var i = 0; i < object.tensor.length; ++i) {\n                        if (typeof object.tensor[i] !== \"object\") throw TypeError(\".tensorflow.AttrValue.ListValue.tensor: object expected\");\n                        message.tensor[i] = $root.tensorflow.Tensor.fromObject(object.tensor[i]);\n                    }\n                }\n                if (object.func) {\n                    if (!Array.isArray(object.func)) throw TypeError(\".tensorflow.AttrValue.ListValue.func: array expected\");\n                    message.func = [];\n                    for (var i = 0; i < object.func.length; ++i) {\n                        if (typeof object.func[i] !== \"object\") throw TypeError(\".tensorflow.AttrValue.ListValue.func: object expected\");\n                        message.func[i] = $root.tensorflow.NameAttrList.fromObject(object.func[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a ListValue message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof tensorflow.AttrValue.ListValue\n             * @static\n             * @param {tensorflow.AttrValue.ListValue} message ListValue\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ListValue.toObject = function toObject(message, options) {\n                if (!options) options = {};\n                var object = {};\n                if (options.arrays || options.defaults) {\n                    object.s = [];\n                    object.i = [];\n                    object.f = [];\n                    object.b = [];\n                    object.type = [];\n                    object.shape = [];\n                    object.tensor = [];\n                    object.func = [];\n                }\n                if (message.s && message.s.length) {\n                    object.s = [];\n                    for (var j = 0; j < message.s.length; ++j) object.s[j] = options.bytes === String ? $util.base64.encode(message.s[j], 0, message.s[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.s[j]) : message.s[j];\n                }\n                if (message.i && message.i.length) {\n                    object.i = [];\n                    for (var j = 0; j < message.i.length; ++j) if (typeof message.i[j] === \"number\") object.i[j] = options.longs === String ? String(message.i[j]) : message.i[j];else object.i[j] = options.longs === String ? $util.Long.prototype.toString.call(message.i[j]) : options.longs === Number ? new $util.LongBits(message.i[j].low >>> 0, message.i[j].high >>> 0).toNumber() : message.i[j];\n                }\n                if (message.f && message.f.length) {\n                    object.f = [];\n                    for (var j = 0; j < message.f.length; ++j) object.f[j] = options.json && !isFinite(message.f[j]) ? String(message.f[j]) : message.f[j];\n                }\n                if (message.b && message.b.length) {\n                    object.b = [];\n                    for (var j = 0; j < message.b.length; ++j) object.b[j] = message.b[j];\n                }\n                if (message.type && message.type.length) {\n                    object.type = [];\n                    for (var j = 0; j < message.type.length; ++j) object.type[j] = options.enums === String ? $root.tensorflow.DataType[message.type[j]] : message.type[j];\n                }\n                if (message.shape && message.shape.length) {\n                    object.shape = [];\n                    for (var j = 0; j < message.shape.length; ++j) object.shape[j] = $root.tensorflow.TensorShape.toObject(message.shape[j], options);\n                }\n                if (message.tensor && message.tensor.length) {\n                    object.tensor = [];\n                    for (var j = 0; j < message.tensor.length; ++j) object.tensor[j] = $root.tensorflow.Tensor.toObject(message.tensor[j], options);\n                }\n                if (message.func && message.func.length) {\n                    object.func = [];\n                    for (var j = 0; j < message.func.length; ++j) object.func[j] = $root.tensorflow.NameAttrList.toObject(message.func[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this ListValue to JSON.\n             * @function toJSON\n             * @memberof tensorflow.AttrValue.ListValue\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ListValue.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ListValue;\n        }();\n\n        return AttrValue;\n    }();\n\n    tensorflow.NameAttrList = function () {\n\n        /**\n         * Properties of a NameAttrList.\n         * @memberof tensorflow\n         * @interface INameAttrList\n         * @property {string|null} [name] NameAttrList name\n         * @property {Object.<string,tensorflow.IAttrValue>|null} [attr] NameAttrList attr\n         */\n\n        /**\n         * Constructs a new NameAttrList.\n         * @memberof tensorflow\n         * @classdesc Represents a NameAttrList.\n         * @implements INameAttrList\n         * @constructor\n         * @param {tensorflow.INameAttrList=} [properties] Properties to set\n         */\n        function NameAttrList(properties) {\n            this.attr = {};\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NameAttrList name.\n         * @member {string} name\n         * @memberof tensorflow.NameAttrList\n         * @instance\n         */\n        NameAttrList.prototype.name = \"\";\n\n        /**\n         * NameAttrList attr.\n         * @member {Object.<string,tensorflow.IAttrValue>} attr\n         * @memberof tensorflow.NameAttrList\n         * @instance\n         */\n        NameAttrList.prototype.attr = $util.emptyObject;\n\n        /**\n         * Creates a new NameAttrList instance using the specified properties.\n         * @function create\n         * @memberof tensorflow.NameAttrList\n         * @static\n         * @param {tensorflow.INameAttrList=} [properties] Properties to set\n         * @returns {tensorflow.NameAttrList} NameAttrList instance\n         */\n        NameAttrList.create = function create(properties) {\n            return new NameAttrList(properties);\n        };\n\n        /**\n         * Encodes the specified NameAttrList message. Does not implicitly {@link tensorflow.NameAttrList.verify|verify} messages.\n         * @function encode\n         * @memberof tensorflow.NameAttrList\n         * @static\n         * @param {tensorflow.INameAttrList} message NameAttrList message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NameAttrList.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.name);\n            if (message.attr != null && message.hasOwnProperty(\"attr\")) for (var keys = Object.keys(message.attr), i = 0; i < keys.length; ++i) {\n                writer.uint32( /* id 2, wireType 2 =*/18).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.tensorflow.AttrValue.encode(message.attr[keys[i]], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NameAttrList message, length delimited. Does not implicitly {@link tensorflow.NameAttrList.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof tensorflow.NameAttrList\n         * @static\n         * @param {tensorflow.INameAttrList} message NameAttrList message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NameAttrList.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NameAttrList message from the specified reader or buffer.\n         * @function decode\n         * @memberof tensorflow.NameAttrList\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {tensorflow.NameAttrList} NameAttrList\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NameAttrList.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n                message = new $root.tensorflow.NameAttrList(),\n                key;\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.name = reader.string();\n                        break;\n                    case 2:\n                        reader.skip().pos++;\n                        if (message.attr === $util.emptyObject) message.attr = {};\n                        key = reader.string();\n                        reader.pos++;\n                        message.attr[key] = $root.tensorflow.AttrValue.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NameAttrList message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof tensorflow.NameAttrList\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {tensorflow.NameAttrList} NameAttrList\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NameAttrList.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NameAttrList message.\n         * @function verify\n         * @memberof tensorflow.NameAttrList\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NameAttrList.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\")) if (!$util.isString(message.name)) return \"name: string expected\";\n            if (message.attr != null && message.hasOwnProperty(\"attr\")) {\n                if (!$util.isObject(message.attr)) return \"attr: object expected\";\n                var key = Object.keys(message.attr);\n                for (var i = 0; i < key.length; ++i) {\n                    var error = $root.tensorflow.AttrValue.verify(message.attr[key[i]]);\n                    if (error) return \"attr.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a NameAttrList message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof tensorflow.NameAttrList\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {tensorflow.NameAttrList} NameAttrList\n         */\n        NameAttrList.fromObject = function fromObject(object) {\n            if (object instanceof $root.tensorflow.NameAttrList) return object;\n            var message = new $root.tensorflow.NameAttrList();\n            if (object.name != null) message.name = String(object.name);\n            if (object.attr) {\n                if (typeof object.attr !== \"object\") throw TypeError(\".tensorflow.NameAttrList.attr: object expected\");\n                message.attr = {};\n                for (var keys = Object.keys(object.attr), i = 0; i < keys.length; ++i) {\n                    if (typeof object.attr[keys[i]] !== \"object\") throw TypeError(\".tensorflow.NameAttrList.attr: object expected\");\n                    message.attr[keys[i]] = $root.tensorflow.AttrValue.fromObject(object.attr[keys[i]]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NameAttrList message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof tensorflow.NameAttrList\n         * @static\n         * @param {tensorflow.NameAttrList} message NameAttrList\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NameAttrList.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (options.objects || options.defaults) object.attr = {};\n            if (options.defaults) object.name = \"\";\n            if (message.name != null && message.hasOwnProperty(\"name\")) object.name = message.name;\n            var keys2;\n            if (message.attr && (keys2 = Object.keys(message.attr)).length) {\n                object.attr = {};\n                for (var j = 0; j < keys2.length; ++j) object.attr[keys2[j]] = $root.tensorflow.AttrValue.toObject(message.attr[keys2[j]], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this NameAttrList to JSON.\n         * @function toJSON\n         * @memberof tensorflow.NameAttrList\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NameAttrList.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NameAttrList;\n    }();\n\n    tensorflow.NodeDef = function () {\n\n        /**\n         * Properties of a NodeDef.\n         * @memberof tensorflow\n         * @interface INodeDef\n         * @property {string|null} [name] NodeDef name\n         * @property {string|null} [op] NodeDef op\n         * @property {Array.<string>|null} [input] NodeDef input\n         * @property {string|null} [device] NodeDef device\n         * @property {Object.<string,tensorflow.IAttrValue>|null} [attr] NodeDef attr\n         */\n\n        /**\n         * Constructs a new NodeDef.\n         * @memberof tensorflow\n         * @classdesc Represents a NodeDef.\n         * @implements INodeDef\n         * @constructor\n         * @param {tensorflow.INodeDef=} [properties] Properties to set\n         */\n        function NodeDef(properties) {\n            this.input = [];\n            this.attr = {};\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeDef name.\n         * @member {string} name\n         * @memberof tensorflow.NodeDef\n         * @instance\n         */\n        NodeDef.prototype.name = \"\";\n\n        /**\n         * NodeDef op.\n         * @member {string} op\n         * @memberof tensorflow.NodeDef\n         * @instance\n         */\n        NodeDef.prototype.op = \"\";\n\n        /**\n         * NodeDef input.\n         * @member {Array.<string>} input\n         * @memberof tensorflow.NodeDef\n         * @instance\n         */\n        NodeDef.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeDef device.\n         * @member {string} device\n         * @memberof tensorflow.NodeDef\n         * @instance\n         */\n        NodeDef.prototype.device = \"\";\n\n        /**\n         * NodeDef attr.\n         * @member {Object.<string,tensorflow.IAttrValue>} attr\n         * @memberof tensorflow.NodeDef\n         * @instance\n         */\n        NodeDef.prototype.attr = $util.emptyObject;\n\n        /**\n         * Creates a new NodeDef instance using the specified properties.\n         * @function create\n         * @memberof tensorflow.NodeDef\n         * @static\n         * @param {tensorflow.INodeDef=} [properties] Properties to set\n         * @returns {tensorflow.NodeDef} NodeDef instance\n         */\n        NodeDef.create = function create(properties) {\n            return new NodeDef(properties);\n        };\n\n        /**\n         * Encodes the specified NodeDef message. Does not implicitly {@link tensorflow.NodeDef.verify|verify} messages.\n         * @function encode\n         * @memberof tensorflow.NodeDef\n         * @static\n         * @param {tensorflow.INodeDef} message NodeDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeDef.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.name);\n            if (message.op != null && message.hasOwnProperty(\"op\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.op);\n            if (message.input != null && message.input.length) for (var i = 0; i < message.input.length; ++i) writer.uint32( /* id 3, wireType 2 =*/26).string(message.input[i]);\n            if (message.device != null && message.hasOwnProperty(\"device\")) writer.uint32( /* id 4, wireType 2 =*/34).string(message.device);\n            if (message.attr != null && message.hasOwnProperty(\"attr\")) for (var keys = Object.keys(message.attr), i = 0; i < keys.length; ++i) {\n                writer.uint32( /* id 5, wireType 2 =*/42).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.tensorflow.AttrValue.encode(message.attr[keys[i]], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeDef message, length delimited. Does not implicitly {@link tensorflow.NodeDef.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof tensorflow.NodeDef\n         * @static\n         * @param {tensorflow.INodeDef} message NodeDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeDef.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeDef message from the specified reader or buffer.\n         * @function decode\n         * @memberof tensorflow.NodeDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {tensorflow.NodeDef} NodeDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeDef.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n                message = new $root.tensorflow.NodeDef(),\n                key;\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.name = reader.string();\n                        break;\n                    case 2:\n                        message.op = reader.string();\n                        break;\n                    case 3:\n                        if (!(message.input && message.input.length)) message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    case 4:\n                        message.device = reader.string();\n                        break;\n                    case 5:\n                        reader.skip().pos++;\n                        if (message.attr === $util.emptyObject) message.attr = {};\n                        key = reader.string();\n                        reader.pos++;\n                        message.attr[key] = $root.tensorflow.AttrValue.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeDef message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof tensorflow.NodeDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {tensorflow.NodeDef} NodeDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeDef.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeDef message.\n         * @function verify\n         * @memberof tensorflow.NodeDef\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeDef.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\")) if (!$util.isString(message.name)) return \"name: string expected\";\n            if (message.op != null && message.hasOwnProperty(\"op\")) if (!$util.isString(message.op)) return \"op: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input)) return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) if (!$util.isString(message.input[i])) return \"input: string[] expected\";\n            }\n            if (message.device != null && message.hasOwnProperty(\"device\")) if (!$util.isString(message.device)) return \"device: string expected\";\n            if (message.attr != null && message.hasOwnProperty(\"attr\")) {\n                if (!$util.isObject(message.attr)) return \"attr: object expected\";\n                var key = Object.keys(message.attr);\n                for (var i = 0; i < key.length; ++i) {\n                    var error = $root.tensorflow.AttrValue.verify(message.attr[key[i]]);\n                    if (error) return \"attr.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a NodeDef message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof tensorflow.NodeDef\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {tensorflow.NodeDef} NodeDef\n         */\n        NodeDef.fromObject = function fromObject(object) {\n            if (object instanceof $root.tensorflow.NodeDef) return object;\n            var message = new $root.tensorflow.NodeDef();\n            if (object.name != null) message.name = String(object.name);\n            if (object.op != null) message.op = String(object.op);\n            if (object.input) {\n                if (!Array.isArray(object.input)) throw TypeError(\".tensorflow.NodeDef.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) message.input[i] = String(object.input[i]);\n            }\n            if (object.device != null) message.device = String(object.device);\n            if (object.attr) {\n                if (typeof object.attr !== \"object\") throw TypeError(\".tensorflow.NodeDef.attr: object expected\");\n                message.attr = {};\n                for (var keys = Object.keys(object.attr), i = 0; i < keys.length; ++i) {\n                    if (typeof object.attr[keys[i]] !== \"object\") throw TypeError(\".tensorflow.NodeDef.attr: object expected\");\n                    message.attr[keys[i]] = $root.tensorflow.AttrValue.fromObject(object.attr[keys[i]]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeDef message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof tensorflow.NodeDef\n         * @static\n         * @param {tensorflow.NodeDef} message NodeDef\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeDef.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (options.arrays || options.defaults) object.input = [];\n            if (options.objects || options.defaults) object.attr = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.op = \"\";\n                object.device = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\")) object.name = message.name;\n            if (message.op != null && message.hasOwnProperty(\"op\")) object.op = message.op;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j) object.input[j] = message.input[j];\n            }\n            if (message.device != null && message.hasOwnProperty(\"device\")) object.device = message.device;\n            var keys2;\n            if (message.attr && (keys2 = Object.keys(message.attr)).length) {\n                object.attr = {};\n                for (var j = 0; j < keys2.length; ++j) object.attr[keys2[j]] = $root.tensorflow.AttrValue.toObject(message.attr[keys2[j]], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this NodeDef to JSON.\n         * @function toJSON\n         * @memberof tensorflow.NodeDef\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeDef.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeDef;\n    }();\n\n    tensorflow.VersionDef = function () {\n\n        /**\n         * Properties of a VersionDef.\n         * @memberof tensorflow\n         * @interface IVersionDef\n         * @property {number|null} [producer] VersionDef producer\n         * @property {number|null} [minConsumer] VersionDef minConsumer\n         * @property {Array.<number>|null} [badConsumers] VersionDef badConsumers\n         */\n\n        /**\n         * Constructs a new VersionDef.\n         * @memberof tensorflow\n         * @classdesc Represents a VersionDef.\n         * @implements IVersionDef\n         * @constructor\n         * @param {tensorflow.IVersionDef=} [properties] Properties to set\n         */\n        function VersionDef(properties) {\n            this.badConsumers = [];\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * VersionDef producer.\n         * @member {number} producer\n         * @memberof tensorflow.VersionDef\n         * @instance\n         */\n        VersionDef.prototype.producer = 0;\n\n        /**\n         * VersionDef minConsumer.\n         * @member {number} minConsumer\n         * @memberof tensorflow.VersionDef\n         * @instance\n         */\n        VersionDef.prototype.minConsumer = 0;\n\n        /**\n         * VersionDef badConsumers.\n         * @member {Array.<number>} badConsumers\n         * @memberof tensorflow.VersionDef\n         * @instance\n         */\n        VersionDef.prototype.badConsumers = $util.emptyArray;\n\n        /**\n         * Creates a new VersionDef instance using the specified properties.\n         * @function create\n         * @memberof tensorflow.VersionDef\n         * @static\n         * @param {tensorflow.IVersionDef=} [properties] Properties to set\n         * @returns {tensorflow.VersionDef} VersionDef instance\n         */\n        VersionDef.create = function create(properties) {\n            return new VersionDef(properties);\n        };\n\n        /**\n         * Encodes the specified VersionDef message. Does not implicitly {@link tensorflow.VersionDef.verify|verify} messages.\n         * @function encode\n         * @memberof tensorflow.VersionDef\n         * @static\n         * @param {tensorflow.IVersionDef} message VersionDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        VersionDef.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.producer != null && message.hasOwnProperty(\"producer\")) writer.uint32( /* id 1, wireType 0 =*/8).int32(message.producer);\n            if (message.minConsumer != null && message.hasOwnProperty(\"minConsumer\")) writer.uint32( /* id 2, wireType 0 =*/16).int32(message.minConsumer);\n            if (message.badConsumers != null && message.badConsumers.length) {\n                writer.uint32( /* id 3, wireType 2 =*/26).fork();\n                for (var i = 0; i < message.badConsumers.length; ++i) writer.int32(message.badConsumers[i]);\n                writer.ldelim();\n            }\n            return writer;\n        };\n\n        /**\n         * Encodes the specified VersionDef message, length delimited. Does not implicitly {@link tensorflow.VersionDef.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof tensorflow.VersionDef\n         * @static\n         * @param {tensorflow.IVersionDef} message VersionDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        VersionDef.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a VersionDef message from the specified reader or buffer.\n         * @function decode\n         * @memberof tensorflow.VersionDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {tensorflow.VersionDef} VersionDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        VersionDef.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n                message = new $root.tensorflow.VersionDef();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.producer = reader.int32();\n                        break;\n                    case 2:\n                        message.minConsumer = reader.int32();\n                        break;\n                    case 3:\n                        if (!(message.badConsumers && message.badConsumers.length)) message.badConsumers = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2) message.badConsumers.push(reader.int32());\n                        } else message.badConsumers.push(reader.int32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a VersionDef message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof tensorflow.VersionDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {tensorflow.VersionDef} VersionDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        VersionDef.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a VersionDef message.\n         * @function verify\n         * @memberof tensorflow.VersionDef\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        VersionDef.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            if (message.producer != null && message.hasOwnProperty(\"producer\")) if (!$util.isInteger(message.producer)) return \"producer: integer expected\";\n            if (message.minConsumer != null && message.hasOwnProperty(\"minConsumer\")) if (!$util.isInteger(message.minConsumer)) return \"minConsumer: integer expected\";\n            if (message.badConsumers != null && message.hasOwnProperty(\"badConsumers\")) {\n                if (!Array.isArray(message.badConsumers)) return \"badConsumers: array expected\";\n                for (var i = 0; i < message.badConsumers.length; ++i) if (!$util.isInteger(message.badConsumers[i])) return \"badConsumers: integer[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a VersionDef message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof tensorflow.VersionDef\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {tensorflow.VersionDef} VersionDef\n         */\n        VersionDef.fromObject = function fromObject(object) {\n            if (object instanceof $root.tensorflow.VersionDef) return object;\n            var message = new $root.tensorflow.VersionDef();\n            if (object.producer != null) message.producer = object.producer | 0;\n            if (object.minConsumer != null) message.minConsumer = object.minConsumer | 0;\n            if (object.badConsumers) {\n                if (!Array.isArray(object.badConsumers)) throw TypeError(\".tensorflow.VersionDef.badConsumers: array expected\");\n                message.badConsumers = [];\n                for (var i = 0; i < object.badConsumers.length; ++i) message.badConsumers[i] = object.badConsumers[i] | 0;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a VersionDef message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof tensorflow.VersionDef\n         * @static\n         * @param {tensorflow.VersionDef} message VersionDef\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        VersionDef.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (options.arrays || options.defaults) object.badConsumers = [];\n            if (options.defaults) {\n                object.producer = 0;\n                object.minConsumer = 0;\n            }\n            if (message.producer != null && message.hasOwnProperty(\"producer\")) object.producer = message.producer;\n            if (message.minConsumer != null && message.hasOwnProperty(\"minConsumer\")) object.minConsumer = message.minConsumer;\n            if (message.badConsumers && message.badConsumers.length) {\n                object.badConsumers = [];\n                for (var j = 0; j < message.badConsumers.length; ++j) object.badConsumers[j] = message.badConsumers[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this VersionDef to JSON.\n         * @function toJSON\n         * @memberof tensorflow.VersionDef\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        VersionDef.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return VersionDef;\n    }();\n\n    tensorflow.GraphDef = function () {\n\n        /**\n         * Properties of a GraphDef.\n         * @memberof tensorflow\n         * @interface IGraphDef\n         * @property {Array.<tensorflow.INodeDef>|null} [node] GraphDef node\n         * @property {tensorflow.IVersionDef|null} [versions] GraphDef versions\n         * @property {tensorflow.IFunctionDefLibrary|null} [library] GraphDef library\n         */\n\n        /**\n         * Constructs a new GraphDef.\n         * @memberof tensorflow\n         * @classdesc Represents a GraphDef.\n         * @implements IGraphDef\n         * @constructor\n         * @param {tensorflow.IGraphDef=} [properties] Properties to set\n         */\n        function GraphDef(properties) {\n            this.node = [];\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphDef node.\n         * @member {Array.<tensorflow.INodeDef>} node\n         * @memberof tensorflow.GraphDef\n         * @instance\n         */\n        GraphDef.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphDef versions.\n         * @member {tensorflow.IVersionDef|null|undefined} versions\n         * @memberof tensorflow.GraphDef\n         * @instance\n         */\n        GraphDef.prototype.versions = null;\n\n        /**\n         * GraphDef library.\n         * @member {tensorflow.IFunctionDefLibrary|null|undefined} library\n         * @memberof tensorflow.GraphDef\n         * @instance\n         */\n        GraphDef.prototype.library = null;\n\n        /**\n         * Creates a new GraphDef instance using the specified properties.\n         * @function create\n         * @memberof tensorflow.GraphDef\n         * @static\n         * @param {tensorflow.IGraphDef=} [properties] Properties to set\n         * @returns {tensorflow.GraphDef} GraphDef instance\n         */\n        GraphDef.create = function create(properties) {\n            return new GraphDef(properties);\n        };\n\n        /**\n         * Encodes the specified GraphDef message. Does not implicitly {@link tensorflow.GraphDef.verify|verify} messages.\n         * @function encode\n         * @memberof tensorflow.GraphDef\n         * @static\n         * @param {tensorflow.IGraphDef} message GraphDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphDef.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.node != null && message.node.length) for (var i = 0; i < message.node.length; ++i) $root.tensorflow.NodeDef.encode(message.node[i], writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.library != null && message.hasOwnProperty(\"library\")) $root.tensorflow.FunctionDefLibrary.encode(message.library, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.versions != null && message.hasOwnProperty(\"versions\")) $root.tensorflow.VersionDef.encode(message.versions, writer.uint32( /* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphDef message, length delimited. Does not implicitly {@link tensorflow.GraphDef.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof tensorflow.GraphDef\n         * @static\n         * @param {tensorflow.IGraphDef} message GraphDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphDef.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphDef message from the specified reader or buffer.\n         * @function decode\n         * @memberof tensorflow.GraphDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {tensorflow.GraphDef} GraphDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphDef.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n                message = new $root.tensorflow.GraphDef();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.node && message.node.length)) message.node = [];\n                        message.node.push($root.tensorflow.NodeDef.decode(reader, reader.uint32()));\n                        break;\n                    case 4:\n                        message.versions = $root.tensorflow.VersionDef.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.library = $root.tensorflow.FunctionDefLibrary.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphDef message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof tensorflow.GraphDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {tensorflow.GraphDef} GraphDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphDef.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphDef message.\n         * @function verify\n         * @memberof tensorflow.GraphDef\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphDef.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node)) return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.tensorflow.NodeDef.verify(message.node[i]);\n                    if (error) return \"node.\" + error;\n                }\n            }\n            if (message.versions != null && message.hasOwnProperty(\"versions\")) {\n                var error = $root.tensorflow.VersionDef.verify(message.versions);\n                if (error) return \"versions.\" + error;\n            }\n            if (message.library != null && message.hasOwnProperty(\"library\")) {\n                var error = $root.tensorflow.FunctionDefLibrary.verify(message.library);\n                if (error) return \"library.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphDef message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof tensorflow.GraphDef\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {tensorflow.GraphDef} GraphDef\n         */\n        GraphDef.fromObject = function fromObject(object) {\n            if (object instanceof $root.tensorflow.GraphDef) return object;\n            var message = new $root.tensorflow.GraphDef();\n            if (object.node) {\n                if (!Array.isArray(object.node)) throw TypeError(\".tensorflow.GraphDef.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\") throw TypeError(\".tensorflow.GraphDef.node: object expected\");\n                    message.node[i] = $root.tensorflow.NodeDef.fromObject(object.node[i]);\n                }\n            }\n            if (object.versions != null) {\n                if (typeof object.versions !== \"object\") throw TypeError(\".tensorflow.GraphDef.versions: object expected\");\n                message.versions = $root.tensorflow.VersionDef.fromObject(object.versions);\n            }\n            if (object.library != null) {\n                if (typeof object.library !== \"object\") throw TypeError(\".tensorflow.GraphDef.library: object expected\");\n                message.library = $root.tensorflow.FunctionDefLibrary.fromObject(object.library);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphDef message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof tensorflow.GraphDef\n         * @static\n         * @param {tensorflow.GraphDef} message GraphDef\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphDef.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (options.arrays || options.defaults) object.node = [];\n            if (options.defaults) {\n                object.library = null;\n                object.versions = null;\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j) object.node[j] = $root.tensorflow.NodeDef.toObject(message.node[j], options);\n            }\n            if (message.library != null && message.hasOwnProperty(\"library\")) object.library = $root.tensorflow.FunctionDefLibrary.toObject(message.library, options);\n            if (message.versions != null && message.hasOwnProperty(\"versions\")) object.versions = $root.tensorflow.VersionDef.toObject(message.versions, options);\n            return object;\n        };\n\n        /**\n         * Converts this GraphDef to JSON.\n         * @function toJSON\n         * @memberof tensorflow.GraphDef\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphDef.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphDef;\n    }();\n\n    tensorflow.CollectionDef = function () {\n\n        /**\n         * Properties of a CollectionDef.\n         * @memberof tensorflow\n         * @interface ICollectionDef\n         * @property {tensorflow.CollectionDef.INodeList|null} [nodeList] CollectionDef nodeList\n         * @property {tensorflow.CollectionDef.IBytesList|null} [bytesList] CollectionDef bytesList\n         * @property {tensorflow.CollectionDef.IInt64List|null} [int64List] CollectionDef int64List\n         * @property {tensorflow.CollectionDef.IFloatList|null} [floatList] CollectionDef floatList\n         * @property {tensorflow.CollectionDef.IAnyList|null} [anyList] CollectionDef anyList\n         */\n\n        /**\n         * Constructs a new CollectionDef.\n         * @memberof tensorflow\n         * @classdesc Represents a CollectionDef.\n         * @implements ICollectionDef\n         * @constructor\n         * @param {tensorflow.ICollectionDef=} [properties] Properties to set\n         */\n        function CollectionDef(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CollectionDef nodeList.\n         * @member {tensorflow.CollectionDef.INodeList|null|undefined} nodeList\n         * @memberof tensorflow.CollectionDef\n         * @instance\n         */\n        CollectionDef.prototype.nodeList = null;\n\n        /**\n         * CollectionDef bytesList.\n         * @member {tensorflow.CollectionDef.IBytesList|null|undefined} bytesList\n         * @memberof tensorflow.CollectionDef\n         * @instance\n         */\n        CollectionDef.prototype.bytesList = null;\n\n        /**\n         * CollectionDef int64List.\n         * @member {tensorflow.CollectionDef.IInt64List|null|undefined} int64List\n         * @memberof tensorflow.CollectionDef\n         * @instance\n         */\n        CollectionDef.prototype.int64List = null;\n\n        /**\n         * CollectionDef floatList.\n         * @member {tensorflow.CollectionDef.IFloatList|null|undefined} floatList\n         * @memberof tensorflow.CollectionDef\n         * @instance\n         */\n        CollectionDef.prototype.floatList = null;\n\n        /**\n         * CollectionDef anyList.\n         * @member {tensorflow.CollectionDef.IAnyList|null|undefined} anyList\n         * @memberof tensorflow.CollectionDef\n         * @instance\n         */\n        CollectionDef.prototype.anyList = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * CollectionDef kind.\n         * @member {\"nodeList\"|\"bytesList\"|\"int64List\"|\"floatList\"|\"anyList\"|undefined} kind\n         * @memberof tensorflow.CollectionDef\n         * @instance\n         */\n        Object.defineProperty(CollectionDef.prototype, \"kind\", {\n            get: $util.oneOfGetter($oneOfFields = [\"nodeList\", \"bytesList\", \"int64List\", \"floatList\", \"anyList\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new CollectionDef instance using the specified properties.\n         * @function create\n         * @memberof tensorflow.CollectionDef\n         * @static\n         * @param {tensorflow.ICollectionDef=} [properties] Properties to set\n         * @returns {tensorflow.CollectionDef} CollectionDef instance\n         */\n        CollectionDef.create = function create(properties) {\n            return new CollectionDef(properties);\n        };\n\n        /**\n         * Encodes the specified CollectionDef message. Does not implicitly {@link tensorflow.CollectionDef.verify|verify} messages.\n         * @function encode\n         * @memberof tensorflow.CollectionDef\n         * @static\n         * @param {tensorflow.ICollectionDef} message CollectionDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CollectionDef.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.nodeList != null && message.hasOwnProperty(\"nodeList\")) $root.tensorflow.CollectionDef.NodeList.encode(message.nodeList, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.bytesList != null && message.hasOwnProperty(\"bytesList\")) $root.tensorflow.CollectionDef.BytesList.encode(message.bytesList, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.int64List != null && message.hasOwnProperty(\"int64List\")) $root.tensorflow.CollectionDef.Int64List.encode(message.int64List, writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatList != null && message.hasOwnProperty(\"floatList\")) $root.tensorflow.CollectionDef.FloatList.encode(message.floatList, writer.uint32( /* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.anyList != null && message.hasOwnProperty(\"anyList\")) $root.tensorflow.CollectionDef.AnyList.encode(message.anyList, writer.uint32( /* id 5, wireType 2 =*/42).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CollectionDef message, length delimited. Does not implicitly {@link tensorflow.CollectionDef.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof tensorflow.CollectionDef\n         * @static\n         * @param {tensorflow.ICollectionDef} message CollectionDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CollectionDef.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CollectionDef message from the specified reader or buffer.\n         * @function decode\n         * @memberof tensorflow.CollectionDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {tensorflow.CollectionDef} CollectionDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CollectionDef.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n                message = new $root.tensorflow.CollectionDef();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.nodeList = $root.tensorflow.CollectionDef.NodeList.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.bytesList = $root.tensorflow.CollectionDef.BytesList.decode(reader, reader.uint32());\n                        break;\n                    case 3:\n                        message.int64List = $root.tensorflow.CollectionDef.Int64List.decode(reader, reader.uint32());\n                        break;\n                    case 4:\n                        message.floatList = $root.tensorflow.CollectionDef.FloatList.decode(reader, reader.uint32());\n                        break;\n                    case 5:\n                        message.anyList = $root.tensorflow.CollectionDef.AnyList.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CollectionDef message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof tensorflow.CollectionDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {tensorflow.CollectionDef} CollectionDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CollectionDef.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CollectionDef message.\n         * @function verify\n         * @memberof tensorflow.CollectionDef\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CollectionDef.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            var properties = {};\n            if (message.nodeList != null && message.hasOwnProperty(\"nodeList\")) {\n                properties.kind = 1;\n                {\n                    var error = $root.tensorflow.CollectionDef.NodeList.verify(message.nodeList);\n                    if (error) return \"nodeList.\" + error;\n                }\n            }\n            if (message.bytesList != null && message.hasOwnProperty(\"bytesList\")) {\n                if (properties.kind === 1) return \"kind: multiple values\";\n                properties.kind = 1;\n                {\n                    var error = $root.tensorflow.CollectionDef.BytesList.verify(message.bytesList);\n                    if (error) return \"bytesList.\" + error;\n                }\n            }\n            if (message.int64List != null && message.hasOwnProperty(\"int64List\")) {\n                if (properties.kind === 1) return \"kind: multiple values\";\n                properties.kind = 1;\n                {\n                    var error = $root.tensorflow.CollectionDef.Int64List.verify(message.int64List);\n                    if (error) return \"int64List.\" + error;\n                }\n            }\n            if (message.floatList != null && message.hasOwnProperty(\"floatList\")) {\n                if (properties.kind === 1) return \"kind: multiple values\";\n                properties.kind = 1;\n                {\n                    var error = $root.tensorflow.CollectionDef.FloatList.verify(message.floatList);\n                    if (error) return \"floatList.\" + error;\n                }\n            }\n            if (message.anyList != null && message.hasOwnProperty(\"anyList\")) {\n                if (properties.kind === 1) return \"kind: multiple values\";\n                properties.kind = 1;\n                {\n                    var error = $root.tensorflow.CollectionDef.AnyList.verify(message.anyList);\n                    if (error) return \"anyList.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a CollectionDef message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof tensorflow.CollectionDef\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {tensorflow.CollectionDef} CollectionDef\n         */\n        CollectionDef.fromObject = function fromObject(object) {\n            if (object instanceof $root.tensorflow.CollectionDef) return object;\n            var message = new $root.tensorflow.CollectionDef();\n            if (object.nodeList != null) {\n                if (typeof object.nodeList !== \"object\") throw TypeError(\".tensorflow.CollectionDef.nodeList: object expected\");\n                message.nodeList = $root.tensorflow.CollectionDef.NodeList.fromObject(object.nodeList);\n            }\n            if (object.bytesList != null) {\n                if (typeof object.bytesList !== \"object\") throw TypeError(\".tensorflow.CollectionDef.bytesList: object expected\");\n                message.bytesList = $root.tensorflow.CollectionDef.BytesList.fromObject(object.bytesList);\n            }\n            if (object.int64List != null) {\n                if (typeof object.int64List !== \"object\") throw TypeError(\".tensorflow.CollectionDef.int64List: object expected\");\n                message.int64List = $root.tensorflow.CollectionDef.Int64List.fromObject(object.int64List);\n            }\n            if (object.floatList != null) {\n                if (typeof object.floatList !== \"object\") throw TypeError(\".tensorflow.CollectionDef.floatList: object expected\");\n                message.floatList = $root.tensorflow.CollectionDef.FloatList.fromObject(object.floatList);\n            }\n            if (object.anyList != null) {\n                if (typeof object.anyList !== \"object\") throw TypeError(\".tensorflow.CollectionDef.anyList: object expected\");\n                message.anyList = $root.tensorflow.CollectionDef.AnyList.fromObject(object.anyList);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CollectionDef message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof tensorflow.CollectionDef\n         * @static\n         * @param {tensorflow.CollectionDef} message CollectionDef\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CollectionDef.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (message.nodeList != null && message.hasOwnProperty(\"nodeList\")) {\n                object.nodeList = $root.tensorflow.CollectionDef.NodeList.toObject(message.nodeList, options);\n                if (options.oneofs) object.kind = \"nodeList\";\n            }\n            if (message.bytesList != null && message.hasOwnProperty(\"bytesList\")) {\n                object.bytesList = $root.tensorflow.CollectionDef.BytesList.toObject(message.bytesList, options);\n                if (options.oneofs) object.kind = \"bytesList\";\n            }\n            if (message.int64List != null && message.hasOwnProperty(\"int64List\")) {\n                object.int64List = $root.tensorflow.CollectionDef.Int64List.toObject(message.int64List, options);\n                if (options.oneofs) object.kind = \"int64List\";\n            }\n            if (message.floatList != null && message.hasOwnProperty(\"floatList\")) {\n                object.floatList = $root.tensorflow.CollectionDef.FloatList.toObject(message.floatList, options);\n                if (options.oneofs) object.kind = \"floatList\";\n            }\n            if (message.anyList != null && message.hasOwnProperty(\"anyList\")) {\n                object.anyList = $root.tensorflow.CollectionDef.AnyList.toObject(message.anyList, options);\n                if (options.oneofs) object.kind = \"anyList\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this CollectionDef to JSON.\n         * @function toJSON\n         * @memberof tensorflow.CollectionDef\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CollectionDef.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        CollectionDef.NodeList = function () {\n\n            /**\n             * Properties of a NodeList.\n             * @memberof tensorflow.CollectionDef\n             * @interface INodeList\n             * @property {Array.<string>|null} [value] NodeList value\n             */\n\n            /**\n             * Constructs a new NodeList.\n             * @memberof tensorflow.CollectionDef\n             * @classdesc Represents a NodeList.\n             * @implements INodeList\n             * @constructor\n             * @param {tensorflow.CollectionDef.INodeList=} [properties] Properties to set\n             */\n            function NodeList(properties) {\n                this.value = [];\n                if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * NodeList value.\n             * @member {Array.<string>} value\n             * @memberof tensorflow.CollectionDef.NodeList\n             * @instance\n             */\n            NodeList.prototype.value = $util.emptyArray;\n\n            /**\n             * Creates a new NodeList instance using the specified properties.\n             * @function create\n             * @memberof tensorflow.CollectionDef.NodeList\n             * @static\n             * @param {tensorflow.CollectionDef.INodeList=} [properties] Properties to set\n             * @returns {tensorflow.CollectionDef.NodeList} NodeList instance\n             */\n            NodeList.create = function create(properties) {\n                return new NodeList(properties);\n            };\n\n            /**\n             * Encodes the specified NodeList message. Does not implicitly {@link tensorflow.CollectionDef.NodeList.verify|verify} messages.\n             * @function encode\n             * @memberof tensorflow.CollectionDef.NodeList\n             * @static\n             * @param {tensorflow.CollectionDef.INodeList} message NodeList message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            NodeList.encode = function encode(message, writer) {\n                if (!writer) writer = $Writer.create();\n                if (message.value != null && message.value.length) for (var i = 0; i < message.value.length; ++i) writer.uint32( /* id 1, wireType 2 =*/10).string(message.value[i]);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified NodeList message, length delimited. Does not implicitly {@link tensorflow.CollectionDef.NodeList.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof tensorflow.CollectionDef.NodeList\n             * @static\n             * @param {tensorflow.CollectionDef.INodeList} message NodeList message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            NodeList.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a NodeList message from the specified reader or buffer.\n             * @function decode\n             * @memberof tensorflow.CollectionDef.NodeList\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {tensorflow.CollectionDef.NodeList} NodeList\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            NodeList.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length,\n                    message = new $root.tensorflow.CollectionDef.NodeList();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.value && message.value.length)) message.value = [];\n                            message.value.push(reader.string());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a NodeList message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof tensorflow.CollectionDef.NodeList\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {tensorflow.CollectionDef.NodeList} NodeList\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            NodeList.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a NodeList message.\n             * @function verify\n             * @memberof tensorflow.CollectionDef.NodeList\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            NodeList.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null) return \"object expected\";\n                if (message.value != null && message.hasOwnProperty(\"value\")) {\n                    if (!Array.isArray(message.value)) return \"value: array expected\";\n                    for (var i = 0; i < message.value.length; ++i) if (!$util.isString(message.value[i])) return \"value: string[] expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a NodeList message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof tensorflow.CollectionDef.NodeList\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {tensorflow.CollectionDef.NodeList} NodeList\n             */\n            NodeList.fromObject = function fromObject(object) {\n                if (object instanceof $root.tensorflow.CollectionDef.NodeList) return object;\n                var message = new $root.tensorflow.CollectionDef.NodeList();\n                if (object.value) {\n                    if (!Array.isArray(object.value)) throw TypeError(\".tensorflow.CollectionDef.NodeList.value: array expected\");\n                    message.value = [];\n                    for (var i = 0; i < object.value.length; ++i) message.value[i] = String(object.value[i]);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a NodeList message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof tensorflow.CollectionDef.NodeList\n             * @static\n             * @param {tensorflow.CollectionDef.NodeList} message NodeList\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            NodeList.toObject = function toObject(message, options) {\n                if (!options) options = {};\n                var object = {};\n                if (options.arrays || options.defaults) object.value = [];\n                if (message.value && message.value.length) {\n                    object.value = [];\n                    for (var j = 0; j < message.value.length; ++j) object.value[j] = message.value[j];\n                }\n                return object;\n            };\n\n            /**\n             * Converts this NodeList to JSON.\n             * @function toJSON\n             * @memberof tensorflow.CollectionDef.NodeList\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            NodeList.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return NodeList;\n        }();\n\n        CollectionDef.BytesList = function () {\n\n            /**\n             * Properties of a BytesList.\n             * @memberof tensorflow.CollectionDef\n             * @interface IBytesList\n             * @property {Array.<Uint8Array>|null} [value] BytesList value\n             */\n\n            /**\n             * Constructs a new BytesList.\n             * @memberof tensorflow.CollectionDef\n             * @classdesc Represents a BytesList.\n             * @implements IBytesList\n             * @constructor\n             * @param {tensorflow.CollectionDef.IBytesList=} [properties] Properties to set\n             */\n            function BytesList(properties) {\n                this.value = [];\n                if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * BytesList value.\n             * @member {Array.<Uint8Array>} value\n             * @memberof tensorflow.CollectionDef.BytesList\n             * @instance\n             */\n            BytesList.prototype.value = $util.emptyArray;\n\n            /**\n             * Creates a new BytesList instance using the specified properties.\n             * @function create\n             * @memberof tensorflow.CollectionDef.BytesList\n             * @static\n             * @param {tensorflow.CollectionDef.IBytesList=} [properties] Properties to set\n             * @returns {tensorflow.CollectionDef.BytesList} BytesList instance\n             */\n            BytesList.create = function create(properties) {\n                return new BytesList(properties);\n            };\n\n            /**\n             * Encodes the specified BytesList message. Does not implicitly {@link tensorflow.CollectionDef.BytesList.verify|verify} messages.\n             * @function encode\n             * @memberof tensorflow.CollectionDef.BytesList\n             * @static\n             * @param {tensorflow.CollectionDef.IBytesList} message BytesList message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            BytesList.encode = function encode(message, writer) {\n                if (!writer) writer = $Writer.create();\n                if (message.value != null && message.value.length) for (var i = 0; i < message.value.length; ++i) writer.uint32( /* id 1, wireType 2 =*/10).bytes(message.value[i]);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified BytesList message, length delimited. Does not implicitly {@link tensorflow.CollectionDef.BytesList.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof tensorflow.CollectionDef.BytesList\n             * @static\n             * @param {tensorflow.CollectionDef.IBytesList} message BytesList message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            BytesList.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a BytesList message from the specified reader or buffer.\n             * @function decode\n             * @memberof tensorflow.CollectionDef.BytesList\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {tensorflow.CollectionDef.BytesList} BytesList\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            BytesList.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length,\n                    message = new $root.tensorflow.CollectionDef.BytesList();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.value && message.value.length)) message.value = [];\n                            message.value.push(reader.bytes());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a BytesList message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof tensorflow.CollectionDef.BytesList\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {tensorflow.CollectionDef.BytesList} BytesList\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            BytesList.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a BytesList message.\n             * @function verify\n             * @memberof tensorflow.CollectionDef.BytesList\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            BytesList.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null) return \"object expected\";\n                if (message.value != null && message.hasOwnProperty(\"value\")) {\n                    if (!Array.isArray(message.value)) return \"value: array expected\";\n                    for (var i = 0; i < message.value.length; ++i) if (!(message.value[i] && typeof message.value[i].length === \"number\" || $util.isString(message.value[i]))) return \"value: buffer[] expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a BytesList message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof tensorflow.CollectionDef.BytesList\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {tensorflow.CollectionDef.BytesList} BytesList\n             */\n            BytesList.fromObject = function fromObject(object) {\n                if (object instanceof $root.tensorflow.CollectionDef.BytesList) return object;\n                var message = new $root.tensorflow.CollectionDef.BytesList();\n                if (object.value) {\n                    if (!Array.isArray(object.value)) throw TypeError(\".tensorflow.CollectionDef.BytesList.value: array expected\");\n                    message.value = [];\n                    for (var i = 0; i < object.value.length; ++i) if (typeof object.value[i] === \"string\") $util.base64.decode(object.value[i], message.value[i] = $util.newBuffer($util.base64.length(object.value[i])), 0);else if (object.value[i].length) message.value[i] = object.value[i];\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a BytesList message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof tensorflow.CollectionDef.BytesList\n             * @static\n             * @param {tensorflow.CollectionDef.BytesList} message BytesList\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            BytesList.toObject = function toObject(message, options) {\n                if (!options) options = {};\n                var object = {};\n                if (options.arrays || options.defaults) object.value = [];\n                if (message.value && message.value.length) {\n                    object.value = [];\n                    for (var j = 0; j < message.value.length; ++j) object.value[j] = options.bytes === String ? $util.base64.encode(message.value[j], 0, message.value[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.value[j]) : message.value[j];\n                }\n                return object;\n            };\n\n            /**\n             * Converts this BytesList to JSON.\n             * @function toJSON\n             * @memberof tensorflow.CollectionDef.BytesList\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            BytesList.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return BytesList;\n        }();\n\n        CollectionDef.Int64List = function () {\n\n            /**\n             * Properties of an Int64List.\n             * @memberof tensorflow.CollectionDef\n             * @interface IInt64List\n             * @property {Array.<number|Long>|null} [value] Int64List value\n             */\n\n            /**\n             * Constructs a new Int64List.\n             * @memberof tensorflow.CollectionDef\n             * @classdesc Represents an Int64List.\n             * @implements IInt64List\n             * @constructor\n             * @param {tensorflow.CollectionDef.IInt64List=} [properties] Properties to set\n             */\n            function Int64List(properties) {\n                this.value = [];\n                if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Int64List value.\n             * @member {Array.<number|Long>} value\n             * @memberof tensorflow.CollectionDef.Int64List\n             * @instance\n             */\n            Int64List.prototype.value = $util.emptyArray;\n\n            /**\n             * Creates a new Int64List instance using the specified properties.\n             * @function create\n             * @memberof tensorflow.CollectionDef.Int64List\n             * @static\n             * @param {tensorflow.CollectionDef.IInt64List=} [properties] Properties to set\n             * @returns {tensorflow.CollectionDef.Int64List} Int64List instance\n             */\n            Int64List.create = function create(properties) {\n                return new Int64List(properties);\n            };\n\n            /**\n             * Encodes the specified Int64List message. Does not implicitly {@link tensorflow.CollectionDef.Int64List.verify|verify} messages.\n             * @function encode\n             * @memberof tensorflow.CollectionDef.Int64List\n             * @static\n             * @param {tensorflow.CollectionDef.IInt64List} message Int64List message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Int64List.encode = function encode(message, writer) {\n                if (!writer) writer = $Writer.create();\n                if (message.value != null && message.value.length) {\n                    writer.uint32( /* id 1, wireType 2 =*/10).fork();\n                    for (var i = 0; i < message.value.length; ++i) writer.int64(message.value[i]);\n                    writer.ldelim();\n                }\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Int64List message, length delimited. Does not implicitly {@link tensorflow.CollectionDef.Int64List.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof tensorflow.CollectionDef.Int64List\n             * @static\n             * @param {tensorflow.CollectionDef.IInt64List} message Int64List message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Int64List.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an Int64List message from the specified reader or buffer.\n             * @function decode\n             * @memberof tensorflow.CollectionDef.Int64List\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {tensorflow.CollectionDef.Int64List} Int64List\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Int64List.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length,\n                    message = new $root.tensorflow.CollectionDef.Int64List();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.value && message.value.length)) message.value = [];\n                            if ((tag & 7) === 2) {\n                                var end2 = reader.uint32() + reader.pos;\n                                while (reader.pos < end2) message.value.push(reader.int64());\n                            } else message.value.push(reader.int64());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an Int64List message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof tensorflow.CollectionDef.Int64List\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {tensorflow.CollectionDef.Int64List} Int64List\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Int64List.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an Int64List message.\n             * @function verify\n             * @memberof tensorflow.CollectionDef.Int64List\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Int64List.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null) return \"object expected\";\n                if (message.value != null && message.hasOwnProperty(\"value\")) {\n                    if (!Array.isArray(message.value)) return \"value: array expected\";\n                    for (var i = 0; i < message.value.length; ++i) if (!$util.isInteger(message.value[i]) && !(message.value[i] && $util.isInteger(message.value[i].low) && $util.isInteger(message.value[i].high))) return \"value: integer|Long[] expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates an Int64List message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof tensorflow.CollectionDef.Int64List\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {tensorflow.CollectionDef.Int64List} Int64List\n             */\n            Int64List.fromObject = function fromObject(object) {\n                if (object instanceof $root.tensorflow.CollectionDef.Int64List) return object;\n                var message = new $root.tensorflow.CollectionDef.Int64List();\n                if (object.value) {\n                    if (!Array.isArray(object.value)) throw TypeError(\".tensorflow.CollectionDef.Int64List.value: array expected\");\n                    message.value = [];\n                    for (var i = 0; i < object.value.length; ++i) if ($util.Long) (message.value[i] = $util.Long.fromValue(object.value[i])).unsigned = false;else if (typeof object.value[i] === \"string\") message.value[i] = parseInt(object.value[i], 10);else if (typeof object.value[i] === \"number\") message.value[i] = object.value[i];else if (typeof object.value[i] === \"object\") message.value[i] = new $util.LongBits(object.value[i].low >>> 0, object.value[i].high >>> 0).toNumber();\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an Int64List message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof tensorflow.CollectionDef.Int64List\n             * @static\n             * @param {tensorflow.CollectionDef.Int64List} message Int64List\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Int64List.toObject = function toObject(message, options) {\n                if (!options) options = {};\n                var object = {};\n                if (options.arrays || options.defaults) object.value = [];\n                if (message.value && message.value.length) {\n                    object.value = [];\n                    for (var j = 0; j < message.value.length; ++j) if (typeof message.value[j] === \"number\") object.value[j] = options.longs === String ? String(message.value[j]) : message.value[j];else object.value[j] = options.longs === String ? $util.Long.prototype.toString.call(message.value[j]) : options.longs === Number ? new $util.LongBits(message.value[j].low >>> 0, message.value[j].high >>> 0).toNumber() : message.value[j];\n                }\n                return object;\n            };\n\n            /**\n             * Converts this Int64List to JSON.\n             * @function toJSON\n             * @memberof tensorflow.CollectionDef.Int64List\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Int64List.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Int64List;\n        }();\n\n        CollectionDef.FloatList = function () {\n\n            /**\n             * Properties of a FloatList.\n             * @memberof tensorflow.CollectionDef\n             * @interface IFloatList\n             * @property {Array.<number>|null} [value] FloatList value\n             */\n\n            /**\n             * Constructs a new FloatList.\n             * @memberof tensorflow.CollectionDef\n             * @classdesc Represents a FloatList.\n             * @implements IFloatList\n             * @constructor\n             * @param {tensorflow.CollectionDef.IFloatList=} [properties] Properties to set\n             */\n            function FloatList(properties) {\n                this.value = [];\n                if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * FloatList value.\n             * @member {Array.<number>} value\n             * @memberof tensorflow.CollectionDef.FloatList\n             * @instance\n             */\n            FloatList.prototype.value = $util.emptyArray;\n\n            /**\n             * Creates a new FloatList instance using the specified properties.\n             * @function create\n             * @memberof tensorflow.CollectionDef.FloatList\n             * @static\n             * @param {tensorflow.CollectionDef.IFloatList=} [properties] Properties to set\n             * @returns {tensorflow.CollectionDef.FloatList} FloatList instance\n             */\n            FloatList.create = function create(properties) {\n                return new FloatList(properties);\n            };\n\n            /**\n             * Encodes the specified FloatList message. Does not implicitly {@link tensorflow.CollectionDef.FloatList.verify|verify} messages.\n             * @function encode\n             * @memberof tensorflow.CollectionDef.FloatList\n             * @static\n             * @param {tensorflow.CollectionDef.IFloatList} message FloatList message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FloatList.encode = function encode(message, writer) {\n                if (!writer) writer = $Writer.create();\n                if (message.value != null && message.value.length) {\n                    writer.uint32( /* id 1, wireType 2 =*/10).fork();\n                    for (var i = 0; i < message.value.length; ++i) writer.float(message.value[i]);\n                    writer.ldelim();\n                }\n                return writer;\n            };\n\n            /**\n             * Encodes the specified FloatList message, length delimited. Does not implicitly {@link tensorflow.CollectionDef.FloatList.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof tensorflow.CollectionDef.FloatList\n             * @static\n             * @param {tensorflow.CollectionDef.IFloatList} message FloatList message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FloatList.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a FloatList message from the specified reader or buffer.\n             * @function decode\n             * @memberof tensorflow.CollectionDef.FloatList\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {tensorflow.CollectionDef.FloatList} FloatList\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FloatList.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length,\n                    message = new $root.tensorflow.CollectionDef.FloatList();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.value && message.value.length)) message.value = [];\n                            if ((tag & 7) === 2) {\n                                var end2 = reader.uint32() + reader.pos;\n                                while (reader.pos < end2) message.value.push(reader.float());\n                            } else message.value.push(reader.float());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a FloatList message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof tensorflow.CollectionDef.FloatList\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {tensorflow.CollectionDef.FloatList} FloatList\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FloatList.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a FloatList message.\n             * @function verify\n             * @memberof tensorflow.CollectionDef.FloatList\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            FloatList.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null) return \"object expected\";\n                if (message.value != null && message.hasOwnProperty(\"value\")) {\n                    if (!Array.isArray(message.value)) return \"value: array expected\";\n                    for (var i = 0; i < message.value.length; ++i) if (typeof message.value[i] !== \"number\") return \"value: number[] expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a FloatList message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof tensorflow.CollectionDef.FloatList\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {tensorflow.CollectionDef.FloatList} FloatList\n             */\n            FloatList.fromObject = function fromObject(object) {\n                if (object instanceof $root.tensorflow.CollectionDef.FloatList) return object;\n                var message = new $root.tensorflow.CollectionDef.FloatList();\n                if (object.value) {\n                    if (!Array.isArray(object.value)) throw TypeError(\".tensorflow.CollectionDef.FloatList.value: array expected\");\n                    message.value = [];\n                    for (var i = 0; i < object.value.length; ++i) message.value[i] = Number(object.value[i]);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a FloatList message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof tensorflow.CollectionDef.FloatList\n             * @static\n             * @param {tensorflow.CollectionDef.FloatList} message FloatList\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            FloatList.toObject = function toObject(message, options) {\n                if (!options) options = {};\n                var object = {};\n                if (options.arrays || options.defaults) object.value = [];\n                if (message.value && message.value.length) {\n                    object.value = [];\n                    for (var j = 0; j < message.value.length; ++j) object.value[j] = options.json && !isFinite(message.value[j]) ? String(message.value[j]) : message.value[j];\n                }\n                return object;\n            };\n\n            /**\n             * Converts this FloatList to JSON.\n             * @function toJSON\n             * @memberof tensorflow.CollectionDef.FloatList\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            FloatList.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return FloatList;\n        }();\n\n        CollectionDef.AnyList = function () {\n\n            /**\n             * Properties of an AnyList.\n             * @memberof tensorflow.CollectionDef\n             * @interface IAnyList\n             * @property {Array.<tensorflow.IAny>|null} [value] AnyList value\n             */\n\n            /**\n             * Constructs a new AnyList.\n             * @memberof tensorflow.CollectionDef\n             * @classdesc Represents an AnyList.\n             * @implements IAnyList\n             * @constructor\n             * @param {tensorflow.CollectionDef.IAnyList=} [properties] Properties to set\n             */\n            function AnyList(properties) {\n                this.value = [];\n                if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * AnyList value.\n             * @member {Array.<tensorflow.IAny>} value\n             * @memberof tensorflow.CollectionDef.AnyList\n             * @instance\n             */\n            AnyList.prototype.value = $util.emptyArray;\n\n            /**\n             * Creates a new AnyList instance using the specified properties.\n             * @function create\n             * @memberof tensorflow.CollectionDef.AnyList\n             * @static\n             * @param {tensorflow.CollectionDef.IAnyList=} [properties] Properties to set\n             * @returns {tensorflow.CollectionDef.AnyList} AnyList instance\n             */\n            AnyList.create = function create(properties) {\n                return new AnyList(properties);\n            };\n\n            /**\n             * Encodes the specified AnyList message. Does not implicitly {@link tensorflow.CollectionDef.AnyList.verify|verify} messages.\n             * @function encode\n             * @memberof tensorflow.CollectionDef.AnyList\n             * @static\n             * @param {tensorflow.CollectionDef.IAnyList} message AnyList message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            AnyList.encode = function encode(message, writer) {\n                if (!writer) writer = $Writer.create();\n                if (message.value != null && message.value.length) for (var i = 0; i < message.value.length; ++i) $root.tensorflow.Any.encode(message.value[i], writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified AnyList message, length delimited. Does not implicitly {@link tensorflow.CollectionDef.AnyList.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof tensorflow.CollectionDef.AnyList\n             * @static\n             * @param {tensorflow.CollectionDef.IAnyList} message AnyList message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            AnyList.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an AnyList message from the specified reader or buffer.\n             * @function decode\n             * @memberof tensorflow.CollectionDef.AnyList\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {tensorflow.CollectionDef.AnyList} AnyList\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            AnyList.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length,\n                    message = new $root.tensorflow.CollectionDef.AnyList();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.value && message.value.length)) message.value = [];\n                            message.value.push($root.tensorflow.Any.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an AnyList message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof tensorflow.CollectionDef.AnyList\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {tensorflow.CollectionDef.AnyList} AnyList\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            AnyList.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an AnyList message.\n             * @function verify\n             * @memberof tensorflow.CollectionDef.AnyList\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            AnyList.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null) return \"object expected\";\n                if (message.value != null && message.hasOwnProperty(\"value\")) {\n                    if (!Array.isArray(message.value)) return \"value: array expected\";\n                    for (var i = 0; i < message.value.length; ++i) {\n                        var error = $root.tensorflow.Any.verify(message.value[i]);\n                        if (error) return \"value.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates an AnyList message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof tensorflow.CollectionDef.AnyList\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {tensorflow.CollectionDef.AnyList} AnyList\n             */\n            AnyList.fromObject = function fromObject(object) {\n                if (object instanceof $root.tensorflow.CollectionDef.AnyList) return object;\n                var message = new $root.tensorflow.CollectionDef.AnyList();\n                if (object.value) {\n                    if (!Array.isArray(object.value)) throw TypeError(\".tensorflow.CollectionDef.AnyList.value: array expected\");\n                    message.value = [];\n                    for (var i = 0; i < object.value.length; ++i) {\n                        if (typeof object.value[i] !== \"object\") throw TypeError(\".tensorflow.CollectionDef.AnyList.value: object expected\");\n                        message.value[i] = $root.tensorflow.Any.fromObject(object.value[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an AnyList message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof tensorflow.CollectionDef.AnyList\n             * @static\n             * @param {tensorflow.CollectionDef.AnyList} message AnyList\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            AnyList.toObject = function toObject(message, options) {\n                if (!options) options = {};\n                var object = {};\n                if (options.arrays || options.defaults) object.value = [];\n                if (message.value && message.value.length) {\n                    object.value = [];\n                    for (var j = 0; j < message.value.length; ++j) object.value[j] = $root.tensorflow.Any.toObject(message.value[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this AnyList to JSON.\n             * @function toJSON\n             * @memberof tensorflow.CollectionDef.AnyList\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            AnyList.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return AnyList;\n        }();\n\n        return CollectionDef;\n    }();\n\n    tensorflow.SaverDef = function () {\n\n        /**\n         * Properties of a SaverDef.\n         * @memberof tensorflow\n         * @interface ISaverDef\n         * @property {string|null} [filenameTensorName] SaverDef filenameTensorName\n         * @property {string|null} [saveTensorName] SaverDef saveTensorName\n         * @property {string|null} [restoreOpName] SaverDef restoreOpName\n         * @property {number|null} [maxToKeep] SaverDef maxToKeep\n         * @property {boolean|null} [sharded] SaverDef sharded\n         * @property {number|null} [keepCheckpointEveryNHours] SaverDef keepCheckpointEveryNHours\n         * @property {tensorflow.SaverDef.CheckpointFormatVersion|null} [version] SaverDef version\n         */\n\n        /**\n         * Constructs a new SaverDef.\n         * @memberof tensorflow\n         * @classdesc Represents a SaverDef.\n         * @implements ISaverDef\n         * @constructor\n         * @param {tensorflow.ISaverDef=} [properties] Properties to set\n         */\n        function SaverDef(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SaverDef filenameTensorName.\n         * @member {string} filenameTensorName\n         * @memberof tensorflow.SaverDef\n         * @instance\n         */\n        SaverDef.prototype.filenameTensorName = \"\";\n\n        /**\n         * SaverDef saveTensorName.\n         * @member {string} saveTensorName\n         * @memberof tensorflow.SaverDef\n         * @instance\n         */\n        SaverDef.prototype.saveTensorName = \"\";\n\n        /**\n         * SaverDef restoreOpName.\n         * @member {string} restoreOpName\n         * @memberof tensorflow.SaverDef\n         * @instance\n         */\n        SaverDef.prototype.restoreOpName = \"\";\n\n        /**\n         * SaverDef maxToKeep.\n         * @member {number} maxToKeep\n         * @memberof tensorflow.SaverDef\n         * @instance\n         */\n        SaverDef.prototype.maxToKeep = 0;\n\n        /**\n         * SaverDef sharded.\n         * @member {boolean} sharded\n         * @memberof tensorflow.SaverDef\n         * @instance\n         */\n        SaverDef.prototype.sharded = false;\n\n        /**\n         * SaverDef keepCheckpointEveryNHours.\n         * @member {number} keepCheckpointEveryNHours\n         * @memberof tensorflow.SaverDef\n         * @instance\n         */\n        SaverDef.prototype.keepCheckpointEveryNHours = 0;\n\n        /**\n         * SaverDef version.\n         * @member {tensorflow.SaverDef.CheckpointFormatVersion} version\n         * @memberof tensorflow.SaverDef\n         * @instance\n         */\n        SaverDef.prototype.version = 0;\n\n        /**\n         * Creates a new SaverDef instance using the specified properties.\n         * @function create\n         * @memberof tensorflow.SaverDef\n         * @static\n         * @param {tensorflow.ISaverDef=} [properties] Properties to set\n         * @returns {tensorflow.SaverDef} SaverDef instance\n         */\n        SaverDef.create = function create(properties) {\n            return new SaverDef(properties);\n        };\n\n        /**\n         * Encodes the specified SaverDef message. Does not implicitly {@link tensorflow.SaverDef.verify|verify} messages.\n         * @function encode\n         * @memberof tensorflow.SaverDef\n         * @static\n         * @param {tensorflow.ISaverDef} message SaverDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SaverDef.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.filenameTensorName != null && message.hasOwnProperty(\"filenameTensorName\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.filenameTensorName);\n            if (message.saveTensorName != null && message.hasOwnProperty(\"saveTensorName\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.saveTensorName);\n            if (message.restoreOpName != null && message.hasOwnProperty(\"restoreOpName\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.restoreOpName);\n            if (message.maxToKeep != null && message.hasOwnProperty(\"maxToKeep\")) writer.uint32( /* id 4, wireType 0 =*/32).int32(message.maxToKeep);\n            if (message.sharded != null && message.hasOwnProperty(\"sharded\")) writer.uint32( /* id 5, wireType 0 =*/40).bool(message.sharded);\n            if (message.keepCheckpointEveryNHours != null && message.hasOwnProperty(\"keepCheckpointEveryNHours\")) writer.uint32( /* id 6, wireType 5 =*/53).float(message.keepCheckpointEveryNHours);\n            if (message.version != null && message.hasOwnProperty(\"version\")) writer.uint32( /* id 7, wireType 0 =*/56).int32(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SaverDef message, length delimited. Does not implicitly {@link tensorflow.SaverDef.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof tensorflow.SaverDef\n         * @static\n         * @param {tensorflow.ISaverDef} message SaverDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SaverDef.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SaverDef message from the specified reader or buffer.\n         * @function decode\n         * @memberof tensorflow.SaverDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {tensorflow.SaverDef} SaverDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SaverDef.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n                message = new $root.tensorflow.SaverDef();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.filenameTensorName = reader.string();\n                        break;\n                    case 2:\n                        message.saveTensorName = reader.string();\n                        break;\n                    case 3:\n                        message.restoreOpName = reader.string();\n                        break;\n                    case 4:\n                        message.maxToKeep = reader.int32();\n                        break;\n                    case 5:\n                        message.sharded = reader.bool();\n                        break;\n                    case 6:\n                        message.keepCheckpointEveryNHours = reader.float();\n                        break;\n                    case 7:\n                        message.version = reader.int32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SaverDef message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof tensorflow.SaverDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {tensorflow.SaverDef} SaverDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SaverDef.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SaverDef message.\n         * @function verify\n         * @memberof tensorflow.SaverDef\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SaverDef.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            if (message.filenameTensorName != null && message.hasOwnProperty(\"filenameTensorName\")) if (!$util.isString(message.filenameTensorName)) return \"filenameTensorName: string expected\";\n            if (message.saveTensorName != null && message.hasOwnProperty(\"saveTensorName\")) if (!$util.isString(message.saveTensorName)) return \"saveTensorName: string expected\";\n            if (message.restoreOpName != null && message.hasOwnProperty(\"restoreOpName\")) if (!$util.isString(message.restoreOpName)) return \"restoreOpName: string expected\";\n            if (message.maxToKeep != null && message.hasOwnProperty(\"maxToKeep\")) if (!$util.isInteger(message.maxToKeep)) return \"maxToKeep: integer expected\";\n            if (message.sharded != null && message.hasOwnProperty(\"sharded\")) if (typeof message.sharded !== \"boolean\") return \"sharded: boolean expected\";\n            if (message.keepCheckpointEveryNHours != null && message.hasOwnProperty(\"keepCheckpointEveryNHours\")) if (typeof message.keepCheckpointEveryNHours !== \"number\") return \"keepCheckpointEveryNHours: number expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\")) switch (message.version) {\n                default:\n                    return \"version: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                    break;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a SaverDef message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof tensorflow.SaverDef\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {tensorflow.SaverDef} SaverDef\n         */\n        SaverDef.fromObject = function fromObject(object) {\n            if (object instanceof $root.tensorflow.SaverDef) return object;\n            var message = new $root.tensorflow.SaverDef();\n            if (object.filenameTensorName != null) message.filenameTensorName = String(object.filenameTensorName);\n            if (object.saveTensorName != null) message.saveTensorName = String(object.saveTensorName);\n            if (object.restoreOpName != null) message.restoreOpName = String(object.restoreOpName);\n            if (object.maxToKeep != null) message.maxToKeep = object.maxToKeep | 0;\n            if (object.sharded != null) message.sharded = Boolean(object.sharded);\n            if (object.keepCheckpointEveryNHours != null) message.keepCheckpointEveryNHours = Number(object.keepCheckpointEveryNHours);\n            switch (object.version) {\n                case \"LEGACY\":\n                case 0:\n                    message.version = 0;\n                    break;\n                case \"V1\":\n                case 1:\n                    message.version = 1;\n                    break;\n                case \"V2\":\n                case 2:\n                    message.version = 2;\n                    break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SaverDef message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof tensorflow.SaverDef\n         * @static\n         * @param {tensorflow.SaverDef} message SaverDef\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SaverDef.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (options.defaults) {\n                object.filenameTensorName = \"\";\n                object.saveTensorName = \"\";\n                object.restoreOpName = \"\";\n                object.maxToKeep = 0;\n                object.sharded = false;\n                object.keepCheckpointEveryNHours = 0;\n                object.version = options.enums === String ? \"LEGACY\" : 0;\n            }\n            if (message.filenameTensorName != null && message.hasOwnProperty(\"filenameTensorName\")) object.filenameTensorName = message.filenameTensorName;\n            if (message.saveTensorName != null && message.hasOwnProperty(\"saveTensorName\")) object.saveTensorName = message.saveTensorName;\n            if (message.restoreOpName != null && message.hasOwnProperty(\"restoreOpName\")) object.restoreOpName = message.restoreOpName;\n            if (message.maxToKeep != null && message.hasOwnProperty(\"maxToKeep\")) object.maxToKeep = message.maxToKeep;\n            if (message.sharded != null && message.hasOwnProperty(\"sharded\")) object.sharded = message.sharded;\n            if (message.keepCheckpointEveryNHours != null && message.hasOwnProperty(\"keepCheckpointEveryNHours\")) object.keepCheckpointEveryNHours = options.json && !isFinite(message.keepCheckpointEveryNHours) ? String(message.keepCheckpointEveryNHours) : message.keepCheckpointEveryNHours;\n            if (message.version != null && message.hasOwnProperty(\"version\")) object.version = options.enums === String ? $root.tensorflow.SaverDef.CheckpointFormatVersion[message.version] : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this SaverDef to JSON.\n         * @function toJSON\n         * @memberof tensorflow.SaverDef\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SaverDef.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * CheckpointFormatVersion enum.\n         * @name tensorflow.SaverDef.CheckpointFormatVersion\n         * @enum {string}\n         * @property {number} LEGACY=0 LEGACY value\n         * @property {number} V1=1 V1 value\n         * @property {number} V2=2 V2 value\n         */\n        SaverDef.CheckpointFormatVersion = function () {\n            var valuesById = {},\n                values = Object.create(valuesById);\n            values[valuesById[0] = \"LEGACY\"] = 0;\n            values[valuesById[1] = \"V1\"] = 1;\n            values[valuesById[2] = \"V2\"] = 2;\n            return values;\n        }();\n\n        return SaverDef;\n    }();\n\n    tensorflow.TensorInfo = function () {\n\n        /**\n         * Properties of a TensorInfo.\n         * @memberof tensorflow\n         * @interface ITensorInfo\n         * @property {string|null} [name] TensorInfo name\n         * @property {tensorflow.TensorInfo.ICooSparse|null} [cooSparse] TensorInfo cooSparse\n         * @property {tensorflow.DataType|null} [dtype] TensorInfo dtype\n         * @property {tensorflow.ITensorShape|null} [tensorShape] TensorInfo tensorShape\n         */\n\n        /**\n         * Constructs a new TensorInfo.\n         * @memberof tensorflow\n         * @classdesc Represents a TensorInfo.\n         * @implements ITensorInfo\n         * @constructor\n         * @param {tensorflow.ITensorInfo=} [properties] Properties to set\n         */\n        function TensorInfo(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorInfo name.\n         * @member {string} name\n         * @memberof tensorflow.TensorInfo\n         * @instance\n         */\n        TensorInfo.prototype.name = \"\";\n\n        /**\n         * TensorInfo cooSparse.\n         * @member {tensorflow.TensorInfo.ICooSparse|null|undefined} cooSparse\n         * @memberof tensorflow.TensorInfo\n         * @instance\n         */\n        TensorInfo.prototype.cooSparse = null;\n\n        /**\n         * TensorInfo dtype.\n         * @member {tensorflow.DataType} dtype\n         * @memberof tensorflow.TensorInfo\n         * @instance\n         */\n        TensorInfo.prototype.dtype = 0;\n\n        /**\n         * TensorInfo tensorShape.\n         * @member {tensorflow.ITensorShape|null|undefined} tensorShape\n         * @memberof tensorflow.TensorInfo\n         * @instance\n         */\n        TensorInfo.prototype.tensorShape = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TensorInfo encoding.\n         * @member {\"name\"|\"cooSparse\"|undefined} encoding\n         * @memberof tensorflow.TensorInfo\n         * @instance\n         */\n        Object.defineProperty(TensorInfo.prototype, \"encoding\", {\n            get: $util.oneOfGetter($oneOfFields = [\"name\", \"cooSparse\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TensorInfo instance using the specified properties.\n         * @function create\n         * @memberof tensorflow.TensorInfo\n         * @static\n         * @param {tensorflow.ITensorInfo=} [properties] Properties to set\n         * @returns {tensorflow.TensorInfo} TensorInfo instance\n         */\n        TensorInfo.create = function create(properties) {\n            return new TensorInfo(properties);\n        };\n\n        /**\n         * Encodes the specified TensorInfo message. Does not implicitly {@link tensorflow.TensorInfo.verify|verify} messages.\n         * @function encode\n         * @memberof tensorflow.TensorInfo\n         * @static\n         * @param {tensorflow.ITensorInfo} message TensorInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorInfo.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.name);\n            if (message.dtype != null && message.hasOwnProperty(\"dtype\")) writer.uint32( /* id 2, wireType 0 =*/16).int32(message.dtype);\n            if (message.tensorShape != null && message.hasOwnProperty(\"tensorShape\")) $root.tensorflow.TensorShape.encode(message.tensorShape, writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.cooSparse != null && message.hasOwnProperty(\"cooSparse\")) $root.tensorflow.TensorInfo.CooSparse.encode(message.cooSparse, writer.uint32( /* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorInfo message, length delimited. Does not implicitly {@link tensorflow.TensorInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof tensorflow.TensorInfo\n         * @static\n         * @param {tensorflow.ITensorInfo} message TensorInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof tensorflow.TensorInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {tensorflow.TensorInfo} TensorInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n                message = new $root.tensorflow.TensorInfo();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.name = reader.string();\n                        break;\n                    case 4:\n                        message.cooSparse = $root.tensorflow.TensorInfo.CooSparse.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.dtype = reader.int32();\n                        break;\n                    case 3:\n                        message.tensorShape = $root.tensorflow.TensorShape.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof tensorflow.TensorInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {tensorflow.TensorInfo} TensorInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorInfo message.\n         * @function verify\n         * @memberof tensorflow.TensorInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            var properties = {};\n            if (message.name != null && message.hasOwnProperty(\"name\")) {\n                properties.encoding = 1;\n                if (!$util.isString(message.name)) return \"name: string expected\";\n            }\n            if (message.cooSparse != null && message.hasOwnProperty(\"cooSparse\")) {\n                if (properties.encoding === 1) return \"encoding: multiple values\";\n                properties.encoding = 1;\n                {\n                    var error = $root.tensorflow.TensorInfo.CooSparse.verify(message.cooSparse);\n                    if (error) return \"cooSparse.\" + error;\n                }\n            }\n            if (message.dtype != null && message.hasOwnProperty(\"dtype\")) switch (message.dtype) {\n                default:\n                    return \"dtype: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 11:\n                case 12:\n                case 13:\n                case 14:\n                case 101:\n                case 102:\n                case 103:\n                case 104:\n                case 105:\n                case 106:\n                case 107:\n                case 108:\n                case 109:\n                case 110:\n                case 111:\n                case 112:\n                case 113:\n                case 114:\n                    break;\n            }\n            if (message.tensorShape != null && message.hasOwnProperty(\"tensorShape\")) {\n                var error = $root.tensorflow.TensorShape.verify(message.tensorShape);\n                if (error) return \"tensorShape.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof tensorflow.TensorInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {tensorflow.TensorInfo} TensorInfo\n         */\n        TensorInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.tensorflow.TensorInfo) return object;\n            var message = new $root.tensorflow.TensorInfo();\n            if (object.name != null) message.name = String(object.name);\n            if (object.cooSparse != null) {\n                if (typeof object.cooSparse !== \"object\") throw TypeError(\".tensorflow.TensorInfo.cooSparse: object expected\");\n                message.cooSparse = $root.tensorflow.TensorInfo.CooSparse.fromObject(object.cooSparse);\n            }\n            switch (object.dtype) {\n                case \"DT_INVALID\":\n                case 0:\n                    message.dtype = 0;\n                    break;\n                case \"DT_FLOAT\":\n                case 1:\n                    message.dtype = 1;\n                    break;\n                case \"DT_DOUBLE\":\n                case 2:\n                    message.dtype = 2;\n                    break;\n                case \"DT_INT32\":\n                case 3:\n                    message.dtype = 3;\n                    break;\n                case \"DT_UINT8\":\n                case 4:\n                    message.dtype = 4;\n                    break;\n                case \"DT_INT16\":\n                case 5:\n                    message.dtype = 5;\n                    break;\n                case \"DT_INT8\":\n                case 6:\n                    message.dtype = 6;\n                    break;\n                case \"DT_STRING\":\n                case 7:\n                    message.dtype = 7;\n                    break;\n                case \"DT_COMPLEX64\":\n                case 8:\n                    message.dtype = 8;\n                    break;\n                case \"DT_INT64\":\n                case 9:\n                    message.dtype = 9;\n                    break;\n                case \"DT_BOOL\":\n                case 10:\n                    message.dtype = 10;\n                    break;\n                case \"DT_QINT8\":\n                case 11:\n                    message.dtype = 11;\n                    break;\n                case \"DT_QUINT8\":\n                case 12:\n                    message.dtype = 12;\n                    break;\n                case \"DT_QINT32\":\n                case 13:\n                    message.dtype = 13;\n                    break;\n                case \"DT_BFLOAT16\":\n                case 14:\n                    message.dtype = 14;\n                    break;\n                case \"DT_FLOAT_REF\":\n                case 101:\n                    message.dtype = 101;\n                    break;\n                case \"DT_DOUBLE_REF\":\n                case 102:\n                    message.dtype = 102;\n                    break;\n                case \"DT_INT32_REF\":\n                case 103:\n                    message.dtype = 103;\n                    break;\n                case \"DT_UINT8_REF\":\n                case 104:\n                    message.dtype = 104;\n                    break;\n                case \"DT_INT16_REF\":\n                case 105:\n                    message.dtype = 105;\n                    break;\n                case \"DT_INT8_REF\":\n                case 106:\n                    message.dtype = 106;\n                    break;\n                case \"DT_STRING_REF\":\n                case 107:\n                    message.dtype = 107;\n                    break;\n                case \"DT_COMPLEX64_REF\":\n                case 108:\n                    message.dtype = 108;\n                    break;\n                case \"DT_INT64_REF\":\n                case 109:\n                    message.dtype = 109;\n                    break;\n                case \"DT_BOOL_REF\":\n                case 110:\n                    message.dtype = 110;\n                    break;\n                case \"DT_QINT8_REF\":\n                case 111:\n                    message.dtype = 111;\n                    break;\n                case \"DT_QUINT8_REF\":\n                case 112:\n                    message.dtype = 112;\n                    break;\n                case \"DT_QINT32_REF\":\n                case 113:\n                    message.dtype = 113;\n                    break;\n                case \"DT_BFLOAT16_REF\":\n                case 114:\n                    message.dtype = 114;\n                    break;\n            }\n            if (object.tensorShape != null) {\n                if (typeof object.tensorShape !== \"object\") throw TypeError(\".tensorflow.TensorInfo.tensorShape: object expected\");\n                message.tensorShape = $root.tensorflow.TensorShape.fromObject(object.tensorShape);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof tensorflow.TensorInfo\n         * @static\n         * @param {tensorflow.TensorInfo} message TensorInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorInfo.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (options.defaults) {\n                object.dtype = options.enums === String ? \"DT_INVALID\" : 0;\n                object.tensorShape = null;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\")) {\n                object.name = message.name;\n                if (options.oneofs) object.encoding = \"name\";\n            }\n            if (message.dtype != null && message.hasOwnProperty(\"dtype\")) object.dtype = options.enums === String ? $root.tensorflow.DataType[message.dtype] : message.dtype;\n            if (message.tensorShape != null && message.hasOwnProperty(\"tensorShape\")) object.tensorShape = $root.tensorflow.TensorShape.toObject(message.tensorShape, options);\n            if (message.cooSparse != null && message.hasOwnProperty(\"cooSparse\")) {\n                object.cooSparse = $root.tensorflow.TensorInfo.CooSparse.toObject(message.cooSparse, options);\n                if (options.oneofs) object.encoding = \"cooSparse\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorInfo to JSON.\n         * @function toJSON\n         * @memberof tensorflow.TensorInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorInfo.CooSparse = function () {\n\n            /**\n             * Properties of a CooSparse.\n             * @memberof tensorflow.TensorInfo\n             * @interface ICooSparse\n             * @property {string|null} [valuesTensorName] CooSparse valuesTensorName\n             * @property {string|null} [indicesTensorName] CooSparse indicesTensorName\n             * @property {string|null} [denseShapeTensorName] CooSparse denseShapeTensorName\n             */\n\n            /**\n             * Constructs a new CooSparse.\n             * @memberof tensorflow.TensorInfo\n             * @classdesc Represents a CooSparse.\n             * @implements ICooSparse\n             * @constructor\n             * @param {tensorflow.TensorInfo.ICooSparse=} [properties] Properties to set\n             */\n            function CooSparse(properties) {\n                if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * CooSparse valuesTensorName.\n             * @member {string} valuesTensorName\n             * @memberof tensorflow.TensorInfo.CooSparse\n             * @instance\n             */\n            CooSparse.prototype.valuesTensorName = \"\";\n\n            /**\n             * CooSparse indicesTensorName.\n             * @member {string} indicesTensorName\n             * @memberof tensorflow.TensorInfo.CooSparse\n             * @instance\n             */\n            CooSparse.prototype.indicesTensorName = \"\";\n\n            /**\n             * CooSparse denseShapeTensorName.\n             * @member {string} denseShapeTensorName\n             * @memberof tensorflow.TensorInfo.CooSparse\n             * @instance\n             */\n            CooSparse.prototype.denseShapeTensorName = \"\";\n\n            /**\n             * Creates a new CooSparse instance using the specified properties.\n             * @function create\n             * @memberof tensorflow.TensorInfo.CooSparse\n             * @static\n             * @param {tensorflow.TensorInfo.ICooSparse=} [properties] Properties to set\n             * @returns {tensorflow.TensorInfo.CooSparse} CooSparse instance\n             */\n            CooSparse.create = function create(properties) {\n                return new CooSparse(properties);\n            };\n\n            /**\n             * Encodes the specified CooSparse message. Does not implicitly {@link tensorflow.TensorInfo.CooSparse.verify|verify} messages.\n             * @function encode\n             * @memberof tensorflow.TensorInfo.CooSparse\n             * @static\n             * @param {tensorflow.TensorInfo.ICooSparse} message CooSparse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            CooSparse.encode = function encode(message, writer) {\n                if (!writer) writer = $Writer.create();\n                if (message.valuesTensorName != null && message.hasOwnProperty(\"valuesTensorName\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.valuesTensorName);\n                if (message.indicesTensorName != null && message.hasOwnProperty(\"indicesTensorName\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.indicesTensorName);\n                if (message.denseShapeTensorName != null && message.hasOwnProperty(\"denseShapeTensorName\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.denseShapeTensorName);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified CooSparse message, length delimited. Does not implicitly {@link tensorflow.TensorInfo.CooSparse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof tensorflow.TensorInfo.CooSparse\n             * @static\n             * @param {tensorflow.TensorInfo.ICooSparse} message CooSparse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            CooSparse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a CooSparse message from the specified reader or buffer.\n             * @function decode\n             * @memberof tensorflow.TensorInfo.CooSparse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {tensorflow.TensorInfo.CooSparse} CooSparse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            CooSparse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length,\n                    message = new $root.tensorflow.TensorInfo.CooSparse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            message.valuesTensorName = reader.string();\n                            break;\n                        case 2:\n                            message.indicesTensorName = reader.string();\n                            break;\n                        case 3:\n                            message.denseShapeTensorName = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a CooSparse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof tensorflow.TensorInfo.CooSparse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {tensorflow.TensorInfo.CooSparse} CooSparse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            CooSparse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a CooSparse message.\n             * @function verify\n             * @memberof tensorflow.TensorInfo.CooSparse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            CooSparse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null) return \"object expected\";\n                if (message.valuesTensorName != null && message.hasOwnProperty(\"valuesTensorName\")) if (!$util.isString(message.valuesTensorName)) return \"valuesTensorName: string expected\";\n                if (message.indicesTensorName != null && message.hasOwnProperty(\"indicesTensorName\")) if (!$util.isString(message.indicesTensorName)) return \"indicesTensorName: string expected\";\n                if (message.denseShapeTensorName != null && message.hasOwnProperty(\"denseShapeTensorName\")) if (!$util.isString(message.denseShapeTensorName)) return \"denseShapeTensorName: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a CooSparse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof tensorflow.TensorInfo.CooSparse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {tensorflow.TensorInfo.CooSparse} CooSparse\n             */\n            CooSparse.fromObject = function fromObject(object) {\n                if (object instanceof $root.tensorflow.TensorInfo.CooSparse) return object;\n                var message = new $root.tensorflow.TensorInfo.CooSparse();\n                if (object.valuesTensorName != null) message.valuesTensorName = String(object.valuesTensorName);\n                if (object.indicesTensorName != null) message.indicesTensorName = String(object.indicesTensorName);\n                if (object.denseShapeTensorName != null) message.denseShapeTensorName = String(object.denseShapeTensorName);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a CooSparse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof tensorflow.TensorInfo.CooSparse\n             * @static\n             * @param {tensorflow.TensorInfo.CooSparse} message CooSparse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            CooSparse.toObject = function toObject(message, options) {\n                if (!options) options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.valuesTensorName = \"\";\n                    object.indicesTensorName = \"\";\n                    object.denseShapeTensorName = \"\";\n                }\n                if (message.valuesTensorName != null && message.hasOwnProperty(\"valuesTensorName\")) object.valuesTensorName = message.valuesTensorName;\n                if (message.indicesTensorName != null && message.hasOwnProperty(\"indicesTensorName\")) object.indicesTensorName = message.indicesTensorName;\n                if (message.denseShapeTensorName != null && message.hasOwnProperty(\"denseShapeTensorName\")) object.denseShapeTensorName = message.denseShapeTensorName;\n                return object;\n            };\n\n            /**\n             * Converts this CooSparse to JSON.\n             * @function toJSON\n             * @memberof tensorflow.TensorInfo.CooSparse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            CooSparse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return CooSparse;\n        }();\n\n        return TensorInfo;\n    }();\n\n    tensorflow.SignatureDef = function () {\n\n        /**\n         * Properties of a SignatureDef.\n         * @memberof tensorflow\n         * @interface ISignatureDef\n         * @property {Object.<string,tensorflow.ITensorInfo>|null} [inputs] SignatureDef inputs\n         * @property {Object.<string,tensorflow.ITensorInfo>|null} [outputs] SignatureDef outputs\n         * @property {string|null} [methodName] SignatureDef methodName\n         */\n\n        /**\n         * Constructs a new SignatureDef.\n         * @memberof tensorflow\n         * @classdesc Represents a SignatureDef.\n         * @implements ISignatureDef\n         * @constructor\n         * @param {tensorflow.ISignatureDef=} [properties] Properties to set\n         */\n        function SignatureDef(properties) {\n            this.inputs = {};\n            this.outputs = {};\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SignatureDef inputs.\n         * @member {Object.<string,tensorflow.ITensorInfo>} inputs\n         * @memberof tensorflow.SignatureDef\n         * @instance\n         */\n        SignatureDef.prototype.inputs = $util.emptyObject;\n\n        /**\n         * SignatureDef outputs.\n         * @member {Object.<string,tensorflow.ITensorInfo>} outputs\n         * @memberof tensorflow.SignatureDef\n         * @instance\n         */\n        SignatureDef.prototype.outputs = $util.emptyObject;\n\n        /**\n         * SignatureDef methodName.\n         * @member {string} methodName\n         * @memberof tensorflow.SignatureDef\n         * @instance\n         */\n        SignatureDef.prototype.methodName = \"\";\n\n        /**\n         * Creates a new SignatureDef instance using the specified properties.\n         * @function create\n         * @memberof tensorflow.SignatureDef\n         * @static\n         * @param {tensorflow.ISignatureDef=} [properties] Properties to set\n         * @returns {tensorflow.SignatureDef} SignatureDef instance\n         */\n        SignatureDef.create = function create(properties) {\n            return new SignatureDef(properties);\n        };\n\n        /**\n         * Encodes the specified SignatureDef message. Does not implicitly {@link tensorflow.SignatureDef.verify|verify} messages.\n         * @function encode\n         * @memberof tensorflow.SignatureDef\n         * @static\n         * @param {tensorflow.ISignatureDef} message SignatureDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SignatureDef.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.inputs != null && message.hasOwnProperty(\"inputs\")) for (var keys = Object.keys(message.inputs), i = 0; i < keys.length; ++i) {\n                writer.uint32( /* id 1, wireType 2 =*/10).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.tensorflow.TensorInfo.encode(message.inputs[keys[i]], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n            if (message.outputs != null && message.hasOwnProperty(\"outputs\")) for (var keys = Object.keys(message.outputs), i = 0; i < keys.length; ++i) {\n                writer.uint32( /* id 2, wireType 2 =*/18).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.tensorflow.TensorInfo.encode(message.outputs[keys[i]], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n            if (message.methodName != null && message.hasOwnProperty(\"methodName\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.methodName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SignatureDef message, length delimited. Does not implicitly {@link tensorflow.SignatureDef.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof tensorflow.SignatureDef\n         * @static\n         * @param {tensorflow.ISignatureDef} message SignatureDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SignatureDef.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SignatureDef message from the specified reader or buffer.\n         * @function decode\n         * @memberof tensorflow.SignatureDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {tensorflow.SignatureDef} SignatureDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SignatureDef.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n                message = new $root.tensorflow.SignatureDef(),\n                key;\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        reader.skip().pos++;\n                        if (message.inputs === $util.emptyObject) message.inputs = {};\n                        key = reader.string();\n                        reader.pos++;\n                        message.inputs[key] = $root.tensorflow.TensorInfo.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        reader.skip().pos++;\n                        if (message.outputs === $util.emptyObject) message.outputs = {};\n                        key = reader.string();\n                        reader.pos++;\n                        message.outputs[key] = $root.tensorflow.TensorInfo.decode(reader, reader.uint32());\n                        break;\n                    case 3:\n                        message.methodName = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SignatureDef message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof tensorflow.SignatureDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {tensorflow.SignatureDef} SignatureDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SignatureDef.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SignatureDef message.\n         * @function verify\n         * @memberof tensorflow.SignatureDef\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SignatureDef.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            if (message.inputs != null && message.hasOwnProperty(\"inputs\")) {\n                if (!$util.isObject(message.inputs)) return \"inputs: object expected\";\n                var key = Object.keys(message.inputs);\n                for (var i = 0; i < key.length; ++i) {\n                    var error = $root.tensorflow.TensorInfo.verify(message.inputs[key[i]]);\n                    if (error) return \"inputs.\" + error;\n                }\n            }\n            if (message.outputs != null && message.hasOwnProperty(\"outputs\")) {\n                if (!$util.isObject(message.outputs)) return \"outputs: object expected\";\n                var key = Object.keys(message.outputs);\n                for (var i = 0; i < key.length; ++i) {\n                    var error = $root.tensorflow.TensorInfo.verify(message.outputs[key[i]]);\n                    if (error) return \"outputs.\" + error;\n                }\n            }\n            if (message.methodName != null && message.hasOwnProperty(\"methodName\")) if (!$util.isString(message.methodName)) return \"methodName: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a SignatureDef message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof tensorflow.SignatureDef\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {tensorflow.SignatureDef} SignatureDef\n         */\n        SignatureDef.fromObject = function fromObject(object) {\n            if (object instanceof $root.tensorflow.SignatureDef) return object;\n            var message = new $root.tensorflow.SignatureDef();\n            if (object.inputs) {\n                if (typeof object.inputs !== \"object\") throw TypeError(\".tensorflow.SignatureDef.inputs: object expected\");\n                message.inputs = {};\n                for (var keys = Object.keys(object.inputs), i = 0; i < keys.length; ++i) {\n                    if (typeof object.inputs[keys[i]] !== \"object\") throw TypeError(\".tensorflow.SignatureDef.inputs: object expected\");\n                    message.inputs[keys[i]] = $root.tensorflow.TensorInfo.fromObject(object.inputs[keys[i]]);\n                }\n            }\n            if (object.outputs) {\n                if (typeof object.outputs !== \"object\") throw TypeError(\".tensorflow.SignatureDef.outputs: object expected\");\n                message.outputs = {};\n                for (var keys = Object.keys(object.outputs), i = 0; i < keys.length; ++i) {\n                    if (typeof object.outputs[keys[i]] !== \"object\") throw TypeError(\".tensorflow.SignatureDef.outputs: object expected\");\n                    message.outputs[keys[i]] = $root.tensorflow.TensorInfo.fromObject(object.outputs[keys[i]]);\n                }\n            }\n            if (object.methodName != null) message.methodName = String(object.methodName);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SignatureDef message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof tensorflow.SignatureDef\n         * @static\n         * @param {tensorflow.SignatureDef} message SignatureDef\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SignatureDef.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (options.objects || options.defaults) {\n                object.inputs = {};\n                object.outputs = {};\n            }\n            if (options.defaults) object.methodName = \"\";\n            var keys2;\n            if (message.inputs && (keys2 = Object.keys(message.inputs)).length) {\n                object.inputs = {};\n                for (var j = 0; j < keys2.length; ++j) object.inputs[keys2[j]] = $root.tensorflow.TensorInfo.toObject(message.inputs[keys2[j]], options);\n            }\n            if (message.outputs && (keys2 = Object.keys(message.outputs)).length) {\n                object.outputs = {};\n                for (var j = 0; j < keys2.length; ++j) object.outputs[keys2[j]] = $root.tensorflow.TensorInfo.toObject(message.outputs[keys2[j]], options);\n            }\n            if (message.methodName != null && message.hasOwnProperty(\"methodName\")) object.methodName = message.methodName;\n            return object;\n        };\n\n        /**\n         * Converts this SignatureDef to JSON.\n         * @function toJSON\n         * @memberof tensorflow.SignatureDef\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SignatureDef.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return SignatureDef;\n    }();\n\n    tensorflow.AssetFileDef = function () {\n\n        /**\n         * Properties of an AssetFileDef.\n         * @memberof tensorflow\n         * @interface IAssetFileDef\n         * @property {tensorflow.ITensorInfo|null} [tensorInfo] AssetFileDef tensorInfo\n         * @property {string|null} [filename] AssetFileDef filename\n         */\n\n        /**\n         * Constructs a new AssetFileDef.\n         * @memberof tensorflow\n         * @classdesc Represents an AssetFileDef.\n         * @implements IAssetFileDef\n         * @constructor\n         * @param {tensorflow.IAssetFileDef=} [properties] Properties to set\n         */\n        function AssetFileDef(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AssetFileDef tensorInfo.\n         * @member {tensorflow.ITensorInfo|null|undefined} tensorInfo\n         * @memberof tensorflow.AssetFileDef\n         * @instance\n         */\n        AssetFileDef.prototype.tensorInfo = null;\n\n        /**\n         * AssetFileDef filename.\n         * @member {string} filename\n         * @memberof tensorflow.AssetFileDef\n         * @instance\n         */\n        AssetFileDef.prototype.filename = \"\";\n\n        /**\n         * Creates a new AssetFileDef instance using the specified properties.\n         * @function create\n         * @memberof tensorflow.AssetFileDef\n         * @static\n         * @param {tensorflow.IAssetFileDef=} [properties] Properties to set\n         * @returns {tensorflow.AssetFileDef} AssetFileDef instance\n         */\n        AssetFileDef.create = function create(properties) {\n            return new AssetFileDef(properties);\n        };\n\n        /**\n         * Encodes the specified AssetFileDef message. Does not implicitly {@link tensorflow.AssetFileDef.verify|verify} messages.\n         * @function encode\n         * @memberof tensorflow.AssetFileDef\n         * @static\n         * @param {tensorflow.IAssetFileDef} message AssetFileDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AssetFileDef.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.tensorInfo != null && message.hasOwnProperty(\"tensorInfo\")) $root.tensorflow.TensorInfo.encode(message.tensorInfo, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.filename != null && message.hasOwnProperty(\"filename\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.filename);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AssetFileDef message, length delimited. Does not implicitly {@link tensorflow.AssetFileDef.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof tensorflow.AssetFileDef\n         * @static\n         * @param {tensorflow.IAssetFileDef} message AssetFileDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AssetFileDef.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AssetFileDef message from the specified reader or buffer.\n         * @function decode\n         * @memberof tensorflow.AssetFileDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {tensorflow.AssetFileDef} AssetFileDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AssetFileDef.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n                message = new $root.tensorflow.AssetFileDef();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.tensorInfo = $root.tensorflow.TensorInfo.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.filename = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AssetFileDef message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof tensorflow.AssetFileDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {tensorflow.AssetFileDef} AssetFileDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AssetFileDef.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AssetFileDef message.\n         * @function verify\n         * @memberof tensorflow.AssetFileDef\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AssetFileDef.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            if (message.tensorInfo != null && message.hasOwnProperty(\"tensorInfo\")) {\n                var error = $root.tensorflow.TensorInfo.verify(message.tensorInfo);\n                if (error) return \"tensorInfo.\" + error;\n            }\n            if (message.filename != null && message.hasOwnProperty(\"filename\")) if (!$util.isString(message.filename)) return \"filename: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates an AssetFileDef message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof tensorflow.AssetFileDef\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {tensorflow.AssetFileDef} AssetFileDef\n         */\n        AssetFileDef.fromObject = function fromObject(object) {\n            if (object instanceof $root.tensorflow.AssetFileDef) return object;\n            var message = new $root.tensorflow.AssetFileDef();\n            if (object.tensorInfo != null) {\n                if (typeof object.tensorInfo !== \"object\") throw TypeError(\".tensorflow.AssetFileDef.tensorInfo: object expected\");\n                message.tensorInfo = $root.tensorflow.TensorInfo.fromObject(object.tensorInfo);\n            }\n            if (object.filename != null) message.filename = String(object.filename);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AssetFileDef message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof tensorflow.AssetFileDef\n         * @static\n         * @param {tensorflow.AssetFileDef} message AssetFileDef\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AssetFileDef.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (options.defaults) {\n                object.tensorInfo = null;\n                object.filename = \"\";\n            }\n            if (message.tensorInfo != null && message.hasOwnProperty(\"tensorInfo\")) object.tensorInfo = $root.tensorflow.TensorInfo.toObject(message.tensorInfo, options);\n            if (message.filename != null && message.hasOwnProperty(\"filename\")) object.filename = message.filename;\n            return object;\n        };\n\n        /**\n         * Converts this AssetFileDef to JSON.\n         * @function toJSON\n         * @memberof tensorflow.AssetFileDef\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AssetFileDef.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return AssetFileDef;\n    }();\n\n    tensorflow.OpDef = function () {\n\n        /**\n         * Properties of an OpDef.\n         * @memberof tensorflow\n         * @interface IOpDef\n         * @property {string|null} [name] OpDef name\n         * @property {Array.<tensorflow.OpDef.IArgDef>|null} [inputArg] OpDef inputArg\n         * @property {Array.<tensorflow.OpDef.IArgDef>|null} [outputArg] OpDef outputArg\n         * @property {Array.<tensorflow.OpDef.IAttrDef>|null} [attr] OpDef attr\n         * @property {tensorflow.OpDef.IOpDeprecation|null} [deprecation] OpDef deprecation\n         * @property {string|null} [summary] OpDef summary\n         * @property {string|null} [description] OpDef description\n         * @property {boolean|null} [isCommutative] OpDef isCommutative\n         * @property {boolean|null} [isAggregate] OpDef isAggregate\n         * @property {boolean|null} [isStateful] OpDef isStateful\n         * @property {boolean|null} [allowsUninitializedInput] OpDef allowsUninitializedInput\n         */\n\n        /**\n         * Constructs a new OpDef.\n         * @memberof tensorflow\n         * @classdesc Represents an OpDef.\n         * @implements IOpDef\n         * @constructor\n         * @param {tensorflow.IOpDef=} [properties] Properties to set\n         */\n        function OpDef(properties) {\n            this.inputArg = [];\n            this.outputArg = [];\n            this.attr = [];\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OpDef name.\n         * @member {string} name\n         * @memberof tensorflow.OpDef\n         * @instance\n         */\n        OpDef.prototype.name = \"\";\n\n        /**\n         * OpDef inputArg.\n         * @member {Array.<tensorflow.OpDef.IArgDef>} inputArg\n         * @memberof tensorflow.OpDef\n         * @instance\n         */\n        OpDef.prototype.inputArg = $util.emptyArray;\n\n        /**\n         * OpDef outputArg.\n         * @member {Array.<tensorflow.OpDef.IArgDef>} outputArg\n         * @memberof tensorflow.OpDef\n         * @instance\n         */\n        OpDef.prototype.outputArg = $util.emptyArray;\n\n        /**\n         * OpDef attr.\n         * @member {Array.<tensorflow.OpDef.IAttrDef>} attr\n         * @memberof tensorflow.OpDef\n         * @instance\n         */\n        OpDef.prototype.attr = $util.emptyArray;\n\n        /**\n         * OpDef deprecation.\n         * @member {tensorflow.OpDef.IOpDeprecation|null|undefined} deprecation\n         * @memberof tensorflow.OpDef\n         * @instance\n         */\n        OpDef.prototype.deprecation = null;\n\n        /**\n         * OpDef summary.\n         * @member {string} summary\n         * @memberof tensorflow.OpDef\n         * @instance\n         */\n        OpDef.prototype.summary = \"\";\n\n        /**\n         * OpDef description.\n         * @member {string} description\n         * @memberof tensorflow.OpDef\n         * @instance\n         */\n        OpDef.prototype.description = \"\";\n\n        /**\n         * OpDef isCommutative.\n         * @member {boolean} isCommutative\n         * @memberof tensorflow.OpDef\n         * @instance\n         */\n        OpDef.prototype.isCommutative = false;\n\n        /**\n         * OpDef isAggregate.\n         * @member {boolean} isAggregate\n         * @memberof tensorflow.OpDef\n         * @instance\n         */\n        OpDef.prototype.isAggregate = false;\n\n        /**\n         * OpDef isStateful.\n         * @member {boolean} isStateful\n         * @memberof tensorflow.OpDef\n         * @instance\n         */\n        OpDef.prototype.isStateful = false;\n\n        /**\n         * OpDef allowsUninitializedInput.\n         * @member {boolean} allowsUninitializedInput\n         * @memberof tensorflow.OpDef\n         * @instance\n         */\n        OpDef.prototype.allowsUninitializedInput = false;\n\n        /**\n         * Creates a new OpDef instance using the specified properties.\n         * @function create\n         * @memberof tensorflow.OpDef\n         * @static\n         * @param {tensorflow.IOpDef=} [properties] Properties to set\n         * @returns {tensorflow.OpDef} OpDef instance\n         */\n        OpDef.create = function create(properties) {\n            return new OpDef(properties);\n        };\n\n        /**\n         * Encodes the specified OpDef message. Does not implicitly {@link tensorflow.OpDef.verify|verify} messages.\n         * @function encode\n         * @memberof tensorflow.OpDef\n         * @static\n         * @param {tensorflow.IOpDef} message OpDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OpDef.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.name);\n            if (message.inputArg != null && message.inputArg.length) for (var i = 0; i < message.inputArg.length; ++i) $root.tensorflow.OpDef.ArgDef.encode(message.inputArg[i], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.outputArg != null && message.outputArg.length) for (var i = 0; i < message.outputArg.length; ++i) $root.tensorflow.OpDef.ArgDef.encode(message.outputArg[i], writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.attr != null && message.attr.length) for (var i = 0; i < message.attr.length; ++i) $root.tensorflow.OpDef.AttrDef.encode(message.attr[i], writer.uint32( /* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.summary != null && message.hasOwnProperty(\"summary\")) writer.uint32( /* id 5, wireType 2 =*/42).string(message.summary);\n            if (message.description != null && message.hasOwnProperty(\"description\")) writer.uint32( /* id 6, wireType 2 =*/50).string(message.description);\n            if (message.deprecation != null && message.hasOwnProperty(\"deprecation\")) $root.tensorflow.OpDef.OpDeprecation.encode(message.deprecation, writer.uint32( /* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.isAggregate != null && message.hasOwnProperty(\"isAggregate\")) writer.uint32( /* id 16, wireType 0 =*/128).bool(message.isAggregate);\n            if (message.isStateful != null && message.hasOwnProperty(\"isStateful\")) writer.uint32( /* id 17, wireType 0 =*/136).bool(message.isStateful);\n            if (message.isCommutative != null && message.hasOwnProperty(\"isCommutative\")) writer.uint32( /* id 18, wireType 0 =*/144).bool(message.isCommutative);\n            if (message.allowsUninitializedInput != null && message.hasOwnProperty(\"allowsUninitializedInput\")) writer.uint32( /* id 19, wireType 0 =*/152).bool(message.allowsUninitializedInput);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OpDef message, length delimited. Does not implicitly {@link tensorflow.OpDef.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof tensorflow.OpDef\n         * @static\n         * @param {tensorflow.IOpDef} message OpDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OpDef.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OpDef message from the specified reader or buffer.\n         * @function decode\n         * @memberof tensorflow.OpDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {tensorflow.OpDef} OpDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OpDef.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n                message = new $root.tensorflow.OpDef();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.name = reader.string();\n                        break;\n                    case 2:\n                        if (!(message.inputArg && message.inputArg.length)) message.inputArg = [];\n                        message.inputArg.push($root.tensorflow.OpDef.ArgDef.decode(reader, reader.uint32()));\n                        break;\n                    case 3:\n                        if (!(message.outputArg && message.outputArg.length)) message.outputArg = [];\n                        message.outputArg.push($root.tensorflow.OpDef.ArgDef.decode(reader, reader.uint32()));\n                        break;\n                    case 4:\n                        if (!(message.attr && message.attr.length)) message.attr = [];\n                        message.attr.push($root.tensorflow.OpDef.AttrDef.decode(reader, reader.uint32()));\n                        break;\n                    case 8:\n                        message.deprecation = $root.tensorflow.OpDef.OpDeprecation.decode(reader, reader.uint32());\n                        break;\n                    case 5:\n                        message.summary = reader.string();\n                        break;\n                    case 6:\n                        message.description = reader.string();\n                        break;\n                    case 18:\n                        message.isCommutative = reader.bool();\n                        break;\n                    case 16:\n                        message.isAggregate = reader.bool();\n                        break;\n                    case 17:\n                        message.isStateful = reader.bool();\n                        break;\n                    case 19:\n                        message.allowsUninitializedInput = reader.bool();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OpDef message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof tensorflow.OpDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {tensorflow.OpDef} OpDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OpDef.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OpDef message.\n         * @function verify\n         * @memberof tensorflow.OpDef\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OpDef.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\")) if (!$util.isString(message.name)) return \"name: string expected\";\n            if (message.inputArg != null && message.hasOwnProperty(\"inputArg\")) {\n                if (!Array.isArray(message.inputArg)) return \"inputArg: array expected\";\n                for (var i = 0; i < message.inputArg.length; ++i) {\n                    var error = $root.tensorflow.OpDef.ArgDef.verify(message.inputArg[i]);\n                    if (error) return \"inputArg.\" + error;\n                }\n            }\n            if (message.outputArg != null && message.hasOwnProperty(\"outputArg\")) {\n                if (!Array.isArray(message.outputArg)) return \"outputArg: array expected\";\n                for (var i = 0; i < message.outputArg.length; ++i) {\n                    var error = $root.tensorflow.OpDef.ArgDef.verify(message.outputArg[i]);\n                    if (error) return \"outputArg.\" + error;\n                }\n            }\n            if (message.attr != null && message.hasOwnProperty(\"attr\")) {\n                if (!Array.isArray(message.attr)) return \"attr: array expected\";\n                for (var i = 0; i < message.attr.length; ++i) {\n                    var error = $root.tensorflow.OpDef.AttrDef.verify(message.attr[i]);\n                    if (error) return \"attr.\" + error;\n                }\n            }\n            if (message.deprecation != null && message.hasOwnProperty(\"deprecation\")) {\n                var error = $root.tensorflow.OpDef.OpDeprecation.verify(message.deprecation);\n                if (error) return \"deprecation.\" + error;\n            }\n            if (message.summary != null && message.hasOwnProperty(\"summary\")) if (!$util.isString(message.summary)) return \"summary: string expected\";\n            if (message.description != null && message.hasOwnProperty(\"description\")) if (!$util.isString(message.description)) return \"description: string expected\";\n            if (message.isCommutative != null && message.hasOwnProperty(\"isCommutative\")) if (typeof message.isCommutative !== \"boolean\") return \"isCommutative: boolean expected\";\n            if (message.isAggregate != null && message.hasOwnProperty(\"isAggregate\")) if (typeof message.isAggregate !== \"boolean\") return \"isAggregate: boolean expected\";\n            if (message.isStateful != null && message.hasOwnProperty(\"isStateful\")) if (typeof message.isStateful !== \"boolean\") return \"isStateful: boolean expected\";\n            if (message.allowsUninitializedInput != null && message.hasOwnProperty(\"allowsUninitializedInput\")) if (typeof message.allowsUninitializedInput !== \"boolean\") return \"allowsUninitializedInput: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OpDef message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof tensorflow.OpDef\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {tensorflow.OpDef} OpDef\n         */\n        OpDef.fromObject = function fromObject(object) {\n            if (object instanceof $root.tensorflow.OpDef) return object;\n            var message = new $root.tensorflow.OpDef();\n            if (object.name != null) message.name = String(object.name);\n            if (object.inputArg) {\n                if (!Array.isArray(object.inputArg)) throw TypeError(\".tensorflow.OpDef.inputArg: array expected\");\n                message.inputArg = [];\n                for (var i = 0; i < object.inputArg.length; ++i) {\n                    if (typeof object.inputArg[i] !== \"object\") throw TypeError(\".tensorflow.OpDef.inputArg: object expected\");\n                    message.inputArg[i] = $root.tensorflow.OpDef.ArgDef.fromObject(object.inputArg[i]);\n                }\n            }\n            if (object.outputArg) {\n                if (!Array.isArray(object.outputArg)) throw TypeError(\".tensorflow.OpDef.outputArg: array expected\");\n                message.outputArg = [];\n                for (var i = 0; i < object.outputArg.length; ++i) {\n                    if (typeof object.outputArg[i] !== \"object\") throw TypeError(\".tensorflow.OpDef.outputArg: object expected\");\n                    message.outputArg[i] = $root.tensorflow.OpDef.ArgDef.fromObject(object.outputArg[i]);\n                }\n            }\n            if (object.attr) {\n                if (!Array.isArray(object.attr)) throw TypeError(\".tensorflow.OpDef.attr: array expected\");\n                message.attr = [];\n                for (var i = 0; i < object.attr.length; ++i) {\n                    if (typeof object.attr[i] !== \"object\") throw TypeError(\".tensorflow.OpDef.attr: object expected\");\n                    message.attr[i] = $root.tensorflow.OpDef.AttrDef.fromObject(object.attr[i]);\n                }\n            }\n            if (object.deprecation != null) {\n                if (typeof object.deprecation !== \"object\") throw TypeError(\".tensorflow.OpDef.deprecation: object expected\");\n                message.deprecation = $root.tensorflow.OpDef.OpDeprecation.fromObject(object.deprecation);\n            }\n            if (object.summary != null) message.summary = String(object.summary);\n            if (object.description != null) message.description = String(object.description);\n            if (object.isCommutative != null) message.isCommutative = Boolean(object.isCommutative);\n            if (object.isAggregate != null) message.isAggregate = Boolean(object.isAggregate);\n            if (object.isStateful != null) message.isStateful = Boolean(object.isStateful);\n            if (object.allowsUninitializedInput != null) message.allowsUninitializedInput = Boolean(object.allowsUninitializedInput);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OpDef message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof tensorflow.OpDef\n         * @static\n         * @param {tensorflow.OpDef} message OpDef\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OpDef.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.inputArg = [];\n                object.outputArg = [];\n                object.attr = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.summary = \"\";\n                object.description = \"\";\n                object.deprecation = null;\n                object.isAggregate = false;\n                object.isStateful = false;\n                object.isCommutative = false;\n                object.allowsUninitializedInput = false;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\")) object.name = message.name;\n            if (message.inputArg && message.inputArg.length) {\n                object.inputArg = [];\n                for (var j = 0; j < message.inputArg.length; ++j) object.inputArg[j] = $root.tensorflow.OpDef.ArgDef.toObject(message.inputArg[j], options);\n            }\n            if (message.outputArg && message.outputArg.length) {\n                object.outputArg = [];\n                for (var j = 0; j < message.outputArg.length; ++j) object.outputArg[j] = $root.tensorflow.OpDef.ArgDef.toObject(message.outputArg[j], options);\n            }\n            if (message.attr && message.attr.length) {\n                object.attr = [];\n                for (var j = 0; j < message.attr.length; ++j) object.attr[j] = $root.tensorflow.OpDef.AttrDef.toObject(message.attr[j], options);\n            }\n            if (message.summary != null && message.hasOwnProperty(\"summary\")) object.summary = message.summary;\n            if (message.description != null && message.hasOwnProperty(\"description\")) object.description = message.description;\n            if (message.deprecation != null && message.hasOwnProperty(\"deprecation\")) object.deprecation = $root.tensorflow.OpDef.OpDeprecation.toObject(message.deprecation, options);\n            if (message.isAggregate != null && message.hasOwnProperty(\"isAggregate\")) object.isAggregate = message.isAggregate;\n            if (message.isStateful != null && message.hasOwnProperty(\"isStateful\")) object.isStateful = message.isStateful;\n            if (message.isCommutative != null && message.hasOwnProperty(\"isCommutative\")) object.isCommutative = message.isCommutative;\n            if (message.allowsUninitializedInput != null && message.hasOwnProperty(\"allowsUninitializedInput\")) object.allowsUninitializedInput = message.allowsUninitializedInput;\n            return object;\n        };\n\n        /**\n         * Converts this OpDef to JSON.\n         * @function toJSON\n         * @memberof tensorflow.OpDef\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OpDef.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        OpDef.ArgDef = function () {\n\n            /**\n             * Properties of an ArgDef.\n             * @memberof tensorflow.OpDef\n             * @interface IArgDef\n             * @property {string|null} [name] ArgDef name\n             * @property {string|null} [description] ArgDef description\n             * @property {tensorflow.DataType|null} [type] ArgDef type\n             * @property {string|null} [typeAttr] ArgDef typeAttr\n             * @property {string|null} [numberAttr] ArgDef numberAttr\n             * @property {string|null} [typeListAttr] ArgDef typeListAttr\n             * @property {boolean|null} [isRef] ArgDef isRef\n             */\n\n            /**\n             * Constructs a new ArgDef.\n             * @memberof tensorflow.OpDef\n             * @classdesc Represents an ArgDef.\n             * @implements IArgDef\n             * @constructor\n             * @param {tensorflow.OpDef.IArgDef=} [properties] Properties to set\n             */\n            function ArgDef(properties) {\n                if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ArgDef name.\n             * @member {string} name\n             * @memberof tensorflow.OpDef.ArgDef\n             * @instance\n             */\n            ArgDef.prototype.name = \"\";\n\n            /**\n             * ArgDef description.\n             * @member {string} description\n             * @memberof tensorflow.OpDef.ArgDef\n             * @instance\n             */\n            ArgDef.prototype.description = \"\";\n\n            /**\n             * ArgDef type.\n             * @member {tensorflow.DataType} type\n             * @memberof tensorflow.OpDef.ArgDef\n             * @instance\n             */\n            ArgDef.prototype.type = 0;\n\n            /**\n             * ArgDef typeAttr.\n             * @member {string} typeAttr\n             * @memberof tensorflow.OpDef.ArgDef\n             * @instance\n             */\n            ArgDef.prototype.typeAttr = \"\";\n\n            /**\n             * ArgDef numberAttr.\n             * @member {string} numberAttr\n             * @memberof tensorflow.OpDef.ArgDef\n             * @instance\n             */\n            ArgDef.prototype.numberAttr = \"\";\n\n            /**\n             * ArgDef typeListAttr.\n             * @member {string} typeListAttr\n             * @memberof tensorflow.OpDef.ArgDef\n             * @instance\n             */\n            ArgDef.prototype.typeListAttr = \"\";\n\n            /**\n             * ArgDef isRef.\n             * @member {boolean} isRef\n             * @memberof tensorflow.OpDef.ArgDef\n             * @instance\n             */\n            ArgDef.prototype.isRef = false;\n\n            /**\n             * Creates a new ArgDef instance using the specified properties.\n             * @function create\n             * @memberof tensorflow.OpDef.ArgDef\n             * @static\n             * @param {tensorflow.OpDef.IArgDef=} [properties] Properties to set\n             * @returns {tensorflow.OpDef.ArgDef} ArgDef instance\n             */\n            ArgDef.create = function create(properties) {\n                return new ArgDef(properties);\n            };\n\n            /**\n             * Encodes the specified ArgDef message. Does not implicitly {@link tensorflow.OpDef.ArgDef.verify|verify} messages.\n             * @function encode\n             * @memberof tensorflow.OpDef.ArgDef\n             * @static\n             * @param {tensorflow.OpDef.IArgDef} message ArgDef message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ArgDef.encode = function encode(message, writer) {\n                if (!writer) writer = $Writer.create();\n                if (message.name != null && message.hasOwnProperty(\"name\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.name);\n                if (message.description != null && message.hasOwnProperty(\"description\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.description);\n                if (message.type != null && message.hasOwnProperty(\"type\")) writer.uint32( /* id 3, wireType 0 =*/24).int32(message.type);\n                if (message.typeAttr != null && message.hasOwnProperty(\"typeAttr\")) writer.uint32( /* id 4, wireType 2 =*/34).string(message.typeAttr);\n                if (message.numberAttr != null && message.hasOwnProperty(\"numberAttr\")) writer.uint32( /* id 5, wireType 2 =*/42).string(message.numberAttr);\n                if (message.typeListAttr != null && message.hasOwnProperty(\"typeListAttr\")) writer.uint32( /* id 6, wireType 2 =*/50).string(message.typeListAttr);\n                if (message.isRef != null && message.hasOwnProperty(\"isRef\")) writer.uint32( /* id 16, wireType 0 =*/128).bool(message.isRef);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ArgDef message, length delimited. Does not implicitly {@link tensorflow.OpDef.ArgDef.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof tensorflow.OpDef.ArgDef\n             * @static\n             * @param {tensorflow.OpDef.IArgDef} message ArgDef message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ArgDef.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an ArgDef message from the specified reader or buffer.\n             * @function decode\n             * @memberof tensorflow.OpDef.ArgDef\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {tensorflow.OpDef.ArgDef} ArgDef\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ArgDef.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length,\n                    message = new $root.tensorflow.OpDef.ArgDef();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            message.name = reader.string();\n                            break;\n                        case 2:\n                            message.description = reader.string();\n                            break;\n                        case 3:\n                            message.type = reader.int32();\n                            break;\n                        case 4:\n                            message.typeAttr = reader.string();\n                            break;\n                        case 5:\n                            message.numberAttr = reader.string();\n                            break;\n                        case 6:\n                            message.typeListAttr = reader.string();\n                            break;\n                        case 16:\n                            message.isRef = reader.bool();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an ArgDef message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof tensorflow.OpDef.ArgDef\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {tensorflow.OpDef.ArgDef} ArgDef\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ArgDef.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an ArgDef message.\n             * @function verify\n             * @memberof tensorflow.OpDef.ArgDef\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ArgDef.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null) return \"object expected\";\n                if (message.name != null && message.hasOwnProperty(\"name\")) if (!$util.isString(message.name)) return \"name: string expected\";\n                if (message.description != null && message.hasOwnProperty(\"description\")) if (!$util.isString(message.description)) return \"description: string expected\";\n                if (message.type != null && message.hasOwnProperty(\"type\")) switch (message.type) {\n                    default:\n                        return \"type: enum value expected\";\n                    case 0:\n                    case 1:\n                    case 2:\n                    case 3:\n                    case 4:\n                    case 5:\n                    case 6:\n                    case 7:\n                    case 8:\n                    case 9:\n                    case 10:\n                    case 11:\n                    case 12:\n                    case 13:\n                    case 14:\n                    case 101:\n                    case 102:\n                    case 103:\n                    case 104:\n                    case 105:\n                    case 106:\n                    case 107:\n                    case 108:\n                    case 109:\n                    case 110:\n                    case 111:\n                    case 112:\n                    case 113:\n                    case 114:\n                        break;\n                }\n                if (message.typeAttr != null && message.hasOwnProperty(\"typeAttr\")) if (!$util.isString(message.typeAttr)) return \"typeAttr: string expected\";\n                if (message.numberAttr != null && message.hasOwnProperty(\"numberAttr\")) if (!$util.isString(message.numberAttr)) return \"numberAttr: string expected\";\n                if (message.typeListAttr != null && message.hasOwnProperty(\"typeListAttr\")) if (!$util.isString(message.typeListAttr)) return \"typeListAttr: string expected\";\n                if (message.isRef != null && message.hasOwnProperty(\"isRef\")) if (typeof message.isRef !== \"boolean\") return \"isRef: boolean expected\";\n                return null;\n            };\n\n            /**\n             * Creates an ArgDef message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof tensorflow.OpDef.ArgDef\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {tensorflow.OpDef.ArgDef} ArgDef\n             */\n            ArgDef.fromObject = function fromObject(object) {\n                if (object instanceof $root.tensorflow.OpDef.ArgDef) return object;\n                var message = new $root.tensorflow.OpDef.ArgDef();\n                if (object.name != null) message.name = String(object.name);\n                if (object.description != null) message.description = String(object.description);\n                switch (object.type) {\n                    case \"DT_INVALID\":\n                    case 0:\n                        message.type = 0;\n                        break;\n                    case \"DT_FLOAT\":\n                    case 1:\n                        message.type = 1;\n                        break;\n                    case \"DT_DOUBLE\":\n                    case 2:\n                        message.type = 2;\n                        break;\n                    case \"DT_INT32\":\n                    case 3:\n                        message.type = 3;\n                        break;\n                    case \"DT_UINT8\":\n                    case 4:\n                        message.type = 4;\n                        break;\n                    case \"DT_INT16\":\n                    case 5:\n                        message.type = 5;\n                        break;\n                    case \"DT_INT8\":\n                    case 6:\n                        message.type = 6;\n                        break;\n                    case \"DT_STRING\":\n                    case 7:\n                        message.type = 7;\n                        break;\n                    case \"DT_COMPLEX64\":\n                    case 8:\n                        message.type = 8;\n                        break;\n                    case \"DT_INT64\":\n                    case 9:\n                        message.type = 9;\n                        break;\n                    case \"DT_BOOL\":\n                    case 10:\n                        message.type = 10;\n                        break;\n                    case \"DT_QINT8\":\n                    case 11:\n                        message.type = 11;\n                        break;\n                    case \"DT_QUINT8\":\n                    case 12:\n                        message.type = 12;\n                        break;\n                    case \"DT_QINT32\":\n                    case 13:\n                        message.type = 13;\n                        break;\n                    case \"DT_BFLOAT16\":\n                    case 14:\n                        message.type = 14;\n                        break;\n                    case \"DT_FLOAT_REF\":\n                    case 101:\n                        message.type = 101;\n                        break;\n                    case \"DT_DOUBLE_REF\":\n                    case 102:\n                        message.type = 102;\n                        break;\n                    case \"DT_INT32_REF\":\n                    case 103:\n                        message.type = 103;\n                        break;\n                    case \"DT_UINT8_REF\":\n                    case 104:\n                        message.type = 104;\n                        break;\n                    case \"DT_INT16_REF\":\n                    case 105:\n                        message.type = 105;\n                        break;\n                    case \"DT_INT8_REF\":\n                    case 106:\n                        message.type = 106;\n                        break;\n                    case \"DT_STRING_REF\":\n                    case 107:\n                        message.type = 107;\n                        break;\n                    case \"DT_COMPLEX64_REF\":\n                    case 108:\n                        message.type = 108;\n                        break;\n                    case \"DT_INT64_REF\":\n                    case 109:\n                        message.type = 109;\n                        break;\n                    case \"DT_BOOL_REF\":\n                    case 110:\n                        message.type = 110;\n                        break;\n                    case \"DT_QINT8_REF\":\n                    case 111:\n                        message.type = 111;\n                        break;\n                    case \"DT_QUINT8_REF\":\n                    case 112:\n                        message.type = 112;\n                        break;\n                    case \"DT_QINT32_REF\":\n                    case 113:\n                        message.type = 113;\n                        break;\n                    case \"DT_BFLOAT16_REF\":\n                    case 114:\n                        message.type = 114;\n                        break;\n                }\n                if (object.typeAttr != null) message.typeAttr = String(object.typeAttr);\n                if (object.numberAttr != null) message.numberAttr = String(object.numberAttr);\n                if (object.typeListAttr != null) message.typeListAttr = String(object.typeListAttr);\n                if (object.isRef != null) message.isRef = Boolean(object.isRef);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an ArgDef message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof tensorflow.OpDef.ArgDef\n             * @static\n             * @param {tensorflow.OpDef.ArgDef} message ArgDef\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ArgDef.toObject = function toObject(message, options) {\n                if (!options) options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.name = \"\";\n                    object.description = \"\";\n                    object.type = options.enums === String ? \"DT_INVALID\" : 0;\n                    object.typeAttr = \"\";\n                    object.numberAttr = \"\";\n                    object.typeListAttr = \"\";\n                    object.isRef = false;\n                }\n                if (message.name != null && message.hasOwnProperty(\"name\")) object.name = message.name;\n                if (message.description != null && message.hasOwnProperty(\"description\")) object.description = message.description;\n                if (message.type != null && message.hasOwnProperty(\"type\")) object.type = options.enums === String ? $root.tensorflow.DataType[message.type] : message.type;\n                if (message.typeAttr != null && message.hasOwnProperty(\"typeAttr\")) object.typeAttr = message.typeAttr;\n                if (message.numberAttr != null && message.hasOwnProperty(\"numberAttr\")) object.numberAttr = message.numberAttr;\n                if (message.typeListAttr != null && message.hasOwnProperty(\"typeListAttr\")) object.typeListAttr = message.typeListAttr;\n                if (message.isRef != null && message.hasOwnProperty(\"isRef\")) object.isRef = message.isRef;\n                return object;\n            };\n\n            /**\n             * Converts this ArgDef to JSON.\n             * @function toJSON\n             * @memberof tensorflow.OpDef.ArgDef\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ArgDef.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ArgDef;\n        }();\n\n        OpDef.AttrDef = function () {\n\n            /**\n             * Properties of an AttrDef.\n             * @memberof tensorflow.OpDef\n             * @interface IAttrDef\n             * @property {string|null} [name] AttrDef name\n             * @property {string|null} [type] AttrDef type\n             * @property {tensorflow.IAttrValue|null} [defaultValue] AttrDef defaultValue\n             * @property {string|null} [description] AttrDef description\n             * @property {boolean|null} [hasMinimum] AttrDef hasMinimum\n             * @property {number|Long|null} [minimum] AttrDef minimum\n             * @property {tensorflow.IAttrValue|null} [allowedValues] AttrDef allowedValues\n             */\n\n            /**\n             * Constructs a new AttrDef.\n             * @memberof tensorflow.OpDef\n             * @classdesc Represents an AttrDef.\n             * @implements IAttrDef\n             * @constructor\n             * @param {tensorflow.OpDef.IAttrDef=} [properties] Properties to set\n             */\n            function AttrDef(properties) {\n                if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * AttrDef name.\n             * @member {string} name\n             * @memberof tensorflow.OpDef.AttrDef\n             * @instance\n             */\n            AttrDef.prototype.name = \"\";\n\n            /**\n             * AttrDef type.\n             * @member {string} type\n             * @memberof tensorflow.OpDef.AttrDef\n             * @instance\n             */\n            AttrDef.prototype.type = \"\";\n\n            /**\n             * AttrDef defaultValue.\n             * @member {tensorflow.IAttrValue|null|undefined} defaultValue\n             * @memberof tensorflow.OpDef.AttrDef\n             * @instance\n             */\n            AttrDef.prototype.defaultValue = null;\n\n            /**\n             * AttrDef description.\n             * @member {string} description\n             * @memberof tensorflow.OpDef.AttrDef\n             * @instance\n             */\n            AttrDef.prototype.description = \"\";\n\n            /**\n             * AttrDef hasMinimum.\n             * @member {boolean} hasMinimum\n             * @memberof tensorflow.OpDef.AttrDef\n             * @instance\n             */\n            AttrDef.prototype.hasMinimum = false;\n\n            /**\n             * AttrDef minimum.\n             * @member {number|Long} minimum\n             * @memberof tensorflow.OpDef.AttrDef\n             * @instance\n             */\n            AttrDef.prototype.minimum = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n            /**\n             * AttrDef allowedValues.\n             * @member {tensorflow.IAttrValue|null|undefined} allowedValues\n             * @memberof tensorflow.OpDef.AttrDef\n             * @instance\n             */\n            AttrDef.prototype.allowedValues = null;\n\n            /**\n             * Creates a new AttrDef instance using the specified properties.\n             * @function create\n             * @memberof tensorflow.OpDef.AttrDef\n             * @static\n             * @param {tensorflow.OpDef.IAttrDef=} [properties] Properties to set\n             * @returns {tensorflow.OpDef.AttrDef} AttrDef instance\n             */\n            AttrDef.create = function create(properties) {\n                return new AttrDef(properties);\n            };\n\n            /**\n             * Encodes the specified AttrDef message. Does not implicitly {@link tensorflow.OpDef.AttrDef.verify|verify} messages.\n             * @function encode\n             * @memberof tensorflow.OpDef.AttrDef\n             * @static\n             * @param {tensorflow.OpDef.IAttrDef} message AttrDef message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            AttrDef.encode = function encode(message, writer) {\n                if (!writer) writer = $Writer.create();\n                if (message.name != null && message.hasOwnProperty(\"name\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.name);\n                if (message.type != null && message.hasOwnProperty(\"type\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.type);\n                if (message.defaultValue != null && message.hasOwnProperty(\"defaultValue\")) $root.tensorflow.AttrValue.encode(message.defaultValue, writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n                if (message.description != null && message.hasOwnProperty(\"description\")) writer.uint32( /* id 4, wireType 2 =*/34).string(message.description);\n                if (message.hasMinimum != null && message.hasOwnProperty(\"hasMinimum\")) writer.uint32( /* id 5, wireType 0 =*/40).bool(message.hasMinimum);\n                if (message.minimum != null && message.hasOwnProperty(\"minimum\")) writer.uint32( /* id 6, wireType 0 =*/48).int64(message.minimum);\n                if (message.allowedValues != null && message.hasOwnProperty(\"allowedValues\")) $root.tensorflow.AttrValue.encode(message.allowedValues, writer.uint32( /* id 7, wireType 2 =*/58).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified AttrDef message, length delimited. Does not implicitly {@link tensorflow.OpDef.AttrDef.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof tensorflow.OpDef.AttrDef\n             * @static\n             * @param {tensorflow.OpDef.IAttrDef} message AttrDef message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            AttrDef.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an AttrDef message from the specified reader or buffer.\n             * @function decode\n             * @memberof tensorflow.OpDef.AttrDef\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {tensorflow.OpDef.AttrDef} AttrDef\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            AttrDef.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length,\n                    message = new $root.tensorflow.OpDef.AttrDef();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            message.name = reader.string();\n                            break;\n                        case 2:\n                            message.type = reader.string();\n                            break;\n                        case 3:\n                            message.defaultValue = $root.tensorflow.AttrValue.decode(reader, reader.uint32());\n                            break;\n                        case 4:\n                            message.description = reader.string();\n                            break;\n                        case 5:\n                            message.hasMinimum = reader.bool();\n                            break;\n                        case 6:\n                            message.minimum = reader.int64();\n                            break;\n                        case 7:\n                            message.allowedValues = $root.tensorflow.AttrValue.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an AttrDef message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof tensorflow.OpDef.AttrDef\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {tensorflow.OpDef.AttrDef} AttrDef\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            AttrDef.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an AttrDef message.\n             * @function verify\n             * @memberof tensorflow.OpDef.AttrDef\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            AttrDef.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null) return \"object expected\";\n                if (message.name != null && message.hasOwnProperty(\"name\")) if (!$util.isString(message.name)) return \"name: string expected\";\n                if (message.type != null && message.hasOwnProperty(\"type\")) if (!$util.isString(message.type)) return \"type: string expected\";\n                if (message.defaultValue != null && message.hasOwnProperty(\"defaultValue\")) {\n                    var error = $root.tensorflow.AttrValue.verify(message.defaultValue);\n                    if (error) return \"defaultValue.\" + error;\n                }\n                if (message.description != null && message.hasOwnProperty(\"description\")) if (!$util.isString(message.description)) return \"description: string expected\";\n                if (message.hasMinimum != null && message.hasOwnProperty(\"hasMinimum\")) if (typeof message.hasMinimum !== \"boolean\") return \"hasMinimum: boolean expected\";\n                if (message.minimum != null && message.hasOwnProperty(\"minimum\")) if (!$util.isInteger(message.minimum) && !(message.minimum && $util.isInteger(message.minimum.low) && $util.isInteger(message.minimum.high))) return \"minimum: integer|Long expected\";\n                if (message.allowedValues != null && message.hasOwnProperty(\"allowedValues\")) {\n                    var error = $root.tensorflow.AttrValue.verify(message.allowedValues);\n                    if (error) return \"allowedValues.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an AttrDef message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof tensorflow.OpDef.AttrDef\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {tensorflow.OpDef.AttrDef} AttrDef\n             */\n            AttrDef.fromObject = function fromObject(object) {\n                if (object instanceof $root.tensorflow.OpDef.AttrDef) return object;\n                var message = new $root.tensorflow.OpDef.AttrDef();\n                if (object.name != null) message.name = String(object.name);\n                if (object.type != null) message.type = String(object.type);\n                if (object.defaultValue != null) {\n                    if (typeof object.defaultValue !== \"object\") throw TypeError(\".tensorflow.OpDef.AttrDef.defaultValue: object expected\");\n                    message.defaultValue = $root.tensorflow.AttrValue.fromObject(object.defaultValue);\n                }\n                if (object.description != null) message.description = String(object.description);\n                if (object.hasMinimum != null) message.hasMinimum = Boolean(object.hasMinimum);\n                if (object.minimum != null) if ($util.Long) (message.minimum = $util.Long.fromValue(object.minimum)).unsigned = false;else if (typeof object.minimum === \"string\") message.minimum = parseInt(object.minimum, 10);else if (typeof object.minimum === \"number\") message.minimum = object.minimum;else if (typeof object.minimum === \"object\") message.minimum = new $util.LongBits(object.minimum.low >>> 0, object.minimum.high >>> 0).toNumber();\n                if (object.allowedValues != null) {\n                    if (typeof object.allowedValues !== \"object\") throw TypeError(\".tensorflow.OpDef.AttrDef.allowedValues: object expected\");\n                    message.allowedValues = $root.tensorflow.AttrValue.fromObject(object.allowedValues);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an AttrDef message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof tensorflow.OpDef.AttrDef\n             * @static\n             * @param {tensorflow.OpDef.AttrDef} message AttrDef\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            AttrDef.toObject = function toObject(message, options) {\n                if (!options) options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.name = \"\";\n                    object.type = \"\";\n                    object.defaultValue = null;\n                    object.description = \"\";\n                    object.hasMinimum = false;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.minimum = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else object.minimum = options.longs === String ? \"0\" : 0;\n                    object.allowedValues = null;\n                }\n                if (message.name != null && message.hasOwnProperty(\"name\")) object.name = message.name;\n                if (message.type != null && message.hasOwnProperty(\"type\")) object.type = message.type;\n                if (message.defaultValue != null && message.hasOwnProperty(\"defaultValue\")) object.defaultValue = $root.tensorflow.AttrValue.toObject(message.defaultValue, options);\n                if (message.description != null && message.hasOwnProperty(\"description\")) object.description = message.description;\n                if (message.hasMinimum != null && message.hasOwnProperty(\"hasMinimum\")) object.hasMinimum = message.hasMinimum;\n                if (message.minimum != null && message.hasOwnProperty(\"minimum\")) if (typeof message.minimum === \"number\") object.minimum = options.longs === String ? String(message.minimum) : message.minimum;else object.minimum = options.longs === String ? $util.Long.prototype.toString.call(message.minimum) : options.longs === Number ? new $util.LongBits(message.minimum.low >>> 0, message.minimum.high >>> 0).toNumber() : message.minimum;\n                if (message.allowedValues != null && message.hasOwnProperty(\"allowedValues\")) object.allowedValues = $root.tensorflow.AttrValue.toObject(message.allowedValues, options);\n                return object;\n            };\n\n            /**\n             * Converts this AttrDef to JSON.\n             * @function toJSON\n             * @memberof tensorflow.OpDef.AttrDef\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            AttrDef.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return AttrDef;\n        }();\n\n        OpDef.OpDeprecation = function () {\n\n            /**\n             * Properties of an OpDeprecation.\n             * @memberof tensorflow.OpDef\n             * @interface IOpDeprecation\n             * @property {number|null} [version] OpDeprecation version\n             * @property {string|null} [explanation] OpDeprecation explanation\n             */\n\n            /**\n             * Constructs a new OpDeprecation.\n             * @memberof tensorflow.OpDef\n             * @classdesc Represents an OpDeprecation.\n             * @implements IOpDeprecation\n             * @constructor\n             * @param {tensorflow.OpDef.IOpDeprecation=} [properties] Properties to set\n             */\n            function OpDeprecation(properties) {\n                if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * OpDeprecation version.\n             * @member {number} version\n             * @memberof tensorflow.OpDef.OpDeprecation\n             * @instance\n             */\n            OpDeprecation.prototype.version = 0;\n\n            /**\n             * OpDeprecation explanation.\n             * @member {string} explanation\n             * @memberof tensorflow.OpDef.OpDeprecation\n             * @instance\n             */\n            OpDeprecation.prototype.explanation = \"\";\n\n            /**\n             * Creates a new OpDeprecation instance using the specified properties.\n             * @function create\n             * @memberof tensorflow.OpDef.OpDeprecation\n             * @static\n             * @param {tensorflow.OpDef.IOpDeprecation=} [properties] Properties to set\n             * @returns {tensorflow.OpDef.OpDeprecation} OpDeprecation instance\n             */\n            OpDeprecation.create = function create(properties) {\n                return new OpDeprecation(properties);\n            };\n\n            /**\n             * Encodes the specified OpDeprecation message. Does not implicitly {@link tensorflow.OpDef.OpDeprecation.verify|verify} messages.\n             * @function encode\n             * @memberof tensorflow.OpDef.OpDeprecation\n             * @static\n             * @param {tensorflow.OpDef.IOpDeprecation} message OpDeprecation message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            OpDeprecation.encode = function encode(message, writer) {\n                if (!writer) writer = $Writer.create();\n                if (message.version != null && message.hasOwnProperty(\"version\")) writer.uint32( /* id 1, wireType 0 =*/8).int32(message.version);\n                if (message.explanation != null && message.hasOwnProperty(\"explanation\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.explanation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified OpDeprecation message, length delimited. Does not implicitly {@link tensorflow.OpDef.OpDeprecation.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof tensorflow.OpDef.OpDeprecation\n             * @static\n             * @param {tensorflow.OpDef.IOpDeprecation} message OpDeprecation message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            OpDeprecation.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an OpDeprecation message from the specified reader or buffer.\n             * @function decode\n             * @memberof tensorflow.OpDef.OpDeprecation\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {tensorflow.OpDef.OpDeprecation} OpDeprecation\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            OpDeprecation.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length,\n                    message = new $root.tensorflow.OpDef.OpDeprecation();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            message.version = reader.int32();\n                            break;\n                        case 2:\n                            message.explanation = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an OpDeprecation message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof tensorflow.OpDef.OpDeprecation\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {tensorflow.OpDef.OpDeprecation} OpDeprecation\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            OpDeprecation.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an OpDeprecation message.\n             * @function verify\n             * @memberof tensorflow.OpDef.OpDeprecation\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            OpDeprecation.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null) return \"object expected\";\n                if (message.version != null && message.hasOwnProperty(\"version\")) if (!$util.isInteger(message.version)) return \"version: integer expected\";\n                if (message.explanation != null && message.hasOwnProperty(\"explanation\")) if (!$util.isString(message.explanation)) return \"explanation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates an OpDeprecation message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof tensorflow.OpDef.OpDeprecation\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {tensorflow.OpDef.OpDeprecation} OpDeprecation\n             */\n            OpDeprecation.fromObject = function fromObject(object) {\n                if (object instanceof $root.tensorflow.OpDef.OpDeprecation) return object;\n                var message = new $root.tensorflow.OpDef.OpDeprecation();\n                if (object.version != null) message.version = object.version | 0;\n                if (object.explanation != null) message.explanation = String(object.explanation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an OpDeprecation message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof tensorflow.OpDef.OpDeprecation\n             * @static\n             * @param {tensorflow.OpDef.OpDeprecation} message OpDeprecation\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            OpDeprecation.toObject = function toObject(message, options) {\n                if (!options) options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.version = 0;\n                    object.explanation = \"\";\n                }\n                if (message.version != null && message.hasOwnProperty(\"version\")) object.version = message.version;\n                if (message.explanation != null && message.hasOwnProperty(\"explanation\")) object.explanation = message.explanation;\n                return object;\n            };\n\n            /**\n             * Converts this OpDeprecation to JSON.\n             * @function toJSON\n             * @memberof tensorflow.OpDef.OpDeprecation\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            OpDeprecation.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return OpDeprecation;\n        }();\n\n        return OpDef;\n    }();\n\n    tensorflow.OpList = function () {\n\n        /**\n         * Properties of an OpList.\n         * @memberof tensorflow\n         * @interface IOpList\n         * @property {Array.<tensorflow.IOpDef>|null} [op] OpList op\n         */\n\n        /**\n         * Constructs a new OpList.\n         * @memberof tensorflow\n         * @classdesc Represents an OpList.\n         * @implements IOpList\n         * @constructor\n         * @param {tensorflow.IOpList=} [properties] Properties to set\n         */\n        function OpList(properties) {\n            this.op = [];\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OpList op.\n         * @member {Array.<tensorflow.IOpDef>} op\n         * @memberof tensorflow.OpList\n         * @instance\n         */\n        OpList.prototype.op = $util.emptyArray;\n\n        /**\n         * Creates a new OpList instance using the specified properties.\n         * @function create\n         * @memberof tensorflow.OpList\n         * @static\n         * @param {tensorflow.IOpList=} [properties] Properties to set\n         * @returns {tensorflow.OpList} OpList instance\n         */\n        OpList.create = function create(properties) {\n            return new OpList(properties);\n        };\n\n        /**\n         * Encodes the specified OpList message. Does not implicitly {@link tensorflow.OpList.verify|verify} messages.\n         * @function encode\n         * @memberof tensorflow.OpList\n         * @static\n         * @param {tensorflow.IOpList} message OpList message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OpList.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.op != null && message.op.length) for (var i = 0; i < message.op.length; ++i) $root.tensorflow.OpDef.encode(message.op[i], writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OpList message, length delimited. Does not implicitly {@link tensorflow.OpList.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof tensorflow.OpList\n         * @static\n         * @param {tensorflow.IOpList} message OpList message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OpList.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OpList message from the specified reader or buffer.\n         * @function decode\n         * @memberof tensorflow.OpList\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {tensorflow.OpList} OpList\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OpList.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n                message = new $root.tensorflow.OpList();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.op && message.op.length)) message.op = [];\n                        message.op.push($root.tensorflow.OpDef.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OpList message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof tensorflow.OpList\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {tensorflow.OpList} OpList\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OpList.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OpList message.\n         * @function verify\n         * @memberof tensorflow.OpList\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OpList.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            if (message.op != null && message.hasOwnProperty(\"op\")) {\n                if (!Array.isArray(message.op)) return \"op: array expected\";\n                for (var i = 0; i < message.op.length; ++i) {\n                    var error = $root.tensorflow.OpDef.verify(message.op[i]);\n                    if (error) return \"op.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an OpList message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof tensorflow.OpList\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {tensorflow.OpList} OpList\n         */\n        OpList.fromObject = function fromObject(object) {\n            if (object instanceof $root.tensorflow.OpList) return object;\n            var message = new $root.tensorflow.OpList();\n            if (object.op) {\n                if (!Array.isArray(object.op)) throw TypeError(\".tensorflow.OpList.op: array expected\");\n                message.op = [];\n                for (var i = 0; i < object.op.length; ++i) {\n                    if (typeof object.op[i] !== \"object\") throw TypeError(\".tensorflow.OpList.op: object expected\");\n                    message.op[i] = $root.tensorflow.OpDef.fromObject(object.op[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OpList message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof tensorflow.OpList\n         * @static\n         * @param {tensorflow.OpList} message OpList\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OpList.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (options.arrays || options.defaults) object.op = [];\n            if (message.op && message.op.length) {\n                object.op = [];\n                for (var j = 0; j < message.op.length; ++j) object.op[j] = $root.tensorflow.OpDef.toObject(message.op[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this OpList to JSON.\n         * @function toJSON\n         * @memberof tensorflow.OpList\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OpList.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OpList;\n    }();\n\n    tensorflow.MetaGraphDef = function () {\n\n        /**\n         * Properties of a MetaGraphDef.\n         * @memberof tensorflow\n         * @interface IMetaGraphDef\n         * @property {tensorflow.MetaGraphDef.IMetaInfoDef|null} [metaInfoDef] MetaGraphDef metaInfoDef\n         * @property {tensorflow.IGraphDef|null} [graphDef] MetaGraphDef graphDef\n         * @property {tensorflow.ISaverDef|null} [saverDef] MetaGraphDef saverDef\n         * @property {Object.<string,tensorflow.ICollectionDef>|null} [collectionDef] MetaGraphDef collectionDef\n         * @property {Object.<string,tensorflow.ISignatureDef>|null} [signatureDef] MetaGraphDef signatureDef\n         * @property {Array.<tensorflow.IAssetFileDef>|null} [assetFileDef] MetaGraphDef assetFileDef\n         */\n\n        /**\n         * Constructs a new MetaGraphDef.\n         * @memberof tensorflow\n         * @classdesc Represents a MetaGraphDef.\n         * @implements IMetaGraphDef\n         * @constructor\n         * @param {tensorflow.IMetaGraphDef=} [properties] Properties to set\n         */\n        function MetaGraphDef(properties) {\n            this.collectionDef = {};\n            this.signatureDef = {};\n            this.assetFileDef = [];\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * MetaGraphDef metaInfoDef.\n         * @member {tensorflow.MetaGraphDef.IMetaInfoDef|null|undefined} metaInfoDef\n         * @memberof tensorflow.MetaGraphDef\n         * @instance\n         */\n        MetaGraphDef.prototype.metaInfoDef = null;\n\n        /**\n         * MetaGraphDef graphDef.\n         * @member {tensorflow.IGraphDef|null|undefined} graphDef\n         * @memberof tensorflow.MetaGraphDef\n         * @instance\n         */\n        MetaGraphDef.prototype.graphDef = null;\n\n        /**\n         * MetaGraphDef saverDef.\n         * @member {tensorflow.ISaverDef|null|undefined} saverDef\n         * @memberof tensorflow.MetaGraphDef\n         * @instance\n         */\n        MetaGraphDef.prototype.saverDef = null;\n\n        /**\n         * MetaGraphDef collectionDef.\n         * @member {Object.<string,tensorflow.ICollectionDef>} collectionDef\n         * @memberof tensorflow.MetaGraphDef\n         * @instance\n         */\n        MetaGraphDef.prototype.collectionDef = $util.emptyObject;\n\n        /**\n         * MetaGraphDef signatureDef.\n         * @member {Object.<string,tensorflow.ISignatureDef>} signatureDef\n         * @memberof tensorflow.MetaGraphDef\n         * @instance\n         */\n        MetaGraphDef.prototype.signatureDef = $util.emptyObject;\n\n        /**\n         * MetaGraphDef assetFileDef.\n         * @member {Array.<tensorflow.IAssetFileDef>} assetFileDef\n         * @memberof tensorflow.MetaGraphDef\n         * @instance\n         */\n        MetaGraphDef.prototype.assetFileDef = $util.emptyArray;\n\n        /**\n         * Creates a new MetaGraphDef instance using the specified properties.\n         * @function create\n         * @memberof tensorflow.MetaGraphDef\n         * @static\n         * @param {tensorflow.IMetaGraphDef=} [properties] Properties to set\n         * @returns {tensorflow.MetaGraphDef} MetaGraphDef instance\n         */\n        MetaGraphDef.create = function create(properties) {\n            return new MetaGraphDef(properties);\n        };\n\n        /**\n         * Encodes the specified MetaGraphDef message. Does not implicitly {@link tensorflow.MetaGraphDef.verify|verify} messages.\n         * @function encode\n         * @memberof tensorflow.MetaGraphDef\n         * @static\n         * @param {tensorflow.IMetaGraphDef} message MetaGraphDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        MetaGraphDef.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.metaInfoDef != null && message.hasOwnProperty(\"metaInfoDef\")) $root.tensorflow.MetaGraphDef.MetaInfoDef.encode(message.metaInfoDef, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.graphDef != null && message.hasOwnProperty(\"graphDef\")) $root.tensorflow.GraphDef.encode(message.graphDef, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.saverDef != null && message.hasOwnProperty(\"saverDef\")) $root.tensorflow.SaverDef.encode(message.saverDef, writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.collectionDef != null && message.hasOwnProperty(\"collectionDef\")) for (var keys = Object.keys(message.collectionDef), i = 0; i < keys.length; ++i) {\n                writer.uint32( /* id 4, wireType 2 =*/34).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.tensorflow.CollectionDef.encode(message.collectionDef[keys[i]], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n            if (message.signatureDef != null && message.hasOwnProperty(\"signatureDef\")) for (var keys = Object.keys(message.signatureDef), i = 0; i < keys.length; ++i) {\n                writer.uint32( /* id 5, wireType 2 =*/42).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.tensorflow.SignatureDef.encode(message.signatureDef[keys[i]], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n            if (message.assetFileDef != null && message.assetFileDef.length) for (var i = 0; i < message.assetFileDef.length; ++i) $root.tensorflow.AssetFileDef.encode(message.assetFileDef[i], writer.uint32( /* id 6, wireType 2 =*/50).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified MetaGraphDef message, length delimited. Does not implicitly {@link tensorflow.MetaGraphDef.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof tensorflow.MetaGraphDef\n         * @static\n         * @param {tensorflow.IMetaGraphDef} message MetaGraphDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        MetaGraphDef.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a MetaGraphDef message from the specified reader or buffer.\n         * @function decode\n         * @memberof tensorflow.MetaGraphDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {tensorflow.MetaGraphDef} MetaGraphDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        MetaGraphDef.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n                message = new $root.tensorflow.MetaGraphDef(),\n                key;\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.metaInfoDef = $root.tensorflow.MetaGraphDef.MetaInfoDef.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.graphDef = $root.tensorflow.GraphDef.decode(reader, reader.uint32());\n                        break;\n                    case 3:\n                        message.saverDef = $root.tensorflow.SaverDef.decode(reader, reader.uint32());\n                        break;\n                    case 4:\n                        reader.skip().pos++;\n                        if (message.collectionDef === $util.emptyObject) message.collectionDef = {};\n                        key = reader.string();\n                        reader.pos++;\n                        message.collectionDef[key] = $root.tensorflow.CollectionDef.decode(reader, reader.uint32());\n                        break;\n                    case 5:\n                        reader.skip().pos++;\n                        if (message.signatureDef === $util.emptyObject) message.signatureDef = {};\n                        key = reader.string();\n                        reader.pos++;\n                        message.signatureDef[key] = $root.tensorflow.SignatureDef.decode(reader, reader.uint32());\n                        break;\n                    case 6:\n                        if (!(message.assetFileDef && message.assetFileDef.length)) message.assetFileDef = [];\n                        message.assetFileDef.push($root.tensorflow.AssetFileDef.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a MetaGraphDef message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof tensorflow.MetaGraphDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {tensorflow.MetaGraphDef} MetaGraphDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        MetaGraphDef.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a MetaGraphDef message.\n         * @function verify\n         * @memberof tensorflow.MetaGraphDef\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        MetaGraphDef.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            if (message.metaInfoDef != null && message.hasOwnProperty(\"metaInfoDef\")) {\n                var error = $root.tensorflow.MetaGraphDef.MetaInfoDef.verify(message.metaInfoDef);\n                if (error) return \"metaInfoDef.\" + error;\n            }\n            if (message.graphDef != null && message.hasOwnProperty(\"graphDef\")) {\n                var error = $root.tensorflow.GraphDef.verify(message.graphDef);\n                if (error) return \"graphDef.\" + error;\n            }\n            if (message.saverDef != null && message.hasOwnProperty(\"saverDef\")) {\n                var error = $root.tensorflow.SaverDef.verify(message.saverDef);\n                if (error) return \"saverDef.\" + error;\n            }\n            if (message.collectionDef != null && message.hasOwnProperty(\"collectionDef\")) {\n                if (!$util.isObject(message.collectionDef)) return \"collectionDef: object expected\";\n                var key = Object.keys(message.collectionDef);\n                for (var i = 0; i < key.length; ++i) {\n                    var error = $root.tensorflow.CollectionDef.verify(message.collectionDef[key[i]]);\n                    if (error) return \"collectionDef.\" + error;\n                }\n            }\n            if (message.signatureDef != null && message.hasOwnProperty(\"signatureDef\")) {\n                if (!$util.isObject(message.signatureDef)) return \"signatureDef: object expected\";\n                var key = Object.keys(message.signatureDef);\n                for (var i = 0; i < key.length; ++i) {\n                    var error = $root.tensorflow.SignatureDef.verify(message.signatureDef[key[i]]);\n                    if (error) return \"signatureDef.\" + error;\n                }\n            }\n            if (message.assetFileDef != null && message.hasOwnProperty(\"assetFileDef\")) {\n                if (!Array.isArray(message.assetFileDef)) return \"assetFileDef: array expected\";\n                for (var i = 0; i < message.assetFileDef.length; ++i) {\n                    var error = $root.tensorflow.AssetFileDef.verify(message.assetFileDef[i]);\n                    if (error) return \"assetFileDef.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a MetaGraphDef message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof tensorflow.MetaGraphDef\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {tensorflow.MetaGraphDef} MetaGraphDef\n         */\n        MetaGraphDef.fromObject = function fromObject(object) {\n            if (object instanceof $root.tensorflow.MetaGraphDef) return object;\n            var message = new $root.tensorflow.MetaGraphDef();\n            if (object.metaInfoDef != null) {\n                if (typeof object.metaInfoDef !== \"object\") throw TypeError(\".tensorflow.MetaGraphDef.metaInfoDef: object expected\");\n                message.metaInfoDef = $root.tensorflow.MetaGraphDef.MetaInfoDef.fromObject(object.metaInfoDef);\n            }\n            if (object.graphDef != null) {\n                if (typeof object.graphDef !== \"object\") throw TypeError(\".tensorflow.MetaGraphDef.graphDef: object expected\");\n                message.graphDef = $root.tensorflow.GraphDef.fromObject(object.graphDef);\n            }\n            if (object.saverDef != null) {\n                if (typeof object.saverDef !== \"object\") throw TypeError(\".tensorflow.MetaGraphDef.saverDef: object expected\");\n                message.saverDef = $root.tensorflow.SaverDef.fromObject(object.saverDef);\n            }\n            if (object.collectionDef) {\n                if (typeof object.collectionDef !== \"object\") throw TypeError(\".tensorflow.MetaGraphDef.collectionDef: object expected\");\n                message.collectionDef = {};\n                for (var keys = Object.keys(object.collectionDef), i = 0; i < keys.length; ++i) {\n                    if (typeof object.collectionDef[keys[i]] !== \"object\") throw TypeError(\".tensorflow.MetaGraphDef.collectionDef: object expected\");\n                    message.collectionDef[keys[i]] = $root.tensorflow.CollectionDef.fromObject(object.collectionDef[keys[i]]);\n                }\n            }\n            if (object.signatureDef) {\n                if (typeof object.signatureDef !== \"object\") throw TypeError(\".tensorflow.MetaGraphDef.signatureDef: object expected\");\n                message.signatureDef = {};\n                for (var keys = Object.keys(object.signatureDef), i = 0; i < keys.length; ++i) {\n                    if (typeof object.signatureDef[keys[i]] !== \"object\") throw TypeError(\".tensorflow.MetaGraphDef.signatureDef: object expected\");\n                    message.signatureDef[keys[i]] = $root.tensorflow.SignatureDef.fromObject(object.signatureDef[keys[i]]);\n                }\n            }\n            if (object.assetFileDef) {\n                if (!Array.isArray(object.assetFileDef)) throw TypeError(\".tensorflow.MetaGraphDef.assetFileDef: array expected\");\n                message.assetFileDef = [];\n                for (var i = 0; i < object.assetFileDef.length; ++i) {\n                    if (typeof object.assetFileDef[i] !== \"object\") throw TypeError(\".tensorflow.MetaGraphDef.assetFileDef: object expected\");\n                    message.assetFileDef[i] = $root.tensorflow.AssetFileDef.fromObject(object.assetFileDef[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a MetaGraphDef message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof tensorflow.MetaGraphDef\n         * @static\n         * @param {tensorflow.MetaGraphDef} message MetaGraphDef\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        MetaGraphDef.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (options.arrays || options.defaults) object.assetFileDef = [];\n            if (options.objects || options.defaults) {\n                object.collectionDef = {};\n                object.signatureDef = {};\n            }\n            if (options.defaults) {\n                object.metaInfoDef = null;\n                object.graphDef = null;\n                object.saverDef = null;\n            }\n            if (message.metaInfoDef != null && message.hasOwnProperty(\"metaInfoDef\")) object.metaInfoDef = $root.tensorflow.MetaGraphDef.MetaInfoDef.toObject(message.metaInfoDef, options);\n            if (message.graphDef != null && message.hasOwnProperty(\"graphDef\")) object.graphDef = $root.tensorflow.GraphDef.toObject(message.graphDef, options);\n            if (message.saverDef != null && message.hasOwnProperty(\"saverDef\")) object.saverDef = $root.tensorflow.SaverDef.toObject(message.saverDef, options);\n            var keys2;\n            if (message.collectionDef && (keys2 = Object.keys(message.collectionDef)).length) {\n                object.collectionDef = {};\n                for (var j = 0; j < keys2.length; ++j) object.collectionDef[keys2[j]] = $root.tensorflow.CollectionDef.toObject(message.collectionDef[keys2[j]], options);\n            }\n            if (message.signatureDef && (keys2 = Object.keys(message.signatureDef)).length) {\n                object.signatureDef = {};\n                for (var j = 0; j < keys2.length; ++j) object.signatureDef[keys2[j]] = $root.tensorflow.SignatureDef.toObject(message.signatureDef[keys2[j]], options);\n            }\n            if (message.assetFileDef && message.assetFileDef.length) {\n                object.assetFileDef = [];\n                for (var j = 0; j < message.assetFileDef.length; ++j) object.assetFileDef[j] = $root.tensorflow.AssetFileDef.toObject(message.assetFileDef[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this MetaGraphDef to JSON.\n         * @function toJSON\n         * @memberof tensorflow.MetaGraphDef\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        MetaGraphDef.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        MetaGraphDef.MetaInfoDef = function () {\n\n            /**\n             * Properties of a MetaInfoDef.\n             * @memberof tensorflow.MetaGraphDef\n             * @interface IMetaInfoDef\n             * @property {string|null} [metaGraphVersion] MetaInfoDef metaGraphVersion\n             * @property {tensorflow.IOpList|null} [strippedOpList] MetaInfoDef strippedOpList\n             * @property {tensorflow.IAny|null} [anyInfo] MetaInfoDef anyInfo\n             * @property {Array.<string>|null} [tags] MetaInfoDef tags\n             * @property {string|null} [tensorflowVersion] MetaInfoDef tensorflowVersion\n             * @property {string|null} [tensorflowGitVersion] MetaInfoDef tensorflowGitVersion\n             */\n\n            /**\n             * Constructs a new MetaInfoDef.\n             * @memberof tensorflow.MetaGraphDef\n             * @classdesc Represents a MetaInfoDef.\n             * @implements IMetaInfoDef\n             * @constructor\n             * @param {tensorflow.MetaGraphDef.IMetaInfoDef=} [properties] Properties to set\n             */\n            function MetaInfoDef(properties) {\n                this.tags = [];\n                if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * MetaInfoDef metaGraphVersion.\n             * @member {string} metaGraphVersion\n             * @memberof tensorflow.MetaGraphDef.MetaInfoDef\n             * @instance\n             */\n            MetaInfoDef.prototype.metaGraphVersion = \"\";\n\n            /**\n             * MetaInfoDef strippedOpList.\n             * @member {tensorflow.IOpList|null|undefined} strippedOpList\n             * @memberof tensorflow.MetaGraphDef.MetaInfoDef\n             * @instance\n             */\n            MetaInfoDef.prototype.strippedOpList = null;\n\n            /**\n             * MetaInfoDef anyInfo.\n             * @member {tensorflow.IAny|null|undefined} anyInfo\n             * @memberof tensorflow.MetaGraphDef.MetaInfoDef\n             * @instance\n             */\n            MetaInfoDef.prototype.anyInfo = null;\n\n            /**\n             * MetaInfoDef tags.\n             * @member {Array.<string>} tags\n             * @memberof tensorflow.MetaGraphDef.MetaInfoDef\n             * @instance\n             */\n            MetaInfoDef.prototype.tags = $util.emptyArray;\n\n            /**\n             * MetaInfoDef tensorflowVersion.\n             * @member {string} tensorflowVersion\n             * @memberof tensorflow.MetaGraphDef.MetaInfoDef\n             * @instance\n             */\n            MetaInfoDef.prototype.tensorflowVersion = \"\";\n\n            /**\n             * MetaInfoDef tensorflowGitVersion.\n             * @member {string} tensorflowGitVersion\n             * @memberof tensorflow.MetaGraphDef.MetaInfoDef\n             * @instance\n             */\n            MetaInfoDef.prototype.tensorflowGitVersion = \"\";\n\n            /**\n             * Creates a new MetaInfoDef instance using the specified properties.\n             * @function create\n             * @memberof tensorflow.MetaGraphDef.MetaInfoDef\n             * @static\n             * @param {tensorflow.MetaGraphDef.IMetaInfoDef=} [properties] Properties to set\n             * @returns {tensorflow.MetaGraphDef.MetaInfoDef} MetaInfoDef instance\n             */\n            MetaInfoDef.create = function create(properties) {\n                return new MetaInfoDef(properties);\n            };\n\n            /**\n             * Encodes the specified MetaInfoDef message. Does not implicitly {@link tensorflow.MetaGraphDef.MetaInfoDef.verify|verify} messages.\n             * @function encode\n             * @memberof tensorflow.MetaGraphDef.MetaInfoDef\n             * @static\n             * @param {tensorflow.MetaGraphDef.IMetaInfoDef} message MetaInfoDef message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            MetaInfoDef.encode = function encode(message, writer) {\n                if (!writer) writer = $Writer.create();\n                if (message.metaGraphVersion != null && message.hasOwnProperty(\"metaGraphVersion\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.metaGraphVersion);\n                if (message.strippedOpList != null && message.hasOwnProperty(\"strippedOpList\")) $root.tensorflow.OpList.encode(message.strippedOpList, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n                if (message.anyInfo != null && message.hasOwnProperty(\"anyInfo\")) $root.tensorflow.Any.encode(message.anyInfo, writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n                if (message.tags != null && message.tags.length) for (var i = 0; i < message.tags.length; ++i) writer.uint32( /* id 4, wireType 2 =*/34).string(message.tags[i]);\n                if (message.tensorflowVersion != null && message.hasOwnProperty(\"tensorflowVersion\")) writer.uint32( /* id 5, wireType 2 =*/42).string(message.tensorflowVersion);\n                if (message.tensorflowGitVersion != null && message.hasOwnProperty(\"tensorflowGitVersion\")) writer.uint32( /* id 6, wireType 2 =*/50).string(message.tensorflowGitVersion);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified MetaInfoDef message, length delimited. Does not implicitly {@link tensorflow.MetaGraphDef.MetaInfoDef.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof tensorflow.MetaGraphDef.MetaInfoDef\n             * @static\n             * @param {tensorflow.MetaGraphDef.IMetaInfoDef} message MetaInfoDef message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            MetaInfoDef.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a MetaInfoDef message from the specified reader or buffer.\n             * @function decode\n             * @memberof tensorflow.MetaGraphDef.MetaInfoDef\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {tensorflow.MetaGraphDef.MetaInfoDef} MetaInfoDef\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            MetaInfoDef.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length,\n                    message = new $root.tensorflow.MetaGraphDef.MetaInfoDef();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            message.metaGraphVersion = reader.string();\n                            break;\n                        case 2:\n                            message.strippedOpList = $root.tensorflow.OpList.decode(reader, reader.uint32());\n                            break;\n                        case 3:\n                            message.anyInfo = $root.tensorflow.Any.decode(reader, reader.uint32());\n                            break;\n                        case 4:\n                            if (!(message.tags && message.tags.length)) message.tags = [];\n                            message.tags.push(reader.string());\n                            break;\n                        case 5:\n                            message.tensorflowVersion = reader.string();\n                            break;\n                        case 6:\n                            message.tensorflowGitVersion = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a MetaInfoDef message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof tensorflow.MetaGraphDef.MetaInfoDef\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {tensorflow.MetaGraphDef.MetaInfoDef} MetaInfoDef\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            MetaInfoDef.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a MetaInfoDef message.\n             * @function verify\n             * @memberof tensorflow.MetaGraphDef.MetaInfoDef\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            MetaInfoDef.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null) return \"object expected\";\n                if (message.metaGraphVersion != null && message.hasOwnProperty(\"metaGraphVersion\")) if (!$util.isString(message.metaGraphVersion)) return \"metaGraphVersion: string expected\";\n                if (message.strippedOpList != null && message.hasOwnProperty(\"strippedOpList\")) {\n                    var error = $root.tensorflow.OpList.verify(message.strippedOpList);\n                    if (error) return \"strippedOpList.\" + error;\n                }\n                if (message.anyInfo != null && message.hasOwnProperty(\"anyInfo\")) {\n                    var error = $root.tensorflow.Any.verify(message.anyInfo);\n                    if (error) return \"anyInfo.\" + error;\n                }\n                if (message.tags != null && message.hasOwnProperty(\"tags\")) {\n                    if (!Array.isArray(message.tags)) return \"tags: array expected\";\n                    for (var i = 0; i < message.tags.length; ++i) if (!$util.isString(message.tags[i])) return \"tags: string[] expected\";\n                }\n                if (message.tensorflowVersion != null && message.hasOwnProperty(\"tensorflowVersion\")) if (!$util.isString(message.tensorflowVersion)) return \"tensorflowVersion: string expected\";\n                if (message.tensorflowGitVersion != null && message.hasOwnProperty(\"tensorflowGitVersion\")) if (!$util.isString(message.tensorflowGitVersion)) return \"tensorflowGitVersion: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a MetaInfoDef message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof tensorflow.MetaGraphDef.MetaInfoDef\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {tensorflow.MetaGraphDef.MetaInfoDef} MetaInfoDef\n             */\n            MetaInfoDef.fromObject = function fromObject(object) {\n                if (object instanceof $root.tensorflow.MetaGraphDef.MetaInfoDef) return object;\n                var message = new $root.tensorflow.MetaGraphDef.MetaInfoDef();\n                if (object.metaGraphVersion != null) message.metaGraphVersion = String(object.metaGraphVersion);\n                if (object.strippedOpList != null) {\n                    if (typeof object.strippedOpList !== \"object\") throw TypeError(\".tensorflow.MetaGraphDef.MetaInfoDef.strippedOpList: object expected\");\n                    message.strippedOpList = $root.tensorflow.OpList.fromObject(object.strippedOpList);\n                }\n                if (object.anyInfo != null) {\n                    if (typeof object.anyInfo !== \"object\") throw TypeError(\".tensorflow.MetaGraphDef.MetaInfoDef.anyInfo: object expected\");\n                    message.anyInfo = $root.tensorflow.Any.fromObject(object.anyInfo);\n                }\n                if (object.tags) {\n                    if (!Array.isArray(object.tags)) throw TypeError(\".tensorflow.MetaGraphDef.MetaInfoDef.tags: array expected\");\n                    message.tags = [];\n                    for (var i = 0; i < object.tags.length; ++i) message.tags[i] = String(object.tags[i]);\n                }\n                if (object.tensorflowVersion != null) message.tensorflowVersion = String(object.tensorflowVersion);\n                if (object.tensorflowGitVersion != null) message.tensorflowGitVersion = String(object.tensorflowGitVersion);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a MetaInfoDef message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof tensorflow.MetaGraphDef.MetaInfoDef\n             * @static\n             * @param {tensorflow.MetaGraphDef.MetaInfoDef} message MetaInfoDef\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            MetaInfoDef.toObject = function toObject(message, options) {\n                if (!options) options = {};\n                var object = {};\n                if (options.arrays || options.defaults) object.tags = [];\n                if (options.defaults) {\n                    object.metaGraphVersion = \"\";\n                    object.strippedOpList = null;\n                    object.anyInfo = null;\n                    object.tensorflowVersion = \"\";\n                    object.tensorflowGitVersion = \"\";\n                }\n                if (message.metaGraphVersion != null && message.hasOwnProperty(\"metaGraphVersion\")) object.metaGraphVersion = message.metaGraphVersion;\n                if (message.strippedOpList != null && message.hasOwnProperty(\"strippedOpList\")) object.strippedOpList = $root.tensorflow.OpList.toObject(message.strippedOpList, options);\n                if (message.anyInfo != null && message.hasOwnProperty(\"anyInfo\")) object.anyInfo = $root.tensorflow.Any.toObject(message.anyInfo, options);\n                if (message.tags && message.tags.length) {\n                    object.tags = [];\n                    for (var j = 0; j < message.tags.length; ++j) object.tags[j] = message.tags[j];\n                }\n                if (message.tensorflowVersion != null && message.hasOwnProperty(\"tensorflowVersion\")) object.tensorflowVersion = message.tensorflowVersion;\n                if (message.tensorflowGitVersion != null && message.hasOwnProperty(\"tensorflowGitVersion\")) object.tensorflowGitVersion = message.tensorflowGitVersion;\n                return object;\n            };\n\n            /**\n             * Converts this MetaInfoDef to JSON.\n             * @function toJSON\n             * @memberof tensorflow.MetaGraphDef.MetaInfoDef\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            MetaInfoDef.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return MetaInfoDef;\n        }();\n\n        return MetaGraphDef;\n    }();\n\n    tensorflow.SavedModel = function () {\n\n        /**\n         * Properties of a SavedModel.\n         * @memberof tensorflow\n         * @interface ISavedModel\n         * @property {number|Long|null} [savedModelSchemaVersion] SavedModel savedModelSchemaVersion\n         * @property {Array.<tensorflow.IMetaGraphDef>|null} [metaGraphs] SavedModel metaGraphs\n         */\n\n        /**\n         * Constructs a new SavedModel.\n         * @memberof tensorflow\n         * @classdesc Represents a SavedModel.\n         * @implements ISavedModel\n         * @constructor\n         * @param {tensorflow.ISavedModel=} [properties] Properties to set\n         */\n        function SavedModel(properties) {\n            this.metaGraphs = [];\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SavedModel savedModelSchemaVersion.\n         * @member {number|Long} savedModelSchemaVersion\n         * @memberof tensorflow.SavedModel\n         * @instance\n         */\n        SavedModel.prototype.savedModelSchemaVersion = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n        /**\n         * SavedModel metaGraphs.\n         * @member {Array.<tensorflow.IMetaGraphDef>} metaGraphs\n         * @memberof tensorflow.SavedModel\n         * @instance\n         */\n        SavedModel.prototype.metaGraphs = $util.emptyArray;\n\n        /**\n         * Creates a new SavedModel instance using the specified properties.\n         * @function create\n         * @memberof tensorflow.SavedModel\n         * @static\n         * @param {tensorflow.ISavedModel=} [properties] Properties to set\n         * @returns {tensorflow.SavedModel} SavedModel instance\n         */\n        SavedModel.create = function create(properties) {\n            return new SavedModel(properties);\n        };\n\n        /**\n         * Encodes the specified SavedModel message. Does not implicitly {@link tensorflow.SavedModel.verify|verify} messages.\n         * @function encode\n         * @memberof tensorflow.SavedModel\n         * @static\n         * @param {tensorflow.ISavedModel} message SavedModel message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SavedModel.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.savedModelSchemaVersion != null && message.hasOwnProperty(\"savedModelSchemaVersion\")) writer.uint32( /* id 1, wireType 0 =*/8).int64(message.savedModelSchemaVersion);\n            if (message.metaGraphs != null && message.metaGraphs.length) for (var i = 0; i < message.metaGraphs.length; ++i) $root.tensorflow.MetaGraphDef.encode(message.metaGraphs[i], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SavedModel message, length delimited. Does not implicitly {@link tensorflow.SavedModel.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof tensorflow.SavedModel\n         * @static\n         * @param {tensorflow.ISavedModel} message SavedModel message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SavedModel.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SavedModel message from the specified reader or buffer.\n         * @function decode\n         * @memberof tensorflow.SavedModel\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {tensorflow.SavedModel} SavedModel\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SavedModel.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n                message = new $root.tensorflow.SavedModel();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.savedModelSchemaVersion = reader.int64();\n                        break;\n                    case 2:\n                        if (!(message.metaGraphs && message.metaGraphs.length)) message.metaGraphs = [];\n                        message.metaGraphs.push($root.tensorflow.MetaGraphDef.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SavedModel message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof tensorflow.SavedModel\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {tensorflow.SavedModel} SavedModel\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SavedModel.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SavedModel message.\n         * @function verify\n         * @memberof tensorflow.SavedModel\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SavedModel.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            if (message.savedModelSchemaVersion != null && message.hasOwnProperty(\"savedModelSchemaVersion\")) if (!$util.isInteger(message.savedModelSchemaVersion) && !(message.savedModelSchemaVersion && $util.isInteger(message.savedModelSchemaVersion.low) && $util.isInteger(message.savedModelSchemaVersion.high))) return \"savedModelSchemaVersion: integer|Long expected\";\n            if (message.metaGraphs != null && message.hasOwnProperty(\"metaGraphs\")) {\n                if (!Array.isArray(message.metaGraphs)) return \"metaGraphs: array expected\";\n                for (var i = 0; i < message.metaGraphs.length; ++i) {\n                    var error = $root.tensorflow.MetaGraphDef.verify(message.metaGraphs[i]);\n                    if (error) return \"metaGraphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a SavedModel message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof tensorflow.SavedModel\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {tensorflow.SavedModel} SavedModel\n         */\n        SavedModel.fromObject = function fromObject(object) {\n            if (object instanceof $root.tensorflow.SavedModel) return object;\n            var message = new $root.tensorflow.SavedModel();\n            if (object.savedModelSchemaVersion != null) if ($util.Long) (message.savedModelSchemaVersion = $util.Long.fromValue(object.savedModelSchemaVersion)).unsigned = false;else if (typeof object.savedModelSchemaVersion === \"string\") message.savedModelSchemaVersion = parseInt(object.savedModelSchemaVersion, 10);else if (typeof object.savedModelSchemaVersion === \"number\") message.savedModelSchemaVersion = object.savedModelSchemaVersion;else if (typeof object.savedModelSchemaVersion === \"object\") message.savedModelSchemaVersion = new $util.LongBits(object.savedModelSchemaVersion.low >>> 0, object.savedModelSchemaVersion.high >>> 0).toNumber();\n            if (object.metaGraphs) {\n                if (!Array.isArray(object.metaGraphs)) throw TypeError(\".tensorflow.SavedModel.metaGraphs: array expected\");\n                message.metaGraphs = [];\n                for (var i = 0; i < object.metaGraphs.length; ++i) {\n                    if (typeof object.metaGraphs[i] !== \"object\") throw TypeError(\".tensorflow.SavedModel.metaGraphs: object expected\");\n                    message.metaGraphs[i] = $root.tensorflow.MetaGraphDef.fromObject(object.metaGraphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SavedModel message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof tensorflow.SavedModel\n         * @static\n         * @param {tensorflow.SavedModel} message SavedModel\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SavedModel.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (options.arrays || options.defaults) object.metaGraphs = [];\n            if (options.defaults) if ($util.Long) {\n                var long = new $util.Long(0, 0, false);\n                object.savedModelSchemaVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else object.savedModelSchemaVersion = options.longs === String ? \"0\" : 0;\n            if (message.savedModelSchemaVersion != null && message.hasOwnProperty(\"savedModelSchemaVersion\")) if (typeof message.savedModelSchemaVersion === \"number\") object.savedModelSchemaVersion = options.longs === String ? String(message.savedModelSchemaVersion) : message.savedModelSchemaVersion;else object.savedModelSchemaVersion = options.longs === String ? $util.Long.prototype.toString.call(message.savedModelSchemaVersion) : options.longs === Number ? new $util.LongBits(message.savedModelSchemaVersion.low >>> 0, message.savedModelSchemaVersion.high >>> 0).toNumber() : message.savedModelSchemaVersion;\n            if (message.metaGraphs && message.metaGraphs.length) {\n                object.metaGraphs = [];\n                for (var j = 0; j < message.metaGraphs.length; ++j) object.metaGraphs[j] = $root.tensorflow.MetaGraphDef.toObject(message.metaGraphs[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this SavedModel to JSON.\n         * @function toJSON\n         * @memberof tensorflow.SavedModel\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SavedModel.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return SavedModel;\n    }();\n\n    tensorflow.FunctionDefLibrary = function () {\n\n        /**\n         * Properties of a FunctionDefLibrary.\n         * @memberof tensorflow\n         * @interface IFunctionDefLibrary\n         * @property {Array.<tensorflow.IFunctionDef>|null} [\"function\"] FunctionDefLibrary function\n         * @property {Array.<tensorflow.IGradientDef>|null} [gradient] FunctionDefLibrary gradient\n         */\n\n        /**\n         * Constructs a new FunctionDefLibrary.\n         * @memberof tensorflow\n         * @classdesc Represents a FunctionDefLibrary.\n         * @implements IFunctionDefLibrary\n         * @constructor\n         * @param {tensorflow.IFunctionDefLibrary=} [properties] Properties to set\n         */\n        function FunctionDefLibrary(properties) {\n            this[\"function\"] = [];\n            this.gradient = [];\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FunctionDefLibrary function.\n         * @member {Array.<tensorflow.IFunctionDef>} function\n         * @memberof tensorflow.FunctionDefLibrary\n         * @instance\n         */\n        FunctionDefLibrary.prototype[\"function\"] = $util.emptyArray;\n\n        /**\n         * FunctionDefLibrary gradient.\n         * @member {Array.<tensorflow.IGradientDef>} gradient\n         * @memberof tensorflow.FunctionDefLibrary\n         * @instance\n         */\n        FunctionDefLibrary.prototype.gradient = $util.emptyArray;\n\n        /**\n         * Creates a new FunctionDefLibrary instance using the specified properties.\n         * @function create\n         * @memberof tensorflow.FunctionDefLibrary\n         * @static\n         * @param {tensorflow.IFunctionDefLibrary=} [properties] Properties to set\n         * @returns {tensorflow.FunctionDefLibrary} FunctionDefLibrary instance\n         */\n        FunctionDefLibrary.create = function create(properties) {\n            return new FunctionDefLibrary(properties);\n        };\n\n        /**\n         * Encodes the specified FunctionDefLibrary message. Does not implicitly {@link tensorflow.FunctionDefLibrary.verify|verify} messages.\n         * @function encode\n         * @memberof tensorflow.FunctionDefLibrary\n         * @static\n         * @param {tensorflow.IFunctionDefLibrary} message FunctionDefLibrary message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionDefLibrary.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message[\"function\"] != null && message[\"function\"].length) for (var i = 0; i < message[\"function\"].length; ++i) $root.tensorflow.FunctionDef.encode(message[\"function\"][i], writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.gradient != null && message.gradient.length) for (var i = 0; i < message.gradient.length; ++i) $root.tensorflow.GradientDef.encode(message.gradient[i], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FunctionDefLibrary message, length delimited. Does not implicitly {@link tensorflow.FunctionDefLibrary.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof tensorflow.FunctionDefLibrary\n         * @static\n         * @param {tensorflow.IFunctionDefLibrary} message FunctionDefLibrary message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionDefLibrary.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FunctionDefLibrary message from the specified reader or buffer.\n         * @function decode\n         * @memberof tensorflow.FunctionDefLibrary\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {tensorflow.FunctionDefLibrary} FunctionDefLibrary\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionDefLibrary.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n                message = new $root.tensorflow.FunctionDefLibrary();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        if (!(message[\"function\"] && message[\"function\"].length)) message[\"function\"] = [];\n                        message[\"function\"].push($root.tensorflow.FunctionDef.decode(reader, reader.uint32()));\n                        break;\n                    case 2:\n                        if (!(message.gradient && message.gradient.length)) message.gradient = [];\n                        message.gradient.push($root.tensorflow.GradientDef.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a FunctionDefLibrary message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof tensorflow.FunctionDefLibrary\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {tensorflow.FunctionDefLibrary} FunctionDefLibrary\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionDefLibrary.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FunctionDefLibrary message.\n         * @function verify\n         * @memberof tensorflow.FunctionDefLibrary\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FunctionDefLibrary.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            if (message[\"function\"] != null && message.hasOwnProperty(\"function\")) {\n                if (!Array.isArray(message[\"function\"])) return \"function: array expected\";\n                for (var i = 0; i < message[\"function\"].length; ++i) {\n                    var error = $root.tensorflow.FunctionDef.verify(message[\"function\"][i]);\n                    if (error) return \"function.\" + error;\n                }\n            }\n            if (message.gradient != null && message.hasOwnProperty(\"gradient\")) {\n                if (!Array.isArray(message.gradient)) return \"gradient: array expected\";\n                for (var i = 0; i < message.gradient.length; ++i) {\n                    var error = $root.tensorflow.GradientDef.verify(message.gradient[i]);\n                    if (error) return \"gradient.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a FunctionDefLibrary message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof tensorflow.FunctionDefLibrary\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {tensorflow.FunctionDefLibrary} FunctionDefLibrary\n         */\n        FunctionDefLibrary.fromObject = function fromObject(object) {\n            if (object instanceof $root.tensorflow.FunctionDefLibrary) return object;\n            var message = new $root.tensorflow.FunctionDefLibrary();\n            if (object[\"function\"]) {\n                if (!Array.isArray(object[\"function\"])) throw TypeError(\".tensorflow.FunctionDefLibrary.function: array expected\");\n                message[\"function\"] = [];\n                for (var i = 0; i < object[\"function\"].length; ++i) {\n                    if (typeof object[\"function\"][i] !== \"object\") throw TypeError(\".tensorflow.FunctionDefLibrary.function: object expected\");\n                    message[\"function\"][i] = $root.tensorflow.FunctionDef.fromObject(object[\"function\"][i]);\n                }\n            }\n            if (object.gradient) {\n                if (!Array.isArray(object.gradient)) throw TypeError(\".tensorflow.FunctionDefLibrary.gradient: array expected\");\n                message.gradient = [];\n                for (var i = 0; i < object.gradient.length; ++i) {\n                    if (typeof object.gradient[i] !== \"object\") throw TypeError(\".tensorflow.FunctionDefLibrary.gradient: object expected\");\n                    message.gradient[i] = $root.tensorflow.GradientDef.fromObject(object.gradient[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FunctionDefLibrary message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof tensorflow.FunctionDefLibrary\n         * @static\n         * @param {tensorflow.FunctionDefLibrary} message FunctionDefLibrary\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FunctionDefLibrary.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object[\"function\"] = [];\n                object.gradient = [];\n            }\n            if (message[\"function\"] && message[\"function\"].length) {\n                object[\"function\"] = [];\n                for (var j = 0; j < message[\"function\"].length; ++j) object[\"function\"][j] = $root.tensorflow.FunctionDef.toObject(message[\"function\"][j], options);\n            }\n            if (message.gradient && message.gradient.length) {\n                object.gradient = [];\n                for (var j = 0; j < message.gradient.length; ++j) object.gradient[j] = $root.tensorflow.GradientDef.toObject(message.gradient[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this FunctionDefLibrary to JSON.\n         * @function toJSON\n         * @memberof tensorflow.FunctionDefLibrary\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FunctionDefLibrary.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return FunctionDefLibrary;\n    }();\n\n    tensorflow.FunctionDef = function () {\n\n        /**\n         * Properties of a FunctionDef.\n         * @memberof tensorflow\n         * @interface IFunctionDef\n         * @property {tensorflow.IOpDef|null} [signature] FunctionDef signature\n         * @property {Object.<string,tensorflow.IAttrValue>|null} [attr] FunctionDef attr\n         * @property {Array.<tensorflow.INodeDef>|null} [nodeDef] FunctionDef nodeDef\n         * @property {Object.<string,string>|null} [ret] FunctionDef ret\n         */\n\n        /**\n         * Constructs a new FunctionDef.\n         * @memberof tensorflow\n         * @classdesc Represents a FunctionDef.\n         * @implements IFunctionDef\n         * @constructor\n         * @param {tensorflow.IFunctionDef=} [properties] Properties to set\n         */\n        function FunctionDef(properties) {\n            this.attr = {};\n            this.nodeDef = [];\n            this.ret = {};\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FunctionDef signature.\n         * @member {tensorflow.IOpDef|null|undefined} signature\n         * @memberof tensorflow.FunctionDef\n         * @instance\n         */\n        FunctionDef.prototype.signature = null;\n\n        /**\n         * FunctionDef attr.\n         * @member {Object.<string,tensorflow.IAttrValue>} attr\n         * @memberof tensorflow.FunctionDef\n         * @instance\n         */\n        FunctionDef.prototype.attr = $util.emptyObject;\n\n        /**\n         * FunctionDef nodeDef.\n         * @member {Array.<tensorflow.INodeDef>} nodeDef\n         * @memberof tensorflow.FunctionDef\n         * @instance\n         */\n        FunctionDef.prototype.nodeDef = $util.emptyArray;\n\n        /**\n         * FunctionDef ret.\n         * @member {Object.<string,string>} ret\n         * @memberof tensorflow.FunctionDef\n         * @instance\n         */\n        FunctionDef.prototype.ret = $util.emptyObject;\n\n        /**\n         * Creates a new FunctionDef instance using the specified properties.\n         * @function create\n         * @memberof tensorflow.FunctionDef\n         * @static\n         * @param {tensorflow.IFunctionDef=} [properties] Properties to set\n         * @returns {tensorflow.FunctionDef} FunctionDef instance\n         */\n        FunctionDef.create = function create(properties) {\n            return new FunctionDef(properties);\n        };\n\n        /**\n         * Encodes the specified FunctionDef message. Does not implicitly {@link tensorflow.FunctionDef.verify|verify} messages.\n         * @function encode\n         * @memberof tensorflow.FunctionDef\n         * @static\n         * @param {tensorflow.IFunctionDef} message FunctionDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionDef.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.signature != null && message.hasOwnProperty(\"signature\")) $root.tensorflow.OpDef.encode(message.signature, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.nodeDef != null && message.nodeDef.length) for (var i = 0; i < message.nodeDef.length; ++i) $root.tensorflow.NodeDef.encode(message.nodeDef[i], writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.ret != null && message.hasOwnProperty(\"ret\")) for (var keys = Object.keys(message.ret), i = 0; i < keys.length; ++i) writer.uint32( /* id 4, wireType 2 =*/34).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]).uint32( /* id 2, wireType 2 =*/18).string(message.ret[keys[i]]).ldelim();\n            if (message.attr != null && message.hasOwnProperty(\"attr\")) for (var keys = Object.keys(message.attr), i = 0; i < keys.length; ++i) {\n                writer.uint32( /* id 5, wireType 2 =*/42).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.tensorflow.AttrValue.encode(message.attr[keys[i]], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FunctionDef message, length delimited. Does not implicitly {@link tensorflow.FunctionDef.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof tensorflow.FunctionDef\n         * @static\n         * @param {tensorflow.IFunctionDef} message FunctionDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionDef.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FunctionDef message from the specified reader or buffer.\n         * @function decode\n         * @memberof tensorflow.FunctionDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {tensorflow.FunctionDef} FunctionDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionDef.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n                message = new $root.tensorflow.FunctionDef(),\n                key;\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.signature = $root.tensorflow.OpDef.decode(reader, reader.uint32());\n                        break;\n                    case 5:\n                        reader.skip().pos++;\n                        if (message.attr === $util.emptyObject) message.attr = {};\n                        key = reader.string();\n                        reader.pos++;\n                        message.attr[key] = $root.tensorflow.AttrValue.decode(reader, reader.uint32());\n                        break;\n                    case 3:\n                        if (!(message.nodeDef && message.nodeDef.length)) message.nodeDef = [];\n                        message.nodeDef.push($root.tensorflow.NodeDef.decode(reader, reader.uint32()));\n                        break;\n                    case 4:\n                        reader.skip().pos++;\n                        if (message.ret === $util.emptyObject) message.ret = {};\n                        key = reader.string();\n                        reader.pos++;\n                        message.ret[key] = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a FunctionDef message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof tensorflow.FunctionDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {tensorflow.FunctionDef} FunctionDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionDef.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FunctionDef message.\n         * @function verify\n         * @memberof tensorflow.FunctionDef\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FunctionDef.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            if (message.signature != null && message.hasOwnProperty(\"signature\")) {\n                var error = $root.tensorflow.OpDef.verify(message.signature);\n                if (error) return \"signature.\" + error;\n            }\n            if (message.attr != null && message.hasOwnProperty(\"attr\")) {\n                if (!$util.isObject(message.attr)) return \"attr: object expected\";\n                var key = Object.keys(message.attr);\n                for (var i = 0; i < key.length; ++i) {\n                    var error = $root.tensorflow.AttrValue.verify(message.attr[key[i]]);\n                    if (error) return \"attr.\" + error;\n                }\n            }\n            if (message.nodeDef != null && message.hasOwnProperty(\"nodeDef\")) {\n                if (!Array.isArray(message.nodeDef)) return \"nodeDef: array expected\";\n                for (var i = 0; i < message.nodeDef.length; ++i) {\n                    var error = $root.tensorflow.NodeDef.verify(message.nodeDef[i]);\n                    if (error) return \"nodeDef.\" + error;\n                }\n            }\n            if (message.ret != null && message.hasOwnProperty(\"ret\")) {\n                if (!$util.isObject(message.ret)) return \"ret: object expected\";\n                var key = Object.keys(message.ret);\n                for (var i = 0; i < key.length; ++i) if (!$util.isString(message.ret[key[i]])) return \"ret: string{k:string} expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a FunctionDef message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof tensorflow.FunctionDef\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {tensorflow.FunctionDef} FunctionDef\n         */\n        FunctionDef.fromObject = function fromObject(object) {\n            if (object instanceof $root.tensorflow.FunctionDef) return object;\n            var message = new $root.tensorflow.FunctionDef();\n            if (object.signature != null) {\n                if (typeof object.signature !== \"object\") throw TypeError(\".tensorflow.FunctionDef.signature: object expected\");\n                message.signature = $root.tensorflow.OpDef.fromObject(object.signature);\n            }\n            if (object.attr) {\n                if (typeof object.attr !== \"object\") throw TypeError(\".tensorflow.FunctionDef.attr: object expected\");\n                message.attr = {};\n                for (var keys = Object.keys(object.attr), i = 0; i < keys.length; ++i) {\n                    if (typeof object.attr[keys[i]] !== \"object\") throw TypeError(\".tensorflow.FunctionDef.attr: object expected\");\n                    message.attr[keys[i]] = $root.tensorflow.AttrValue.fromObject(object.attr[keys[i]]);\n                }\n            }\n            if (object.nodeDef) {\n                if (!Array.isArray(object.nodeDef)) throw TypeError(\".tensorflow.FunctionDef.nodeDef: array expected\");\n                message.nodeDef = [];\n                for (var i = 0; i < object.nodeDef.length; ++i) {\n                    if (typeof object.nodeDef[i] !== \"object\") throw TypeError(\".tensorflow.FunctionDef.nodeDef: object expected\");\n                    message.nodeDef[i] = $root.tensorflow.NodeDef.fromObject(object.nodeDef[i]);\n                }\n            }\n            if (object.ret) {\n                if (typeof object.ret !== \"object\") throw TypeError(\".tensorflow.FunctionDef.ret: object expected\");\n                message.ret = {};\n                for (var keys = Object.keys(object.ret), i = 0; i < keys.length; ++i) message.ret[keys[i]] = String(object.ret[keys[i]]);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FunctionDef message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof tensorflow.FunctionDef\n         * @static\n         * @param {tensorflow.FunctionDef} message FunctionDef\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FunctionDef.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (options.arrays || options.defaults) object.nodeDef = [];\n            if (options.objects || options.defaults) {\n                object.ret = {};\n                object.attr = {};\n            }\n            if (options.defaults) object.signature = null;\n            if (message.signature != null && message.hasOwnProperty(\"signature\")) object.signature = $root.tensorflow.OpDef.toObject(message.signature, options);\n            if (message.nodeDef && message.nodeDef.length) {\n                object.nodeDef = [];\n                for (var j = 0; j < message.nodeDef.length; ++j) object.nodeDef[j] = $root.tensorflow.NodeDef.toObject(message.nodeDef[j], options);\n            }\n            var keys2;\n            if (message.ret && (keys2 = Object.keys(message.ret)).length) {\n                object.ret = {};\n                for (var j = 0; j < keys2.length; ++j) object.ret[keys2[j]] = message.ret[keys2[j]];\n            }\n            if (message.attr && (keys2 = Object.keys(message.attr)).length) {\n                object.attr = {};\n                for (var j = 0; j < keys2.length; ++j) object.attr[keys2[j]] = $root.tensorflow.AttrValue.toObject(message.attr[keys2[j]], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this FunctionDef to JSON.\n         * @function toJSON\n         * @memberof tensorflow.FunctionDef\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FunctionDef.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return FunctionDef;\n    }();\n\n    tensorflow.GradientDef = function () {\n\n        /**\n         * Properties of a GradientDef.\n         * @memberof tensorflow\n         * @interface IGradientDef\n         * @property {string|null} [functionName] GradientDef functionName\n         * @property {string|null} [gradientFunc] GradientDef gradientFunc\n         */\n\n        /**\n         * Constructs a new GradientDef.\n         * @memberof tensorflow\n         * @classdesc Represents a GradientDef.\n         * @implements IGradientDef\n         * @constructor\n         * @param {tensorflow.IGradientDef=} [properties] Properties to set\n         */\n        function GradientDef(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GradientDef functionName.\n         * @member {string} functionName\n         * @memberof tensorflow.GradientDef\n         * @instance\n         */\n        GradientDef.prototype.functionName = \"\";\n\n        /**\n         * GradientDef gradientFunc.\n         * @member {string} gradientFunc\n         * @memberof tensorflow.GradientDef\n         * @instance\n         */\n        GradientDef.prototype.gradientFunc = \"\";\n\n        /**\n         * Creates a new GradientDef instance using the specified properties.\n         * @function create\n         * @memberof tensorflow.GradientDef\n         * @static\n         * @param {tensorflow.IGradientDef=} [properties] Properties to set\n         * @returns {tensorflow.GradientDef} GradientDef instance\n         */\n        GradientDef.create = function create(properties) {\n            return new GradientDef(properties);\n        };\n\n        /**\n         * Encodes the specified GradientDef message. Does not implicitly {@link tensorflow.GradientDef.verify|verify} messages.\n         * @function encode\n         * @memberof tensorflow.GradientDef\n         * @static\n         * @param {tensorflow.IGradientDef} message GradientDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GradientDef.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.functionName != null && message.hasOwnProperty(\"functionName\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.functionName);\n            if (message.gradientFunc != null && message.hasOwnProperty(\"gradientFunc\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.gradientFunc);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GradientDef message, length delimited. Does not implicitly {@link tensorflow.GradientDef.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof tensorflow.GradientDef\n         * @static\n         * @param {tensorflow.IGradientDef} message GradientDef message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GradientDef.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GradientDef message from the specified reader or buffer.\n         * @function decode\n         * @memberof tensorflow.GradientDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {tensorflow.GradientDef} GradientDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GradientDef.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n                message = new $root.tensorflow.GradientDef();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                    case 1:\n                        message.functionName = reader.string();\n                        break;\n                    case 2:\n                        message.gradientFunc = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GradientDef message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof tensorflow.GradientDef\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {tensorflow.GradientDef} GradientDef\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GradientDef.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GradientDef message.\n         * @function verify\n         * @memberof tensorflow.GradientDef\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GradientDef.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            if (message.functionName != null && message.hasOwnProperty(\"functionName\")) if (!$util.isString(message.functionName)) return \"functionName: string expected\";\n            if (message.gradientFunc != null && message.hasOwnProperty(\"gradientFunc\")) if (!$util.isString(message.gradientFunc)) return \"gradientFunc: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a GradientDef message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof tensorflow.GradientDef\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {tensorflow.GradientDef} GradientDef\n         */\n        GradientDef.fromObject = function fromObject(object) {\n            if (object instanceof $root.tensorflow.GradientDef) return object;\n            var message = new $root.tensorflow.GradientDef();\n            if (object.functionName != null) message.functionName = String(object.functionName);\n            if (object.gradientFunc != null) message.gradientFunc = String(object.gradientFunc);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GradientDef message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof tensorflow.GradientDef\n         * @static\n         * @param {tensorflow.GradientDef} message GradientDef\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GradientDef.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n            if (options.defaults) {\n                object.functionName = \"\";\n                object.gradientFunc = \"\";\n            }\n            if (message.functionName != null && message.hasOwnProperty(\"functionName\")) object.functionName = message.functionName;\n            if (message.gradientFunc != null && message.hasOwnProperty(\"gradientFunc\")) object.gradientFunc = message.gradientFunc;\n            return object;\n        };\n\n        /**\n         * Converts this GradientDef to JSON.\n         * @function toJSON\n         * @memberof tensorflow.GradientDef\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GradientDef.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GradientDef;\n    }();\n\n    return tensorflow;\n}();\n\nmodule.exports = $root;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/data/compiled_api.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/data/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/data/index.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(/*! ./compiled_api */ \"./node_modules/@tensorflow/tfjs-converter/dist/data/compiled_api.js\"));\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/data/index.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/executor/frozen_model.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/executor/frozen_model.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : new P(function (resolve) {\n                resolve(result.value);\n            }).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n    var _ = { label: 0, sent: function () {\n            if (t[0] & 1) throw t[1];return t[1];\n        }, trys: [], ops: [] },\n        f,\n        y,\n        t,\n        g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n    }), g;\n    function verb(n) {\n        return function (v) {\n            return step([n, v]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0:case 1:\n                    t = op;break;\n                case 4:\n                    _.label++;return { value: op[1], done: false };\n                case 5:\n                    _.label++;y = op[1];op = [0];continue;\n                case 7:\n                    op = _.ops.pop();_.trys.pop();continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];t = op;break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];_.ops.push(op);break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [6, e];y = 0;\n        } finally {\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = this && this.__read || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o),\n        r,\n        ar = [],\n        e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    } catch (error) {\n        e = { error: error };\n    } finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally {\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar index_1 = __webpack_require__(/*! ../data/index */ \"./node_modules/@tensorflow/tfjs-converter/dist/data/index.js\");\nvar index_2 = __webpack_require__(/*! ../operations/index */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/index.js\");\nvar graph_executor_1 = __webpack_require__(/*! ./graph_executor */ \"./node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js\");\nvar FrozenModel = function () {\n    function FrozenModel(modelUrl, weightManifestUrl) {\n        this.modelUrl = modelUrl;\n        this.weightManifestUrl = weightManifestUrl;\n        this.version = 'n/a';\n        this.getPathPrefix();\n    }\n    Object.defineProperty(FrozenModel.prototype, \"modelVersion\", {\n        get: function () {\n            return this.version;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FrozenModel.prototype.getPathPrefix = function () {\n        var isAbsolute = /^[a-z][a-z0-9+.-]*:/.test(this.weightManifestUrl);\n        if (isAbsolute) {\n            var url = new URL(this.weightManifestUrl);\n            var segments = url.pathname.split('/');\n            segments.splice(-1);\n            url.pathname = segments.join('/');\n            this.pathPrefix = url.toString();\n        } else {\n            var segments = this.weightManifestUrl.split('/');\n            segments.splice(-1);\n            this.pathPrefix = segments.join('/');\n        }\n    };\n    FrozenModel.prototype.loadRemoteProtoFile = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, _a, _b, _c, error_1;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _d.trys.push([0, 3,, 4]);\n                        return [4, fetch(new Request(this.modelUrl))];\n                    case 1:\n                        response = _d.sent();\n                        _b = (_a = index_1.tensorflow.GraphDef).decode;\n                        _c = Uint8Array.bind;\n                        return [4, response.arrayBuffer()];\n                    case 2:\n                        return [2, _b.apply(_a, [new (_c.apply(Uint8Array, [void 0, _d.sent()]))()])];\n                    case 3:\n                        error_1 = _d.sent();\n                        throw new Error(this.modelUrl + \" not found. \" + error_1);\n                    case 4:\n                        return [2];\n                }\n            });\n        });\n    };\n    FrozenModel.prototype.loadWeightManifest = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var manifest, _a, error_2;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _b.trys.push([0, 3,, 4]);\n                        return [4, fetch(new Request(this.weightManifestUrl))];\n                    case 1:\n                        manifest = _b.sent();\n                        _a = this;\n                        return [4, manifest.clone().json()];\n                    case 2:\n                        _a.weightManifest = _b.sent();\n                        return [3, 4];\n                    case 3:\n                        error_2 = _b.sent();\n                        throw new Error(this.weightManifestUrl + \" not found. \" + error_2);\n                    case 4:\n                        return [2];\n                }\n            });\n        });\n    };\n    FrozenModel.prototype.load = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var graphPromise, manifestPromise, _a, graph, weightMap;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        graphPromise = this.loadRemoteProtoFile();\n                        manifestPromise = this.loadWeightManifest();\n                        return [4, Promise.all([graphPromise, manifestPromise])];\n                    case 1:\n                        _a = __read.apply(void 0, [_b.sent(), 1]), graph = _a[0];\n                        this.version = graph.versions.producer + \".\" + graph.versions.minConsumer;\n                        return [4, tfc.loadWeights(this.weightManifest, this.pathPrefix)];\n                    case 2:\n                        weightMap = _b.sent();\n                        this.executor = new graph_executor_1.GraphExecutor(index_2.OperationMapper.Instance.transformGraph(graph));\n                        this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n                        return [2, true];\n                }\n            });\n        });\n    };\n    FrozenModel.prototype.execute = function (inputs, outputs) {\n        var result = this.executor.execute(this.convertTensorMapToTensorsMap(inputs), outputs);\n        var keys = Object.keys(result);\n        return keys.length === 1 ? result[keys[0]] : result;\n    };\n    FrozenModel.prototype.convertTensorMapToTensorsMap = function (map) {\n        return Object.keys(map).reduce(function (newMap, key) {\n            newMap[key] = [map[key]];\n            return newMap;\n        }, {});\n    };\n    FrozenModel.prototype.dispose = function () {\n        this.executor.dispose();\n    };\n    return FrozenModel;\n}();\nexports.FrozenModel = FrozenModel;\nfunction loadFrozenModel(modelUrl, weightsManifestUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n        var model;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    model = new FrozenModel(modelUrl, weightsManifestUrl);\n                    return [4, model.load()];\n                case 1:\n                    _a.sent();\n                    return [2, model];\n            }\n        });\n    });\n}\nexports.loadFrozenModel = loadFrozenModel;\n//# sourceMappingURL=frozen_model.js.map\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/executor/frozen_model.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n};\nvar __read = this && this.__read || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o),\n        r,\n        ar = [],\n        e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    } catch (error) {\n        e = { error: error };\n    } finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally {\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n};\nvar __spread = this && this.__spread || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar utils_1 = __webpack_require__(/*! ../operations/executors/utils */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js\");\nvar operations = __webpack_require__(/*! ../operations/index */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/index.js\");\nvar GraphExecutor = function () {\n    function GraphExecutor(graph) {\n        this.graph = graph;\n        this.compiledOrder = [];\n        this._weightMap = {};\n        this.compile();\n    }\n    Object.defineProperty(GraphExecutor.prototype, \"weightMap\", {\n        get: function () {\n            return this._weightMap;\n        },\n        set: function (weightMap) {\n            this._weightMap = weightMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GraphExecutor.prototype.compile = function () {\n        var stack = __spread(this.graph.inputs);\n        var visited = {};\n        while (stack.length > 0) {\n            var node = stack.pop();\n            visited[node.name] = true;\n            this.compiledOrder.push(node);\n            node.children.forEach(function (childNode) {\n                if (childNode.inputNames.every(function (name) {\n                    return visited[name];\n                })) {\n                    stack.push(childNode);\n                }\n            });\n        }\n    };\n    GraphExecutor.prototype.execute = function (inputs, outputs) {\n        var _this = this;\n        var result = tfjs_core_1.tidy(function () {\n            var tensors = _this.compiledOrder.reduce(function (map, node) {\n                map[node.name] = operations.executeOp(node, map);\n                return map;\n            }, __assign({}, _this.weightMap, inputs));\n            if (outputs && !(outputs instanceof Array)) {\n                outputs = [outputs];\n            }\n            var requestedOutputs = outputs || _this.graph.outputs.map(function (node) {\n                return node.name;\n            });\n            return requestedOutputs.reduce(function (map, name) {\n                map[name] = utils_1.getTensor(name, tensors);\n                return map;\n            }, {});\n        });\n        return result;\n    };\n    GraphExecutor.prototype.dispose = function () {\n        var _this = this;\n        Object.keys(this.weightMap).forEach(function (key) {\n            return _this.weightMap[key].forEach(function (tensor) {\n                return tensor.dispose();\n            });\n        });\n    };\n    return GraphExecutor;\n}();\nexports.GraphExecutor = GraphExecutor;\n//# sourceMappingURL=graph_executor.js.map\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/executor/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/executor/index.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(/*! ./graph_executor */ \"./node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js\"));\n__export(__webpack_require__(/*! ./frozen_model */ \"./node_modules/@tensorflow/tfjs-converter/dist/executor/frozen_model.js\"));\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/executor/index.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/index.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar index_1 = __webpack_require__(/*! ./executor/index */ \"./node_modules/@tensorflow/tfjs-converter/dist/executor/index.js\");\nexports.FrozenModel = index_1.FrozenModel;\nexports.loadFrozenModel = index_1.loadFrozenModel;\nvar version_1 = __webpack_require__(/*! ./version */ \"./node_modules/@tensorflow/tfjs-converter/dist/version.js\");\nexports.version_converter = version_1.version;\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/index.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/arithmetic_executor.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/arithmetic_executor.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js\");\nexports.executeOp = function (node, tensorMap) {\n    switch (node.op) {\n        case 'add':\n            {\n                return [tfc.add(utils_1.getParamValue('a', node, tensorMap), utils_1.getParamValue('b', node, tensorMap))];\n            }\n        case 'mul':\n            return [tfc.mul(utils_1.getParamValue('a', node, tensorMap), utils_1.getParamValue('b', node, tensorMap))];\n        case 'div':\n            {\n                return [tfc.div(utils_1.getParamValue('a', node, tensorMap), utils_1.getParamValue('b', node, tensorMap))];\n            }\n        case 'sub':\n            {\n                return [tfc.sub(utils_1.getParamValue('a', node, tensorMap), utils_1.getParamValue('b', node, tensorMap))];\n            }\n        case 'minimum':\n            {\n                return [tfc.minimum(utils_1.getParamValue('a', node, tensorMap), utils_1.getParamValue('b', node, tensorMap))];\n            }\n        case 'maximum':\n            {\n                return [tfc.maximum(utils_1.getParamValue('a', node, tensorMap), utils_1.getParamValue('b', node, tensorMap))];\n            }\n        case 'pow':\n            {\n                return [tfc.pow(utils_1.getParamValue('a', node, tensorMap), utils_1.getParamValue('b', node, tensorMap))];\n            }\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nexports.CATEGORY = 'arithmetic';\n//# sourceMappingURL=arithmetic_executor.js.map\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/arithmetic_executor.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/basic_math_executor.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/basic_math_executor.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js\");\nexports.executeOp = function (node, tensorMap) {\n    switch (node.op) {\n        case 'abs':\n            return [tfc.abs(utils_1.getParamValue('x', node, tensorMap))];\n        case 'acos':\n            return [tfc.acos(utils_1.getParamValue('x', node, tensorMap))];\n        case 'asin':\n            return [tfc.asin(utils_1.getParamValue('x', node, tensorMap))];\n        case 'atan':\n            return [tfc.atan(utils_1.getParamValue('x', node, tensorMap))];\n        case 'ceil':\n            return [tfc.ceil(utils_1.getParamValue('x', node, tensorMap))];\n        case 'cos':\n            return [tfc.cos(utils_1.getParamValue('x', node, tensorMap))];\n        case 'cosh':\n            return [tfc.cosh(utils_1.getParamValue('x', node, tensorMap))];\n        case 'elu':\n            return [tfc.elu(utils_1.getParamValue('x', node, tensorMap))];\n        case 'exp':\n            return [tfc.exp(utils_1.getParamValue('x', node, tensorMap))];\n        case 'floor':\n            return [tfc.floor(utils_1.getParamValue('x', node, tensorMap))];\n        case 'log':\n            return [tfc.log(utils_1.getParamValue('x', node, tensorMap))];\n        case 'relu':\n            return [tfc.relu(utils_1.getParamValue('x', node, tensorMap))];\n        case 'selu':\n            return [tfc.selu(utils_1.getParamValue('x', node, tensorMap))];\n        case 'sigmoid':\n            return [tfc.sigmoid(utils_1.getParamValue('x', node, tensorMap))];\n        case 'sin':\n            return [tfc.sin(utils_1.getParamValue('x', node, tensorMap))];\n        case 'sinh':\n            {\n                return [tfc.sinh(utils_1.getParamValue('x', node, tensorMap))];\n            }\n        case 'sqrt':\n            {\n                return [tfc.sqrt(utils_1.getParamValue('x', node, tensorMap))];\n            }\n        case 'square':\n            {\n                return [tfc.square(utils_1.getParamValue('x', node, tensorMap))];\n            }\n        case 'tanh':\n            {\n                return [tfc.tanh(utils_1.getParamValue('x', node, tensorMap))];\n            }\n        case 'tan':\n            return [tfc.tan(utils_1.getParamValue('x', node, tensorMap))];\n        case 'clipByValue':\n            return [tfc.clipByValue(utils_1.getParamValue('x', node, tensorMap), utils_1.getParamValue('clipValueMin', node, tensorMap), utils_1.getParamValue('clipValueMax', node, tensorMap))];\n        case 'rsqrt':\n            return [tfc.div(tfc.scalar(1.0, 'float32'), tfc.sqrt(utils_1.getTensor(node.inputNames[0], tensorMap)))];\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nexports.CATEGORY = 'basic_math';\n//# sourceMappingURL=basic_math_executor.js.map\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/basic_math_executor.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js\");\nexports.executeOp = function (node, tensorMap) {\n    switch (node.op) {\n        case 'conv1d':\n            {\n                var stride = utils_1.getParamValue('stride', node, tensorMap);\n                var pad = utils_1.getParamValue('pad', node, tensorMap);\n                var dataFormat = utils_1.getParamValue('dataFormat', node, tensorMap).toUpperCase();\n                var dilation = utils_1.getParamValue('dilation', node, tensorMap);\n                return [tfc.conv1d(utils_1.getParamValue('x', node, tensorMap), utils_1.getParamValue('filter', node, tensorMap), stride, pad, dataFormat, dilation)];\n            }\n        case 'conv2d':\n            {\n                var stride = utils_1.getParamValue('strides', node, tensorMap);\n                var pad = utils_1.getParamValue('pad', node, tensorMap);\n                var dataFormat = utils_1.getParamValue('dataFormat', node, tensorMap).toUpperCase();\n                var dilations = utils_1.getParamValue('dilations', node, tensorMap);\n                return [tfc.conv2d(utils_1.getParamValue('x', node, tensorMap), utils_1.getParamValue('filter', node, tensorMap), [stride[1], stride[2]], pad, dataFormat, [dilations[0], dilations[1]])];\n            }\n        case 'conv2dTranspose':\n            {\n                var shape = utils_1.getParamValue('outputShape', node, tensorMap);\n                var stride = utils_1.getParamValue('strides', node, tensorMap);\n                var pad = utils_1.getParamValue('pad', node, tensorMap);\n                return [tfc.conv2dTranspose(utils_1.getParamValue('x', node, tensorMap), utils_1.getParamValue('filter', node, tensorMap), shape, [stride[1], stride[2]], pad)];\n            }\n        case 'depthwiseConv2d':\n            {\n                var stride = utils_1.getParamValue('strides', node, tensorMap);\n                var pad = utils_1.getParamValue('pad', node, tensorMap);\n                var dilations = utils_1.getParamValue('dilations', node, tensorMap);\n                var dataFormat = utils_1.getParamValue('dataFormat', node, tensorMap).toUpperCase();\n                return [tfc.depthwiseConv2d(utils_1.getParamValue('input', node, tensorMap), utils_1.getParamValue('filter', node, tensorMap), [stride[1], stride[2]], pad, dataFormat, [dilations[0], dilations[1]])];\n            }\n        case 'avgPool':\n            {\n                var stride = utils_1.getParamValue('strides', node, tensorMap);\n                var pad = utils_1.getParamValue('pad', node, tensorMap);\n                var kernelSize = utils_1.getParamValue('kernelSize', node, tensorMap);\n                return [tfc.avgPool(utils_1.getParamValue('x', node, tensorMap), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n            }\n        case 'maxPool':\n            {\n                var stride = utils_1.getParamValue('strides', node, tensorMap);\n                var pad = utils_1.getParamValue('pad', node, tensorMap);\n                var kernelSize = utils_1.getParamValue('kernelSize', node, tensorMap);\n                return [tfc.maxPool(utils_1.getParamValue('x', node, tensorMap), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n            }\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nexports.CATEGORY = 'convolution';\n//# sourceMappingURL=convolution_executor.js.map\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js\");\nexports.executeOp = function (node, tensorMap) {\n    switch (node.op) {\n        case 'fill':\n            {\n                var shape = utils_1.getParamValue('shape', node, tensorMap);\n                var value = utils_1.getParamValue('value', node, tensorMap);\n                return [tfc.fill(shape, value)];\n            }\n        case 'linspace':\n            {\n                var start = utils_1.getParamValue('start', node, tensorMap);\n                var stop_1 = utils_1.getParamValue('stop', node, tensorMap);\n                var num = utils_1.getParamValue('num', node, tensorMap);\n                return [tfc.linspace(start, stop_1, num)];\n            }\n        case 'oneHot':\n            {\n                var indices = utils_1.getParamValue('indices', node, tensorMap);\n                var depth = utils_1.getParamValue('depth', node, tensorMap);\n                var onValue = utils_1.getParamValue('onValue', node, tensorMap);\n                var offValue = utils_1.getParamValue('offValue', node, tensorMap);\n                return [tfc.oneHot(indices, depth, onValue, offValue)];\n            }\n        case 'ones':\n            {\n                return [tfc.ones(utils_1.getParamValue('shape', node, tensorMap), utils_1.getParamValue('dtype', node, tensorMap))];\n            }\n        case 'onesLike':\n            {\n                return [tfc.onesLike(utils_1.getParamValue('x', node, tensorMap))];\n            }\n        case 'randomUniform':\n            {\n                return [tfc.randomUniform(utils_1.getParamValue('shape', node, tensorMap), utils_1.getParamValue('minval', node, tensorMap), utils_1.getParamValue('maxval', node, tensorMap), utils_1.getParamValue('dtype', node, tensorMap))];\n            }\n        case 'range':\n            {\n                var start = utils_1.getParamValue('start', node, tensorMap);\n                var stop_2 = utils_1.getParamValue('stop', node, tensorMap);\n                var step = utils_1.getParamValue('step', node, tensorMap);\n                return [tfc.range(start, stop_2, step, utils_1.getParamValue('dtype', node, tensorMap))];\n            }\n        case 'truncatedNormal':\n            {\n                var shape = utils_1.getParamValue('shape', node, tensorMap);\n                var mean = utils_1.getParamValue('mean', node, tensorMap);\n                var stdDev = utils_1.getParamValue('stdDev', node, tensorMap);\n                var seed = utils_1.getParamValue('seed', node, tensorMap);\n                return [tfc.truncatedNormal(shape, mean, stdDev, utils_1.getParamValue('dtype', node, tensorMap), seed)];\n            }\n        case 'zeros':\n            {\n                return [tfc.zeros(utils_1.getParamValue('shape', node, tensorMap), utils_1.getParamValue('dtype', node, tensorMap))];\n            }\n        case 'zerosLike':\n            {\n                return [tfc.zerosLike(utils_1.getParamValue('x', node, tensorMap))];\n            }\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nexports.CATEGORY = 'creation';\n//# sourceMappingURL=creation_executor.js.map\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/graph_executor.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/graph_executor.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js\");\nexports.executeOp = function (node, tensorMap) {\n    switch (node.op) {\n        case 'const':\n            {\n                return tensorMap[node.name];\n            }\n        case 'placeholder':\n            var def = utils_1.getParamValue('default', node, tensorMap);\n            return [utils_1.getTensor(node.name, tensorMap) || def];\n        case 'identity':\n            return [utils_1.getParamValue('x', node, tensorMap)];\n        case 'shape':\n            return [tfc.tensor1d(utils_1.getParamValue('x', node, tensorMap).shape, 'int32')];\n        case 'noop':\n            return [];\n        case 'print':\n            var input = utils_1.getParamValue('x', node, tensorMap);\n            var data = utils_1.getParamValue('data', node, tensorMap);\n            var message = utils_1.getParamValue('message', node, tensorMap);\n            var summarize = utils_1.getParamValue('summarize', node, tensorMap);\n            console.warn('The graph has a tf.print() operation,' + 'usually used for debugging, which slows down performance.');\n            console.log(message);\n            for (var i = 0; i < data.length; i++) {\n                console.log(Array.prototype.slice.call(data[0].dataSync()).slice(0, summarize));\n            }\n            return [input];\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nexports.CATEGORY = 'graph';\n//# sourceMappingURL=graph_executor.js.map\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/graph_executor.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/logical_executor.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/logical_executor.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js\");\nexports.executeOp = function (node, tensorMap) {\n    switch (node.op) {\n        case 'equal':\n            {\n                return [tfc.equal(utils_1.getParamValue('a', node, tensorMap), utils_1.getParamValue('b', node, tensorMap))];\n            }\n        case 'greater':\n            {\n                return [tfc.greater(utils_1.getParamValue('a', node, tensorMap), utils_1.getParamValue('b', node, tensorMap))];\n            }\n        case 'greaterEqual':\n            {\n                return [tfc.greaterEqual(utils_1.getParamValue('a', node, tensorMap), utils_1.getParamValue('b', node, tensorMap))];\n            }\n        case 'less':\n            {\n                return [tfc.less(utils_1.getParamValue('a', node, tensorMap), utils_1.getParamValue('b', node, tensorMap))];\n            }\n        case 'lessEqual':\n            {\n                return [tfc.lessEqual(utils_1.getParamValue('a', node, tensorMap), utils_1.getParamValue('b', node, tensorMap))];\n            }\n        case 'logicalAnd':\n            {\n                return [tfc.logicalAnd(utils_1.getParamValue('a', node, tensorMap), utils_1.getParamValue('b', node, tensorMap))];\n            }\n        case 'logicalNot':\n            {\n                return [tfc.logicalNot(utils_1.getParamValue('a', node, tensorMap))];\n            }\n        case 'logicalOr':\n            {\n                return [tfc.logicalOr(utils_1.getParamValue('a', node, tensorMap), utils_1.getParamValue('b', node, tensorMap))];\n            }\n        case 'where':\n            {\n                return [tfc.where(utils_1.getParamValue('condition', node, tensorMap), utils_1.getParamValue('a', node, tensorMap), utils_1.getParamValue('b', node, tensorMap))];\n            }\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nexports.CATEGORY = 'logical';\n//# sourceMappingURL=logical_executor.js.map\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/logical_executor.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/matrices_executor.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/matrices_executor.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js\");\nexports.executeOp = function (node, tensorMap) {\n    switch (node.op) {\n        case 'matMul':\n            return [tfc.matMul(utils_1.getParamValue('a', node, tensorMap), utils_1.getParamValue('b', node, tensorMap), utils_1.getParamValue('transposeA', node, tensorMap), utils_1.getParamValue('transposeB', node, tensorMap))];\n        case 'transpose':\n            return [tfc.transpose(utils_1.getParamValue('x', node, tensorMap), utils_1.getParamValue('perm', node, tensorMap))];\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nexports.CATEGORY = 'matrices';\n//# sourceMappingURL=matrices_executor.js.map\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/matrices_executor.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js\");\nexports.executeOp = function (node, tensorMap) {\n    switch (node.op) {\n        case 'batchNormalization':\n            {\n                return [tfc.batchNormalization(utils_1.getParamValue('x', node, tensorMap), utils_1.getParamValue('mean', node, tensorMap), utils_1.getParamValue('variance', node, tensorMap), utils_1.getParamValue('epislon', node, tensorMap), utils_1.getParamValue('scale', node, tensorMap), utils_1.getParamValue('offset', node, tensorMap))];\n            }\n        case 'localResponseNormalization':\n            {\n                return [tfc.localResponseNormalization(utils_1.getParamValue('x', node, tensorMap), utils_1.getParamValue('radius', node, tensorMap), utils_1.getParamValue('bias', node, tensorMap), utils_1.getParamValue('alpha', node, tensorMap), utils_1.getParamValue('beta', node, tensorMap))];\n            }\n        case 'softmax':\n            {\n                return [tfc.softmax(utils_1.getParamValue('x', node, tensorMap))];\n            }\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nexports.CATEGORY = 'normalization';\n//# sourceMappingURL=normalization_executor.js.map\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/reduction_executor.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/reduction_executor.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js\");\nexports.executeOp = function (node, tensorMap) {\n    switch (node.op) {\n        case 'max':\n            {\n                var axis = utils_1.getParamValue('axis', node, tensorMap);\n                var keepDims = utils_1.getParamValue('keepDims', node, tensorMap);\n                return [tfc.max(utils_1.getParamValue('x', node, tensorMap), axis, keepDims)];\n            }\n        case 'mean':\n            {\n                var axis = utils_1.getParamValue('axis', node, tensorMap);\n                var keepDims = utils_1.getParamValue('keepDims', node, tensorMap);\n                return [tfc.mean(utils_1.getParamValue('x', node, tensorMap), axis, keepDims)];\n            }\n        case 'min':\n            {\n                var axis = utils_1.getParamValue('axis', node, tensorMap);\n                var keepDims = utils_1.getParamValue('keepDims', node, tensorMap);\n                return [tfc.min(utils_1.getParamValue('x', node, tensorMap), axis, keepDims)];\n            }\n        case 'sum':\n            {\n                var axis = utils_1.getParamValue('axis', node, tensorMap);\n                var keepDims = utils_1.getParamValue('keepDims', node, tensorMap);\n                return [tfc.sum(utils_1.getParamValue('x', node, tensorMap), axis, keepDims)];\n            }\n        case 'argMax':\n            {\n                var axis = utils_1.getParamValue('axis', node, tensorMap);\n                return [tfc.argMax(utils_1.getParamValue('x', node, tensorMap), axis)];\n            }\n        case 'argMin':\n            {\n                var axis = utils_1.getParamValue('axis', node, tensorMap);\n                return [tfc.argMin(utils_1.getParamValue('x', node, tensorMap), axis)];\n            }\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nexports.CATEGORY = 'reduction';\n//# sourceMappingURL=reduction_executor.js.map\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/reduction_executor.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js\");\nexports.executeOp = function (node, tensorMap) {\n    switch (node.op) {\n        case 'concat':\n            {\n                var axis = utils_1.getParamValue('axis', node, tensorMap);\n                var inputs = utils_1.getParamValue('tensors', node, tensorMap);\n                return [tfc.concat(inputs, axis)];\n            }\n        case 'gather':\n            {\n                var axis = utils_1.getParamValue('axis', node, tensorMap);\n                var input = utils_1.getParamValue('x', node, tensorMap);\n                var indices = utils_1.getParamValue('indices', node, tensorMap);\n                return [tfc.gather(input, indices, axis)];\n            }\n        case 'reverse':\n            {\n                var axis = utils_1.getParamValue('axis', node, tensorMap);\n                var input = utils_1.getParamValue('x', node, tensorMap);\n                return [tfc.reverse(input, axis)];\n            }\n        case 'slice':\n            {\n                var begin = utils_1.getParamValue('begin', node, tensorMap);\n                var size = utils_1.getParamValue('size', node, tensorMap);\n                return [tfc.slice(utils_1.getParamValue('x', node, tensorMap), begin, size)];\n            }\n        case 'stack':\n            {\n                var axis = utils_1.getParamValue('axis', node, tensorMap);\n                return [tfc.stack(utils_1.getParamValue('tensors', node, tensorMap), axis)];\n            }\n        case 'tile':\n            {\n                var reps = utils_1.getParamValue('reps', node, tensorMap);\n                return [tfc.tile(utils_1.getParamValue('x', node, tensorMap), reps)];\n            }\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nexports.CATEGORY = 'slice_join';\n//# sourceMappingURL=slice_join_executor.js.map\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/transformation_executor.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/transformation_executor.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js\");\nexports.executeOp = function (node, tensorMap) {\n    switch (node.op) {\n        case 'cast':\n            {\n                return [tfc.cast(utils_1.getParamValue('x', node, tensorMap), utils_1.getParamValue('dtype', node, tensorMap))];\n            }\n        case 'expandDims':\n            {\n                var axis = node.params['axis'].value;\n                return [tfc.expandDims(utils_1.getParamValue('x', node, tensorMap), axis)];\n            }\n        case 'squeeze':\n            {\n                var axis = node.params['axis'].value;\n                return [tfc.squeeze(utils_1.getParamValue('x', node, tensorMap), axis)];\n            }\n        case 'reshape':\n            {\n                return [tfc.reshape(utils_1.getParamValue('x', node, tensorMap), utils_1.getParamValue('shape', node, tensorMap))];\n            }\n        case 'pad':\n            {\n                return [tfc.pad(utils_1.getParamValue('x', node, tensorMap), utils_1.getParamValue('padding', node, tensorMap), utils_1.getParamValue('constantValue', node, tensorMap))];\n            }\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nexports.CATEGORY = 'transformation';\n//# sourceMappingURL=transformation_executor.js.map\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/transformation_executor.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getParamValue(paramName, node, tensorMap) {\n    var param = node.params[paramName];\n    if (param && param.inputIndex !== undefined) {\n        if (param.type === 'tensor') {\n            return getTensor(node.inputNames[param.inputIndex], tensorMap);\n        }\n        if (param.type === 'tensors') {\n            var inputs = param.inputIndex === 0 ? node.inputNames.slice(param.inputIndex, -param.inputParamLength) : node.inputNames.splice(param.inputIndex);\n            return inputs.map(function (name) {\n                return getTensor(name, tensorMap);\n            });\n        }\n        var data = Array.prototype.slice.call(getTensor(node.inputNames.slice(param.inputIndex)[0], tensorMap).dataSync());\n        return param.type === 'number' ? data[0] : data;\n    }\n    return param && param.value;\n}\nexports.getParamValue = getParamValue;\nfunction getTensor(name, tensorMap) {\n    var index = name.lastIndexOf(':');\n    if (index === -1) {\n        return tensorMap[name] ? tensorMap[name][0] : undefined;\n    } else {\n        var nodeName = name.substring(0, index);\n        return tensorMap[nodeName] ? tensorMap[nodeName][Number(name.substring(index + 1))] : undefined;\n    }\n}\nexports.getTensor = getTensor;\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/index.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(/*! ./operation_mapper */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js\"));\n__export(__webpack_require__(/*! ./operation_executor */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_executor.js\"));\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/index.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/arithmetic.json":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/arithmetic.json ***!
  \*****************************************************************************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, 7, 8, default */
/***/ (function(module) {

eval("module.exports = [{\"tfOpName\":\"Add\",\"dlOpName\":\"add\",\"category\":\"arithmetic\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"a\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"b\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"BiasAdd\",\"dlOpName\":\"add\",\"category\":\"arithmetic\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"a\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"b\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Sub\",\"dlOpName\":\"sub\",\"category\":\"arithmetic\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"a\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"b\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"RealDiv\",\"dlOpName\":\"div\",\"category\":\"arithmetic\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"a\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"b\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Div\",\"dlOpName\":\"div\",\"category\":\"arithmetic\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"a\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"b\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Mul\",\"dlOpName\":\"mul\",\"category\":\"arithmetic\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"a\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"b\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Maximum\",\"dlOpName\":\"maximum\",\"category\":\"arithmetic\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"a\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"b\",\"type\":\"tensor\"}]},{\"tfOpName\":\"Minimum\",\"dlOpName\":\"minimum\",\"category\":\"arithmetic\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"a\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"b\",\"type\":\"tensor\"}]},{\"tfOpName\":\"Pow\",\"dlOpName\":\"pow\",\"category\":\"arithmetic\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"a\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"b\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]}];\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/arithmetic.json?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/basic_math.json":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/basic_math.json ***!
  \*****************************************************************************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, default */
/***/ (function(module) {

eval("module.exports = [{\"tfOpName\":\"Abs\",\"dlOpName\":\"abs\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Acos\",\"dlOpName\":\"acos\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Asin\",\"dlOpName\":\"asin\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"atan\",\"dlOpName\":\"atan\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Ceil\",\"dlOpName\":\"ceil\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"ClipByValue\",\"dlOpName\":\"clipByValue\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"clip_value_min\",\"dlParamName\":\"clipValueMin\",\"type\":\"number\"},{\"tfParamName\":\"clip_value_max\",\"dlParamName\":\"clipValueMax\",\"type\":\"number\"}]},{\"tfOpName\":\"Cos\",\"dlOpName\":\"cos\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Cosh\",\"dlOpName\":\"cosh\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Elu\",\"dlOpName\":\"elu\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Exp\",\"dlOpName\":\"exp\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Floor\",\"dlOpName\":\"floor\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Log\",\"dlOpName\":\"log\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Neg\",\"dlOpName\":\"neg\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Relu\",\"dlOpName\":\"relu\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Relu6\",\"dlOpName\":\"clipByValue\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true},{\"dlParamName\":\"clipValueMin\",\"type\":\"number\",\"defaultValue\":0},{\"dlParamName\":\"clipValueMax\",\"type\":\"number\",\"defaultValue\":6}]},{\"tfOpName\":\"Selu\",\"dlOpName\":\"selu\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Sigmoid\",\"dlOpName\":\"sigmoid\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Sin\",\"dlOpName\":\"sin\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Sinh\",\"dlOpName\":\"sinh\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Sqrt\",\"dlOpName\":\"sqrt\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Rsqrt\",\"dlOpName\":\"rsqrt\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Square\",\"dlOpName\":\"square\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Tan\",\"dlOpName\":\"tan\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Tanh\",\"dlOpName\":\"tanh\",\"category\":\"basic_math\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]}];\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/basic_math.json?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/convolution.json":
/*!******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/convolution.json ***!
  \******************************************************************************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, default */
/***/ (function(module) {

eval("module.exports = [{\"tfOpName\":\"AvgPool\",\"dlOpName\":\"avgPool\",\"category\":\"convolution\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"strides\",\"dlParamName\":\"strides\",\"type\":\"number[]\"},{\"tfParamName\":\"padding\",\"dlParamName\":\"pad\",\"type\":\"string\"},{\"tfParamName\":\"data_format\",\"dlParamName\":\"dataFormat\",\"type\":\"string\",\"notSupported\":true},{\"tfParamName\":\"ksize\",\"dlParamName\":\"kernelSize\",\"type\":\"number[]\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"MaxPool\",\"dlOpName\":\"maxPool\",\"category\":\"convolution\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"strides\",\"dlParamName\":\"strides\",\"type\":\"number[]\"},{\"tfParamName\":\"padding\",\"dlParamName\":\"pad\",\"type\":\"string\"},{\"tfParamName\":\"data_format\",\"dlParamName\":\"dataFormat\",\"type\":\"string\",\"notSupported\":true},{\"tfParamName\":\"ksize\",\"dlParamName\":\"kernelSize\",\"type\":\"number[]\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Conv1D\",\"dlOpName\":\"conv1d\",\"category\":\"convolution\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"filter\",\"type\":\"tensor\"},{\"tfParamName\":\"stride\",\"dlParamName\":\"stride\",\"type\":\"number\"},{\"tfParamName\":\"padding\",\"dlParamName\":\"pad\",\"type\":\"string\"},{\"tfParamName\":\"data_format\",\"dlParamName\":\"dataFormat\",\"type\":\"string\",\"defaultValue\":\"NWC\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true},{\"tfParamName\":\"dilation\",\"dlParamName\":\"dilation\",\"type\":\"number\",\"defaultValue\":1}]},{\"tfOpName\":\"Conv2D\",\"dlOpName\":\"conv2d\",\"category\":\"convolution\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"filter\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true},{\"tfParamName\":\"strides\",\"dlParamName\":\"strides\",\"type\":\"number[]\"},{\"tfParamName\":\"padding\",\"dlParamName\":\"pad\",\"type\":\"string\"},{\"tfParamName\":\"useCudnnOnGpu\",\"dlParamName\":\"useCudnnOnGpu\",\"type\":\"bool\"},{\"tfParamName\":\"data_format\",\"dlParamName\":\"dataFormat\",\"type\":\"string\",\"defaultValue\":\"NHWC\"},{\"tfParamName\":\"dilations\",\"dlParamName\":\"dilations\",\"type\":\"number[]\"}]},{\"tfOpName\":\"Conv2DTranspose\",\"dlOpName\":\"conv2dTranspose\",\"category\":\"convolution\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"filter\",\"type\":\"tensor\"},{\"tfParamName\":\"output_shape\",\"dlParamName\":\"outputShape\",\"type\":\"number[]\"},{\"tfParamName\":\"strides\",\"dlParamName\":\"strides\",\"type\":\"number[]\"},{\"tfParamName\":\"padding\",\"dlParamName\":\"pad\",\"type\":\"string\"},{\"tfParamName\":\"data_format\",\"dlParamName\":\"dataFormat\",\"type\":\"string\",\"notSupported\":true}]},{\"tfOpName\":\"DepthwiseConv2d\",\"dlOpName\":\"depthwiseConv2d\",\"category\":\"convolution\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"input\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"filter\",\"type\":\"tensor\"},{\"tfParamName\":\"strides\",\"dlParamName\":\"strides\",\"type\":\"number[]\"},{\"tfParamName\":\"padding\",\"dlParamName\":\"pad\",\"type\":\"string\"},{\"tfParamName\":\"data_format\",\"dlParamName\":\"dataFormat\",\"type\":\"string\",\"defaultValue\":\"NHWC\"},{\"tfParamName\":\"dilations\",\"dlParamName\":\"dilations\",\"type\":\"number[]\"}]},{\"tfOpName\":\"DepthwiseConv2dNative\",\"dlOpName\":\"depthwiseConv2d\",\"category\":\"convolution\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"input\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"filter\",\"type\":\"tensor\"},{\"tfParamName\":\"strides\",\"dlParamName\":\"strides\",\"type\":\"number[]\"},{\"tfParamName\":\"padding\",\"dlParamName\":\"pad\",\"type\":\"string\"},{\"tfParamName\":\"data_format\",\"dlParamName\":\"dataFormat\",\"type\":\"string\",\"defaultValue\":\"NHWC\"},{\"tfParamName\":\"dilations\",\"dlParamName\":\"dilations\",\"type\":\"number[]\"}]}];\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/convolution.json?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/creation.json":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/creation.json ***!
  \***************************************************************************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, default */
/***/ (function(module) {

eval("module.exports = [{\"tfOpName\":\"Fill\",\"dlOpName\":\"fill\",\"category\":\"creation\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"shape\",\"type\":\"number[]\"},{\"tfInputIndex\":1,\"dlParamName\":\"value\",\"type\":\"number\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"LinSpace\",\"dlOpName\":\"linspace\",\"category\":\"creation\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"start\",\"type\":\"number\"},{\"tfInputIndex\":1,\"dlParamName\":\"stop\",\"type\":\"number\"},{\"tfInputIndex\":2,\"dlParamName\":\"num\",\"type\":\"number\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"OneHot\",\"dlOpName\":\"oneHot\",\"category\":\"creation\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"indices\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"depth\",\"type\":\"number\"},{\"tfInputIndex\":2,\"dlParamName\":\"onValue\",\"type\":\"number\",\"defaultValue\":1},{\"tfInputIndex\":3,\"dlParamName\":\"offValue\",\"type\":\"number\",\"defaultValue\":0},{\"tfParamName\":\"axis\",\"dlParamName\":\"axis\",\"type\":\"number\",\"notSupported\":true},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Ones\",\"dlOpName\":\"ones\",\"category\":\"creation\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"shape\",\"type\":\"number[]\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\"}]},{\"tfOpName\":\"OnesLike\",\"dlOpName\":\"onesLike\",\"category\":\"creation\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"dtype\",\"dlParamName\":\"dtype\",\"type\":\"dtype\"}]},{\"tfOpName\":\"RandomUniform\",\"dlOpName\":\"randomUniform\",\"category\":\"creation\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"shape\",\"type\":\"number[]\"},{\"tfParamName\":\"minval\",\"dlParamName\":\"minval\",\"type\":\"number\",\"defaultValue\":0},{\"tfParamName\":\"maxval\",\"dlParamName\":\"maxval\",\"type\":\"number\",\"defaultValue\":1},{\"tfParamName\":\"dtype\",\"dlParamName\":\"dtype\",\"type\":\"dtype\"},{\"tfParamName\":\"seed\",\"dlParamName\":\"seed\",\"type\":\"number\",\"defaultValue\":0},{\"tfParamName\":\"seed2\",\"dlParamName\":\"seed2\",\"type\":\"number\",\"defaultValue\":0,\"notSupported\":true},{\"tfParamName\":\"T\",\"dlParamName\":\"T\",\"type\":\"number\",\"notSupported\":true}]},{\"tfOpName\":\"Range\",\"dlOpName\":\"range\",\"category\":\"creation\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"start\",\"type\":\"number\"},{\"tfInputIndex\":1,\"dlParamName\":\"stop\",\"type\":\"number\"},{\"tfInputIndex\":2,\"dlParamName\":\"step\",\"type\":\"number\",\"defaultValue\":0},{\"tfParamName\":\"Tidx\",\"dlParamName\":\"dtype\",\"type\":\"dtype\"}]},{\"tfOpName\":\"truncatedNormal\",\"dlOpName\":\"truncatedNormal\",\"category\":\"creation\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"shape\",\"type\":\"number[]\"},{\"tfParamName\":\"means\",\"dlParamName\":\"mean\",\"type\":\"number\",\"defaultValue\":0},{\"tfParamName\":\"stddev\",\"dlParamName\":\"stdDev\",\"type\":\"number\",\"defaultValue\":1},{\"tfParamName\":\"seed\",\"dlParamName\":\"seed\",\"type\":\"number\"},{\"tfParamName\":\"seed2\",\"dlParamName\":\"seed2\",\"type\":\"number\",\"defaultValue\":0,\"notSupported\":true},{\"tfParamName\":\"dtype\",\"dlParamName\":\"dtype\",\"type\":\"dtype\"},{\"tfParamName\":\"T\",\"dlParamName\":\"T\",\"type\":\"number\",\"notSupported\":true}]},{\"tfOpName\":\"Zeros\",\"dlOpName\":\"zeros\",\"category\":\"creation\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"shape\",\"type\":\"number[]\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\"}]},{\"tfOpName\":\"ZerosLike\",\"dlOpName\":\"zerosLike\",\"category\":\"creation\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\"}]}];\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/creation.json?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/graph.json":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/graph.json ***!
  \************************************************************************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, default */
/***/ (function(module) {

eval("module.exports = [{\"tfOpName\":\"PlaceholderWithDefault\",\"dlOpName\":\"placeholder\",\"category\":\"graph\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"default\",\"type\":\"tensor\"}]},{\"tfOpName\":\"Placeholder\",\"dlOpName\":\"placeholder\",\"category\":\"graph\"},{\"tfOpName\":\"Const\",\"dlOpName\":\"const\",\"category\":\"graph\"},{\"tfOpName\":\"Identity\",\"dlOpName\":\"identity\",\"category\":\"graph\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"}]},{\"tfOpName\":\"Shape\",\"dlOpName\":\"shape\",\"category\":\"graph\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"}]},{\"tfOpName\":\"Print\",\"dlOpName\":\"print\",\"category\":\"graph\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"tfInputParamLength\":1,\"dlParamName\":\"data\",\"type\":\"tensors\"},{\"tfParamName\":\"message\",\"dlParamName\":\"message\",\"type\":\"string\"},{\"tfParamName\":\"first_n\",\"dlParamName\":\"firstN\",\"type\":\"number\",\"notSupprted\":true},{\"tfParamName\":\"summarize\",\"dlParamName\":\"summarize\",\"type\":\"number\",\"defaultValue\":3}]},{\"tfOpName\":\"NoOp\",\"dlOpName\":\"noop\",\"category\":\"graph\",\"params\":[]}];\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/graph.json?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/logical.json":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/logical.json ***!
  \**************************************************************************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, 7, 8, default */
/***/ (function(module) {

eval("module.exports = [{\"tfOpName\":\"Equal\",\"dlOpName\":\"equal\",\"category\":\"logical\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"a\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"b\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Greater\",\"dlOpName\":\"greater\",\"category\":\"logical\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"a\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"b\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"GreaterEqual\",\"dlOpName\":\"greaterEqual\",\"category\":\"logical\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"a\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"b\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Less\",\"dlOpName\":\"less\",\"category\":\"logical\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"a\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"b\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"LessEqual\",\"dlOpName\":\"lessEqual\",\"category\":\"logical\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"a\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"b\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"LogicalAnd\",\"dlOpName\":\"logicalAnd\",\"category\":\"logical\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"a\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"b\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"LogicalNot\",\"dlOpName\":\"logicalNot\",\"category\":\"logical\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"a\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"LogicalOr\",\"dlOpName\":\"logicalOr\",\"category\":\"logical\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"a\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"b\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Select\",\"dlOpName\":\"where\",\"category\":\"logical\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"condition\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"a\",\"type\":\"tensor\"},{\"tfInputIndex\":2,\"dlParamName\":\"b\",\"type\":\"tensor\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]}];\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/logical.json?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/matrices.json":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/matrices.json ***!
  \***************************************************************************************/
/*! exports provided: 0, 1, default */
/***/ (function(module) {

eval("module.exports = [{\"tfOpName\":\"MatMul\",\"dlOpName\":\"matMul\",\"category\":\"matrices\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"a\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"b\",\"type\":\"tensor\"},{\"tfParamName\":\"transpose_a\",\"dlParamName\":\"transposeA\",\"type\":\"bool\",\"defaultValue\":false},{\"tfParamName\":\"transpose_b\",\"dlParamName\":\"transposeB\",\"type\":\"bool\",\"defaultValue\":false},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]},{\"tfOpName\":\"Transpose\",\"dlOpName\":\"transpose\",\"category\":\"matrices\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"perm\",\"dlParamName\":\"perm\",\"type\":\"number[]\"},{\"tfParamName\":\"T\",\"dlParamName\":\"dtype\",\"type\":\"dtype\",\"notSupported\":true}]}];\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/matrices.json?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/normalization.json":
/*!********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/normalization.json ***!
  \********************************************************************************************/
/*! exports provided: 0, 1, 2, 3, default */
/***/ (function(module) {

eval("module.exports = [{\"tfOpName\":\"FusedBatchNorm\",\"dlOpName\":\"batchNormalization\",\"category\":\"normalization\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"scale\",\"type\":\"tensor\"},{\"tfInputIndex\":2,\"dlParamName\":\"offset\",\"type\":\"tensor\"},{\"tfInputIndex\":3,\"dlParamName\":\"mean\",\"type\":\"tensor\"},{\"tfInputIndex\":4,\"dlParamName\":\"variance\",\"type\":\"tensor\"},{\"tfParamName\":\"epislon\",\"dlParamName\":\"epislon\",\"type\":\"number\",\"defaultValue\":0.001},{\"tfParamName\":\"data_format\",\"dlParamName\":\"dataFormat\",\"type\":\"string\",\"notSupported\":true}]},{\"tfOpName\":\"FusedBatchNormV2\",\"dlOpName\":\"batchNormalization\",\"category\":\"normalization\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"scale\",\"type\":\"tensor\"},{\"tfInputIndex\":2,\"dlParamName\":\"offset\",\"type\":\"tensor\"},{\"tfInputIndex\":3,\"dlParamName\":\"mean\",\"type\":\"tensor\"},{\"tfInputIndex\":4,\"dlParamName\":\"variance\",\"type\":\"tensor\"},{\"tfParamName\":\"epislon\",\"dlParamName\":\"epislon\",\"type\":\"number\",\"defaultValue\":0.001},{\"tfParamName\":\"data_format\",\"dlParamName\":\"dataFormat\",\"type\":\"string\",\"notSupported\":true}]},{\"tfOpName\":\"LRN\",\"dlOpName\":\"localResponseNormalization\",\"category\":\"normalization\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"depth_radius\",\"dlParamName\":\"radius\",\"type\":\"number\",\"defaultValue\":5},{\"tfParamName\":\"bias\",\"dlParamName\":\"bias\",\"type\":\"number\",\"defaultValue\":1},{\"tfParamName\":\"alpha\",\"dlParamName\":\"alpha\",\"type\":\"number\",\"defaultValue\":1},{\"tfParamName\":\"beta\",\"dlParamName\":\"beta\",\"type\":\"number\",\"defaultValue\":0.5}]},{\"tfOpName\":\"Softmax\",\"dlOpName\":\"softmax\",\"category\":\"normalization\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"}]}];\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/normalization.json?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/reduction.json":
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/reduction.json ***!
  \****************************************************************************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, default */
/***/ (function(module) {

eval("module.exports = [{\"tfOpName\":\"Max\",\"dlOpName\":\"max\",\"category\":\"reduction\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"axis\",\"type\":\"number[]\"},{\"tfParamName\":\"keep_dims\",\"dlParamName\":\"keepDims\",\"type\":\"bool\"}]},{\"tfOpName\":\"Mean\",\"dlOpName\":\"mean\",\"category\":\"reduction\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"axis\",\"type\":\"number[]\"},{\"tfParamName\":\"keep_dims\",\"dlParamName\":\"keepDims\",\"type\":\"bool\"}]},{\"tfOpName\":\"Min\",\"dlOpName\":\"min\",\"category\":\"reduction\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"axis\",\"type\":\"number[]\"},{\"tfParamName\":\"keep_dims\",\"dlParamName\":\"keepDims\",\"type\":\"bool\"}]},{\"tfOpName\":\"Sum\",\"dlOpName\":\"sum\",\"category\":\"reduction\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"axis\",\"type\":\"number[]\"},{\"tfParamName\":\"keep_dims\",\"dlParamName\":\"keepDims\",\"type\":\"bool\"}]},{\"tfOpName\":\"ArgMax\",\"dlOpName\":\"argMax\",\"category\":\"reduction\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"axis\",\"type\":\"number\"}]},{\"tfOpName\":\"ArgMin\",\"dlOpName\":\"argMin\",\"category\":\"reduction\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"axis\",\"type\":\"number\"}]}];\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/reduction.json?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/slice_join.json":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/slice_join.json ***!
  \*****************************************************************************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, 7, 8, default */
/***/ (function(module) {

eval("module.exports = [{\"tfOpName\":\"ConcatV2\",\"dlOpName\":\"concat\",\"category\":\"slice_join\",\"params\":[{\"tfInputIndex\":0,\"tfInputParamLength\":1,\"dlParamName\":\"tensors\",\"type\":\"tensors\"},{\"tfInputIndex\":-1,\"dlParamName\":\"axis\",\"type\":\"number\"}]},{\"tfOpName\":\"Concat\",\"dlOpName\":\"concat\",\"category\":\"slice_join\",\"params\":[{\"tfInputIndex\":1,\"tfInputParamLength\":1,\"dlParamName\":\"tensors\",\"type\":\"tensors\"},{\"tfInputIndex\":0,\"dlParamName\":\"axis\",\"type\":\"number\"}]},{\"tfOpName\":\"GatherV2\",\"dlOpName\":\"gather\",\"category\":\"slice_join\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"indices\",\"type\":\"tensor\"},{\"tfParamName\":\"axis\",\"dlParamName\":\"axis\",\"type\":\"number\",\"defaultValue\":0}]},{\"tfOpName\":\"Gather\",\"dlOpName\":\"gather\",\"category\":\"slice_join\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"indices\",\"type\":\"tensor\"},{\"tfParamName\":\"axis\",\"dlParamName\":\"axis\",\"type\":\"number\",\"defaultValue\":0},{\"tfParamName\":\"validate_indices\",\"dlParamName\":\"validateIndices\",\"type\":\"bool\",\"notSupported\":true}]},{\"tfOpName\":\"Reverse\",\"dlOpName\":\"reverse\",\"category\":\"slice_join\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"axis\",\"type\":\"number\"}]},{\"tfOpName\":\"ReverseV2\",\"dlOpName\":\"reverse\",\"category\":\"slice_join\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"axis\",\"type\":\"number\"}]},{\"tfOpName\":\"Slice\",\"dlOpName\":\"slice\",\"category\":\"slice_join\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"begin\",\"type\":\"number[]\"},{\"tfInputIndex\":2,\"dlParamName\":\"size\",\"type\":\"number[]\"}]},{\"tfOpName\":\"Pack\",\"dlOpName\":\"stack\",\"category\":\"slice_join\",\"params\":[{\"tfInputIndex\":0,\"tfInputParamLength\":0,\"dlParamName\":\"tensors\",\"type\":\"tensors\"},{\"tfParamName\":\"axis\",\"dlParamName\":\"axis\",\"type\":\"number\",\"defaultValue\":0}]},{\"tfOpName\":\"Tile\",\"dlOpName\":\"tile\",\"category\":\"slice_join\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"reps\",\"type\":\"number[]\"}]}];\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/slice_join.json?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/transformation.json":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/transformation.json ***!
  \*********************************************************************************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, default */
/***/ (function(module) {

eval("module.exports = [{\"tfOpName\":\"Cast\",\"dlOpName\":\"cast\",\"category\":\"transformation\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"SrcT\",\"dlParamName\":\"sdtype\",\"type\":\"dtype\",\"notSupported\":true},{\"tfParamName\":\"DstT\",\"dlParamName\":\"dtype\",\"type\":\"dtype\"}]},{\"tfOpName\":\"ExpandDims\",\"dlOpName\":\"expandDims\",\"category\":\"transformation\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"tfParamNameDeprecated\":\"dim\",\"dlParamName\":\"axis\",\"type\":\"number\"}]},{\"tfOpName\":\"Pad\",\"dlOpName\":\"pad\",\"category\":\"transformation\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"padding\",\"type\":\"number[]\"},{\"tfParamName\":\"constant_value\",\"dlParamName\":\"constantValue\",\"type\":\"number\",\"defaultValue\":0}]},{\"tfOpName\":\"PadV2\",\"dlOpName\":\"pad\",\"category\":\"transformation\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"padding\",\"type\":\"number[]\"},{\"tfInputIndex\":2,\"dlParamName\":\"constantValue\",\"type\":\"number\",\"defaultValue\":0}]},{\"tfOpName\":\"Reshape\",\"dlOpName\":\"reshape\",\"category\":\"transformation\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfInputIndex\":1,\"dlParamName\":\"shape\",\"type\":\"number[]\"}]},{\"tfOpName\":\"Squeeze\",\"dlOpName\":\"squeeze\",\"category\":\"transformation\",\"params\":[{\"tfInputIndex\":0,\"dlParamName\":\"x\",\"type\":\"tensor\"},{\"tfParamName\":\"axis\",\"tfParamNameDeprecated\":\"squeeze_dims\",\"dlParamName\":\"axis\",\"type\":\"number[]\"}]}];\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/transformation.json?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_executor.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_executor.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar arithmetic = __webpack_require__(/*! ./executors/arithmetic_executor */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/arithmetic_executor.js\");\nvar basicMath = __webpack_require__(/*! ./executors/basic_math_executor */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/basic_math_executor.js\");\nvar convolution = __webpack_require__(/*! ./executors/convolution_executor */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js\");\nvar creation = __webpack_require__(/*! ./executors/creation_executor */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js\");\nvar graph = __webpack_require__(/*! ./executors/graph_executor */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/graph_executor.js\");\nvar logical = __webpack_require__(/*! ./executors/logical_executor */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/logical_executor.js\");\nvar matrices = __webpack_require__(/*! ./executors/matrices_executor */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/matrices_executor.js\");\nvar normalization = __webpack_require__(/*! ./executors/normalization_executor */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js\");\nvar reduction = __webpack_require__(/*! ./executors/reduction_executor */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/reduction_executor.js\");\nvar sliceJoin = __webpack_require__(/*! ./executors/slice_join_executor */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js\");\nvar transformation = __webpack_require__(/*! ./executors/transformation_executor */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/transformation_executor.js\");\nfunction executeOp(node, tensorMap) {\n    switch (node.category) {\n        case 'arithmetic':\n            return arithmetic.executeOp(node, tensorMap);\n        case 'basic_math':\n            return basicMath.executeOp(node, tensorMap);\n        case 'convolution':\n            return convolution.executeOp(node, tensorMap);\n        case 'creation':\n            return creation.executeOp(node, tensorMap);\n        case 'graph':\n            return graph.executeOp(node, tensorMap);\n        case 'logical':\n            return logical.executeOp(node, tensorMap);\n        case 'matrices':\n            return matrices.executeOp(node, tensorMap);\n        case 'normalization':\n            return normalization.executeOp(node, tensorMap);\n        case 'reduction':\n            return reduction.executeOp(node, tensorMap);\n        case 'slice_join':\n            return sliceJoin.executeOp(node, tensorMap);\n        case 'transformation':\n            return transformation.executeOp(node, tensorMap);\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n}\nexports.executeOp = executeOp;\n//# sourceMappingURL=operation_executor.js.map\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_executor.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __read = this && this.__read || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o),\n        r,\n        ar = [],\n        e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    } catch (error) {\n        e = { error: error };\n    } finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally {\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n};\nvar __spread = this && this.__spread || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar index_1 = __webpack_require__(/*! ../data/index */ \"./node_modules/@tensorflow/tfjs-converter/dist/data/index.js\");\nvar arithmetic = __webpack_require__(/*! ./op_list/arithmetic.json */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/arithmetic.json\");\nvar basicMath = __webpack_require__(/*! ./op_list/basic_math.json */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/basic_math.json\");\nvar convolution = __webpack_require__(/*! ./op_list/convolution.json */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/convolution.json\");\nvar creation = __webpack_require__(/*! ./op_list/creation.json */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/creation.json\");\nvar graph = __webpack_require__(/*! ./op_list/graph.json */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/graph.json\");\nvar logical = __webpack_require__(/*! ./op_list/logical.json */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/logical.json\");\nvar matrices = __webpack_require__(/*! ./op_list/matrices.json */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/matrices.json\");\nvar normalization = __webpack_require__(/*! ./op_list/normalization.json */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/normalization.json\");\nvar reduction = __webpack_require__(/*! ./op_list/reduction.json */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/reduction.json\");\nvar sliceJoin = __webpack_require__(/*! ./op_list/slice_join.json */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/slice_join.json\");\nvar transformation = __webpack_require__(/*! ./op_list/transformation.json */ \"./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/transformation.json\");\nvar CONTROL_FLOW_OPS = ['Switch', 'Merge', 'Enter', 'Exit', 'Next'];\nvar OperationMapper = function () {\n    function OperationMapper() {\n        var mappersJson = __spread(arithmetic, basicMath, convolution, creation, logical, graph, matrices, normalization, reduction, sliceJoin, transformation);\n        this.opMappers = mappersJson.reduce(function (map, mapper) {\n            map[mapper.tfOpName] = mapper;\n            return map;\n        }, {});\n    }\n    Object.defineProperty(OperationMapper, \"Instance\", {\n        get: function () {\n            return this._instance || (this._instance = new this());\n        },\n        enumerable: true,\n        configurable: true\n    });\n    OperationMapper.prototype.isControlFlow = function (node) {\n        return CONTROL_FLOW_OPS.some(function (op) {\n            return op === node.op;\n        });\n    };\n    OperationMapper.prototype.transformGraph = function (graph) {\n        var _this = this;\n        var tfNodes = graph.node;\n        var withControlFlow = false;\n        var nodes = tfNodes.reduce(function (map, node) {\n            map[node.name] = _this.mapNode(node);\n            if (_this.isControlFlow(node)) withControlFlow = true;\n            return map;\n        }, {});\n        var inputs = [];\n        var outputs = [];\n        Object.keys(nodes).forEach(function (key) {\n            var node = nodes[key];\n            node.inputNames.forEach(function (name) {\n                node.inputs.push(nodes[name]);\n                nodes[name].children.push(node);\n            });\n            if (node.inputs.length === 0) inputs.push(node);\n        });\n        Object.keys(nodes).forEach(function (key) {\n            var node = nodes[key];\n            if (node.children.length === 0) outputs.push(node);\n        });\n        return { nodes: nodes, inputs: inputs, outputs: outputs, withControlFlow: withControlFlow };\n    };\n    OperationMapper.prototype.mapNode = function (node) {\n        var _this = this;\n        var mapper = this.opMappers[node.op];\n        if (mapper === undefined) {\n            throw new Error('Tensorflow Op is not supported: ' + node.op);\n        }\n        var newNode = {\n            name: node.name,\n            op: mapper.dlOpName,\n            category: mapper.category,\n            inputNames: node.input || [],\n            inputs: [],\n            children: [],\n            params: {}\n        };\n        if (!!mapper.params) {\n            newNode.params = mapper.params.reduce(function (map, param) {\n                var inputIndex = param.tfInputIndex;\n                var inputParamLength = param.tfInputParamLength;\n                var type = param.type;\n                var value = undefined;\n                if (inputIndex === undefined) {\n                    switch (param.type) {\n                        case 'string':\n                            value = _this.getStringParam(node.attr, param.tfParamName, param.defaultValue);\n                            break;\n                        case 'number':\n                            value = _this.getNumberParam(node.attr, param.tfParamName, param.defaultValue);\n                            break;\n                        case 'number[]':\n                            value = _this.getNumericArrayParam(node.attr, param.tfParamName, param.defaultValue);\n                            break;\n                        case 'bool':\n                            value = _this.getBoolParam(node.attr, param.tfParamName, param.defaultValue);\n                            break;\n                        case 'shape':\n                            value = _this.getTensorShapeParam(node.attr, param.tfParamName, param.defaultValue);\n                            break;\n                        case 'dtype':\n                            value = _this.getDtypeParam(node.attr, param.tfParamName, param.defaultValue);\n                            break;\n                        case 'tensor':\n                        case 'tensors':\n                            break;\n                        default:\n                            throw new Error(\"Unsupported param type: \" + param.type + \" for op: \" + node.op);\n                    }\n                }\n                map[param.dlParamName] = { value: value, inputIndex: inputIndex, type: type, inputParamLength: inputParamLength };\n                return map;\n            }, {});\n        }\n        return newNode;\n    };\n    OperationMapper.prototype.getStringParam = function (attrs, name, def, keepCase) {\n        if (keepCase === void 0) {\n            keepCase = false;\n        }\n        var param = attrs[name];\n        if (param !== undefined) {\n            var value = String.fromCharCode.apply(null, param.s);\n            return keepCase ? value : value.toLowerCase();\n        }\n        return def;\n    };\n    OperationMapper.prototype.getBoolParam = function (attrs, name, def) {\n        var param = attrs[name];\n        return param ? param.b : def;\n    };\n    OperationMapper.prototype.getNumberParam = function (attrs, name, def) {\n        var param = attrs[name];\n        return param ? param.f !== undefined ? param.f : param.i : def;\n    };\n    OperationMapper.prototype.getDtypeParam = function (attrs, name, def) {\n        var param = attrs[name];\n        if (param && param.type) {\n            switch (param.type) {\n                case index_1.tensorflow.DataType.DT_FLOAT:\n                    return 'float32';\n                case index_1.tensorflow.DataType.DT_INT32:\n                    return 'int32';\n                case index_1.tensorflow.DataType.DT_BOOL:\n                    return 'bool';\n                default:\n                    return def;\n            }\n        }\n        return def;\n    };\n    OperationMapper.prototype.getTensorShapeParam = function (attrs, name, def) {\n        var param = attrs[name];\n        if (param && param.shape) {\n            return param.shape.dim.map(function (dim) {\n                return dim.size;\n            });\n        }\n        return def;\n    };\n    OperationMapper.prototype.getNumericArrayParam = function (attrs, name, def) {\n        var param = attrs[name];\n        if (param) {\n            return param.list.f.length ? param.list.f : param.list.i;\n        }\n        return def;\n    };\n    return OperationMapper;\n}();\nexports.OperationMapper = OperationMapper;\n//# sourceMappingURL=operation_mapper.js.map\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/version.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/version.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar version = '0.1.0';\nexports.version = version;\n//# sourceMappingURL=version.js.map\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-converter/dist/version.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/browser_util.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/browser_util.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ./doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar BrowserUtil = function () {\n    function BrowserUtil() {}\n    BrowserUtil.nextFrame = function () {\n        return new Promise(function (resolve) {\n            return requestAnimationFrame(function () {\n                return resolve();\n            });\n        });\n    };\n    __decorate([doc_1.doc({ heading: 'Performance', subheading: 'Timing' })], BrowserUtil, \"nextFrame\", null);\n    return BrowserUtil;\n}();\nexports.BrowserUtil = BrowserUtil;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/browser_util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/device_util.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/device_util.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isMobile() {\n    var a = navigator.userAgent || navigator.vendor || window.opera;\n    return (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4))\n    );\n}\nexports.isMobile = isMobile;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/device_util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/doc.js":
/*!********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/doc.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction doc(info) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n    };\n}\nexports.doc = doc;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/doc.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/engine.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/engine.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : new P(function (resolve) {\n                resolve(result.value);\n            }).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n    var _ = { label: 0, sent: function () {\n            if (t[0] & 1) throw t[1];return t[1];\n        }, trys: [], ops: [] },\n        f,\n        y,\n        t,\n        g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n    }), g;\n    function verb(n) {\n        return function (v) {\n            return step([n, v]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0:case 1:\n                    t = op;break;\n                case 4:\n                    _.label++;return { value: op[1], done: false };\n                case 5:\n                    _.label++;y = op[1];op = [0];continue;\n                case 7:\n                    op = _.ops.pop();_.trys.pop();continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];t = op;break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];_.ops.push(op);break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [6, e];y = 0;\n        } finally {\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = __webpack_require__(/*! ./environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar globals_1 = __webpack_require__(/*! ./globals */ \"./node_modules/@tensorflow/tfjs-core/dist/globals.js\");\nvar ops = __webpack_require__(/*! ./ops/ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\");\nvar profiler_1 = __webpack_require__(/*! ./profiler */ \"./node_modules/@tensorflow/tfjs-core/dist/profiler.js\");\nvar tape_1 = __webpack_require__(/*! ./tape */ \"./node_modules/@tensorflow/tfjs-core/dist/tape.js\");\nvar tensor_1 = __webpack_require__(/*! ./tensor */ \"./node_modules/@tensorflow/tfjs-core/dist/tensor.js\");\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar Engine = function () {\n    function Engine(backend, customBackend, safeMode) {\n        this.backend = backend;\n        this.customBackend = customBackend;\n        this.safeMode = safeMode;\n        this.registeredVariables = {};\n        this.refCounter = new WeakMap();\n        this.nextTapeNodeId = 0;\n        this.numBytes = 0;\n        this.numTensors = 0;\n        this.numDataBuffers = 0;\n        this.gradientScopeCount = 0;\n        this.customGradientDepth = 0;\n        this.activeScope = { keep: [], track: [] };\n        this.scopeStack = [this.activeScope];\n        this.profiler = new profiler_1.Profiler(backend);\n    }\n    Engine.prototype.runKernel = function (forwardFunc, inputs, backwardsFunc) {\n        var _this = this;\n        var result;\n        var saved = [];\n        var saveFunc = function (x) {\n            saved.push(x);\n            return x;\n        };\n        var scopeName = this.activeScope.name;\n        if (!environment_1.ENV.get('DEBUG')) {\n            result = forwardFunc(this.backend, saveFunc);\n        } else {\n            result = this.profiler.profileKernel(scopeName, function () {\n                return forwardFunc(_this.backend, saveFunc);\n            });\n        }\n        var recordKernel = this.activeTape != null && this.customGradientDepth === 0;\n        if (recordKernel) {\n            var tapeNode = {\n                id: this.nextTapeNodeId++,\n                name: scopeName,\n                inputs: inputs,\n                output: result\n            };\n            if (backwardsFunc != null) {\n                tapeNode.gradient = function (dy) {\n                    return backwardsFunc(dy, saved);\n                };\n            }\n            this.activeTape.push(tapeNode);\n        }\n        return result;\n    };\n    Engine.prototype.registerTensor = function (a) {\n        var refCount = this.refCounter.has(a.dataId) ? this.refCounter.get(a.dataId) : 0;\n        this.numTensors++;\n        if (refCount === 0) {\n            this.numDataBuffers++;\n            this.numBytes += util.sizeFromShape(a.shape) * util.bytesPerElement(a.dtype);\n            this.backend.register(a.dataId, a.shape, a.dtype);\n        }\n        this.refCounter.set(a.dataId, refCount + 1);\n        if (!(a instanceof tensor_1.Variable)) {\n            this.track(a);\n        }\n    };\n    Engine.prototype.registerVariable = function (v) {\n        if (this.registeredVariables[v.name] != null) {\n            throw new Error(\"Variable with name \" + v.name + \" was already registered\");\n        }\n        this.registeredVariables[v.name] = v;\n    };\n    Engine.prototype.disposeTensor = function (a) {\n        if (!this.refCounter.has(a.dataId)) {\n            return;\n        }\n        this.numTensors--;\n        var refCount = this.refCounter.get(a.dataId);\n        if (refCount <= 1) {\n            this.refCounter.delete(a.dataId);\n            this.backend.disposeData(a.dataId);\n            this.numDataBuffers--;\n            this.numBytes -= util.sizeFromShape(a.shape) * util.bytesPerElement(a.dtype);\n        } else {\n            this.refCounter.set(a.dataId, refCount - 1);\n        }\n    };\n    Engine.prototype.memory = function () {\n        var info = this.backend.memory();\n        info.numTensors = this.numTensors;\n        info.numDataBuffers = this.numDataBuffers;\n        info.numBytes = this.numBytes;\n        return info;\n    };\n    Engine.prototype.shouldRecord = function () {\n        return this.activeTape != null && this.customGradientDepth === 0;\n    };\n    Engine.prototype.addTapeNode = function (inputs, result, gradientsFunc) {\n        var inputsMap = {};\n        inputs.forEach(function (input, idx) {\n            inputsMap[idx] = input;\n        });\n        var gradient = function (dy) {\n            var res = gradientsFunc(dy);\n            var resMap = {};\n            res.forEach(function (r, idx) {\n                resMap[idx] = function () {\n                    return r;\n                };\n            });\n            return resMap;\n        };\n        var tapeNode = {\n            id: this.nextTapeNodeId++,\n            name: this.activeScope.name,\n            inputs: inputsMap,\n            output: result,\n            gradient: gradient\n        };\n        this.activeTape.push(tapeNode);\n    };\n    Engine.prototype.keep = function (result) {\n        if (this.scopeStack.length === 1 && environment_1.ENV.engine.safeMode) {\n            throw new Error('Safe mode is ON. Enclose all tensor operations inside dl.tidy(): ' + 'dl.tidy(() => {...}) to avoid memory leaks.');\n        }\n        this.activeScope.keep.push(result);\n        return result;\n    };\n    Engine.prototype.startScope = function (name, gradientsMode) {\n        if (gradientsMode === void 0) {\n            gradientsMode = false;\n        }\n        if (gradientsMode && this.gradientScopeCount === 0) {\n            this.activeTape = [];\n        }\n        if (gradientsMode) {\n            this.gradientScopeCount++;\n        }\n        var scopeInfo = { keep: [], track: [] };\n        if (name) {\n            scopeInfo.name = name;\n        }\n        this.scopeStack.push(scopeInfo);\n        this.activeScope = scopeInfo;\n    };\n    Engine.prototype.endScope = function (result, gradientsMode) {\n        var _this = this;\n        if (gradientsMode === void 0) {\n            gradientsMode = false;\n        }\n        if (gradientsMode) {\n            this.gradientScopeCount--;\n            if (this.gradientScopeCount === 0) {\n                this.activeTape = null;\n            }\n        }\n        var tensorsToKeep = this.activeScope.keep;\n        var tensorsToTrackInParent = util.extractTensorsFromContainer(result);\n        tensorsToKeep = tensorsToKeep.concat(tensorsToTrackInParent);\n        for (var i = 0; i < this.activeScope.track.length; i++) {\n            var tensor = this.activeScope.track[i];\n            if (util.isTensorInList(tensor, tensorsToKeep)) {\n                continue;\n            }\n            if (this.activeTape != null) {\n                tensorsToTrackInParent.push(tensor);\n            } else {\n                tensor.dispose();\n            }\n        }\n        this.scopeStack.pop();\n        this.activeScope = this.scopeStack.length === 0 ? { keep: [], track: [] } : this.scopeStack[this.scopeStack.length - 1];\n        tensorsToTrackInParent.forEach(function (tensor) {\n            if (!util.isTensorInList(tensor, _this.activeScope.keep)) {\n                _this.track(tensor);\n            }\n        });\n    };\n    Engine.prototype.dispose = function () {\n        if (this.customBackend) {\n            this.backend.dispose();\n        }\n    };\n    Engine.prototype.gradients = function (f, xs, dy, allowNoGradients) {\n        var _this = this;\n        if (allowNoGradients === void 0) {\n            allowNoGradients = false;\n        }\n        util.assert(xs.length > 0, 'gradients() received an empty list of xs.');\n        return globals_1.tidy('gradients', function () {\n            var y = f();\n            util.assert(y instanceof tensor_1.Tensor, 'The result y returned by f() must be a tensor.');\n            var filteredTape = tape_1.getFilteredNodesXToY(_this.activeTape, xs, y);\n            if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n                throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' + 'that the f you passed encloses all operations that lead from x ' + 'to y.');\n            }\n            var accumulatedGradientMap = {};\n            accumulatedGradientMap[y.id] = dy == null ? ops.ones(y.shape) : dy;\n            tape_1.backpropagateGradients(accumulatedGradientMap, filteredTape);\n            var grads = xs.map(function (x) {\n                return accumulatedGradientMap[x.id];\n            });\n            return { value: y, grads: grads };\n        }, true);\n    };\n    Engine.prototype.customGrad = function (f) {\n        var _this = this;\n        util.assert(util.isFunction(f), 'The f passed in customGrad(f) must be a function.');\n        return function () {\n            var inputs = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                inputs[_i] = arguments[_i];\n            }\n            util.assert(inputs.every(function (t) {\n                return t instanceof tensor_1.Tensor;\n            }), 'The args passed in customGrad(f)(x1, x2,...) must all be tensors');\n            _this.customGradientDepth++;\n            var gradientsFunc;\n            var gradientsMode = true;\n            var result = globals_1.tidy(f.name, function () {\n                var _a = f.apply(void 0, inputs),\n                    value = _a.value,\n                    gradFunc = _a.gradFunc;\n                util.assert(value instanceof tensor_1.Tensor, 'The function f passed in customGrad(f) must return an object ' + 'where `obj.value` is a tensor');\n                util.assert(util.isFunction(gradFunc), 'The function f passed in customGrad(f) must return an object ' + 'where `obj.gradFunc` is a function.');\n                gradientsFunc = gradFunc;\n                return value;\n            }, gradientsMode);\n            _this.customGradientDepth--;\n            if (_this.shouldRecord()) {\n                var gradFunc = function (dy) {\n                    var res = gradientsFunc(dy);\n                    var grads = Array.isArray(res) ? res : [res];\n                    util.assert(grads.length === inputs.length, 'The function f passed in customGrad(f) must return an object ' + 'where `obj.gradFunc` is a function that returns the same ' + 'number of tensors as inputs passed to f(...).');\n                    util.assert(grads.every(function (t) {\n                        return t instanceof tensor_1.Tensor;\n                    }), 'The function f passed in customGrad(f) must return an object ' + 'where `obj.gradFunc` is a function that returns a list of ' + 'only tensors.');\n                    return grads;\n                };\n                _this.addTapeNode(inputs, result, gradFunc);\n            }\n            return result;\n        };\n    };\n    Engine.prototype.write = function (dataId, values) {\n        this.backend.write(dataId, values);\n    };\n    Engine.prototype.readSync = function (dataId) {\n        return this.backend.readSync(dataId);\n    };\n    Engine.prototype.read = function (dataId) {\n        return this.backend.read(dataId);\n    };\n    Engine.prototype.fromPixels = function (pixels, numChannels) {\n        return this.backend.fromPixels(pixels, numChannels);\n    };\n    Engine.prototype.time = function (query) {\n        return __awaiter(this, void 0, void 0, function () {\n            var start, timingInfo;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        start = performance.now();\n                        return [4, this.backend.time(query)];\n                    case 1:\n                        timingInfo = _a.sent();\n                        timingInfo.wallMs = performance.now() - start;\n                        return [2, timingInfo];\n                }\n            });\n        });\n    };\n    Engine.prototype.track = function (result) {\n        if (this.scopeStack.length === 1 && this.safeMode) {\n            throw new Error('Safe mode is ON. Enclose all tensor operations inside dl.tidy(): ' + 'dl.tidy(() => {op();...}); to avoid memory leaks.');\n        }\n        this.activeScope.track.push(result);\n        return result;\n    };\n    return Engine;\n}();\nexports.Engine = Engine;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/engine.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/environment.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/environment.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar device_util = __webpack_require__(/*! ./device_util */ \"./node_modules/@tensorflow/tfjs-core/dist/device_util.js\");\nvar doc_1 = __webpack_require__(/*! ./doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar engine_1 = __webpack_require__(/*! ./engine */ \"./node_modules/@tensorflow/tfjs-core/dist/engine.js\");\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar Type;\n(function (Type) {\n    Type[Type[\"NUMBER\"] = 0] = \"NUMBER\";\n    Type[Type[\"BOOLEAN\"] = 1] = \"BOOLEAN\";\n    Type[Type[\"STRING\"] = 2] = \"STRING\";\n})(Type = exports.Type || (exports.Type = {}));\nexports.URL_PROPERTIES = [{ name: 'DEBUG', type: Type.BOOLEAN }, { name: 'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', type: Type.NUMBER }, { name: 'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE', type: Type.BOOLEAN }, { name: 'WEBGL_VERSION', type: Type.NUMBER }, { name: 'WEBGL_FLOAT_TEXTURE_ENABLED', type: Type.BOOLEAN }, {\n    name: 'WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED',\n    type: Type.BOOLEAN\n}, { name: 'BACKEND', type: Type.STRING }];\nfunction hasExtension(gl, extensionName) {\n    var ext = gl.getExtension(extensionName);\n    return ext != null;\n}\nfunction getWebGLRenderingContext(webGLVersion) {\n    if (webGLVersion === 0) {\n        throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n    }\n    var tempCanvas = document.createElement('canvas');\n    if (webGLVersion === 1) {\n        return tempCanvas.getContext('webgl') || tempCanvas.getContext('experimental-webgl');\n    }\n    return tempCanvas.getContext('webgl2');\n}\nfunction loseContext(gl) {\n    if (gl != null) {\n        var loseContextExtension = gl.getExtension('WEBGL_lose_context');\n        if (loseContextExtension == null) {\n            throw new Error('Extension WEBGL_lose_context not supported on this browser.');\n        }\n        loseContextExtension.loseContext();\n    }\n}\nfunction isWebGLVersionEnabled(webGLVersion) {\n    var gl = getWebGLRenderingContext(webGLVersion);\n    if (gl != null) {\n        loseContext(gl);\n        return true;\n    }\n    return false;\n}\nfunction getWebGLDisjointQueryTimerVersion(webGLVersion) {\n    if (webGLVersion === 0) {\n        return 0;\n    }\n    var queryTimerVersion;\n    var gl = getWebGLRenderingContext(webGLVersion);\n    if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') && webGLVersion === 2) {\n        queryTimerVersion = 2;\n    } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n        queryTimerVersion = 1;\n    } else {\n        queryTimerVersion = 0;\n    }\n    if (gl != null) {\n        loseContext(gl);\n    }\n    return queryTimerVersion;\n}\nfunction isFloatTextureReadPixelsEnabled(webGLVersion) {\n    if (webGLVersion === 0) {\n        return false;\n    }\n    var gl = getWebGLRenderingContext(webGLVersion);\n    if (webGLVersion === 1) {\n        if (!hasExtension(gl, 'OES_texture_float')) {\n            return false;\n        }\n    } else {\n        if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n            return false;\n        }\n    }\n    var frameBuffer = gl.createFramebuffer();\n    var texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    var internalFormat = webGLVersion === 2 ? gl.RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    var frameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.FLOAT, new Float32Array(4));\n    var readPixelsNoError = gl.getError() === gl.NO_ERROR;\n    loseContext(gl);\n    return frameBufferComplete && readPixelsNoError;\n}\nfunction isWebGLGetBufferSubDataAsyncExtensionEnabled(webGLVersion) {\n    if (webGLVersion > 0) {\n        return false;\n    }\n    if (webGLVersion !== 2) {\n        return false;\n    }\n    var gl = getWebGLRenderingContext(webGLVersion);\n    var isEnabled = hasExtension(gl, 'WEBGL_get_buffer_sub_data_async');\n    loseContext(gl);\n    return isEnabled;\n}\nvar SUPPORTED_BACKENDS = ['webgl', 'cpu'];\nvar Environment = function () {\n    function Environment(features) {\n        this.features = {};\n        this.BACKEND_REGISTRY = {};\n        this.backends = this.BACKEND_REGISTRY;\n        if (features != null) {\n            this.features = features;\n        }\n        if (this.get('DEBUG')) {\n            console.warn('Debugging mode is ON. The output of every math call will ' + 'be downloaded to CPU and checked for NaNs. ' + 'This significantly impacts performance.');\n        }\n    }\n    Environment.setBackend = function (backendType, safeMode) {\n        if (safeMode === void 0) {\n            safeMode = false;\n        }\n        if (!(backendType in exports.ENV.backends)) {\n            throw new Error(\"Backend type '\" + backendType + \"' not found in registry\");\n        }\n        exports.ENV.initBackend(backendType, safeMode);\n    };\n    Environment.getBackend = function () {\n        exports.ENV.initDefaultBackend();\n        return exports.ENV.currentBackendType;\n    };\n    Environment.memory = function () {\n        return exports.ENV.engine.memory();\n    };\n    Environment.prototype.get = function (feature) {\n        if (feature in this.features) {\n            return this.features[feature];\n        }\n        this.features[feature] = this.evaluateFeature(feature);\n        return this.features[feature];\n    };\n    Environment.prototype.set = function (feature, value) {\n        this.features[feature] = value;\n    };\n    Environment.prototype.getBestBackendType = function () {\n        for (var i = 0; i < SUPPORTED_BACKENDS.length; ++i) {\n            var backendId = SUPPORTED_BACKENDS[i];\n            if (backendId in this.backends) {\n                return backendId;\n            }\n        }\n        throw new Error('No backend found in registry.');\n    };\n    Environment.prototype.evaluateFeature = function (feature) {\n        if (feature === 'DEBUG') {\n            return false;\n        } else if (feature === 'BACKEND') {\n            return this.getBestBackendType();\n        } else if (feature === 'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') {\n            var webGLVersion = this.get('WEBGL_VERSION');\n            if (webGLVersion === 0) {\n                return 0;\n            }\n            return getWebGLDisjointQueryTimerVersion(webGLVersion);\n        } else if (feature === 'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') {\n            return this.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 && !device_util.isMobile();\n        } else if (feature === 'WEBGL_VERSION') {\n            if (isWebGLVersionEnabled(2)) {\n                return 2;\n            } else if (isWebGLVersionEnabled(1)) {\n                return 1;\n            }\n            return 0;\n        } else if (feature === 'WEBGL_FLOAT_TEXTURE_ENABLED') {\n            return isFloatTextureReadPixelsEnabled(this.get('WEBGL_VERSION'));\n        } else if (feature === 'WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED') {\n            return isWebGLGetBufferSubDataAsyncExtensionEnabled(this.get('WEBGL_VERSION'));\n        }\n        throw new Error(\"Unknown feature \" + feature + \".\");\n    };\n    Environment.prototype.setFeatures = function (features) {\n        this.reset();\n        this.features = features;\n        this.backends = {};\n    };\n    Environment.prototype.reset = function () {\n        this.features = getFeaturesFromURL();\n        if (this.globalEngine != null) {\n            this.globalEngine.dispose();\n            this.globalEngine = null;\n        }\n        if (this.backends !== this.BACKEND_REGISTRY) {\n            for (var name_1 in this.backends) {\n                this.backends[name_1].dispose();\n            }\n            this.backends = this.BACKEND_REGISTRY;\n        }\n    };\n    Environment.prototype.initBackend = function (backend, safeMode) {\n        if (safeMode === void 0) {\n            safeMode = false;\n        }\n        var customBackend = false;\n        if (typeof backend === 'string') {\n            this.currentBackendType = backend;\n            backend = exports.ENV.findBackend(backend);\n        } else {\n            customBackend = true;\n            this.currentBackendType = 'custom';\n        }\n        this.globalEngine = new engine_1.Engine(backend, customBackend, safeMode);\n    };\n    Environment.prototype.findBackend = function (name) {\n        return this.backends[name];\n    };\n    Environment.prototype.addCustomBackend = function (name, factory) {\n        if (name in this.backends) {\n            throw new Error(name + \" backend was already registered\");\n        }\n        try {\n            var backend = factory();\n            this.backends[name] = backend;\n            return true;\n        } catch (err) {\n            return false;\n        }\n    };\n    Environment.prototype.registerBackend = function (name, factory) {\n        if (name in this.BACKEND_REGISTRY) {\n            throw new Error(name + \" backend was already registered as global\");\n        }\n        try {\n            var backend = factory();\n            this.BACKEND_REGISTRY[name] = backend;\n            return true;\n        } catch (err) {\n            return false;\n        }\n    };\n    Object.defineProperty(Environment.prototype, \"engine\", {\n        get: function () {\n            this.initDefaultBackend();\n            return this.globalEngine;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Environment.prototype.initDefaultBackend = function () {\n        if (this.globalEngine == null) {\n            this.initBackend(exports.ENV.get('BACKEND'), false);\n        }\n    };\n    __decorate([doc_1.doc({ heading: 'Environment' })], Environment, \"setBackend\", null);\n    __decorate([doc_1.doc({ heading: 'Environment' })], Environment, \"getBackend\", null);\n    __decorate([doc_1.doc({ heading: 'Performance', subheading: 'Memory' })], Environment, \"memory\", null);\n    return Environment;\n}();\nexports.Environment = Environment;\nvar DEEPLEARNJS_FLAGS_PREFIX = 'dljsflags';\nfunction getFeaturesFromURL() {\n    var features = {};\n    if (typeof window === 'undefined') {\n        return features;\n    }\n    var urlParams = util.getQueryParams(window.location.search);\n    if (DEEPLEARNJS_FLAGS_PREFIX in urlParams) {\n        var urlFlags_1 = {};\n        var keyValues = urlParams[DEEPLEARNJS_FLAGS_PREFIX].split(',');\n        keyValues.forEach(function (keyValue) {\n            var _a = keyValue.split(':'),\n                key = _a[0],\n                value = _a[1];\n            urlFlags_1[key] = value;\n        });\n        exports.URL_PROPERTIES.forEach(function (urlProperty) {\n            if (urlProperty.name in urlFlags_1) {\n                console.log(\"Setting feature override from URL \" + urlProperty.name + \": \" + (\"\" + urlFlags_1[urlProperty.name]));\n                if (urlProperty.type === Type.NUMBER) {\n                    features[urlProperty.name] = +urlFlags_1[urlProperty.name];\n                } else if (urlProperty.type === Type.BOOLEAN) {\n                    features[urlProperty.name] = urlFlags_1[urlProperty.name] === 'true';\n                } else if (urlProperty.type === Type.STRING) {\n                    features[urlProperty.name] = urlFlags_1[urlProperty.name];\n                } else {\n                    console.warn(\"Unknown URL param: \" + urlProperty.name + \".\");\n                }\n            }\n        });\n    }\n    return features;\n}\nfunction getGlobalNamespace() {\n    var ns;\n    if (typeof window !== 'undefined') {\n        ns = window;\n    } else if (typeof global !== 'undefined') {\n        ns = global;\n    } else {\n        throw new Error('Could not find a global object');\n    }\n    return ns;\n}\nfunction getOrMakeEnvironment() {\n    var ns = getGlobalNamespace();\n    ns.ENV = ns.ENV || new Environment(getFeaturesFromURL());\n    return ns.ENV;\n}\nexports.ENV = getOrMakeEnvironment();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/environment.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/globals.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/globals.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar gradients_1 = __webpack_require__(/*! ./gradients */ \"./node_modules/@tensorflow/tfjs-core/dist/gradients.js\");\nvar tracking_1 = __webpack_require__(/*! ./tracking */ \"./node_modules/@tensorflow/tfjs-core/dist/tracking.js\");\nexports.tidy = tracking_1.Tracking.tidy;\nexports.keep = tracking_1.Tracking.keep;\nexports.dispose = tracking_1.Tracking.dispose;\nexports.time = tracking_1.Tracking.time;\nexports.grad = gradients_1.Gradients.grad;\nexports.valueAndGrad = gradients_1.Gradients.valueAndGrad;\nexports.grads = gradients_1.Gradients.grads;\nexports.valueAndGrads = gradients_1.Gradients.valueAndGrads;\nexports.variableGrads = gradients_1.Gradients.variableGrads;\nexports.customGrad = gradients_1.Gradients.customGrad;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/globals.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ./doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar environment_1 = __webpack_require__(/*! ./environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar globals_1 = __webpack_require__(/*! ./globals */ \"./node_modules/@tensorflow/tfjs-core/dist/globals.js\");\nvar tensor_1 = __webpack_require__(/*! ./tensor */ \"./node_modules/@tensorflow/tfjs-core/dist/tensor.js\");\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar Gradients = function () {\n    function Gradients() {}\n    Gradients.gradScope = function (nameOrScopeFn, scopeFn) {\n        return globals_1.tidy(nameOrScopeFn, scopeFn, true);\n    };\n    Gradients.grad = function (f) {\n        util.assert(util.isFunction(f), 'The f passed in grad(f) must be a function');\n        return function (x, dy) {\n            util.assert(x instanceof tensor_1.Tensor, 'The x passed in grad(f)(x) must be a tensor');\n            util.assert(dy == null || dy instanceof tensor_1.Tensor, 'The dy passed in grad(f)(x, dy) must be a tensor');\n            var _a = environment_1.ENV.engine.gradients(function () {\n                return f(x);\n            }, [x], dy),\n                value = _a.value,\n                grads = _a.grads;\n            if (dy != null) {\n                util.assertShapesMatch(value.shape, dy.shape, 'The shape of dy passed in grad(f)(x, dy) must match the shape ' + 'returned by f(x)');\n            }\n            value.dispose();\n            checkGrads(grads);\n            return grads[0];\n        };\n    };\n    Gradients.grads = function (f) {\n        util.assert(util.isFunction(f), 'The f passed in grads(f) must be a function');\n        return function (args, dy) {\n            util.assert(Array.isArray(args) && args.every(function (arg) {\n                return arg instanceof tensor_1.Tensor;\n            }), 'The args passed in grads(f)(args) must be an array of tensors');\n            util.assert(dy == null || dy instanceof tensor_1.Tensor, 'The dy passed in grads(f)(args, dy) must be a tensor');\n            var _a = environment_1.ENV.engine.gradients(function () {\n                return f.apply(void 0, args);\n            }, args, dy),\n                value = _a.value,\n                grads = _a.grads;\n            if (dy != null) {\n                util.assertShapesMatch(value.shape, dy.shape, 'The shape of dy passed in grads(f)([x1,...], dy) must match the ' + 'shape returned by f([x1,...])');\n            }\n            value.dispose();\n            checkGrads(grads);\n            return grads;\n        };\n    };\n    Gradients.valueAndGrad = function (f) {\n        util.assert(util.isFunction(f), 'The f passed in valueAndGrad(f) must be a function');\n        return function (x, dy) {\n            util.assert(x instanceof tensor_1.Tensor, 'The x passed in valueAndGrad(f)(x) must be a tensor');\n            util.assert(dy == null || dy instanceof tensor_1.Tensor, 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');\n            var _a = environment_1.ENV.engine.gradients(function () {\n                return f(x);\n            }, [x], dy),\n                grads = _a.grads,\n                value = _a.value;\n            checkGrads(grads);\n            return { grad: grads[0], value: value };\n        };\n    };\n    Gradients.valueAndGrads = function (f) {\n        util.assert(util.isFunction(f), 'The f passed in valueAndGrads(f) must be a function');\n        return function (args, dy) {\n            util.assert(Array.isArray(args) && args.every(function (arg) {\n                return arg instanceof tensor_1.Tensor;\n            }), 'The args passed in valueAndGrads(f)(args) must be array of tensors');\n            util.assert(dy == null || dy instanceof tensor_1.Tensor, 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');\n            var res = environment_1.ENV.engine.gradients(function () {\n                return f.apply(void 0, args);\n            }, args, dy);\n            if (dy != null) {\n                util.assertShapesMatch(res.value.shape, dy.shape, 'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' + 'match the shape returned by f([x1,...])');\n            }\n            checkGrads(res.grads);\n            return res;\n        };\n    };\n    Gradients.variableGrads = function (f, varList) {\n        util.assert(util.isFunction(f), 'The f passed in variableGrads(f) must be a function');\n        util.assert(varList == null || Array.isArray(varList) && varList.every(function (v) {\n            return v instanceof tensor_1.Variable;\n        }), 'The varList passed in variableGrads(f, varList) must be an array ' + 'of variables');\n        if (varList == null) {\n            varList = [];\n            for (var varName in environment_1.ENV.engine.registeredVariables) {\n                varList.push(environment_1.ENV.engine.registeredVariables[varName]);\n            }\n        }\n        var originalVarCount = varList.length;\n        varList = varList.filter(function (variable) {\n            return variable.trainable;\n        });\n        util.assert(varList.length > 0, \"variableGrads() expects at least one of the input variables to be \" + (\"trainable, but none of the \" + originalVarCount + \" variables is \") + \"trainable.\");\n        var allowNoGradients = true;\n        var _a = environment_1.ENV.engine.gradients(f, varList, null, allowNoGradients),\n            value = _a.value,\n            grads = _a.grads;\n        util.assert(grads.some(function (g) {\n            return g != null;\n        }), 'Cannot find a connection between any variable and the result of the ' + 'loss function y=f(x). Please make sure the operations that use ' + 'variables are inside the function f passed to minimize().');\n        util.assert(value.rank === 0, \"The f passed in variableGrads(f) must return a scalar, but it \" + (\"returned a rank-\" + value.rank + \" tensor\"));\n        var namedGrads = {};\n        varList.forEach(function (v, i) {\n            if (grads[i] != null) {\n                namedGrads[v.name] = grads[i];\n            }\n        });\n        return { value: value, grads: namedGrads };\n    };\n    Gradients.customGrad = function (f) {\n        return environment_1.ENV.engine.customGrad(f);\n    };\n    __decorate([doc_1.doc({ heading: 'Training', subheading: 'Gradients' })], Gradients, \"grad\", null);\n    __decorate([doc_1.doc({ heading: 'Training', subheading: 'Gradients' })], Gradients, \"grads\", null);\n    __decorate([doc_1.doc({ heading: 'Training', subheading: 'Gradients' })], Gradients, \"valueAndGrad\", null);\n    __decorate([doc_1.doc({ heading: 'Training', subheading: 'Gradients' })], Gradients, \"valueAndGrads\", null);\n    __decorate([doc_1.doc({ heading: 'Training', subheading: 'Gradients' })], Gradients, \"variableGrads\", null);\n    __decorate([doc_1.doc({ heading: 'Training', subheading: 'Gradients' })], Gradients, \"customGrad\", null);\n    return Gradients;\n}();\nexports.Gradients = Gradients;\nfunction checkGrads(grads) {\n    var numNullGradients = grads.filter(function (g) {\n        return g == null;\n    }).length;\n    if (numNullGradients > 0) {\n        throw new Error(\"Cannot compute gradient of y=f(x) with respect to x. Make sure that\\n    the f you passed encloses all operations that lead from x to y.\");\n    }\n}\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/gradients.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar browser_util_1 = __webpack_require__(/*! ./browser_util */ \"./node_modules/@tensorflow/tfjs-core/dist/browser_util.js\");\nvar environment = __webpack_require__(/*! ./environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nexports.environment = environment;\nvar environment_1 = __webpack_require__(/*! ./environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar test_util = __webpack_require__(/*! ./test_util */ \"./node_modules/@tensorflow/tfjs-core/dist/test_util.js\");\nexports.test_util = test_util;\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nexports.util = util;\nvar version_1 = __webpack_require__(/*! ./version */ \"./node_modules/@tensorflow/tfjs-core/dist/version.js\");\nexports.version_core = version_1.version;\nvar adadelta_optimizer_1 = __webpack_require__(/*! ./optimizers/adadelta_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js\");\nexports.AdadeltaOptimizer = adadelta_optimizer_1.AdadeltaOptimizer;\nvar adagrad_optimizer_1 = __webpack_require__(/*! ./optimizers/adagrad_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js\");\nexports.AdagradOptimizer = adagrad_optimizer_1.AdagradOptimizer;\nvar adam_optimizer_1 = __webpack_require__(/*! ./optimizers/adam_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js\");\nexports.AdamOptimizer = adam_optimizer_1.AdamOptimizer;\nvar adamax_optimizer_1 = __webpack_require__(/*! ./optimizers/adamax_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js\");\nexports.AdamaxOptimizer = adamax_optimizer_1.AdamaxOptimizer;\nvar momentum_optimizer_1 = __webpack_require__(/*! ./optimizers/momentum_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js\");\nexports.MomentumOptimizer = momentum_optimizer_1.MomentumOptimizer;\nvar optimizer_1 = __webpack_require__(/*! ./optimizers/optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js\");\nexports.Optimizer = optimizer_1.Optimizer;\nvar rmsprop_optimizer_1 = __webpack_require__(/*! ./optimizers/rmsprop_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js\");\nexports.RMSPropOptimizer = rmsprop_optimizer_1.RMSPropOptimizer;\nvar sgd_optimizer_1 = __webpack_require__(/*! ./optimizers/sgd_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js\");\nexports.SGDOptimizer = sgd_optimizer_1.SGDOptimizer;\nvar tensor_1 = __webpack_require__(/*! ./tensor */ \"./node_modules/@tensorflow/tfjs-core/dist/tensor.js\");\nexports.Tensor = tensor_1.Tensor;\nexports.TensorBuffer = tensor_1.TensorBuffer;\nexports.variable = tensor_1.variable;\nexports.Variable = tensor_1.Variable;\nvar types_1 = __webpack_require__(/*! ./types */ \"./node_modules/@tensorflow/tfjs-core/dist/types.js\");\nexports.Rank = types_1.Rank;\nvar weights_loader_1 = __webpack_require__(/*! ./weights_loader */ \"./node_modules/@tensorflow/tfjs-core/dist/weights_loader.js\");\nexports.loadWeights = weights_loader_1.loadWeights;\n__export(__webpack_require__(/*! ./ops/ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\"));\n__export(__webpack_require__(/*! ./train */ \"./node_modules/@tensorflow/tfjs-core/dist/train.js\"));\n__export(__webpack_require__(/*! ./globals */ \"./node_modules/@tensorflow/tfjs-core/dist/globals.js\"));\nvar environment_2 = __webpack_require__(/*! ./environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nexports.ENV = environment_2.ENV;\nexports.Environment = environment_2.Environment;\nexports.setBackend = environment_1.Environment.setBackend;\nexports.getBackend = environment_1.Environment.getBackend;\nexports.memory = environment_1.Environment.memory;\nvar doc_1 = __webpack_require__(/*! ./doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nexports.doc = doc_1.doc;\nexports.nextFrame = browser_util_1.BrowserUtil.nextFrame;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/index.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/backend_cpu.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/backend_cpu.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : new P(function (resolve) {\n                resolve(result.value);\n            }).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n    var _ = { label: 0, sent: function () {\n            if (t[0] & 1) throw t[1];return t[1];\n        }, trys: [], ops: [] },\n        f,\n        y,\n        t,\n        g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n    }), g;\n    function verb(n) {\n        return function (v) {\n            return step([n, v]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0:case 1:\n                    t = op;break;\n                case 4:\n                    _.label++;return { value: op[1], done: false };\n                case 5:\n                    _.label++;y = op[1];op = [0];continue;\n                case 7:\n                    op = _.ops.pop();_.trys.pop();continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];t = op;break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];_.ops.push(op);break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [6, e];y = 0;\n        } finally {\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar seedrandom = __webpack_require__(/*! seedrandom */ \"./node_modules/seedrandom/index.js\");\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar axis_util = __webpack_require__(/*! ../ops/axis_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js\");\nvar broadcast_util = __webpack_require__(/*! ../ops/broadcast_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js\");\nvar concat_util = __webpack_require__(/*! ../ops/concat_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/concat_util.js\");\nvar ops = __webpack_require__(/*! ../ops/ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\");\nvar ops_1 = __webpack_require__(/*! ../ops/ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\");\nvar selu_util = __webpack_require__(/*! ../ops/selu_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js\");\nvar tensor_1 = __webpack_require__(/*! ../tensor */ \"./node_modules/@tensorflow/tfjs-core/dist/tensor.js\");\nvar types = __webpack_require__(/*! ../types */ \"./node_modules/@tensorflow/tfjs-core/dist/types.js\");\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar backend_util = __webpack_require__(/*! ./backend_util */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/backend_util.js\");\nvar MathBackendCPU = function () {\n    function MathBackendCPU() {\n        this.data = new WeakMap();\n        if (typeof document !== 'undefined') {\n            this.canvas = document.createElement('canvas');\n        }\n    }\n    MathBackendCPU.prototype.register = function (dataId, shape, dtype) {\n        if (this.data.has(dataId)) {\n            throw new Error(\"Data buffer is already registered\");\n        }\n        this.data.set(dataId, null);\n    };\n    MathBackendCPU.prototype.write = function (dataId, values) {\n        if (values == null) {\n            throw new Error('MathBackendCPU.write(): values can not be null');\n        }\n        this.throwIfNoData(dataId);\n        this.data.set(dataId, values);\n    };\n    MathBackendCPU.prototype.fromPixels = function (pixels, numChannels) {\n        if (pixels == null) {\n            throw new Error('MathBackendCPU.writePixels(): pixels can not be null');\n        }\n        var vals;\n        if (pixels instanceof ImageData) {\n            vals = pixels.data;\n        } else if (pixels instanceof HTMLCanvasElement) {\n            vals = pixels.getContext('2d').getImageData(0, 0, pixels.width, pixels.height).data;\n        } else if (pixels instanceof HTMLImageElement || pixels instanceof HTMLVideoElement) {\n            if (this.canvas == null) {\n                throw new Error('Can\\'t read pixels from HTMLImageElement outside ' + 'the browser.');\n            }\n            this.canvas.width = pixels.width;\n            this.canvas.height = pixels.height;\n            this.canvas.getContext('2d').drawImage(pixels, 0, 0, pixels.width, pixels.height);\n            vals = this.canvas.getContext('2d').getImageData(0, 0, pixels.width, pixels.height).data;\n        } else {\n            throw new Error(\"pixels is of unknown type: \" + pixels.constructor.name);\n        }\n        var values;\n        if (numChannels === 4) {\n            values = new Int32Array(vals);\n        } else {\n            var numPixels = pixels.width * pixels.height;\n            values = new Int32Array(numPixels * numChannels);\n            for (var i = 0; i < numPixels; i++) {\n                for (var channel = 0; channel < numChannels; ++channel) {\n                    values[i * numChannels + channel] = vals[i * 4 + channel];\n                }\n            }\n        }\n        var outShape = [pixels.height, pixels.width, numChannels];\n        return ops_1.tensor3d(values, outShape, 'int32');\n    };\n    MathBackendCPU.prototype.read = function (dataId) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2, this.readSync(dataId)];\n            });\n        });\n    };\n    MathBackendCPU.prototype.readSync = function (dataId) {\n        this.throwIfNoData(dataId);\n        return this.data.get(dataId);\n    };\n    MathBackendCPU.prototype.disposeData = function (dataId) {\n        if (this.data.has(dataId)) {\n            this.data.delete(dataId);\n        }\n    };\n    MathBackendCPU.prototype.time = function (f) {\n        return __awaiter(this, void 0, void 0, function () {\n            var start, kernelMs;\n            return __generator(this, function (_a) {\n                start = performance.now();\n                f();\n                kernelMs = performance.now() - start;\n                return [2, { kernelMs: kernelMs }];\n            });\n        });\n    };\n    MathBackendCPU.prototype.memory = function () {\n        return {\n            unreliable: true\n        };\n    };\n    MathBackendCPU.prototype.throwIfNoData = function (dataId) {\n        if (!this.data.has(dataId)) {\n            throw new Error(\"CPU backend: No data found for this tensor. \" + \"Did you change your backend in the middle of the program? \" + \"New backends can't use Tensors created with previous backends\");\n        }\n    };\n    MathBackendCPU.prototype.slice = function (x, begin, size) {\n        var buffer = ops.buffer(size, x.dtype);\n        for (var i = 0; i < buffer.size; ++i) {\n            var loc = buffer.indexToLoc(i);\n            var xLoc = loc.map(function (idx, j) {\n                return idx + begin[j];\n            });\n            buffer.set.apply(buffer, [x.get.apply(x, xLoc)].concat(loc));\n        }\n        return buffer.toTensor();\n    };\n    MathBackendCPU.prototype.reverse = function (x, axis) {\n        var buffer = ops.buffer(x.shape, x.dtype);\n        var xBuffer = x.buffer();\n        var _loop_1 = function (i) {\n            var outLoc = buffer.indexToLoc(i);\n            var inLoc = outLoc.slice();\n            axis.forEach(function (ax) {\n                return inLoc[ax] = x.shape[ax] - 1 - inLoc[ax];\n            });\n            buffer.set.apply(buffer, [xBuffer.get.apply(xBuffer, inLoc)].concat(outLoc));\n        };\n        for (var i = 0; i < buffer.size; i++) {\n            _loop_1(i);\n        }\n        return buffer.toTensor();\n    };\n    MathBackendCPU.prototype.concat = function (a, b) {\n        var outShape = concat_util.computeOutShape(a.shape, b.shape, 1);\n        var buffer = ops.buffer(outShape, a.dtype);\n        if (a.shape[0] === 1 && b.shape[0] === 1) {\n            var aVals = a.dataSync();\n            var bVals = b.dataSync();\n            var vals = buffer.values;\n            vals.set(aVals, 0);\n            vals.set(bVals, a.size);\n            return buffer.toTensor();\n        }\n        for (var i = 0; i < outShape[0]; ++i) {\n            for (var j = 0; j < a.shape[1]; ++j) {\n                buffer.set(a.get(i, j), i, j);\n            }\n            for (var j = 0; j < b.shape[1]; ++j) {\n                buffer.set(b.get(i, j), i, j + a.shape[1]);\n            }\n        }\n        return buffer.toTensor();\n    };\n    MathBackendCPU.prototype.neg = function (x) {\n        return this.multiply(ops.scalar(-1), x);\n    };\n    MathBackendCPU.prototype.add = function (a, b) {\n        return this.broadcastedBinaryOp(a, b, types.upcastType(a.dtype, b.dtype), function (aValue, bValue) {\n            return aValue + bValue;\n        });\n    };\n    MathBackendCPU.prototype.subtract = function (a, b) {\n        return this.broadcastedBinaryOp(a, b, types.upcastType(a.dtype, b.dtype), function (aValue, bValue) {\n            return aValue - bValue;\n        });\n    };\n    MathBackendCPU.prototype.pow = function (a, b) {\n        return this.broadcastedBinaryOp(a, b, a.dtype, function (aValue, bValue) {\n            return Math.pow(aValue, bValue);\n        });\n    };\n    MathBackendCPU.prototype.matMul = function (a, b, transposeA, transposeB) {\n        var sharedDim = transposeA ? a.shape[0] : a.shape[1];\n        var leftDim = transposeA ? a.shape[1] : a.shape[0];\n        var rightDim = transposeB ? b.shape[0] : b.shape[1];\n        var normalGetter = function (matrix, i, j) {\n            return matrix.get(i, j);\n        };\n        var transposedGetter = function (matrix, i, j) {\n            return matrix.get(j, i);\n        };\n        var aGetter = transposeA ? transposedGetter : normalGetter;\n        var bGetter = transposeB ? transposedGetter : normalGetter;\n        var values = new Float32Array(leftDim * rightDim);\n        var index = 0;\n        for (var i = 0; i < leftDim; ++i) {\n            for (var j = 0; j < rightDim; ++j) {\n                var sum = 0;\n                for (var k = 0; k < sharedDim; ++k) {\n                    sum += aGetter(a, i, k) * bGetter(b, k, j);\n                }\n                values[index++] = sum;\n            }\n        }\n        return ops.tensor2d(values, [leftDim, rightDim]);\n    };\n    MathBackendCPU.prototype.multiply = function (a, b) {\n        return this.broadcastedBinaryOp(a, b, types.upcastType(a.dtype, b.dtype), function (aValue, bValue) {\n            return aValue * bValue;\n        });\n    };\n    MathBackendCPU.prototype.divide = function (a, b) {\n        return this.broadcastedBinaryOp(a, b, 'float32', function (aValue, bValue) {\n            return aValue / bValue;\n        });\n    };\n    MathBackendCPU.prototype.sum = function (x, axes) {\n        axis_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),\n            outShape = _a[0],\n            reduceShape = _a[1];\n        var resultDtype = types.upcastType(x.dtype, 'int32');\n        var result = ops.zeros(outShape, resultDtype);\n        var reduceSize = util.sizeFromShape(reduceShape);\n        var vals = result.dataSync();\n        var aVals = x.dataSync();\n        for (var i = 0; i < vals.length; ++i) {\n            var offset = i * reduceSize;\n            var sum = 0;\n            for (var j = 0; j < reduceSize; ++j) {\n                sum += aVals[offset + j];\n            }\n            vals[i] = sum;\n        }\n        return result;\n    };\n    MathBackendCPU.prototype.argMin = function (x, axes) {\n        axis_util.assertAxesAreInnerMostDims('argMin', axes, x.rank);\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),\n            outShape = _a[0],\n            reduceShape = _a[1];\n        var result = ops.zeros(outShape, 'int32');\n        var reduceSize = util.sizeFromShape(reduceShape);\n        var vals = result.dataSync();\n        var aVals = x.dataSync();\n        for (var i = 0; i < vals.length; ++i) {\n            var offset = i * reduceSize;\n            var min = aVals[offset];\n            var minIndex = 0;\n            for (var j = 0; j < reduceSize; ++j) {\n                var value = aVals[offset + j];\n                if (isNaN(value)) {\n                    minIndex = util.NAN_INT32;\n                    break;\n                }\n                if (value < min) {\n                    min = value;\n                    minIndex = j;\n                }\n            }\n            vals[i] = minIndex;\n        }\n        return result;\n    };\n    MathBackendCPU.prototype.argMax = function (x, axes) {\n        axis_util.assertAxesAreInnerMostDims('argMax', axes, x.rank);\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),\n            outShape = _a[0],\n            reduceShape = _a[1];\n        var result = ops.zeros(outShape, 'int32');\n        var reduceSize = util.sizeFromShape(reduceShape);\n        var vals = result.dataSync();\n        var aVals = x.dataSync();\n        for (var i = 0; i < vals.length; ++i) {\n            var offset = i * reduceSize;\n            var max = aVals[offset];\n            var maxIndex = 0;\n            for (var j = 0; j < reduceSize; ++j) {\n                var value = aVals[offset + j];\n                if (isNaN(value)) {\n                    maxIndex = util.NAN_INT32;\n                    break;\n                }\n                if (value > max) {\n                    max = value;\n                    maxIndex = j;\n                }\n            }\n            vals[i] = maxIndex;\n        }\n        return result;\n    };\n    MathBackendCPU.prototype.equal = function (a, b) {\n        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\n            if (util.isValNaN(aVal, a.dtype) || util.isValNaN(bVal, b.dtype)) {\n                return util.getNaN('bool');\n            } else {\n                return aVal === bVal ? 1 : 0;\n            }\n        });\n    };\n    MathBackendCPU.prototype.notEqual = function (a, b) {\n        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\n            if (util.isValNaN(aVal, a.dtype) || util.isValNaN(bVal, b.dtype)) {\n                return util.getNaN('bool');\n            } else {\n                return aVal !== bVal ? 1 : 0;\n            }\n        });\n    };\n    MathBackendCPU.prototype.less = function (a, b) {\n        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\n            if (util.isValNaN(aVal, a.dtype) || util.isValNaN(bVal, b.dtype)) {\n                return util.getNaN('bool');\n            } else {\n                return aVal < bVal ? 1 : 0;\n            }\n        });\n    };\n    MathBackendCPU.prototype.lessEqual = function (a, b) {\n        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\n            if (util.isValNaN(aVal, a.dtype) || util.isValNaN(bVal, b.dtype)) {\n                return util.getNaN('bool');\n            } else {\n                return aVal <= bVal ? 1 : 0;\n            }\n        });\n    };\n    MathBackendCPU.prototype.greater = function (a, b) {\n        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\n            if (util.isValNaN(aVal, a.dtype) || util.isValNaN(bVal, b.dtype)) {\n                return util.getNaN('bool');\n            } else {\n                return aVal > bVal ? 1 : 0;\n            }\n        });\n    };\n    MathBackendCPU.prototype.greaterEqual = function (a, b) {\n        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\n            if (util.isValNaN(aVal, a.dtype) || util.isValNaN(bVal, b.dtype)) {\n                return util.getNaN('bool');\n            } else {\n                return aVal >= bVal ? 1 : 0;\n            }\n        });\n    };\n    MathBackendCPU.prototype.logicalNot = function (x) {\n        var values = x.dataSync();\n        var newValues = new Int32Array(values.length);\n        for (var i = 0; i < values.length; ++i) {\n            if (util.isValNaN(values[i], x.dtype)) {\n                newValues[i] = util.getNaN('bool');\n            } else {\n                newValues[i] = values[i] ? 0 : 1;\n            }\n        }\n        return tensor_1.Tensor.make(x.shape, { values: newValues }, 'bool');\n    };\n    MathBackendCPU.prototype.logicalAnd = function (a, b) {\n        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\n            if (util.isValNaN(aVal, a.dtype) || util.isValNaN(bVal, b.dtype)) {\n                return util.getNaN('bool');\n            } else {\n                return aVal && bVal;\n            }\n        });\n    };\n    MathBackendCPU.prototype.logicalOr = function (a, b) {\n        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\n            if (util.isValNaN(aVal, a.dtype) || util.isValNaN(bVal, b.dtype)) {\n                return util.getNaN('bool');\n            } else {\n                return aVal || bVal;\n            }\n        });\n    };\n    MathBackendCPU.prototype.logicalXor = function (a, b) {\n        return this.broadcastedBinaryOp(a, b, 'bool', function (aVal, bVal) {\n            if (util.isValNaN(aVal, a.dtype) || util.isValNaN(bVal, b.dtype)) {\n                return util.getNaN('bool');\n            } else {\n                return aVal ^ bVal;\n            }\n        });\n    };\n    MathBackendCPU.prototype.where = function (condition, a, b, dtype) {\n        var values = condition.dataSync();\n        var aValues = a.dataSync();\n        var bValues = b.dataSync();\n        var result = ops.zeros(a.shape, dtype);\n        var newValues = result.dataSync();\n        var index = 0;\n        var offset = condition.rank === 0 || condition.rank > 1 || a.rank === 1 ? 1 : a.shape[1];\n        for (var i = 0; i < values.length; i++) {\n            for (var j = 0; j < offset; j++) {\n                if (values[i] === 1) {\n                    newValues[index++] = aValues[i];\n                } else {\n                    newValues[index++] = bValues[i];\n                }\n            }\n        }\n        return result;\n    };\n    MathBackendCPU.prototype.topKValues = function (x, k) {\n        return this.topK(x, k).values;\n    };\n    MathBackendCPU.prototype.topKIndices = function (x, k) {\n        return this.topK(x, k).indices;\n    };\n    MathBackendCPU.prototype.topK = function (x, k) {\n        var values = x.dataSync();\n        var valuesAndIndices = [];\n        for (var i = 0; i < values.length; i++) {\n            valuesAndIndices.push({ value: values[i], index: i });\n        }\n        valuesAndIndices.sort(function (a, b) {\n            return b.value - a.value;\n        });\n        var topkValues = util.getTypedArrayFromDType(x.dtype, k);\n        var topkIndices = new Int32Array(k);\n        for (var i = 0; i < k; i++) {\n            topkValues[i] = valuesAndIndices[i].value;\n            topkIndices[i] = valuesAndIndices[i].index;\n        }\n        return {\n            values: ops.tensor1d(topkValues, x.dtype),\n            indices: ops.tensor1d(topkIndices, 'int32')\n        };\n    };\n    MathBackendCPU.prototype.min = function (x, axes) {\n        axis_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),\n            outShape = _a[0],\n            reduceShape = _a[1];\n        var result = ops.zeros(outShape, x.dtype);\n        var reduceSize = util.sizeFromShape(reduceShape);\n        var vals = result.dataSync();\n        var aVals = x.dataSync();\n        for (var i = 0; i < vals.length; ++i) {\n            var offset = i * reduceSize;\n            var min = aVals[0];\n            for (var j = 0; j < reduceSize; ++j) {\n                var value = aVals[offset + j];\n                if (isNaN(value)) {\n                    min = Number.NaN;\n                    break;\n                }\n                if (value < min) {\n                    min = value;\n                }\n            }\n            vals[i] = min;\n        }\n        return result;\n    };\n    MathBackendCPU.prototype.minimum = function (a, b) {\n        return this.broadcastedBinaryOp(a, b, a.dtype, function (aVal, bVal) {\n            return Math.min(aVal, bVal);\n        });\n    };\n    MathBackendCPU.prototype.max = function (x, axes) {\n        axis_util.assertAxesAreInnerMostDims('max', axes, x.rank);\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),\n            outShape = _a[0],\n            reduceShape = _a[1];\n        var result = ops.zeros(outShape, x.dtype);\n        var reduceSize = util.sizeFromShape(reduceShape);\n        var vals = result.dataSync();\n        var aVals = x.dataSync();\n        for (var i = 0; i < vals.length; ++i) {\n            var offset = i * reduceSize;\n            var max = aVals[offset];\n            for (var j = 0; j < reduceSize; ++j) {\n                var value = aVals[offset + j];\n                if (isNaN(value)) {\n                    max = Number.NaN;\n                    break;\n                }\n                if (value > max) {\n                    max = value;\n                }\n            }\n            vals[i] = max;\n        }\n        return result;\n    };\n    MathBackendCPU.prototype.maximum = function (a, b) {\n        return this.broadcastedBinaryOp(a, b, a.dtype, function (aVal, bVal) {\n            return Math.max(aVal, bVal);\n        });\n    };\n    MathBackendCPU.prototype.ceil = function (x) {\n        var values = x.dataSync();\n        var newValues = new Float32Array(values.length);\n        for (var i = 0; i < values.length; ++i) {\n            newValues[i] = Math.ceil(values[i]);\n        }\n        return tensor_1.Tensor.make(x.shape, { values: newValues });\n    };\n    MathBackendCPU.prototype.floor = function (x) {\n        var values = x.dataSync();\n        var newValues = new Float32Array(values.length);\n        for (var i = 0; i < values.length; ++i) {\n            newValues[i] = Math.floor(values[i]);\n        }\n        return tensor_1.Tensor.make(x.shape, { values: newValues });\n    };\n    MathBackendCPU.prototype.exp = function (x) {\n        var values = x.dataSync();\n        var newValues = new Float32Array(values.length);\n        for (var i = 0; i < values.length; ++i) {\n            newValues[i] = Math.exp(values[i]);\n        }\n        return tensor_1.Tensor.make(x.shape, { values: newValues });\n    };\n    MathBackendCPU.prototype.log = function (x) {\n        var values = x.dataSync();\n        var newValues = new Float32Array(values.length);\n        for (var i = 0; i < values.length; ++i) {\n            var value = values[i];\n            newValues[i] = Math.log(value);\n        }\n        return tensor_1.Tensor.make(x.shape, { values: newValues });\n    };\n    MathBackendCPU.prototype.log1p = function (x) {\n        var values = x.dataSync();\n        var newValues = new Float32Array(values.length);\n        for (var i = 0; i < values.length; ++i) {\n            var value = values[i];\n            newValues[i] = Math.log1p(value);\n        }\n        return tensor_1.Tensor.make(x.shape, { values: newValues });\n    };\n    MathBackendCPU.prototype.sqrt = function (x) {\n        var values = x.dataSync();\n        var newValues = new Float32Array(values.length);\n        for (var i = 0; i < values.length; ++i) {\n            var value = values[i];\n            newValues[i] = Math.sqrt(value);\n        }\n        return tensor_1.Tensor.make(x.shape, { values: newValues });\n    };\n    MathBackendCPU.prototype.square = function (x) {\n        var values = x.dataSync();\n        var newValues = new Float32Array(values.length);\n        for (var i = 0; i < values.length; ++i) {\n            var value = values[i];\n            newValues[i] = value * value;\n        }\n        return tensor_1.Tensor.make(x.shape, { values: newValues });\n    };\n    MathBackendCPU.prototype.relu = function (x) {\n        var res = ops.zeros(x.shape, x.dtype);\n        var resVals = res.dataSync();\n        var inVals = x.dataSync();\n        for (var i = 0; i < inVals.length; ++i) {\n            var val = inVals[i];\n            if (util.isValNaN(val, x.dtype)) {\n                resVals[i] = util.getNaN(res.dtype);\n            } else {\n                resVals[i] = Math.max(0, inVals[i]);\n            }\n        }\n        return res;\n    };\n    MathBackendCPU.prototype.elu = function (x) {\n        var resultValues = new Float32Array(x.size);\n        var values = x.dataSync();\n        for (var i = 0; i < values.length; ++i) {\n            var v = values[i];\n            if (v >= 0) {\n                resultValues[i] = v;\n            } else {\n                resultValues[i] = Math.exp(v) - 1;\n            }\n        }\n        return tensor_1.Tensor.make(x.shape, { values: resultValues });\n    };\n    MathBackendCPU.prototype.eluDer = function (x) {\n        var resultValues = new Float32Array(x.size);\n        var values = x.dataSync();\n        for (var i = 0; i < values.length; ++i) {\n            var v = values[i];\n            if (v >= 0) {\n                resultValues[i] = 1;\n            } else {\n                resultValues[i] = Math.exp(v);\n            }\n        }\n        return tensor_1.Tensor.make(x.shape, { values: resultValues });\n    };\n    MathBackendCPU.prototype.selu = function (x) {\n        var scaleAlpha = selu_util.SELU_SCALEALPHA;\n        var scale = selu_util.SELU_SCALE;\n        var resultValues = new Float32Array(x.size);\n        var values = x.dataSync();\n        for (var i = 0; i < values.length; ++i) {\n            var v = values[i];\n            if (v >= 0) {\n                resultValues[i] = scale * v;\n            } else {\n                resultValues[i] = scaleAlpha * (Math.exp(v) - 1);\n            }\n        }\n        return tensor_1.Tensor.make(x.shape, { values: resultValues });\n    };\n    MathBackendCPU.prototype.leakyRelu = function (x, alpha) {\n        var resultValues = new Float32Array(x.size);\n        var values = x.dataSync();\n        for (var i = 0; i < values.length; i++) {\n            var v = values[i];\n            if (v >= 0) {\n                resultValues[i] = v;\n            } else {\n                resultValues[i] = alpha * v;\n            }\n        }\n        return tensor_1.Tensor.make(x.shape, { values: resultValues });\n    };\n    MathBackendCPU.prototype.prelu = function (x, alpha) {\n        var resultValues = new Float32Array(x.size);\n        var values = x.dataSync();\n        var alphas = alpha.dataSync();\n        for (var i = 0; i < values.length; i++) {\n            var v = values[i];\n            if (v >= 0) {\n                resultValues[i] = v;\n            } else {\n                resultValues[i] = alphas[i] * v;\n            }\n        }\n        return tensor_1.Tensor.make(x.shape, { values: resultValues });\n    };\n    MathBackendCPU.prototype.preluDer = function (x, alpha) {\n        var resultValues = new Float32Array(x.size);\n        var values = x.dataSync();\n        var alphas = alpha.dataSync();\n        for (var i = 0; i < values.length; i++) {\n            var v = values[i];\n            if (v > 0) {\n                resultValues[i] = 1;\n            } else if (v < 0) {\n                resultValues[i] = alphas[i];\n            } else {\n                resultValues[i] = v;\n            }\n        }\n        return tensor_1.Tensor.make(x.shape, { values: resultValues });\n    };\n    MathBackendCPU.prototype.clip = function (x, min, max) {\n        var resultValues = new Float32Array(x.size);\n        var values = x.dataSync();\n        for (var i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.min(max, Math.max(min, values[i]));\n        }\n        return tensor_1.Tensor.make(x.shape, { values: resultValues });\n    };\n    MathBackendCPU.prototype.abs = function (x) {\n        var resultValues = new Float32Array(x.size);\n        var values = x.dataSync();\n        for (var i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.abs(values[i]);\n        }\n        return tensor_1.Tensor.make(x.shape, { values: resultValues });\n    };\n    MathBackendCPU.prototype.int = function (x) {\n        var resultValues = new Int32Array(x.size);\n        var values = x.dataSync();\n        for (var i = 0; i < values.length; ++i) {\n            resultValues[i] = values[i];\n        }\n        return tensor_1.Tensor.make(x.shape, { values: resultValues }, 'int32');\n    };\n    MathBackendCPU.prototype.sigmoid = function (x) {\n        var resultValues = new Float32Array(x.size);\n        var values = x.dataSync();\n        for (var i = 0; i < values.length; ++i) {\n            resultValues[i] = 1 / (1 + Math.exp(-values[i]));\n        }\n        return tensor_1.Tensor.make(x.shape, { values: resultValues });\n    };\n    MathBackendCPU.prototype.sin = function (x) {\n        var resultValues = new Float32Array(x.size);\n        var values = x.dataSync();\n        for (var i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.sin(values[i]);\n        }\n        return tensor_1.Tensor.make(x.shape, { values: resultValues });\n    };\n    MathBackendCPU.prototype.cos = function (x) {\n        var resultValues = new Float32Array(x.size);\n        var values = x.dataSync();\n        for (var i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.cos(values[i]);\n        }\n        return tensor_1.Tensor.make(x.shape, { values: resultValues });\n    };\n    MathBackendCPU.prototype.tan = function (x) {\n        var resultValues = new Float32Array(x.size);\n        var values = x.dataSync();\n        for (var i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.tan(values[i]);\n        }\n        return tensor_1.Tensor.make(x.shape, { values: resultValues });\n    };\n    MathBackendCPU.prototype.asin = function (x) {\n        var resultValues = new Float32Array(x.size);\n        var values = x.dataSync();\n        for (var i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.asin(values[i]);\n        }\n        return tensor_1.Tensor.make(x.shape, { values: resultValues });\n    };\n    MathBackendCPU.prototype.acos = function (x) {\n        var resultValues = new Float32Array(x.size);\n        var values = x.dataSync();\n        for (var i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.acos(values[i]);\n        }\n        return tensor_1.Tensor.make(x.shape, { values: resultValues });\n    };\n    MathBackendCPU.prototype.atan = function (x) {\n        var resultValues = new Float32Array(x.size);\n        var values = x.dataSync();\n        for (var i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.atan(values[i]);\n        }\n        return tensor_1.Tensor.make(x.shape, { values: resultValues });\n    };\n    MathBackendCPU.prototype.sinh = function (x) {\n        var resultValues = new Float32Array(x.size);\n        var values = x.dataSync();\n        for (var i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.sinh(values[i]);\n        }\n        return tensor_1.Tensor.make(x.shape, { values: resultValues });\n    };\n    MathBackendCPU.prototype.cosh = function (x) {\n        var resultValues = new Float32Array(x.size);\n        var values = x.dataSync();\n        for (var i = 0; i < values.length; ++i) {\n            resultValues[i] = Math.cosh(values[i]);\n        }\n        return tensor_1.Tensor.make(x.shape, { values: resultValues });\n    };\n    MathBackendCPU.prototype.tanh = function (x) {\n        var resultValues = new Float32Array(x.size);\n        var values = x.dataSync();\n        for (var i = 0; i < values.length; ++i) {\n            resultValues[i] = util.tanh(values[i]);\n        }\n        return tensor_1.Tensor.make(x.shape, { values: resultValues });\n    };\n    MathBackendCPU.prototype.step = function (x, alpha) {\n        if (alpha === void 0) {\n            alpha = 0;\n        }\n        var resultValues = new Float32Array(x.size);\n        var values = x.dataSync();\n        for (var i = 0; i < values.length; ++i) {\n            var value = values[i];\n            if (util.isValNaN(value, x.dtype)) {\n                resultValues[i] = util.getNaN(x.dtype);\n            } else {\n                resultValues[i] = value > 0 ? 1 : alpha;\n            }\n        }\n        return tensor_1.Tensor.make(x.shape, { values: resultValues });\n    };\n    MathBackendCPU.prototype.conv2d = function (x, filter, convInfo) {\n        var filterHeight = convInfo.filterHeight;\n        var filterWidth = convInfo.filterWidth;\n        var dilationHeight = convInfo.dilationHeight;\n        var dilationWidth = convInfo.dilationWidth;\n        var padLeft = convInfo.padInfo.left;\n        var padTop = convInfo.padInfo.top;\n        var y = ops.buffer(convInfo.outShape, x.dtype);\n        for (var b = 0; b < convInfo.batchSize; ++b) {\n            for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                for (var yR = 0; yR < convInfo.outHeight; ++yR) {\n                    var xRCorner = yR * convInfo.strideHeight - padLeft;\n                    for (var yC = 0; yC < convInfo.outWidth; ++yC) {\n                        var xCCorner = yC * convInfo.strideWidth - padTop;\n                        var dotProd = 0;\n                        for (var wR = 0; wR < filterHeight; wR++) {\n                            var xR = xRCorner + wR * dilationHeight;\n                            if (xR < 0 || xR >= convInfo.inHeight) {\n                                continue;\n                            }\n                            for (var wC = 0; wC < filterWidth; wC++) {\n                                var xC = xCCorner + wC * dilationWidth;\n                                if (xC < 0 || xC >= convInfo.inWidth) {\n                                    continue;\n                                }\n                                for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                                    var pixel = x.get(b, xR, xC, d1);\n                                    var weight = filter.get(wR, wC, d1, d2);\n                                    dotProd += pixel * weight;\n                                }\n                            }\n                        }\n                        y.set(dotProd, b, yR, yC, d2);\n                    }\n                }\n            }\n        }\n        return y.toTensor();\n    };\n    MathBackendCPU.prototype.conv2dDerInput = function (dy, filter, convInfo) {\n        var filterHeight = convInfo.filterHeight;\n        var filterWidth = convInfo.filterWidth;\n        var topPad = filterHeight - 1 - convInfo.padInfo.top;\n        var leftPad = filterWidth - 1 - convInfo.padInfo.left;\n        var strideHeight = convInfo.strideHeight;\n        var strideWidth = convInfo.strideWidth;\n        var dx = ops.buffer(convInfo.inShape, 'float32');\n        for (var b = 0; b < convInfo.batchSize; ++b) {\n            for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                for (var xR = 0; xR < convInfo.inHeight; ++xR) {\n                    var xRCorner = xR - leftPad;\n                    var xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                    var yRMax = Math.min(convInfo.outHeight, (filterHeight + xRCorner) / strideHeight);\n                    for (var xC = 0; xC < convInfo.inWidth; ++xC) {\n                        var xCCorner = xC - topPad;\n                        var xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                        var yCMax = Math.min(convInfo.outWidth, (filterWidth + xCCorner) / strideWidth);\n                        var dotProd = 0;\n                        for (var yR = xRMin; yR < yRMax; ++yR) {\n                            var wR = yR * strideHeight - xRCorner;\n                            for (var yC = xCMin; yC < yCMax; ++yC) {\n                                var wC = yC * strideWidth - xCCorner;\n                                for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                                    var pixel = dy.get(b, yR, yC, d2);\n                                    var weight = filter.get(filterHeight - 1 - wR, filterWidth - 1 - wC, d1, d2);\n                                    dotProd += pixel * weight;\n                                }\n                            }\n                        }\n                        dx.set(dotProd, b, xR, xC, d1);\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    };\n    MathBackendCPU.prototype.conv2dDerFilter = function (x, dy, convInfo) {\n        var strideHeight = convInfo.strideHeight;\n        var strideWidth = convInfo.strideWidth;\n        var filterHeight = convInfo.filterHeight;\n        var filterWidth = convInfo.filterWidth;\n        var dW = ops.buffer(convInfo.filterShape, 'float32');\n        var leftPad = convInfo.padInfo.left;\n        var topPad = convInfo.padInfo.top;\n        for (var wR = 0; wR < filterHeight; ++wR) {\n            var yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n            var yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n            for (var wC = 0; wC < filterWidth; ++wC) {\n                var yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n                var yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n                for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                    for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                        var dotProd = 0;\n                        for (var b = 0; b < convInfo.batchSize; ++b) {\n                            for (var yR = yRMin; yR < yRMax; ++yR) {\n                                var xR = wR + yR * strideHeight - topPad;\n                                for (var yC = yCMin; yC < yCMax; ++yC) {\n                                    var xC = wC + yC * strideWidth - leftPad;\n                                    dotProd += x.get(b, xR, xC, d1) * dy.get(b, yR, yC, d2);\n                                }\n                            }\n                        }\n                        dW.set(dotProd, wR, wC, d1, d2);\n                    }\n                }\n            }\n        }\n        return dW.toTensor();\n    };\n    MathBackendCPU.prototype.depthwiseConv2D = function (x, filter, convInfo) {\n        var filterHeight = convInfo.filterHeight;\n        var filterWidth = convInfo.filterWidth;\n        var dilationHeight = convInfo.dilationHeight;\n        var dilationWidth = convInfo.dilationWidth;\n        var padLeft = convInfo.padInfo.left;\n        var padTop = convInfo.padInfo.top;\n        var chMul = convInfo.outChannels / convInfo.inChannels;\n        var y = ops.buffer(convInfo.outShape, x.dtype);\n        for (var b = 0; b < convInfo.batchSize; ++b) {\n            for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                for (var yR = 0; yR < convInfo.outHeight; ++yR) {\n                    var xRCorner = yR * convInfo.strideHeight - padLeft;\n                    for (var yC = 0; yC < convInfo.outWidth; ++yC) {\n                        var xCCorner = yC * convInfo.strideWidth - padTop;\n                        for (var q = 0; q < chMul; ++q) {\n                            var dotProd = 0;\n                            for (var wR = 0; wR < filterHeight; ++wR) {\n                                var xR = xRCorner + wR * dilationHeight;\n                                if (xR < 0 || xR >= convInfo.inHeight) {\n                                    continue;\n                                }\n                                for (var wC = 0; wC < filterWidth; ++wC) {\n                                    var xC = xCCorner + wC * dilationWidth;\n                                    if (xC < 0 || xC >= convInfo.inWidth) {\n                                        continue;\n                                    }\n                                    var pixel = x.get(b, xR, xC, d1);\n                                    var weight = filter.get(wR, wC, d1, q);\n                                    dotProd += pixel * weight;\n                                }\n                            }\n                            y.set(dotProd, b, yR, yC, d1 * chMul + q);\n                        }\n                    }\n                }\n            }\n        }\n        return y.toTensor();\n    };\n    MathBackendCPU.prototype.tile = function (x, reps) {\n        var newShape = new Array(x.rank);\n        for (var i = 0; i < newShape.length; i++) {\n            newShape[i] = x.shape[i] * reps[i];\n        }\n        var result = ops.buffer(newShape, x.dtype);\n        var xBuf = x.buffer();\n        for (var i = 0; i < result.values.length; ++i) {\n            var newLoc = result.indexToLoc(i);\n            var originalLoc = new Array(x.rank);\n            for (var i_1 = 0; i_1 < originalLoc.length; i_1++) {\n                originalLoc[i_1] = newLoc[i_1] % x.shape[i_1];\n            }\n            var originalIndex = xBuf.locToIndex(originalLoc);\n            result.values[i] = xBuf.values[originalIndex];\n        }\n        return result.toTensor();\n    };\n    MathBackendCPU.prototype.pad = function (x, paddings, constantValue) {\n        var outShape = paddings.map(function (p, i) {\n            return p[0] + x.shape[i] + p[1];\n        });\n        var start = paddings.map(function (p) {\n            return p[0];\n        });\n        var xBuffer = x.buffer();\n        var buffer = ops.buffer(outShape, x.dtype);\n        if (constantValue !== 0) {\n            buffer.values.fill(constantValue);\n        }\n        for (var i = 0; i < x.size; i++) {\n            var coords = xBuffer.indexToLoc(i);\n            var outCoords = coords.map(function (c, i) {\n                return c + start[i];\n            });\n            buffer.set.apply(buffer, [x.get.apply(x, coords)].concat(outCoords));\n        }\n        return buffer.toTensor();\n    };\n    MathBackendCPU.prototype.transpose = function (x, perm) {\n        var newShape = new Array(x.rank);\n        for (var i = 0; i < newShape.length; i++) {\n            newShape[i] = x.shape[perm[i]];\n        }\n        var values = x.dataSync();\n        var result = ops_1.buffer(newShape, x.dtype);\n        var xBuf = x.buffer();\n        for (var i = 0; i < x.size; ++i) {\n            var loc = xBuf.indexToLoc(i);\n            var newLoc = new Array(loc.length);\n            for (var i_2 = 0; i_2 < newLoc.length; i_2++) {\n                newLoc[i_2] = loc[perm[i_2]];\n            }\n            var newIndex = result.locToIndex(newLoc);\n            result.values[newIndex] = values[i];\n        }\n        return result.toTensor();\n    };\n    MathBackendCPU.prototype.gather = function (x, indices, axis) {\n        var newShape = x.shape.slice();\n        var indicesValues = indices.dataSync();\n        newShape[axis] = indicesValues.length;\n        var result = ops_1.buffer(newShape, x.dtype);\n        var xBuf = x.buffer();\n        for (var i = 0; i < result.size; ++i) {\n            var newLoc = result.indexToLoc(i);\n            var originalLoc = newLoc.slice();\n            originalLoc[axis] = indicesValues[newLoc[axis]];\n            var originalIndex = xBuf.locToIndex(originalLoc);\n            result.values[i] = xBuf.values[originalIndex];\n        }\n        return result.toTensor();\n    };\n    MathBackendCPU.prototype.pool = function (x, convInfo, poolType) {\n        var strideHeight = convInfo.strideHeight;\n        var strideWidth = convInfo.strideWidth;\n        var filterHeight = convInfo.filterHeight;\n        var filterWidth = convInfo.filterWidth;\n        var y = ops.buffer(convInfo.outShape, 'float32');\n        var padTop = convInfo.padInfo.top;\n        var padLeft = convInfo.padInfo.left;\n        for (var b = 0; b < convInfo.batchSize; ++b) {\n            for (var d = 0; d < convInfo.inChannels; ++d) {\n                for (var yR = 0; yR < convInfo.outHeight; ++yR) {\n                    var xRCorner = yR * strideHeight - padTop;\n                    var xRMin = Math.max(0, xRCorner);\n                    var xRMax = Math.min(convInfo.inHeight, filterHeight + xRCorner);\n                    for (var yC = 0; yC < convInfo.outWidth; ++yC) {\n                        var xCCorner = yC * strideWidth - padLeft;\n                        var xCMin = Math.max(0, xCCorner);\n                        var xCMax = Math.min(convInfo.inWidth, filterWidth + xCCorner);\n                        var minMaxValue = poolType === 'max' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n                        var avgValue = 0;\n                        for (var xR = xRMin; xR < xRMax; ++xR) {\n                            for (var xC = xCMin; xC < xCMax; ++xC) {\n                                var pixel = x.get(b, xR, xC, d);\n                                if (isNaN(pixel)) {\n                                    minMaxValue = NaN;\n                                    avgValue = NaN;\n                                    break;\n                                }\n                                if (poolType === 'max' && pixel > minMaxValue || poolType === 'min' && pixel < minMaxValue) {\n                                    minMaxValue = pixel;\n                                } else if (poolType === 'avg') {\n                                    avgValue += pixel / (filterHeight * filterWidth);\n                                }\n                            }\n                            if (isNaN(minMaxValue)) {\n                                break;\n                            }\n                        }\n                        y.set(poolType === 'avg' ? avgValue : minMaxValue, b, yR, yC, d);\n                    }\n                }\n            }\n        }\n        return y.toTensor();\n    };\n    MathBackendCPU.prototype.maxPool = function (x, convInfo) {\n        return this.pool(x, convInfo, 'max');\n    };\n    MathBackendCPU.prototype.maxPoolPositions = function (x, convInfo) {\n        var maxPositions = ops.buffer(convInfo.outShape, 'int32');\n        var strideHeight = convInfo.strideHeight;\n        var strideWidth = convInfo.strideWidth;\n        var filterHeight = convInfo.filterHeight;\n        var filterWidth = convInfo.filterWidth;\n        var padTop = convInfo.padInfo.top;\n        var padLeft = convInfo.padInfo.left;\n        for (var b = 0; b < convInfo.batchSize; ++b) {\n            for (var d = 0; d < convInfo.inChannels; ++d) {\n                for (var yR = 0; yR < convInfo.outHeight; ++yR) {\n                    var xRCorner = yR * strideHeight - padTop;\n                    var xRMin = Math.max(0, xRCorner);\n                    var xRMax = Math.min(convInfo.inHeight, filterHeight + xRCorner);\n                    for (var yC = 0; yC < convInfo.outWidth; ++yC) {\n                        var xCCorner = yC * strideWidth - padLeft;\n                        var xCMin = Math.max(0, xCCorner);\n                        var xCMax = Math.min(convInfo.inWidth, filterWidth + xCCorner);\n                        var maxValue = Number.NEGATIVE_INFINITY;\n                        var maxPosition = -1;\n                        for (var xR = xRMin; xR < xRMax; ++xR) {\n                            var wR = xR - xRCorner;\n                            for (var xC = xCMin; xC < xCMax; ++xC) {\n                                var wC = xC - xCCorner;\n                                var pixel = x.get(b, xR, xC, d);\n                                if (pixel > maxValue) {\n                                    maxValue = pixel;\n                                    maxPosition = wR * filterWidth + wC;\n                                }\n                            }\n                        }\n                        maxPositions.set(maxPosition, b, yR, yC, d);\n                    }\n                }\n            }\n        }\n        return maxPositions.toTensor();\n    };\n    MathBackendCPU.prototype.maxPoolBackprop = function (dy, x, convInfo) {\n        var maxPositions = this.maxPoolPositions(x, convInfo);\n        var strideHeight = convInfo.strideHeight;\n        var strideWidth = convInfo.strideWidth;\n        var filterHeight = convInfo.filterHeight;\n        var filterWidth = convInfo.filterWidth;\n        var padLeft = filterWidth - 1 - convInfo.padInfo.left;\n        var padTop = filterHeight - 1 - convInfo.padInfo.top;\n        var dx = ops.buffer(x.shape, 'float32');\n        for (var b = 0; b < convInfo.batchSize; ++b) {\n            for (var d = 0; d < convInfo.inChannels; ++d) {\n                for (var dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n                    for (var dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n                        var dyRCorner = dxR - padTop;\n                        var dyCCorner = dxC - padLeft;\n                        var dotProd = 0;\n                        for (var wR = 0; wR < filterHeight; ++wR) {\n                            var dyR = (dyRCorner + wR) / strideHeight;\n                            if (dyR < 0 || dyR >= convInfo.outHeight || Math.floor(dyR) !== dyR) {\n                                continue;\n                            }\n                            for (var wC = 0; wC < filterWidth; ++wC) {\n                                var dyC = (dyCCorner + wC) / strideWidth;\n                                if (dyC < 0 || dyC >= convInfo.outWidth || Math.floor(dyC) !== dyC) {\n                                    continue;\n                                }\n                                var maxPos = filterHeight * filterWidth - 1 - maxPositions.get(b, dyR, dyC, d);\n                                var curPos = wR * filterWidth + wC;\n                                var mask = maxPos === curPos ? 1 : 0;\n                                if (mask === 0) {\n                                    continue;\n                                }\n                                var pixel = dy.get(b, dyR, dyC, d);\n                                dotProd += pixel * mask;\n                            }\n                        }\n                        dx.set(dotProd, b, dxR, dxC, d);\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    };\n    MathBackendCPU.prototype.avgPoolBackprop = function (dy, x, convInfo) {\n        var strideHeight = convInfo.strideHeight;\n        var strideWidth = convInfo.strideWidth;\n        var filterHeight = convInfo.filterHeight;\n        var filterWidth = convInfo.filterWidth;\n        var padLeft = filterWidth - 1 - convInfo.padInfo.left;\n        var padTop = filterHeight - 1 - convInfo.padInfo.top;\n        var dx = ops.buffer(x.shape, 'float32');\n        var avgMultiplier = 1 / (filterHeight * filterWidth);\n        for (var b = 0; b < convInfo.batchSize; ++b) {\n            for (var d = 0; d < convInfo.inChannels; ++d) {\n                for (var dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n                    for (var dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n                        var dyRCorner = dxR - padTop;\n                        var dyCCorner = dxC - padLeft;\n                        var dotProd = 0;\n                        for (var wR = 0; wR < filterHeight; ++wR) {\n                            var dyR = (dyRCorner + wR) / strideHeight;\n                            if (dyR < 0 || dyR >= convInfo.outHeight || Math.floor(dyR) !== dyR) {\n                                continue;\n                            }\n                            for (var wC = 0; wC < filterWidth; ++wC) {\n                                var dyC = (dyCCorner + wC) / strideWidth;\n                                if (dyC < 0 || dyC >= convInfo.outWidth || Math.floor(dyC) !== dyC) {\n                                    continue;\n                                }\n                                var pixel = dy.get(b, dyR, dyC, d);\n                                dotProd += pixel;\n                            }\n                        }\n                        dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n                    }\n                }\n            }\n        }\n        return dx.toTensor();\n    };\n    MathBackendCPU.prototype.cast = function (x, dtype) {\n        return backend_util.castTensor(x, dtype, this);\n    };\n    MathBackendCPU.prototype.reshape = function (x, shape) {\n        return backend_util.reshapeTensor(x, shape);\n    };\n    MathBackendCPU.prototype.minPool = function (x, convInfo) {\n        return this.pool(x, convInfo, 'min');\n    };\n    MathBackendCPU.prototype.avgPool = function (x, convInfo) {\n        return this.pool(x, convInfo, 'avg').toFloat();\n    };\n    MathBackendCPU.prototype.resizeBilinear = function (x, newHeight, newWidth, alignCorners) {\n        var _a = x.shape,\n            batch = _a[0],\n            oldHeight = _a[1],\n            oldWidth = _a[2],\n            numChannels = _a[3];\n        var output = ops.buffer([batch, newHeight, newWidth, numChannels], x.dtype);\n        var effectiveInputSize = alignCorners ? [oldHeight - 1, oldWidth - 1] : [oldHeight, oldWidth];\n        var effectiveOutputSize = alignCorners ? [newHeight - 1, newWidth - 1] : [newHeight, newWidth];\n        for (var b = 0; b < batch; b++) {\n            for (var r = 0; r < newHeight; r++) {\n                for (var c = 0; c < newWidth; c++) {\n                    for (var d = 0; d < numChannels; d++) {\n                        var sourceFracRow = effectiveInputSize[0] * r / effectiveOutputSize[0];\n                        var sourceFracCol = effectiveInputSize[1] * c / effectiveOutputSize[1];\n                        var sourceRowFloor = Math.floor(sourceFracRow);\n                        var sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n                        var sourceColFloor = Math.floor(sourceFracCol);\n                        var sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n                        var topLeft = x.get(b, sourceRowFloor, sourceColFloor, d);\n                        var bottomLeft = x.get(b, sourceRowCeil, sourceColFloor, d);\n                        var topRight = x.get(b, sourceRowFloor, sourceColCeil, d);\n                        var bottomRight = x.get(b, sourceRowCeil, sourceColCeil, d);\n                        var rowFrac = sourceFracRow - sourceRowFloor;\n                        var colFrac = sourceFracCol - sourceColFloor;\n                        var top_1 = topLeft + (topRight - topLeft) * colFrac;\n                        var bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n                        var newValue = top_1 + (bottom - top_1) * rowFrac;\n                        output.set(newValue, b, r, c, d);\n                    }\n                }\n            }\n        }\n        return output.toTensor();\n    };\n    MathBackendCPU.prototype.batchNormalization4D = function (x, mean, variance, varianceEpsilon, scale, offset) {\n        var xValues = x.dataSync();\n        var meanValues = mean.dataSync();\n        var varianceValues = variance.dataSync();\n        var scaleValues = scale ? scale.dataSync() : new Float32Array([1]);\n        var offsetValues = offset ? offset.dataSync() : new Float32Array([0]);\n        var outValues = new Float32Array(xValues.length);\n        for (var i = 0; i < xValues.length; i++) {\n            outValues[i] = offsetValues[i % offsetValues.length] + (xValues[i] - meanValues[i % meanValues.length]) * scaleValues[i % scaleValues.length] / Math.sqrt(varianceValues[i % varianceValues.length] + varianceEpsilon);\n        }\n        return ops_1.tensor4d(outValues, x.shape);\n    };\n    MathBackendCPU.prototype.localResponseNormalization4D = function (x, radius, bias, alpha, beta, normRegion) {\n        var output = ops.buffer(x.shape, 'float32');\n        var rad = radius;\n        var maxW = output.shape[1] - 1;\n        var maxH = output.shape[2] - 1;\n        var maxD = output.shape[3] - 1;\n        var sumAcrossChannels = function (b, r, c, d) {\n            var sum = 0.0;\n            for (var j = Math.max(0, d - rad); j <= Math.min(d + rad, maxD); j++) {\n                var z = x.get(b, r, c, j);\n                sum += z * z;\n            }\n            return sum;\n        };\n        var sumWithinChannel = function (b, r, c, d) {\n            var sum = 0.0;\n            for (var u = Math.max(0, r - rad); u <= Math.min(r + rad, maxW); u++) {\n                for (var v = Math.max(0, c - rad); v <= Math.min(c + rad, maxH); v++) {\n                    sum += Math.pow(x.get(b, u, v, d), 2);\n                }\n            }\n            return sum;\n        };\n        for (var b = 0; b < output.shape[0]; b++) {\n            for (var r = 0; r <= output.shape[1]; r++) {\n                for (var c = 0; c < output.shape[2]; c++) {\n                    for (var d = 0; d < output.shape[3]; d++) {\n                        var sum = normRegion === 'withinChannel' ? sumWithinChannel(b, r, c, d) : sumAcrossChannels(b, r, c, d);\n                        var val = x.get(b, r, c, d) * Math.pow(bias + alpha * sum, -beta);\n                        output.set(val, b, r, c, d);\n                    }\n                }\n            }\n        }\n        return output.toTensor();\n    };\n    MathBackendCPU.prototype.multinomial = function (probabilities, numSamples, seed) {\n        var batchSize = probabilities.shape[0];\n        var numEvents = probabilities.shape[1];\n        var res = ops.zeros([batchSize, numSamples], 'int32');\n        var resVals = res.dataSync();\n        var probVals = probabilities.dataSync();\n        for (var b = 0; b < batchSize; ++b) {\n            var offset = b * numEvents;\n            var cdf = new Float32Array(numEvents - 1);\n            cdf[0] = probVals[offset];\n            for (var event_1 = 1; event_1 < cdf.length; ++event_1) {\n                cdf[event_1] = cdf[event_1 - 1] + probVals[offset + event_1];\n            }\n            var random = seedrandom.alea(seed.toString());\n            var outOffset = b * numSamples;\n            for (var sampleId = 0; sampleId < numSamples; ++sampleId) {\n                var r = random();\n                resVals[outOffset + sampleId] = cdf.length;\n                for (var event_2 = 0; event_2 < cdf.length; event_2++) {\n                    if (r < cdf[event_2]) {\n                        resVals[outOffset + sampleId] = event_2;\n                        break;\n                    }\n                }\n            }\n        }\n        return res;\n    };\n    MathBackendCPU.prototype.oneHot = function (indices, depth, onValue, offValue) {\n        var res = new Float32Array(indices.size * depth);\n        res.fill(offValue);\n        for (var event_3 = 0; event_3 < indices.size; ++event_3) {\n            res[event_3 * depth + indices.get(event_3)] = onValue;\n        }\n        return ops.tensor2d(res, [indices.size, depth]);\n    };\n    MathBackendCPU.prototype.broadcastedBinaryOp = function (a, b, dtype, op) {\n        var newShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        var result = ops.buffer(newShape, dtype);\n        var aValues = a.dataSync();\n        var bValues = b.dataSync();\n        var aBroadcastDims = broadcast_util.getBroadcastDims(a.shape, newShape);\n        var bBroadcastDims = broadcast_util.getBroadcastDims(b.shape, newShape);\n        var aBuf = a.buffer();\n        var bBuf = b.buffer();\n        var _loop_2 = function (i) {\n            var loc = result.indexToLoc(i);\n            var aLoc = loc.slice(-a.rank);\n            aBroadcastDims.forEach(function (d) {\n                return aLoc[d] = 0;\n            });\n            var aIndex = aBuf.locToIndex(aLoc);\n            var bLoc = loc.slice(-b.rank);\n            bBroadcastDims.forEach(function (d) {\n                return bLoc[d] = 0;\n            });\n            var bIndex = bBuf.locToIndex(bLoc);\n            result.values[i] = op(aValues[aIndex], bValues[bIndex]);\n        };\n        for (var i = 0; i < result.values.length; ++i) {\n            _loop_2(i);\n        }\n        return result.toTensor();\n    };\n    MathBackendCPU.prototype.dispose = function () {};\n    return MathBackendCPU;\n}();\nexports.MathBackendCPU = MathBackendCPU;\nenvironment_1.ENV.registerBackend('cpu', function () {\n    return new MathBackendCPU();\n});\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/backend_cpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/backend_util.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/backend_util.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar __1 = __webpack_require__(/*! .. */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar array_ops_1 = __webpack_require__(/*! ../ops/array_ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js\");\nfunction castTensor(x, dtype, backend) {\n    if (!__1.util.hasEncodingLoss(x.dtype, dtype)) {\n        return __1.Tensor.make(x.shape, { dataId: x.dataId }, dtype);\n    }\n    if (dtype === 'int32') {\n        return backend.int(x);\n    } else if (dtype === 'bool') {\n        return backend.notEqual(x, array_ops_1.ArrayOps.scalar(0, x.dtype));\n    } else {\n        throw new Error(\"Error in Cast: unknown dtype argument (\" + dtype + \")\");\n    }\n}\nexports.castTensor = castTensor;\nfunction reshapeTensor(x, shape) {\n    return __1.Tensor.make(shape, { dataId: x.dataId }, x.dtype);\n}\nexports.reshapeTensor = reshapeTensor;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/backend_util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/backend_webgl.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/backend_webgl.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : new P(function (resolve) {\n                resolve(result.value);\n            }).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n    var _ = { label: 0, sent: function () {\n            if (t[0] & 1) throw t[1];return t[1];\n        }, trys: [], ops: [] },\n        f,\n        y,\n        t,\n        g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n    }), g;\n    function verb(n) {\n        return function (v) {\n            return step([n, v]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0:case 1:\n                    t = op;break;\n                case 4:\n                    _.label++;return { value: op[1], done: false };\n                case 5:\n                    _.label++;y = op[1];op = [0];continue;\n                case 7:\n                    op = _.ops.pop();_.trys.pop();continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];t = op;break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];_.ops.push(op);break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [6, e];y = 0;\n        } finally {\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar axis_util = __webpack_require__(/*! ../ops/axis_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js\");\nvar reduce_util = __webpack_require__(/*! ../ops/reduce_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/reduce_util.js\");\nvar tensor_1 = __webpack_require__(/*! ../tensor */ \"./node_modules/@tensorflow/tfjs-core/dist/tensor.js\");\nvar types = __webpack_require__(/*! ../types */ \"./node_modules/@tensorflow/tfjs-core/dist/types.js\");\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar backend_util = __webpack_require__(/*! ./backend_util */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/backend_util.js\");\nvar argminmax_gpu_1 = __webpack_require__(/*! ./webgl/argminmax_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/argminmax_gpu.js\");\nvar avg_pool_backprop_gpu_1 = __webpack_require__(/*! ./webgl/avg_pool_backprop_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/avg_pool_backprop_gpu.js\");\nvar batchnorm_gpu_1 = __webpack_require__(/*! ./webgl/batchnorm_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/batchnorm_gpu.js\");\nvar binaryop_gpu = __webpack_require__(/*! ./webgl/binaryop_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/binaryop_gpu.js\");\nvar binaryop_gpu_1 = __webpack_require__(/*! ./webgl/binaryop_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/binaryop_gpu.js\");\nvar clip_gpu_1 = __webpack_require__(/*! ./webgl/clip_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/clip_gpu.js\");\nvar concat_gpu_1 = __webpack_require__(/*! ./webgl/concat_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/concat_gpu.js\");\nvar conv_backprop_gpu_1 = __webpack_require__(/*! ./webgl/conv_backprop_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/conv_backprop_gpu.js\");\nvar conv_gpu_1 = __webpack_require__(/*! ./webgl/conv_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/conv_gpu.js\");\nvar conv_gpu_depthwise_1 = __webpack_require__(/*! ./webgl/conv_gpu_depthwise */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/conv_gpu_depthwise.js\");\nvar from_pixels_gpu_1 = __webpack_require__(/*! ./webgl/from_pixels_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/from_pixels_gpu.js\");\nvar gather_gpu_1 = __webpack_require__(/*! ./webgl/gather_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/gather_gpu.js\");\nvar gpgpu_context_1 = __webpack_require__(/*! ./webgl/gpgpu_context */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/gpgpu_context.js\");\nvar gpgpu_math = __webpack_require__(/*! ./webgl/gpgpu_math */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/gpgpu_math.js\");\nvar logical_gpu_1 = __webpack_require__(/*! ./webgl/logical_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/logical_gpu.js\");\nvar lrn_gpu_1 = __webpack_require__(/*! ./webgl/lrn_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js\");\nvar max_pool_backprop_gpu_1 = __webpack_require__(/*! ./webgl/max_pool_backprop_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/max_pool_backprop_gpu.js\");\nvar mulmat_gpu_1 = __webpack_require__(/*! ./webgl/mulmat_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/mulmat_gpu.js\");\nvar multinomial_gpu_1 = __webpack_require__(/*! ./webgl/multinomial_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/multinomial_gpu.js\");\nvar onehot_gpu_1 = __webpack_require__(/*! ./webgl/onehot_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/onehot_gpu.js\");\nvar pad_gpu_1 = __webpack_require__(/*! ./webgl/pad_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/pad_gpu.js\");\nvar pool_gpu_1 = __webpack_require__(/*! ./webgl/pool_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/pool_gpu.js\");\nvar reduce_gpu_1 = __webpack_require__(/*! ./webgl/reduce_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/reduce_gpu.js\");\nvar resize_bilinear_gpu_1 = __webpack_require__(/*! ./webgl/resize_bilinear_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/resize_bilinear_gpu.js\");\nvar reverse_gpu_1 = __webpack_require__(/*! ./webgl/reverse_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/reverse_gpu.js\");\nvar slice_gpu_1 = __webpack_require__(/*! ./webgl/slice_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/slice_gpu.js\");\nvar tex_util_1 = __webpack_require__(/*! ./webgl/tex_util */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/tex_util.js\");\nvar texture_manager_1 = __webpack_require__(/*! ./webgl/texture_manager */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/texture_manager.js\");\nvar tile_gpu_1 = __webpack_require__(/*! ./webgl/tile_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/tile_gpu.js\");\nvar transpose_gpu_1 = __webpack_require__(/*! ./webgl/transpose_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/transpose_gpu.js\");\nvar unary_op = __webpack_require__(/*! ./webgl/unaryop_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/unaryop_gpu.js\");\nvar unaryop_gpu_1 = __webpack_require__(/*! ./webgl/unaryop_gpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/unaryop_gpu.js\");\nvar webgl_util = __webpack_require__(/*! ./webgl/webgl_util */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/webgl_util.js\");\nvar MathBackendWebGL = function () {\n    function MathBackendWebGL(gpgpu, delayedStorage) {\n        if (delayedStorage === void 0) {\n            delayedStorage = true;\n        }\n        this.gpgpu = gpgpu;\n        this.delayedStorage = delayedStorage;\n        this.texData = new WeakMap();\n        this.uploadWaitMs = 0;\n        this.downloadWaitMs = 0;\n        this.binaryCache = {};\n        this.disposed = false;\n        if (environment_1.ENV.get('WEBGL_VERSION') < 1) {\n            throw new Error('WebGL is not supported on this device');\n        }\n        if (gpgpu == null) {\n            this.gpgpu = new gpgpu_context_1.GPGPUContext();\n            this.gpgpuCreatedLocally = true;\n        } else {\n            this.gpgpuCreatedLocally = false;\n        }\n        if (typeof document !== 'undefined') {\n            this.canvas = document.createElement('canvas');\n        }\n        this.textureManager = new texture_manager_1.TextureManager(this.gpgpu);\n    }\n    MathBackendWebGL.prototype.register = function (dataId, shape, dtype) {\n        if (this.texData.has(dataId)) {\n            throw new Error('Data buffer is already registered');\n        }\n        this.texData.set(dataId, {\n            shape: shape,\n            dtype: dtype,\n            values: null,\n            texture: null,\n            texShape: null,\n            texType: tex_util_1.TextureType.FLOAT\n        });\n    };\n    MathBackendWebGL.prototype.fromPixels = function (pixels, numChannels) {\n        if (pixels == null) {\n            throw new Error('MathBackendWebGL.writePixels(): pixels can not be null');\n        }\n        var texShape = [pixels.height, pixels.width];\n        var outShape = [pixels.height, pixels.width, numChannels];\n        if (pixels instanceof HTMLVideoElement) {\n            if (this.canvas == null) {\n                throw new Error('Can\\'t read pixels from HTMLImageElement outside ' + 'the browser.');\n            }\n            this.canvas.width = pixels.width;\n            this.canvas.height = pixels.height;\n            this.canvas.getContext('2d').drawImage(pixels, 0, 0, pixels.width, pixels.height);\n            pixels = this.canvas;\n        }\n        var tempPixelArray = tensor_1.Tensor.make(texShape, {}, 'int32');\n        this.texData.get(tempPixelArray.dataId).texType = tex_util_1.TextureType.UNSIGNED_BYTE;\n        this.gpgpu.uploadPixelDataToTexture(this.getTexture(tempPixelArray.dataId), pixels);\n        var program = new from_pixels_gpu_1.FromPixelsProgram(outShape);\n        var res = this.compileAndRun(program, [tempPixelArray]);\n        tempPixelArray.dispose();\n        return res;\n    };\n    MathBackendWebGL.prototype.write = function (dataId, values) {\n        if (values == null) {\n            throw new Error('MathBackendWebGL.write(): values can not be null');\n        }\n        this.throwIfNoData(dataId);\n        var texData = this.texData.get(dataId);\n        var texture = texData.texture,\n            texShape = texData.texShape,\n            texType = texData.texType;\n        if (texture != null) {\n            this.textureManager.releaseTexture(texture, texShape, texType);\n            texData.texture = null;\n            texData.texShape = null;\n        }\n        texData.values = values;\n        if (!this.delayedStorage) {\n            this.uploadToGPU(dataId);\n        }\n    };\n    MathBackendWebGL.prototype.readSync = function (dataId) {\n        this.throwIfNoData(dataId);\n        var texData = this.texData.get(dataId);\n        var texture = texData.texture,\n            values = texData.values,\n            texShape = texData.texShape;\n        if (values != null) {\n            this.cacheOnCPU(dataId);\n            return values;\n        }\n        var shouldTimeProgram = this.activeTimers != null;\n        var start;\n        if (shouldTimeProgram) {\n            start = performance.now();\n        }\n        var float32Values = this.gpgpu.downloadMatrixFromTexture(texture, texShape[0], texShape[1]);\n        if (shouldTimeProgram) {\n            this.downloadWaitMs += performance.now() - start;\n        }\n        this.cacheOnCPU(dataId, float32Values);\n        return texData.values;\n    };\n    MathBackendWebGL.prototype.read = function (dataId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var texData, texture, values, texShape, float32Values;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.throwIfNoData(dataId);\n                        texData = this.texData.get(dataId);\n                        texture = texData.texture, values = texData.values, texShape = texData.texShape;\n                        if (values != null) {\n                            this.cacheOnCPU(dataId);\n                            return [2, values];\n                        }\n                        if (!environment_1.ENV.get('WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED')) return [3, 2];\n                        return [4, this.gpgpu.downloadMatrixFromTextureAsync(texture, texShape[0], texShape[1])];\n                    case 1:\n                        float32Values = _a.sent();\n                        this.cacheOnCPU(dataId, float32Values);\n                        return [2, texData.values];\n                    case 2:\n                        if (environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 0) {\n                            return [2, this.readSync(dataId)];\n                        }\n                        return [4, this.gpgpu.runQuery(function () {})];\n                    case 3:\n                        _a.sent();\n                        return [2, this.readSync(dataId)];\n                }\n            });\n        });\n    };\n    MathBackendWebGL.prototype.time = function (f) {\n        return __awaiter(this, void 0, void 0, function () {\n            var oldActiveTimers, newActiveTimers, outerMostTime, flattenedActiveTimers, kernelMs, res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        oldActiveTimers = this.activeTimers;\n                        newActiveTimers = [];\n                        outerMostTime = false;\n                        if (this.programTimersStack == null) {\n                            this.programTimersStack = newActiveTimers;\n                            outerMostTime = true;\n                        } else {\n                            this.activeTimers.push(newActiveTimers);\n                        }\n                        this.activeTimers = newActiveTimers;\n                        f();\n                        flattenedActiveTimers = util.flatten(this.activeTimers);\n                        this.activeTimers = oldActiveTimers;\n                        if (outerMostTime) {\n                            this.programTimersStack = null;\n                        }\n                        return [4, Promise.all(flattenedActiveTimers).then(function (results) {\n                            var sum = 0;\n                            results.forEach(function (result) {\n                                return sum += result;\n                            });\n                            return sum;\n                        })];\n                    case 1:\n                        kernelMs = _a.sent();\n                        res = {\n                            uploadWaitMs: this.uploadWaitMs,\n                            downloadWaitMs: this.downloadWaitMs,\n                            kernelMs: kernelMs,\n                            wallMs: null\n                        };\n                        this.uploadWaitMs = 0;\n                        this.downloadWaitMs = 0;\n                        return [2, res];\n                }\n            });\n        });\n    };\n    MathBackendWebGL.prototype.memory = function () {\n        return { unreliable: false };\n    };\n    MathBackendWebGL.prototype.startTimer = function () {\n        if (environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n            return this.gpgpu.beginQuery();\n        }\n        return { startMs: performance.now(), endMs: null };\n    };\n    MathBackendWebGL.prototype.endTimer = function (query) {\n        if (environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n            this.gpgpu.endQuery();\n            return query;\n        }\n        query.endMs = performance.now();\n        return query;\n    };\n    MathBackendWebGL.prototype.getQueryTime = function (query) {\n        return __awaiter(this, void 0, void 0, function () {\n            var timerQuery;\n            return __generator(this, function (_a) {\n                if (environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n                    return [2, this.gpgpu.pollQueryTime(query)];\n                }\n                timerQuery = query;\n                return [2, timerQuery.endMs - timerQuery.startMs];\n            });\n        });\n    };\n    MathBackendWebGL.prototype.disposeData = function (dataId) {\n        if (this.texData.has(dataId)) {\n            var _a = this.texData.get(dataId),\n                texture = _a.texture,\n                texShape = _a.texShape,\n                texType = _a.texType;\n            if (texture != null) {\n                this.textureManager.releaseTexture(texture, texShape, texType);\n            }\n            this.texData.delete(dataId);\n        }\n    };\n    MathBackendWebGL.prototype.getTexture = function (dataId) {\n        this.uploadToGPU(dataId);\n        return this.texData.get(dataId).texture;\n    };\n    MathBackendWebGL.prototype.getTextureData = function (dataId) {\n        this.uploadToGPU(dataId);\n        return this.texData.get(dataId);\n    };\n    MathBackendWebGL.prototype.getGPGPUContext = function () {\n        return this.gpgpu;\n    };\n    MathBackendWebGL.prototype.slice = function (x, begin, size) {\n        var program = new slice_gpu_1.SliceProgram(size);\n        var customSetup = program.getCustomSetupFunc(begin);\n        return this.compileAndRun(program, [x], null, customSetup);\n    };\n    MathBackendWebGL.prototype.reverse = function (x, axis) {\n        var program = new reverse_gpu_1.ReverseProgram(x.shape, axis);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.concat = function (a, b) {\n        var program = new concat_gpu_1.ConcatProgram(a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    };\n    MathBackendWebGL.prototype.neg = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.NEG);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.matMul = function (a, b, transposeA, transposeB) {\n        var program = new mulmat_gpu_1.MatMulProgram(a.shape, b.shape, transposeA, transposeB);\n        return this.compileAndRun(program, [a, b]);\n    };\n    MathBackendWebGL.prototype.multiply = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.MUL, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, types.upcastType(a.dtype, b.dtype));\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.batchNormalization4D = function (x, mean, variance, varianceEpsilon, scale, offset) {\n        var inputs = [x, mean, variance];\n        var offsetShape = null;\n        if (offset != null) {\n            offsetShape = offset.shape;\n            inputs.push(offset);\n        }\n        var scaleShape = null;\n        if (scale != null) {\n            scaleShape = scale.shape;\n            inputs.push(scale);\n        }\n        var program = new batchnorm_gpu_1.BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n        return this.compileAndRun(program, inputs);\n    };\n    MathBackendWebGL.prototype.localResponseNormalization4D = function (x, radius, bias, alpha, beta, normRegion) {\n        var program = new lrn_gpu_1.LRNProgram(x.shape, radius, bias, alpha, beta, normRegion);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.tile = function (x, reps) {\n        var program = new tile_gpu_1.TileProgram(x.shape, reps);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.pad = function (x, paddings, constantValue) {\n        var program = new pad_gpu_1.PadProgram(x.shape, paddings, constantValue);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.transpose = function (x, perm) {\n        var program = new transpose_gpu_1.TransposeProgram(x.shape, perm);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.gather = function (x, indices, axis) {\n        var program = new gather_gpu_1.GatherProgram(x.shape, indices.size, axis);\n        return this.compileAndRun(program, [x, indices]);\n    };\n    MathBackendWebGL.prototype.reduce = function (x, reduceType, dtype) {\n        var batchSize = x.shape[0];\n        var inSize = x.shape[1];\n        var windowSize = reduce_util.computeOptimalWindowSize(inSize);\n        var reduceInfo = { windowSize: windowSize, inSize: inSize, batchSize: batchSize };\n        var program = new reduce_gpu_1.ReduceProgram(reduceInfo, reduceType);\n        var _a = program.outputShape,\n            rows = _a[0],\n            cols = _a[1];\n        var output = this.makeOutputArray([rows, cols], dtype);\n        this.compileAndRun(program, [x], output);\n        if (output.shape[1] === 1) {\n            return output;\n        }\n        return this.reduce(output, reduceType, dtype);\n    };\n    MathBackendWebGL.prototype.argReduce = function (x, reduceType, bestIndicesA) {\n        if (bestIndicesA === void 0) {\n            bestIndicesA = null;\n        }\n        var batchSize = x.shape[0];\n        var inSize = x.shape[1];\n        if (bestIndicesA != null) {\n            batchSize = bestIndicesA.shape[0];\n            inSize = bestIndicesA.shape[1];\n        }\n        var windowSize = reduce_util.computeOptimalWindowSize(inSize);\n        var reduceInfo = { windowSize: windowSize, inSize: inSize, batchSize: batchSize };\n        var program = new argminmax_gpu_1.ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n        var _a = program.outputShape,\n            rows = _a[0],\n            cols = _a[1];\n        var output = this.makeOutputArray([rows, cols], 'int32');\n        var inputs = [x];\n        if (bestIndicesA != null) {\n            inputs.push(bestIndicesA);\n        }\n        this.compileAndRun(program, inputs, output);\n        if (output.shape[1] === 1) {\n            return output;\n        }\n        return this.argReduce(x, reduceType, output);\n    };\n    MathBackendWebGL.prototype.sum = function (x, axes) {\n        axis_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),\n            outShape = _a[0],\n            reduceShape = _a[1];\n        var inSize = util.sizeFromShape(reduceShape);\n        var a2D = x.as2D(-1, inSize);\n        var outputDType = types.sumOutType(x.dtype);\n        return this.reduce(a2D, 'sum', outputDType).reshape(outShape);\n    };\n    MathBackendWebGL.prototype.argMin = function (x, axes) {\n        axis_util.assertAxesAreInnerMostDims('argMin', axes, x.rank);\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),\n            outShape = _a[0],\n            reduceShape = _a[1];\n        var inSize = util.sizeFromShape(reduceShape);\n        var a2D = x.as2D(-1, inSize);\n        return this.argReduce(a2D, 'min').reshape(outShape);\n    };\n    MathBackendWebGL.prototype.argMax = function (x, axes) {\n        axis_util.assertAxesAreInnerMostDims('argMax', axes, x.rank);\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),\n            outShape = _a[0],\n            reduceShape = _a[1];\n        var inSize = util.sizeFromShape(reduceShape);\n        var a2D = x.as2D(-1, inSize);\n        return this.argReduce(a2D, 'max').reshape(outShape);\n    };\n    MathBackendWebGL.prototype.equal = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.EQUAL, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.notEqual = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.NOT_EQUAL, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.less = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.LESS, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.lessEqual = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.LESS_EQUAL, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.greater = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.GREATER, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.greaterEqual = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.GREATER_EQUAL, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.logicalNot = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.LOGICAL_NOT);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.logicalAnd = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.LOGICAL_AND, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.logicalOr = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.LOGICAL_OR, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.logicalXor = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.LOGICAL_XOR, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'bool');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.where = function (condition, a, b, dtype) {\n        var program = new logical_gpu_1.WhereProgram(condition.rank, a.shape, a.rank);\n        var output = this.makeOutputArray(program.outputShape, dtype);\n        return this.compileAndRun(program, [condition, a, b], output);\n    };\n    MathBackendWebGL.prototype.topKValues = function (x, k) {\n        throw new Error('topKValues GPU not yet implemented!');\n    };\n    MathBackendWebGL.prototype.topKIndices = function (x, k) {\n        throw new Error('topKIndices GPU not yet implemented!');\n    };\n    MathBackendWebGL.prototype.min = function (x, axes) {\n        axis_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),\n            outShape = _a[0],\n            reduceShape = _a[1];\n        var inSize = util.sizeFromShape(reduceShape);\n        var a2D = x.as2D(-1, inSize);\n        return this.reduce(a2D, 'min', a2D.dtype).reshape(outShape);\n    };\n    MathBackendWebGL.prototype.minimum = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.MIN, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    };\n    MathBackendWebGL.prototype.max = function (x, axes) {\n        axis_util.assertAxesAreInnerMostDims('max', axes, x.rank);\n        var _a = axis_util.computeOutAndReduceShapes(x.shape, axes),\n            outShape = _a[0],\n            reduceShape = _a[1];\n        var inSize = util.sizeFromShape(reduceShape);\n        var a2D = x.as2D(-1, inSize);\n        return this.reduce(a2D, 'max', a2D.dtype).reshape(outShape);\n    };\n    MathBackendWebGL.prototype.maximum = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.MAX, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    };\n    MathBackendWebGL.prototype.divide = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.DIV, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, 'float32');\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.add = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.ADD, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, types.upcastType(a.dtype, b.dtype));\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.subtract = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.SUB, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, types.upcastType(a.dtype, b.dtype));\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.pow = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.POW, a.shape, b.shape);\n        var output = this.makeOutputArray(program.outputShape, types.upcastType(a.dtype, b.dtype));\n        return this.compileAndRun(program, [a, b], output);\n    };\n    MathBackendWebGL.prototype.ceil = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.CEIL);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.floor = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.FLOOR);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.exp = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.EXP);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.log = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.LOG);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.log1p = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.LOG1P);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.sqrt = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SQRT);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.square = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SQUARE);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.relu = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.RELU);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.elu = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ELU);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.eluDer = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ELU_DER);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.selu = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SELU);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.leakyRelu = function (x, alpha) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.LEAKY_RELU(alpha));\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.prelu = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.PRELU, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    };\n    MathBackendWebGL.prototype.preluDer = function (a, b) {\n        var program = new binaryop_gpu_1.BinaryOpProgram(binaryop_gpu.PRELU_DER, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    };\n    MathBackendWebGL.prototype.int = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.TO_INT);\n        var output = this.makeOutputArray(program.outputShape, 'int32');\n        return this.compileAndRun(program, [x], output);\n    };\n    MathBackendWebGL.prototype.clip = function (x, min, max) {\n        var program = new clip_gpu_1.ClipProgram(x.shape, min, max);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.abs = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ABS);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.sigmoid = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SIGMOID);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.sin = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SIN);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.cos = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.COS);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.tan = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.TAN);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.asin = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ASIN);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.acos = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ACOS);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.atan = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.ATAN);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.sinh = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.SINH);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.cosh = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.COSH);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.tanh = function (x) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.TANH);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.step = function (x, alpha) {\n        var program = new unaryop_gpu_1.UnaryOpProgram(x.shape, unary_op.STEP(alpha));\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.conv2d = function (x, filter, convInfo) {\n        var program = new conv_gpu_1.Conv2DProgram(convInfo);\n        return this.compileAndRun(program, [x, filter]);\n    };\n    MathBackendWebGL.prototype.conv2dDerInput = function (dy, filter, convInfo) {\n        var program = new conv_backprop_gpu_1.Conv2DDerInputProgram(convInfo);\n        return this.compileAndRun(program, [dy, filter]);\n    };\n    MathBackendWebGL.prototype.conv2dDerFilter = function (x, dy, convInfo) {\n        var program = new conv_backprop_gpu_1.Conv2DDerFilterProgram(convInfo);\n        return this.compileAndRun(program, [x, dy]);\n    };\n    MathBackendWebGL.prototype.depthwiseConv2D = function (x, filter, convInfo) {\n        var program = new conv_gpu_depthwise_1.DepthwiseConv2DProgram(convInfo);\n        return this.compileAndRun(program, [x, filter]);\n    };\n    MathBackendWebGL.prototype.maxPool = function (x, convInfo) {\n        var program = new pool_gpu_1.Pool2DProgram(convInfo, 'max', false);\n        var output = this.makeOutputArray(program.outputShape, x.dtype);\n        return this.compileAndRun(program, [x], output);\n    };\n    MathBackendWebGL.prototype.minPool = function (x, convInfo) {\n        var program = new pool_gpu_1.Pool2DProgram(convInfo, 'min', false);\n        var output = this.makeOutputArray(program.outputShape, x.dtype);\n        return this.compileAndRun(program, [x], output);\n    };\n    MathBackendWebGL.prototype.avgPool = function (x, convInfo) {\n        var program = new pool_gpu_1.Pool2DProgram(convInfo, 'avg', false);\n        var output = this.makeOutputArray(program.outputShape, 'float32');\n        return this.compileAndRun(program, [x], output);\n    };\n    MathBackendWebGL.prototype.maxPoolBackprop = function (dy, x, convInfo) {\n        var getPositions = true;\n        var maxPoolPositionsProgram = new pool_gpu_1.Pool2DProgram(convInfo, 'max', getPositions);\n        var maxPoolPositions = this.compileAndRun(maxPoolPositionsProgram, [x]);\n        var maxPoolBackPropProgram = new max_pool_backprop_gpu_1.MaxPool2DBackpropProgram(convInfo);\n        var output = this.makeOutputArray(maxPoolBackPropProgram.outputShape, x.dtype);\n        var result = this.compileAndRun(maxPoolBackPropProgram, [dy, maxPoolPositions], output);\n        maxPoolPositions.dispose();\n        return result;\n    };\n    MathBackendWebGL.prototype.avgPoolBackprop = function (dy, x, convInfo) {\n        var avgPoolBackpropProgram = new avg_pool_backprop_gpu_1.AvgPool2DBackpropProgram(convInfo);\n        var output = this.makeOutputArray(avgPoolBackpropProgram.outputShape, x.dtype);\n        return this.compileAndRun(avgPoolBackpropProgram, [dy], output);\n    };\n    MathBackendWebGL.prototype.cast = function (x, dtype) {\n        return backend_util.castTensor(x, dtype, this);\n    };\n    MathBackendWebGL.prototype.reshape = function (x, shape) {\n        return backend_util.reshapeTensor(x, shape);\n    };\n    MathBackendWebGL.prototype.resizeBilinear = function (x, newHeight, newWidth, alignCorners) {\n        var program = new resize_bilinear_gpu_1.ResizeBilinearProgram(x.shape, newHeight, newWidth, alignCorners);\n        return this.compileAndRun(program, [x]);\n    };\n    MathBackendWebGL.prototype.multinomial = function (probs, numSamples, seed) {\n        var batchSize = probs.shape[0];\n        var numOutcomes = probs.shape[1];\n        var program = new multinomial_gpu_1.MultinomialProgram(batchSize, numOutcomes, numSamples);\n        var output = this.makeOutputArray(program.outputShape, 'int32');\n        var customSetup = program.getCustomSetupFunc(seed);\n        return this.compileAndRun(program, [probs], output, customSetup);\n    };\n    MathBackendWebGL.prototype.oneHot = function (indices, depth, onValue, offValue) {\n        var program = new onehot_gpu_1.OneHotProgram(indices.size, depth, onValue, offValue);\n        return this.compileAndRun(program, [indices]);\n    };\n    MathBackendWebGL.prototype.makeOutputArray = function (shape, dtype) {\n        return tensor_1.Tensor.make(shape, {}, dtype);\n    };\n    MathBackendWebGL.prototype.compileAndRun = function (program, inputs, output, customSetup) {\n        var _this = this;\n        if (output == null) {\n            output = this.makeOutputArray(program.outputShape, inputs[0].dtype);\n        }\n        var inputsData = inputs.map(function (input) {\n            _this.uploadToGPU(input.dataId);\n            return { tensor: input, texData: _this.texData.get(input.dataId) };\n        });\n        this.uploadToGPU(output.dataId);\n        var outputData = {\n            tensor: output,\n            texData: this.texData.get(output.dataId)\n        };\n        var key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n        var binary = this.getAndSaveBinary(key, function () {\n            return gpgpu_math.compileProgram(_this.gpgpu, program, inputsData, outputData);\n        });\n        var shouldTimeProgram = this.activeTimers != null;\n        var query;\n        if (shouldTimeProgram) {\n            query = this.startTimer();\n        }\n        gpgpu_math.runProgram(binary, inputsData, outputData, customSetup);\n        if (shouldTimeProgram) {\n            query = this.endTimer(query);\n            this.activeTimers.push(this.getQueryTime(query));\n        }\n        return output;\n    };\n    MathBackendWebGL.prototype.getAndSaveBinary = function (key, getBinary) {\n        if (!(key in this.binaryCache)) {\n            this.binaryCache[key] = getBinary();\n        }\n        return this.binaryCache[key];\n    };\n    MathBackendWebGL.prototype.getTextureManager = function () {\n        return this.textureManager;\n    };\n    MathBackendWebGL.prototype.dispose = function () {\n        if (this.disposed) {\n            return;\n        }\n        for (var key in this.binaryCache) {\n            this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        }\n        this.textureManager.dispose();\n        this.canvas.remove();\n        if (this.gpgpuCreatedLocally) {\n            this.gpgpu.dispose();\n        }\n        this.disposed = true;\n    };\n    MathBackendWebGL.prototype.throwIfNoData = function (dataId) {\n        if (!this.texData.has(dataId)) {\n            throw new Error(\"WebGL backend: No data found for this tensor. \" + \"Did you change your backend in the middle of the program? \" + \"New backends can't use Tensors created with previous backends\");\n        }\n    };\n    MathBackendWebGL.prototype.uploadToGPU = function (dataId) {\n        this.throwIfNoData(dataId);\n        var texData = this.texData.get(dataId);\n        var shape = texData.shape,\n            values = texData.values,\n            texture = texData.texture,\n            dtype = texData.dtype,\n            texType = texData.texType;\n        if (texture != null) {\n            return;\n        }\n        var shouldTimeProgram = this.activeTimers != null;\n        var start;\n        if (shouldTimeProgram) {\n            start = performance.now();\n        }\n        var texShape = webgl_util.getTextureShapeFromLogicalShape(this.gpgpu.gl, shape);\n        texData.texShape = texShape;\n        var newTexture = this.textureManager.acquireTexture(texShape, texType);\n        texData.texture = newTexture;\n        if (values != null) {\n            this.gpgpu.uploadMatrixToTexture(newTexture, texShape[0], texShape[1], typedArrayToFloat32(values, dtype));\n            texData.values = null;\n            if (shouldTimeProgram) {\n                this.uploadWaitMs += performance.now() - start;\n            }\n        }\n    };\n    MathBackendWebGL.prototype.cacheOnCPU = function (dataId, float32Values) {\n        var dontKeepCopyOnGPU = this.delayedStorage;\n        var texData = this.texData.get(dataId);\n        var texture = texData.texture,\n            texShape = texData.texShape,\n            dtype = texData.dtype,\n            texType = texData.texType;\n        if (dontKeepCopyOnGPU && texture != null) {\n            this.textureManager.releaseTexture(texture, texShape, texType);\n            texData.texture = null;\n            texData.texShape = null;\n        }\n        if (float32Values != null) {\n            texData.values = float32ToTypedArray(float32Values, dtype);\n        }\n    };\n    return MathBackendWebGL;\n}();\nexports.MathBackendWebGL = MathBackendWebGL;\nenvironment_1.ENV.registerBackend('webgl', function () {\n    return new MathBackendWebGL();\n});\nfunction float32ToTypedArray(a, dtype) {\n    if (dtype === 'float32') {\n        return a;\n    } else if (dtype === 'int32' || dtype === 'bool') {\n        var result = dtype === 'int32' ? new Int32Array(a.length) : new Uint8Array(a.length);\n        for (var i = 0; i < result.length; ++i) {\n            var val = a[i];\n            val = isNaN(val) ? util.getNaN(dtype) : Math.round(val);\n            result[i] = val;\n        }\n        return result;\n    } else {\n        throw new Error(\"Unknown dtype \" + dtype);\n    }\n}\nfunction typedArrayToFloat32(a, dtype) {\n    if (a instanceof Float32Array) {\n        return a;\n    } else {\n        var res = new Float32Array(a.length);\n        for (var i = 0; i < res.length; i++) {\n            var val = a[i];\n            res[i] = util.isValNaN(val, dtype) ? NaN : val;\n        }\n        return res;\n    }\n}\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/backend_webgl.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/argminmax_gpu.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/argminmax_gpu.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ArgMinMaxProgram = function () {\n    function ArgMinMaxProgram(reduceInfo, op, firstPass) {\n        this.variableNames = ['A'];\n        var windowSize = reduceInfo.windowSize;\n        var batchSize = reduceInfo.batchSize;\n        var inSize = reduceInfo.inSize;\n        var outSize = Math.ceil(inSize / windowSize);\n        if (!firstPass) {\n            this.variableNames.push('bestIndicesA');\n        }\n        this.outputShape = [batchSize, outSize];\n        var compOp = op === 'max' ? '>' : '<';\n        var indexSnippet = firstPass ? 'inOffset + i;' : 'round(getBestIndicesA(batch, inOffset + i));';\n        this.userCode = \"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * \" + windowSize + \";\\n\\n        int bestIndex = 0;\\n        float bestValue = getA(batch, inOffset);\\n\\n        for (int i = 0; i < \" + windowSize + \"; i++) {\\n          int inIdx = \" + indexSnippet + \";\\n          float candidate = getA(batch, inIdx);\\n          if (isNaN(candidate)) {\\n            setOutput(candidate);\\n            return;\\n          }\\n          if (candidate \" + compOp + \" bestValue) {\\n            bestValue = candidate;\\n            bestIndex = inIdx;\\n          }\\n        }\\n        setOutput(float(bestIndex));\\n      }\\n    \";\n    }\n    return ArgMinMaxProgram;\n}();\nexports.ArgMinMaxProgram = ArgMinMaxProgram;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/argminmax_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/avg_pool_backprop_gpu.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/avg_pool_backprop_gpu.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AvgPool2DBackpropProgram = function () {\n    function AvgPool2DBackpropProgram(convInfo) {\n        this.variableNames = ['dy'];\n        this.outputShape = convInfo.inShape;\n        var filterHeight = convInfo.filterHeight;\n        var filterWidth = convInfo.filterWidth;\n        var strideHeight = convInfo.strideHeight;\n        var strideWidth = convInfo.strideWidth;\n        var padTop = filterHeight - 1 - convInfo.padInfo.top;\n        var padLeft = filterWidth - 1 - convInfo.padInfo.left;\n        var avgMultiplier = 1 / (filterHeight * filterWidth);\n        this.userCode = \"\\n      const ivec2 pads = ivec2(\" + padTop + \", \" + padLeft + \");\\n      const float avgMultiplier = float(\" + avgMultiplier + \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 dyRCCorner = coords.yz - pads;\\n        int dyRCorner = dyRCCorner.x;\\n        int dyCCorner = dyRCCorner.y;\\n\\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \" + filterHeight + \"; wR++) {\\n          float dyR = float(dyRCorner + wR) / \" + strideHeight + \".0;\\n\\n          if (dyR < 0.0 || dyR >= \" + convInfo.outHeight + \".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          for (int wC = 0; wC < \" + filterWidth + \"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \" + strideWidth + \".0;\\n\\n            if (dyC < 0.0 || dyC >= \" + convInfo.outWidth + \".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            float dyValue = getDy(b, idyR, idyC, d);\\n\\n            dotProd += dyValue * avgMultiplier;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n    }\n    return AvgPool2DBackpropProgram;\n}();\nexports.AvgPool2DBackpropProgram = AvgPool2DBackpropProgram;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/avg_pool_backprop_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/batchnorm_gpu.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/batchnorm_gpu.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar broadcast_util = __webpack_require__(/*! ../../ops/broadcast_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js\");\nvar BatchNormProgram = function () {\n    function BatchNormProgram(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n        this.outputShape = [];\n        this.supportsBroadcasting = true;\n        this.variableNames = ['x', 'mean', 'variance'];\n        broadcast_util.assertAndGetBroadcastShape(xShape, meanShape);\n        broadcast_util.assertAndGetBroadcastShape(xShape, varianceShape);\n        var offsetSnippet = '0.0';\n        if (offsetShape != null) {\n            broadcast_util.assertAndGetBroadcastShape(xShape, offsetShape);\n            this.variableNames.push('offset');\n            offsetSnippet = 'getOffsetAtOutCoords()';\n        }\n        var scaleSnippet = '1.0';\n        if (scaleShape != null) {\n            broadcast_util.assertAndGetBroadcastShape(xShape, scaleShape);\n            this.variableNames.push('scale');\n            scaleSnippet = 'getScaleAtOutCoords()';\n        }\n        this.outputShape = xShape;\n        this.userCode = \"\\n      void main() {\\n        float x = getXAtOutCoords();\\n        float mean = getMeanAtOutCoords();\\n        float variance = getVarianceAtOutCoords();\\n        float offset = \" + offsetSnippet + \";\\n        float scale = \" + scaleSnippet + \";\\n        float inv = scale / sqrt(variance + float(\" + varianceEpsilon + \"));\\n        setOutput((x - mean) * inv + offset);\\n      }\\n    \";\n    }\n    return BatchNormProgram;\n}();\nexports.BatchNormProgram = BatchNormProgram;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/batchnorm_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/binaryop_gpu.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/binaryop_gpu.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar broadcast_util = __webpack_require__(/*! ../../ops/broadcast_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js\");\nvar CHECK_NAN_SNIPPET = \"\\n  if (isNaN(a)) return a;\\n  if (isNaN(b)) return b;\\n\";\nexports.ADD = 'return a + b;';\nexports.SUB = 'return a - b;';\nexports.MUL = 'return a * b;';\nexports.DIV = 'return a / b;';\nexports.POW = \"\\n  return (round(mod(b, 2.0)) == 0 || round(mod(b, 2.0)) == 2) ?\\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\\n\";\nexports.EQUAL = CHECK_NAN_SNIPPET + \"\\n  return float(a == b);\\n\";\nexports.NOT_EQUAL = CHECK_NAN_SNIPPET + \"\\n  return float(a != b);\\n\";\nexports.LESS = CHECK_NAN_SNIPPET + \"\\n  return float(a < b);\\n\";\nexports.LESS_EQUAL = CHECK_NAN_SNIPPET + \"\\n  return float(a <= b);\\n\";\nexports.GREATER = CHECK_NAN_SNIPPET + \"\\n  return float(a > b);\\n\";\nexports.GREATER_EQUAL = CHECK_NAN_SNIPPET + \"\\n  return float(a >= b);\\n\";\nexports.LOGICAL_AND = CHECK_NAN_SNIPPET + \"\\n  return float(a >= 1.0 && b >= 1.0);\\n\";\nexports.LOGICAL_OR = CHECK_NAN_SNIPPET + \"\\n  return float(a >= 1.0 || b >= 1.0);\\n\";\nexports.LOGICAL_XOR = CHECK_NAN_SNIPPET + \"\\n  return float(a >= 1.0 ^^ b >= 1.0);\\n\";\nexports.PRELU = \"\\n  return (a >= 0.0) ? a : b * a;\\n\";\nexports.PRELU_DER = \"\\n  return (a > 0.0) ? 1.0 : ((a < 0.0) ? b : a);\\n\";\nexports.MAX = CHECK_NAN_SNIPPET + \"\\n  return max(a, b);\\n\";\nexports.MIN = CHECK_NAN_SNIPPET + \"\\n  return min(a, b);\\n\";\nvar BinaryOpProgram = function () {\n    function BinaryOpProgram(op, aShape, bShape) {\n        this.variableNames = ['A', 'B'];\n        this.supportsBroadcasting = true;\n        this.outputShape = broadcast_util.assertAndGetBroadcastShape(aShape, bShape);\n        this.userCode = \"\\n      float binaryOperation(float a, float b) {\\n        \" + op + \"\\n      }\\n\\n      void main() {\\n        float a = getAAtOutCoords();\\n        float b = getBAtOutCoords();\\n        setOutput(binaryOperation(a, b));\\n      }\\n    \";\n    }\n    return BinaryOpProgram;\n}();\nexports.BinaryOpProgram = BinaryOpProgram;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/binaryop_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/clip_gpu.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/clip_gpu.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ClipProgram = function () {\n    function ClipProgram(aShape, min, max) {\n        this.variableNames = ['A'];\n        this.outputShape = aShape;\n        var minFixed = min.toFixed(20);\n        var maxFixed = max.toFixed(20);\n        this.userCode = \"\\n      void main() {\\n        float value = getAAtOutCoords();\\n        if (isNaN(value)) {\\n          setOutput(value);\\n          return;\\n        }\\n\\n        setOutput(clamp(value, \" + minFixed + \", \" + maxFixed + \"));\\n      }\\n    \";\n    }\n    return ClipProgram;\n}();\nexports.ClipProgram = ClipProgram;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/clip_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/concat_gpu.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/concat_gpu.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar concat_util = __webpack_require__(/*! ../../ops/concat_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/concat_util.js\");\nvar ConcatProgram = function () {\n    function ConcatProgram(aShape, bShape) {\n        this.variableNames = ['A', 'B'];\n        this.outputShape = [];\n        this.outputShape = concat_util.computeOutShape(aShape, bShape, 1);\n        this.userCode = \"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int yR = coords.x;\\n        int yC = coords.y;\\n\\n        float value = 0.0;\\n        if (yC < \" + aShape[1] + \") {\\n          value = getA(yR, yC);\\n        } else {\\n          yC -= \" + aShape[1] + \";\\n          value = getB(yR, yC);\\n        }\\n\\n        setOutput(value);\\n      }\\n    \";\n    }\n    return ConcatProgram;\n}();\nexports.ConcatProgram = ConcatProgram;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/concat_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/conv_backprop_gpu.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/conv_backprop_gpu.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Conv2DDerFilterProgram = function () {\n    function Conv2DDerFilterProgram(convInfo) {\n        this.variableNames = ['x', 'dy'];\n        this.outputShape = convInfo.filterShape;\n        var strideHeight = convInfo.strideHeight;\n        var strideWidth = convInfo.strideWidth;\n        var padTop = convInfo.padInfo.top;\n        var padLeft = convInfo.padInfo.left;\n        this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int wR = coords.x;\\n        int wC = coords.y;\\n        int d1 = coords.z;\\n        int d2 = coords.w;\\n\\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int b = 0; b < \" + convInfo.batchSize + \"; b++) {\\n          for (int yR = 0; yR < \" + convInfo.outHeight + \"; yR++) {\\n            int xR = wR + yR * \" + strideHeight + \" - \" + padTop + \";\\n\\n            if (xR < 0 || xR >= \" + convInfo.inHeight + \") {\\n              continue;\\n            }\\n\\n            for (int yC = 0; yC < \" + convInfo.outWidth + \"; yC++) {\\n              int xC = wC + yC * \" + strideWidth + \" - \" + padLeft + \";\\n\\n              if (xC < 0 || xC >= \" + convInfo.inWidth + \") {\\n                continue;\\n              }\\n\\n              float dyValue = getDy(b, yR, yC, d2);\\n              float xValue = getX(b, xR, xC, d1);\\n              dotProd += (xValue * dyValue);\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n    }\n    return Conv2DDerFilterProgram;\n}();\nexports.Conv2DDerFilterProgram = Conv2DDerFilterProgram;\nvar Conv2DDerInputProgram = function () {\n    function Conv2DDerInputProgram(convInfo) {\n        this.variableNames = ['dy', 'W'];\n        this.outputShape = convInfo.inShape;\n        var filterHeight = convInfo.filterHeight;\n        var filterWidth = convInfo.filterWidth;\n        var strideHeight = convInfo.strideHeight;\n        var strideWidth = convInfo.strideWidth;\n        var padTop = filterHeight - 1 - convInfo.padInfo.top;\n        var padLeft = filterWidth - 1 - convInfo.padInfo.left;\n        this.userCode = \"\\n      const ivec2 pads = ivec2(\" + padTop + \", \" + padLeft + \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[3];\\n\\n        ivec2 dyCorner = coords.yz - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \" + filterHeight + \"; wR++) {\\n          float dyR = float(dyRCorner + wR) / \" + strideHeight + \".0;\\n\\n          if (dyR < 0.0 || dyR >= \" + convInfo.outHeight + \".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          int wRPerm = \" + filterHeight + \" - 1 - wR;\\n\\n          for (int wC = 0; wC < \" + filterWidth + \"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \" + strideWidth + \".0;\\n\\n            if (dyC < 0.0 || dyC >= \" + convInfo.outWidth + \".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            int wCPerm = \" + filterWidth + \" - 1 - wC;\\n\\n            for (int d2 = 0; d2 < \" + convInfo.outChannels + \"; d2++) {\\n              float xValue = getDy(batch, idyR, idyC, d2);\\n              float wValue = getW(wRPerm, wCPerm, d1, d2);\\n              dotProd += xValue * wValue;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n    }\n    return Conv2DDerInputProgram;\n}();\nexports.Conv2DDerInputProgram = Conv2DDerInputProgram;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/conv_backprop_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/conv_gpu.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/conv_gpu.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Conv2DProgram = function () {\n    function Conv2DProgram(convInfo) {\n        this.variableNames = ['x', 'W'];\n        this.outputShape = convInfo.outShape;\n        var padTop = convInfo.padInfo.top;\n        var padLeft = convInfo.padInfo.left;\n        var strideHeight = convInfo.strideHeight;\n        var strideWidth = convInfo.strideWidth;\n        var dilationHeight = convInfo.dilationHeight;\n        var dilationWidth = convInfo.dilationWidth;\n        var filterHeight = convInfo.filterHeight;\n        var filterWidth = convInfo.filterWidth;\n        var inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n        var inputDepthVec4Remainder = convInfo.inChannels % 4;\n        this.userCode = \"\\n      const ivec2 strides = ivec2(\" + strideHeight + \", \" + strideWidth + \");\\n      const ivec2 pads = ivec2(\" + padTop + \", \" + padLeft + \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d2 = coords[3];\\n\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \" + filterHeight + \"; wR++) {\\n          int xR = xRCorner + wR * \" + dilationHeight + \";\\n\\n          if (xR < 0 || xR >= \" + convInfo.inHeight + \") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \" + filterWidth + \"; wC++) {\\n            int xC = xCCorner + wC * \" + dilationWidth + \";\\n\\n            if (xC < 0 || xC >= \" + convInfo.inWidth + \") {\\n              continue;\\n            }\\n\\n            for (int d1 = 0; d1 < \" + inputDepthNearestVec4 + \"; d1 += 4) {\\n              vec4 xValues = vec4(\\n                getX(batch, xR, xC, d1),\\n                getX(batch, xR, xC, d1 + 1),\\n                getX(batch, xR, xC, d1 + 2),\\n                getX(batch, xR, xC, d1 + 3)\\n              );\\n              vec4 wValues = vec4(\\n                getW(wR, wC, d1, d2),\\n                getW(wR, wC, d1 + 1, d2),\\n                getW(wR, wC, d1 + 2, d2),\\n                getW(wR, wC, d1 + 3, d2)\\n              );\\n\\n              dotProd += dot(xValues, wValues);\\n            }\\n\\n            if (\" + (inputDepthVec4Remainder === 1) + \") {\\n              dotProd +=\\n                getX(batch, xR, xC, \" + inputDepthNearestVec4 + \") *\\n                getW(wR, wC, \" + inputDepthNearestVec4 + \", d2);\\n            } else if (\" + (inputDepthVec4Remainder === 2) + \") {\\n              vec2 xValues = vec2(\\n                getX(batch, xR, xC, \" + inputDepthNearestVec4 + \"),\\n                getX(batch, xR, xC, \" + inputDepthNearestVec4 + \" + 1)\\n              );\\n              vec2 wValues = vec2(\\n                getW(wR, wC, \" + inputDepthNearestVec4 + \", d2),\\n                getW(wR, wC, \" + inputDepthNearestVec4 + \" + 1, d2)\\n              );\\n              dotProd += dot(xValues, wValues);\\n            } else if (\" + (inputDepthVec4Remainder === 3) + \") {\\n              vec3 xValues = vec3(\\n                getX(batch, xR, xC, \" + inputDepthNearestVec4 + \"),\\n                getX(batch, xR, xC, \" + inputDepthNearestVec4 + \" + 1),\\n                getX(batch, xR, xC, \" + inputDepthNearestVec4 + \" + 2)\\n              );\\n              vec3 wValues = vec3(\\n                getW(wR, wC, \" + inputDepthNearestVec4 + \", d2),\\n                getW(wR, wC, \" + inputDepthNearestVec4 + \" + 1, d2),\\n                getW(wR, wC, \" + inputDepthNearestVec4 + \" + 2, d2)\\n              );\\n              dotProd += dot(xValues, wValues);\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n    }\n    return Conv2DProgram;\n}();\nexports.Conv2DProgram = Conv2DProgram;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/conv_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/conv_gpu_depthwise.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/conv_gpu_depthwise.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DepthwiseConv2DProgram = function () {\n    function DepthwiseConv2DProgram(convInfo) {\n        this.variableNames = ['x', 'W'];\n        this.outputShape = convInfo.outShape;\n        var xNumRows = convInfo.inHeight;\n        var xNumCols = convInfo.inWidth;\n        var padTop = convInfo.padInfo.top;\n        var padLeft = convInfo.padInfo.left;\n        var strideHeight = convInfo.strideHeight;\n        var strideWidth = convInfo.strideWidth;\n        var dilationHeight = convInfo.dilationHeight;\n        var dilationWidth = convInfo.dilationWidth;\n        var filterHeight = convInfo.filterHeight;\n        var filterWidth = convInfo.filterWidth;\n        var channelMul = convInfo.outChannels / convInfo.inChannels;\n        this.userCode = \"\\n      const ivec2 strides = ivec2(\" + strideHeight + \", \" + strideWidth + \");\\n      const ivec2 pads = ivec2(\" + padTop + \", \" + padLeft + \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2 / \" + channelMul + \";\\n        int q = d2 - d1 * \" + channelMul + \";\\n\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        // TODO(dsmilkov): Flatten the two for loops and vec4 the operations.\\n        for (int wR = 0; wR < \" + filterHeight + \"; wR++) {\\n          int xR = xRCorner + wR * \" + dilationHeight + \";\\n\\n          if (xR < 0 || xR >= \" + xNumRows + \") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \" + filterWidth + \"; wC++) {\\n            int xC = xCCorner + wC * \" + dilationWidth + \";\\n\\n            if (xC < 0 || xC >= \" + xNumCols + \") {\\n              continue;\\n            }\\n\\n            float xVal = getX(batch, xR, xC, d1);\\n            float wVal = getW(wR, wC, d1, q);\\n            dotProd += xVal * wVal;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n    }\n    return DepthwiseConv2DProgram;\n}();\nexports.DepthwiseConv2DProgram = DepthwiseConv2DProgram;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/conv_gpu_depthwise.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/from_pixels_gpu.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/from_pixels_gpu.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar FromPixelsProgram = function () {\n    function FromPixelsProgram(outputShape) {\n        this.variableNames = ['A'];\n        var height = outputShape[0],\n            width = outputShape[1];\n        this.outputShape = outputShape;\n        this.userCode = \"\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        int texR = coords[0];\\n        int texC = coords[1];\\n        int depth = coords[2];\\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\" + width + \".0, \" + height + \".0);\\n\\n        vec4 values = texture2D(A, uv);\\n        float value;\\n        if (depth == 0) {\\n          value = values.r;\\n        } else if (depth == 1) {\\n          value = values.g;\\n        } else if (depth == 2) {\\n          value = values.b;\\n        } else if (depth == 3) {\\n          value = values.a;\\n        }\\n\\n        setOutput(floor(value * 255.0 + 0.5));\\n      }\\n    \";\n    }\n    return FromPixelsProgram;\n}();\nexports.FromPixelsProgram = FromPixelsProgram;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/from_pixels_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/gather_gpu.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/gather_gpu.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar shader_compiler_1 = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js\");\nvar GatherProgram = function () {\n    function GatherProgram(aShape, indicesLength, axis) {\n        this.variableNames = ['A', 'indices'];\n        var outputShape = aShape.slice();\n        outputShape[axis] = indicesLength;\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        var dtype = shader_compiler_1.getCoordsDataType(this.rank);\n        var sourceCoords = getSourceCoords(aShape, axis);\n        this.userCode = \"\\n      void main() {\\n        \" + dtype + \" resRC = getOutputCoords();\\n        setOutput(getA(\" + sourceCoords + \"));\\n      }\\n    \";\n    }\n    return GatherProgram;\n}();\nexports.GatherProgram = GatherProgram;\nfunction getSourceCoords(aShape, axis) {\n    var rank = aShape.length;\n    if (rank > 4) {\n        throw Error(\"Gather for rank \" + rank + \" is not yet supported\");\n    }\n    if (rank === 1) {\n        return \"int(getIndices(resRC))\";\n    }\n    var currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n    var sourceCoords = [];\n    for (var i = 0; i < aShape.length; i++) {\n        if (i === axis) {\n            sourceCoords.push(\"int(getIndices(\" + currentCoords[i] + \"))\");\n        } else {\n            sourceCoords.push(\"\" + currentCoords[i]);\n        }\n    }\n    return sourceCoords.join();\n}\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/gather_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/gpgpu_context.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/gpgpu_context.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : new P(function (resolve) {\n                resolve(result.value);\n            }).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n    var _ = { label: 0, sent: function () {\n            if (t[0] & 1) throw t[1];return t[1];\n        }, trys: [], ops: [] },\n        f,\n        y,\n        t,\n        g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n    }), g;\n    function verb(n) {\n        return function (v) {\n            return step([n, v]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0:case 1:\n                    t = op;break;\n                case 4:\n                    _.label++;return { value: op[1], done: false };\n                case 5:\n                    _.label++;y = op[1];op = [0];continue;\n                case 7:\n                    op = _.ops.pop();_.trys.pop();continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];t = op;break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];_.ops.push(op);break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [6, e];y = 0;\n        } finally {\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = __webpack_require__(/*! ../../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar util = __webpack_require__(/*! ../../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar gpgpu_util = __webpack_require__(/*! ./gpgpu_util */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/gpgpu_util.js\");\nvar tex_util = __webpack_require__(/*! ./tex_util */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/tex_util.js\");\nvar webgl_util = __webpack_require__(/*! ./webgl_util */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/webgl_util.js\");\nvar GPGPUContext = function () {\n    function GPGPUContext(gl) {\n        this.outputTexture = null;\n        this.program = null;\n        this.disposed = false;\n        this.autoDebugValidate = false;\n        this.firstProgram = true;\n        if (gl != null) {\n            this.gl = gl;\n        } else {\n            this.gl = gpgpu_util.createWebGLContext();\n        }\n        if (environment_1.ENV.get('WEBGL_VERSION') === 1) {\n            this.textureFloatExtension = webgl_util.getExtensionOrThrow(this.gl, 'OES_texture_float');\n            this.colorBufferFloatExtension = this.gl.getExtension('WEBGL_color_buffer_float');\n        } else {\n            this.colorBufferFloatExtension = webgl_util.getExtensionOrThrow(this.gl, 'EXT_color_buffer_float');\n        }\n        this.loseContextExtension = webgl_util.getExtensionOrThrow(this.gl, 'WEBGL_lose_context');\n        if (environment_1.ENV.get('WEBGL_GET_BUFFER_SUB_DATA_ASYNC_EXTENSION_ENABLED')) {\n            this.getBufferSubDataAsyncExtension = this.gl.getExtension('WEBGL_get_buffer_sub_data_async');\n        }\n        this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n        this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n        this.framebuffer = webgl_util.createFramebuffer(this.gl);\n    }\n    GPGPUContext.prototype.dispose = function () {\n        var _this = this;\n        if (this.disposed) {\n            return;\n        }\n        if (this.program != null) {\n            console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' + ' This is probably a resource leak, delete the program with ' + 'GPGPUContext.deleteProgram before disposing.');\n        }\n        if (this.outputTexture != null) {\n            console.warn('Disposing a GPGPUContext that still has a bound output matrix ' + 'texture.  This is probably a resource leak, delete the output ' + 'matrix texture with GPGPUContext.deleteMatrixTexture before ' + 'disposing.');\n        }\n        var gl = this.gl;\n        webgl_util.callAndCheck(gl, function () {\n            return gl.finish();\n        });\n        webgl_util.callAndCheck(gl, function () {\n            return gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        });\n        webgl_util.callAndCheck(gl, function () {\n            return gl.deleteFramebuffer(_this.framebuffer);\n        });\n        webgl_util.callAndCheck(gl, function () {\n            return gl.bindBuffer(gl.ARRAY_BUFFER, null);\n        });\n        webgl_util.callAndCheck(gl, function () {\n            return gl.deleteBuffer(_this.vertexBuffer);\n        });\n        webgl_util.callAndCheck(gl, function () {\n            return gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        });\n        webgl_util.callAndCheck(gl, function () {\n            return gl.deleteBuffer(_this.indexBuffer);\n        });\n        this.loseContextExtension.loseContext();\n        this.disposed = true;\n    };\n    GPGPUContext.prototype.enableAutomaticDebugValidation = function (enabled) {\n        this.autoDebugValidate = enabled;\n        webgl_util.enableDebugWebGLErrorChecking(enabled);\n    };\n    GPGPUContext.prototype.createMatrixTexture = function (rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createMatrixTexture(this.gl, rows, columns);\n    };\n    GPGPUContext.prototype.uploadPixelDataToTexture = function (texture, pixels) {\n        this.throwIfDisposed();\n        gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n    };\n    GPGPUContext.prototype.createPackedMatrixTexture = function (rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns);\n    };\n    GPGPUContext.prototype.deleteMatrixTexture = function (texture) {\n        var _this = this;\n        this.throwIfDisposed();\n        if (this.outputTexture === texture) {\n            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n            this.outputTexture = null;\n        }\n        webgl_util.callAndCheck(this.gl, function () {\n            return _this.gl.deleteTexture(texture);\n        });\n    };\n    GPGPUContext.prototype.uploadMatrixToTexture = function (texture, rows, columns, matrix) {\n        this.throwIfDisposed();\n        var numChannels = 1;\n        return gpgpu_util.uploadMatrixToTexture(this.gl, texture, rows, columns, matrix, numChannels);\n    };\n    GPGPUContext.prototype.uploadMatrixToPackedTexture = function (texture, rows, columns, matrix) {\n        this.throwIfDisposed();\n        return gpgpu_util.uploadMatrixToPackedTexture(this.gl, texture, rows, columns, matrix);\n    };\n    GPGPUContext.prototype.downloadMatrixFromTexture = function (texture, rows, columns) {\n        var _this = this;\n        return this.downloadMatrixDriver(texture, function () {\n            return gpgpu_util.downloadMatrixFromOutputTexture(_this.gl, rows, columns);\n        });\n    };\n    GPGPUContext.prototype.downloadMatrixFromTextureAsync = function (texture, rows, columns) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (this.getBufferSubDataAsyncExtension == null) {\n                    throw new Error(\"Cannot download matrix from output texture asynchronously, \" + \"WEBGL_get_buffer_sub_data_async is not enabled.\");\n                }\n                return [2, this.downloadMatrixDriverAsync(texture, function () {\n                    return gpgpu_util.downloadMatrixFromOutputTextureAsync(_this.gl, _this.getBufferSubDataAsyncExtension, rows, columns);\n                })];\n            });\n        });\n    };\n    GPGPUContext.prototype.downloadMatrixFromRGBAColorTexture = function (texture, rows, columns, channels) {\n        var _this = this;\n        return this.downloadMatrixDriver(texture, function () {\n            return gpgpu_util.downloadMatrixFromRGBAColorTexture(_this.gl, rows, columns, channels);\n        });\n    };\n    GPGPUContext.prototype.downloadMatrixFromPackedTexture = function (texture, rows, columns) {\n        var _this = this;\n        return this.downloadMatrixDriver(texture, function () {\n            return gpgpu_util.downloadMatrixFromPackedOutputTexture(_this.gl, rows, columns);\n        });\n    };\n    GPGPUContext.prototype.createProgram = function (fragmentShaderSource) {\n        this.throwIfDisposed();\n        var gl = this.gl;\n        var fragmentShader = webgl_util.createFragmentShader(gl, fragmentShaderSource);\n        var vertexShader = gpgpu_util.createVertexShader(gl);\n        var program = webgl_util.createProgram(gl);\n        webgl_util.callAndCheck(gl, function () {\n            return gl.attachShader(program, vertexShader);\n        });\n        webgl_util.callAndCheck(gl, function () {\n            return gl.attachShader(program, fragmentShader);\n        });\n        webgl_util.linkProgram(gl, program);\n        if (this.autoDebugValidate) {\n            webgl_util.validateProgram(gl, program);\n        }\n        if (this.firstProgram) {\n            this.firstProgram = false;\n            this.setProgram(program);\n            gpgpu_util.bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);\n        }\n        return program;\n    };\n    GPGPUContext.prototype.deleteProgram = function (program) {\n        var _this = this;\n        this.throwIfDisposed();\n        if (program === this.program) {\n            this.program = null;\n        }\n        if (program != null) {\n            webgl_util.callAndCheck(this.gl, function () {\n                return _this.gl.deleteProgram(program);\n            });\n        }\n    };\n    GPGPUContext.prototype.setProgram = function (program) {\n        var _this = this;\n        this.throwIfDisposed();\n        this.program = program;\n        if (this.program != null && this.autoDebugValidate) {\n            webgl_util.validateProgram(this.gl, this.program);\n        }\n        webgl_util.callAndCheck(this.gl, function () {\n            return _this.gl.useProgram(program);\n        });\n    };\n    GPGPUContext.prototype.getUniformLocation = function (program, uniformName, shouldThrow) {\n        if (shouldThrow === void 0) {\n            shouldThrow = true;\n        }\n        this.throwIfDisposed();\n        if (shouldThrow) {\n            return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);\n        } else {\n            return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);\n        }\n    };\n    GPGPUContext.prototype.getAttributeLocation = function (program, attribute) {\n        var _this = this;\n        this.throwIfDisposed();\n        return webgl_util.callAndCheck(this.gl, function () {\n            return _this.gl.getAttribLocation(program, attribute);\n        });\n    };\n    GPGPUContext.prototype.getUniformLocationNoThrow = function (program, uniformName) {\n        this.throwIfDisposed();\n        return this.gl.getUniformLocation(program, uniformName);\n    };\n    GPGPUContext.prototype.setInputMatrixTexture = function (inputMatrixTexture, uniformLocation, textureUnit) {\n        this.throwIfDisposed();\n        this.throwIfNoProgram();\n        webgl_util.bindTextureToProgramUniformSampler(this.gl, this.program, inputMatrixTexture, uniformLocation, textureUnit);\n    };\n    GPGPUContext.prototype.setOutputMatrixTexture = function (outputMatrixTexture, rows, columns) {\n        this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n    };\n    GPGPUContext.prototype.setOutputPackedMatrixTexture = function (outputPackedMatrixTexture, rows, columns) {\n        this.throwIfDisposed();\n        var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns),\n            width = _a[0],\n            height = _a[1];\n        this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n    };\n    GPGPUContext.prototype.setOutputMatrixWriteRegion = function (startRow, numRows, startColumn, numColumns) {\n        this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);\n    };\n    GPGPUContext.prototype.setOutputPackedMatrixWriteRegion = function (startRow, numRows, startColumn, numColumns) {\n        throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n    };\n    GPGPUContext.prototype.debugValidate = function () {\n        if (this.program != null) {\n            webgl_util.validateProgram(this.gl, this.program);\n        }\n        webgl_util.validateFramebuffer(this.gl);\n    };\n    GPGPUContext.prototype.executeProgram = function () {\n        this.throwIfDisposed();\n        this.throwIfNoProgram();\n        var gl = this.gl;\n        if (this.autoDebugValidate) {\n            this.debugValidate();\n        }\n        webgl_util.callAndCheck(gl, function () {\n            return gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n        });\n    };\n    GPGPUContext.prototype.blockUntilAllProgramsCompleted = function () {\n        var _this = this;\n        this.throwIfDisposed();\n        webgl_util.callAndCheck(this.gl, function () {\n            return _this.gl.finish();\n        });\n    };\n    GPGPUContext.prototype.getQueryTimerExtension = function () {\n        if (this.disjointQueryTimerExtension == null) {\n            this.disjointQueryTimerExtension = webgl_util.getExtensionOrThrow(this.gl, environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ? 'EXT_disjoint_timer_query_webgl2' : 'EXT_disjoint_timer_query');\n        }\n        return this.disjointQueryTimerExtension;\n    };\n    GPGPUContext.prototype.getQueryTimerExtensionWebGL2 = function () {\n        return this.getQueryTimerExtension();\n    };\n    GPGPUContext.prototype.getQueryTimerExtensionWebGL1 = function () {\n        return this.getQueryTimerExtension();\n    };\n    GPGPUContext.prototype.runQuery = function (queryFn) {\n        var query = this.beginQuery();\n        queryFn();\n        this.endQuery();\n        return this.pollQueryTime(query);\n    };\n    GPGPUContext.prototype.beginQuery = function () {\n        if (environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n            var gl2 = this.gl;\n            var ext_1 = this.getQueryTimerExtensionWebGL2();\n            var query_1 = gl2.createQuery();\n            gl2.beginQuery(ext_1.TIME_ELAPSED_EXT, query_1);\n            return query_1;\n        }\n        var ext = this.getQueryTimerExtensionWebGL1();\n        var query = ext.createQueryEXT();\n        ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n        return query;\n    };\n    GPGPUContext.prototype.endQuery = function () {\n        if (environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n            var gl2 = this.gl;\n            var ext_2 = this.getQueryTimerExtensionWebGL2();\n            gl2.endQuery(ext_2.TIME_ELAPSED_EXT);\n            return;\n        }\n        var ext = this.getQueryTimerExtensionWebGL1();\n        ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n    };\n    GPGPUContext.prototype.isQueryAvailable = function (query, queryTimerVersion) {\n        if (queryTimerVersion === 0) {\n            return true;\n        }\n        if (queryTimerVersion === 2) {\n            var gl2 = this.gl;\n            var ext = this.getQueryTimerExtensionWebGL2();\n            var available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n            var disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n            return available && !disjoint;\n        } else {\n            var ext = this.getQueryTimerExtensionWebGL1();\n            var available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n            var disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n            return available && !disjoint;\n        }\n    };\n    GPGPUContext.prototype.pollQueryTime = function (query) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var resolveWithWarning = function () {\n                console.warn('Disjoint query timer never available.');\n                resolve(-1);\n            };\n            var queryTimerVersion = environment_1.ENV.get('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION');\n            util.repeatedTry(function () {\n                return _this.isQueryAvailable(query, queryTimerVersion);\n            }).then(function () {\n                return resolve(_this.getQueryTime(query, queryTimerVersion));\n            }).catch(resolveWithWarning);\n        });\n    };\n    GPGPUContext.prototype.getQueryTime = function (query, queryTimerVersion) {\n        if (queryTimerVersion === 0) {\n            return null;\n        }\n        if (queryTimerVersion === 2) {\n            var gl2 = this.gl;\n            var timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n            return timeElapsedNanos / 1000000;\n        } else {\n            var ext = this.getQueryTimerExtensionWebGL1();\n            var timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n            return timeElapsedNanos / 1000000;\n        }\n    };\n    GPGPUContext.prototype.downloadMatrixDriverSetup = function (texture) {\n        this.throwIfDisposed();\n        webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);\n        if (this.autoDebugValidate) {\n            webgl_util.validateFramebuffer(this.gl);\n        }\n    };\n    GPGPUContext.prototype.downloadMatrixDriverTeardown = function () {\n        if (this.outputTexture != null) {\n            webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);\n            if (this.autoDebugValidate) {\n                webgl_util.validateFramebuffer(this.gl);\n            }\n        } else {\n            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n        }\n    };\n    GPGPUContext.prototype.downloadMatrixDriver = function (texture, downloadAndDecode) {\n        this.downloadMatrixDriverSetup(texture);\n        var result = downloadAndDecode();\n        this.downloadMatrixDriverTeardown();\n        return result;\n    };\n    GPGPUContext.prototype.downloadMatrixDriverAsync = function (texture, downloadAndDecode) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.downloadMatrixDriverSetup(texture);\n                        return [4, downloadAndDecode()];\n                    case 1:\n                        result = _a.sent();\n                        this.downloadMatrixDriverTeardown();\n                        return [2, result];\n                }\n            });\n        });\n    };\n    GPGPUContext.prototype.setOutputMatrixTextureDriver = function (outputMatrixTextureMaybePacked, width, height) {\n        this.throwIfDisposed();\n        var gl = this.gl;\n        webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);\n        if (this.autoDebugValidate) {\n            webgl_util.validateFramebuffer(gl);\n        }\n        this.outputTexture = outputMatrixTextureMaybePacked;\n        webgl_util.callAndCheck(gl, function () {\n            return gl.viewport(0, 0, width, height);\n        });\n        webgl_util.callAndCheck(gl, function () {\n            return gl.scissor(0, 0, width, height);\n        });\n    };\n    GPGPUContext.prototype.setOutputMatrixWriteRegionDriver = function (x, y, width, height) {\n        var _this = this;\n        this.throwIfDisposed();\n        webgl_util.callAndCheck(this.gl, function () {\n            return _this.gl.scissor(x, y, width, height);\n        });\n    };\n    GPGPUContext.prototype.throwIfDisposed = function () {\n        if (this.disposed) {\n            throw new Error('Attempted to use disposed GPGPUContext.');\n        }\n    };\n    GPGPUContext.prototype.throwIfNoProgram = function () {\n        if (this.program == null) {\n            throw new Error('No GPU program is currently set.');\n        }\n    };\n    return GPGPUContext;\n}();\nexports.GPGPUContext = GPGPUContext;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/gpgpu_context.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/gpgpu_math.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/gpgpu_math.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = __webpack_require__(/*! ../../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar util = __webpack_require__(/*! ../../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar shader_compiler = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js\");\nvar NAN_UNIFORM_NAME = 'NaN';\nfunction shouldUploadNaNUniform() {\n    return !environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED');\n}\nfunction compileProgram(gpgpu, program, inputs, output) {\n    var userCode = program.userCode;\n    var inputInfos = inputs.map(function (input, i) {\n        var shapeInfo = {\n            logicalShape: input.tensor.shape,\n            texShape: input.texData.texShape\n        };\n        return { name: program.variableNames[i], shapeInfo: shapeInfo };\n    });\n    var inShapeInfos = inputInfos.map(function (x) {\n        return x.shapeInfo;\n    });\n    var outShapeInfo = {\n        logicalShape: output.tensor.shape,\n        texShape: output.texData.texShape\n    };\n    var source = shader_compiler.makeShader(inputInfos, outShapeInfo, userCode, program.supportsBroadcasting === true);\n    var webGLProgram = gpgpu.createProgram(source);\n    var uniformLocations = {};\n    for (var i = 0; i < program.variableNames.length; i++) {\n        var uniformName = program.variableNames[i];\n        uniformLocations[uniformName] = gpgpu.getUniformLocation(webGLProgram, uniformName);\n    }\n    if (shouldUploadNaNUniform()) {\n        var throwIfNaNUniformIsNotUsed = false;\n        uniformLocations[NAN_UNIFORM_NAME] = gpgpu.getUniformLocation(webGLProgram, NAN_UNIFORM_NAME, throwIfNaNUniformIsNotUsed);\n    }\n    return {\n        program: program,\n        source: source,\n        webGLProgram: webGLProgram,\n        uniformLocations: uniformLocations,\n        gpgpu: gpgpu,\n        inShapeInfos: inShapeInfos,\n        outShapeInfo: outShapeInfo\n    };\n}\nexports.compileProgram = compileProgram;\nfunction validateBinaryAndProgram(shapeInfos, inputs) {\n    if (shapeInfos.length !== inputs.length) {\n        throw Error(\"Binary was compiled with \" + shapeInfos.length + \" inputs, but \" + (\"was executed with \" + inputs.length + \" inputs\"));\n    }\n    shapeInfos.forEach(function (s, i) {\n        var shapeA = s.logicalShape;\n        var texShapeA = s.texShape;\n        var shapeB = inputs[i].tensor.shape;\n        var texShapeB = inputs[i].texData.texShape;\n        if (!util.arraysEqual(shapeA, shapeB)) {\n            throw Error(\"Binary was compiled with different shapes than \" + (\"the current args. Shapes \" + shapeA + \" and \" + shapeB + \" must match\"));\n        }\n        if (!util.arraysEqual(texShapeA, texShapeB)) {\n            throw Error(\"Binary was compiled with different texture shapes than the\" + (\" current args. Shape \" + texShapeA + \" and \" + texShapeB + \" must match\"));\n        }\n    });\n}\nfunction runProgram(binary, inputs, output, customSetup) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n    var outTex = output.texData.texture;\n    var outTexShape = output.texData.texShape;\n    var gpgpu = binary.gpgpu;\n    gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n    gpgpu.setProgram(binary.webGLProgram);\n    inputs.forEach(function (input, i) {\n        var tex = input.texData.texture;\n        var variableName = binary.program.variableNames[i];\n        var variableUniformLocation = binary.uniformLocations[variableName];\n        gpgpu.setInputMatrixTexture(tex, variableUniformLocation, i);\n    });\n    if (shouldUploadNaNUniform()) {\n        gpgpu.gl.uniform1f(binary.uniformLocations[NAN_UNIFORM_NAME], NaN);\n    }\n    if (customSetup != null) {\n        customSetup(gpgpu, binary.webGLProgram);\n    }\n    gpgpu.executeProgram();\n}\nexports.runProgram = runProgram;\nfunction makeShaderKey(program, inputs, output) {\n    var keyInputs = '';\n    inputs.concat(output).forEach(function (x) {\n        keyInputs += x.tensor.shape + \"_\" + x.texData.texShape;\n    });\n    var keyUserCode = program.userCode;\n    var keyBroadcast = (program.supportsBroadcasting === true).toString();\n    var key = program.constructor.name;\n    key += '_' + keyBroadcast + '_' + keyInputs + '_' + keyUserCode;\n    return key;\n}\nexports.makeShaderKey = makeShaderKey;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/gpgpu_math.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/gpgpu_util.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/gpgpu_util.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : new P(function (resolve) {\n                resolve(result.value);\n            }).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n    var _ = { label: 0, sent: function () {\n            if (t[0] & 1) throw t[1];return t[1];\n        }, trys: [], ops: [] },\n        f,\n        y,\n        t,\n        g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n    }), g;\n    function verb(n) {\n        return function (v) {\n            return step([n, v]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0:case 1:\n                    t = op;break;\n                case 4:\n                    _.label++;return { value: op[1], done: false };\n                case 5:\n                    _.label++;y = op[1];op = [0];continue;\n                case 7:\n                    op = _.ops.pop();_.trys.pop();continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];t = op;break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];_.ops.push(op);break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [6, e];y = 0;\n        } finally {\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = __webpack_require__(/*! ../../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar tex_util = __webpack_require__(/*! ./tex_util */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/tex_util.js\");\nvar webgl_util = __webpack_require__(/*! ./webgl_util */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/webgl_util.js\");\nfunction getWebGLContextAttributes() {\n    return {\n        alpha: false,\n        antialias: false,\n        premultipliedAlpha: false,\n        preserveDrawingBuffer: false,\n        depth: false,\n        stencil: false,\n        failIfMajorPerformanceCaveat: true\n    };\n}\nexports.getWebGLContextAttributes = getWebGLContextAttributes;\nfunction createWebGLContext(canvas) {\n    var attributes = getWebGLContextAttributes();\n    var gl;\n    if (canvas != null) {\n        gl = webgl_util.createWebGLRenderingContextFromCanvas(canvas, attributes);\n    } else {\n        gl = webgl_util.createWebGLRenderingContext(attributes);\n    }\n    webgl_util.callAndCheck(gl, function () {\n        return gl.disable(gl.DEPTH_TEST);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.disable(gl.STENCIL_TEST);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.disable(gl.BLEND);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.disable(gl.DITHER);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.disable(gl.POLYGON_OFFSET_FILL);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.disable(gl.SAMPLE_COVERAGE);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.enable(gl.SCISSOR_TEST);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.enable(gl.CULL_FACE);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.cullFace(gl.BACK);\n    });\n    return gl;\n}\nexports.createWebGLContext = createWebGLContext;\nfunction createVertexShader(gl) {\n    var vertexShaderSource = \"\\n    precision highp float;\\n    attribute vec3 clipSpacePos;\\n    attribute vec2 uv;\\n    varying vec2 resultUV;\\n\\n    void main() {\\n      gl_Position = vec4(clipSpacePos, 1);\\n      resultUV = uv;\\n    }\";\n    return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\nexports.createVertexShader = createVertexShader;\nfunction createVertexBuffer(gl) {\n    var vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n    return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\nexports.createVertexBuffer = createVertexBuffer;\nfunction createIndexBuffer(gl) {\n    var triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n    return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\nexports.createIndexBuffer = createIndexBuffer;\nfunction getTextureInternalFormat(gl, numChannels) {\n    if (!environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED')) {\n        return gl.RGBA;\n    }\n    if (environment_1.ENV.get('WEBGL_VERSION') === 2) {\n        if (numChannels === 4) {\n            return gl.RGBA32F;\n        }\n        return gl.R32F;\n    }\n    return gl.RGBA;\n}\nfunction getTextureFormat(gl, numChannels) {\n    if (!environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED')) {\n        return gl.RGBA;\n    }\n    if (environment_1.ENV.get('WEBGL_VERSION') === 2) {\n        if (numChannels === 4) {\n            return gl.RGBA;\n        }\n        return gl.RED;\n    }\n    return gl.RGBA;\n}\nfunction getTextureType(gl) {\n    if (!environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED')) {\n        return gl.UNSIGNED_BYTE;\n    }\n    return gl.FLOAT;\n}\nfunction createAndConfigureTexture(gl, width, height, numChannels) {\n    webgl_util.validateTextureSize(gl, width, height);\n    var texture = webgl_util.createTexture(gl);\n    var tex2d = gl.TEXTURE_2D;\n    var internalFormat = getTextureInternalFormat(gl, numChannels);\n    var format = getTextureFormat(gl, numChannels);\n    webgl_util.callAndCheck(gl, function () {\n        return gl.bindTexture(tex2d, texture);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, format, getTextureType(gl), null);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.bindTexture(gl.TEXTURE_2D, null);\n    });\n    return texture;\n}\nfunction createMatrixTexture(gl, rows, columns) {\n    var _a = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns),\n        width = _a[0],\n        height = _a[1];\n    var numChannels = 1;\n    return createAndConfigureTexture(gl, width, height, numChannels);\n}\nexports.createMatrixTexture = createMatrixTexture;\nfunction createColorMatrixTexture(gl, rows, columns) {\n    var _a = tex_util.getColorMatrixTextureShapeWidthHeight(rows, columns),\n        width = _a[0],\n        height = _a[1];\n    var numChannels = 4;\n    return createAndConfigureTexture(gl, width, height, numChannels);\n}\nexports.createColorMatrixTexture = createColorMatrixTexture;\nfunction createPackedMatrixTexture(gl, rows, columns) {\n    var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns),\n        width = _a[0],\n        height = _a[1];\n    var numChannels = 4;\n    return createAndConfigureTexture(gl, width, height, numChannels);\n}\nexports.createPackedMatrixTexture = createPackedMatrixTexture;\nfunction bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {\n    var posOffset = 0;\n    var uvOffset = 3 * 4;\n    var stride = 3 * 4 + 2 * 4;\n    webgl_util.callAndCheck(gl, function () {\n        return gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    });\n    webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n    webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\nexports.bindVertexProgramAttributeStreams = bindVertexProgramAttributeStreams;\nfunction uploadPixelDataToTexture(gl, texture, pixels) {\n    webgl_util.callAndCheck(gl, function () {\n        return gl.bindTexture(gl.TEXTURE_2D, texture);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.bindTexture(gl.TEXTURE_2D, null);\n    });\n}\nexports.uploadPixelDataToTexture = uploadPixelDataToTexture;\nfunction uploadDataToTexture(gl, texture, width, height, data, numChannels) {\n    var textureFormat = getTextureFormat(gl, numChannels);\n    webgl_util.validateTextureSize(gl, width, height);\n    webgl_util.callAndCheck(gl, function () {\n        return gl.bindTexture(gl.TEXTURE_2D, texture);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, textureFormat, getTextureType(gl), data);\n    });\n    webgl_util.callAndCheck(gl, function () {\n        return gl.bindTexture(gl.TEXTURE_2D, null);\n    });\n}\nfunction uploadMatrixToTexture(gl, texture, rows, columns, matrix, numChannels) {\n    var _a = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns),\n        w = _a[0],\n        h = _a[1];\n    var unpackedArray;\n    if (environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED')) {\n        var channelsPerTexture = numChannels === 1 ? webgl_util.getChannelsPerTexture() : numChannels;\n        if (channelsPerTexture === 1) {\n            unpackedArray = matrix;\n        } else {\n            unpackedArray = new Float32Array(tex_util.getUnpackedArraySizeFromMatrixSize(matrix.length, channelsPerTexture));\n            tex_util.encodeMatrixToUnpackedArray(matrix, unpackedArray, channelsPerTexture);\n        }\n    } else {\n        unpackedArray = tex_util.encodeFloatArray(matrix);\n    }\n    uploadDataToTexture(gl, texture, w, h, unpackedArray, numChannels);\n}\nexports.uploadMatrixToTexture = uploadMatrixToTexture;\nfunction uploadMatrixToPackedTexture(gl, texture, rows, columns, matrix) {\n    var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns),\n        w = _a[0],\n        h = _a[1];\n    var packedRGBA = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(rows, columns));\n    tex_util.encodeMatrixToPackedRGBA(matrix, rows, columns, packedRGBA);\n    var numChannels = 4;\n    uploadDataToTexture(gl, texture, w, h, packedRGBA, numChannels);\n}\nexports.uploadMatrixToPackedTexture = uploadMatrixToPackedTexture;\nfunction getDownloadTargetArrayBuffer(rows, columns, channelsPerTexture) {\n    var isFloatTexture = environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED');\n    var downloadTarget;\n    if (isFloatTexture) {\n        downloadTarget = new Float32Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, channelsPerTexture));\n    } else {\n        downloadTarget = new Uint8Array(rows * columns * channelsPerTexture);\n    }\n    return downloadTarget;\n}\nfunction decodeDownloadTargetArrayBuffer(downloadTarget, rows, columns, channelsPerPixel) {\n    var isFloatTexture = environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED');\n    if (isFloatTexture) {\n        var matrix = new Float32Array(rows * columns);\n        tex_util.decodeMatrixFromUnpackedArray(downloadTarget, matrix, channelsPerPixel);\n        return matrix;\n    } else {\n        return tex_util.decodeToFloatArray(downloadTarget);\n    }\n}\nfunction downloadMatrixFromOutputTextureAsync(gl, getBufferSubDataAsyncExtension, rows, columns) {\n    return __awaiter(this, void 0, void 0, function () {\n        var gl2, channelsPerPixel, downloadTarget, bufferSizeBytes, buffer;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    gl2 = gl;\n                    channelsPerPixel = 4;\n                    downloadTarget = getDownloadTargetArrayBuffer(rows, columns, channelsPerPixel);\n                    bufferSizeBytes = downloadTarget instanceof Float32Array ? downloadTarget.length * 4 : downloadTarget;\n                    buffer = gl.createBuffer();\n                    webgl_util.callAndCheck(gl, function () {\n                        return gl.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n                    });\n                    webgl_util.callAndCheck(gl, function () {\n                        return gl.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl.STATIC_DRAW);\n                    });\n                    webgl_util.callAndCheck(gl, function () {\n                        return gl2.readPixels(0, 0, columns, rows, gl.RGBA, getTextureType(gl), 0);\n                    });\n                    return [4, getBufferSubDataAsyncExtension.getBufferSubDataAsync(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget)];\n                case 1:\n                    _a.sent();\n                    return [2, decodeDownloadTargetArrayBuffer(downloadTarget, rows, columns, channelsPerPixel)];\n            }\n        });\n    });\n}\nexports.downloadMatrixFromOutputTextureAsync = downloadMatrixFromOutputTextureAsync;\nfunction downloadMatrixFromOutputTexture(gl, rows, columns) {\n    var _a = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns),\n        w = _a[0],\n        h = _a[1];\n    var channelsPerPixel = 4;\n    var downloadTarget = getDownloadTargetArrayBuffer(rows, columns, channelsPerPixel);\n    webgl_util.callAndCheck(gl, function () {\n        return gl.readPixels(0, 0, w, h, gl.RGBA, getTextureType(gl), downloadTarget);\n    });\n    return decodeDownloadTargetArrayBuffer(downloadTarget, rows, columns, channelsPerPixel);\n}\nexports.downloadMatrixFromOutputTexture = downloadMatrixFromOutputTexture;\nfunction downloadMatrixFromRGBAColorTexture(gl, rows, columns, channels) {\n    var size = rows * columns * 4;\n    var downloadTarget = new Uint8Array(size);\n    webgl_util.callAndCheck(gl, function () {\n        return gl.readPixels(0, 0, columns, rows, gl.RGBA, gl.UNSIGNED_BYTE, downloadTarget);\n    });\n    var packedRGBA = new Float32Array(size);\n    for (var i = 0; i < downloadTarget.length; i++) {\n        packedRGBA[i] = downloadTarget[i];\n    }\n    var matrix = new Float32Array(rows * columns * channels);\n    tex_util.decodeMatrixFromUnpackedColorRGBAArray(packedRGBA, matrix, channels);\n    return matrix;\n}\nexports.downloadMatrixFromRGBAColorTexture = downloadMatrixFromRGBAColorTexture;\nfunction downloadMatrixFromPackedOutputTexture(gl, rows, columns) {\n    var _a = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns),\n        w = _a[0],\n        h = _a[1];\n    var packedRGBA = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(rows, columns));\n    webgl_util.callAndCheck(gl, function () {\n        return gl.readPixels(0, 0, w, h, gl.RGBA, getTextureType(gl), packedRGBA);\n    });\n    var matrix = new Float32Array(rows * columns);\n    return tex_util.decodeMatrixFromPackedRGBA(packedRGBA, rows, columns, matrix);\n}\nexports.downloadMatrixFromPackedOutputTexture = downloadMatrixFromPackedOutputTexture;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/gpgpu_util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/logical_gpu.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/logical_gpu.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar shader_compiler_1 = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js\");\nvar WhereProgram = function () {\n    function WhereProgram(cRank, shape, rank) {\n        this.variableNames = ['c', 'a', 'b'];\n        this.outputShape = shape;\n        var cCoords;\n        var abCoords;\n        if (rank > 4) {\n            throw Error(\"Where for rank \" + rank + \" is not yet supported\");\n        }\n        if (rank === 1) {\n            abCoords = \"resRC\";\n            cCoords = \"resRC\";\n        } else {\n            var currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n            var cCoordVars = [];\n            var abCoordVars = [];\n            for (var i = 0; i < shape.length; i++) {\n                abCoordVars.push(\"\" + currentCoords[i]);\n                if (i < cRank) {\n                    cCoordVars.push(\"\" + currentCoords[i]);\n                }\n            }\n            cCoords = cCoordVars.join();\n            abCoords = abCoordVars.join();\n        }\n        var dtype = shader_compiler_1.getCoordsDataType(rank);\n        this.userCode = \"\\n      void main() {\\n        \" + dtype + \" resRC = getOutputCoords();\\n        float cVal = getC(\" + cCoords + \");\\n        if (cVal >= 1.0) {\\n          setOutput(getA(\" + abCoords + \"));\\n        } else {\\n          setOutput(getB(\" + abCoords + \"));\\n        }\\n      }\\n    \";\n    }\n    return WhereProgram;\n}();\nexports.WhereProgram = WhereProgram;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/logical_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LRNProgram = function () {\n    function LRNProgram(xShape, radius, bias, alpha, beta, normRegion) {\n        this.variableNames = ['x'];\n        this.outputShape = [];\n        var rad = radius;\n        var maxW = xShape[1] - 1;\n        var maxH = xShape[2] - 1;\n        var maxD = xShape[3] - 1;\n        this.outputShape = xShape;\n        var powOperator;\n        var basis = \"float(\" + bias + \") + float(\" + alpha + \") * sum\";\n        if (beta === 0.5) {\n            powOperator = \"inversesqrt(\" + basis + \")\";\n        } else if (beta === 1.0) {\n            powOperator = \"1.0/(\" + basis + \")\";\n        } else {\n            powOperator = \"exp(log(\" + basis + \") * float(-\" + beta + \"));\";\n        }\n        if (normRegion === 'withinChannel') {\n            this.userCode = \"\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int b = coords[0];\\n          int r = coords[1];\\n          int c = coords[2];\\n          int d = coords[3];\\n          float x = getX(b, r, c, d);\\n          float sum = 0.0;\\n          for (int u = -\" + rad + \"; u <= \" + rad + \"; u++) {\\n            for (int v = -\" + rad + \"; v <= \" + rad + \"; v++) {\\n              int idx = r + u;\\n              int idy = c + v;\\n              if (idx >= 0 && idx <= \" + maxW + \" && idy >= 0 && idy <= \" + maxH + \") {\\n                float z = getX(b, idx, idy, d);\\n                sum += z * z;\\n              }\\n            }\\n          }\\n          float val = x * \" + powOperator + \";\\n          setOutput(val);\\n        }\\n      \";\n        } else {\n            this.userCode = \"\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int b = coords[0];\\n          int r = coords[1];\\n          int c = coords[2];\\n          int d = coords[3];\\n          float x = getX(b, r, c, d);\\n          float sum = 0.0;\\n          for (int j = -\" + rad + \"; j <= \" + rad + \"; j++) {\\n            int idx = d + j;\\n            if (idx >= 0 && idx <=  \" + maxD + \") {\\n              float z = getX(b, r, c, idx);\\n              sum += z * z;\\n            }\\n          }\\n          float val = x * \" + powOperator + \";\\n          setOutput(val);\\n        }\\n      \";\n        }\n    }\n    return LRNProgram;\n}();\nexports.LRNProgram = LRNProgram;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/lrn_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/max_pool_backprop_gpu.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/max_pool_backprop_gpu.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MaxPool2DBackpropProgram = function () {\n    function MaxPool2DBackpropProgram(convInfo) {\n        this.variableNames = ['dy', 'maxPos'];\n        this.outputShape = convInfo.inShape;\n        var filterHeight = convInfo.filterHeight;\n        var filterWidth = convInfo.filterWidth;\n        var strideHeight = convInfo.strideHeight;\n        var strideWidth = convInfo.strideWidth;\n        var padTop = filterHeight - 1 - convInfo.padInfo.top;\n        var padLeft = filterWidth - 1 - convInfo.padInfo.left;\n        var lastIndex = filterHeight * filterWidth - 1;\n        this.userCode = \"\\n      const ivec2 pads = ivec2(\" + padTop + \", \" + padLeft + \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 dyRCCorner = coords.yz - pads;\\n        int dyRCorner = dyRCCorner.x;\\n        int dyCCorner = dyRCCorner.y;\\n\\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \" + filterHeight + \"; wR++) {\\n          float dyR = float(dyRCorner + wR) / \" + strideHeight + \".0;\\n\\n          if (dyR < 0.0 || dyR >= \" + convInfo.outHeight + \".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          for (int wC = 0; wC < \" + filterWidth + \"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \" + strideWidth + \".0;\\n\\n            if (dyC < 0.0 || dyC >= \" + convInfo.outWidth + \".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            float dyValue = getDy(b, idyR, idyC, d);\\n            int maxPosValue = \" + lastIndex + \" - int(getMaxPos(b, idyR, idyC, d));\\n\\n            // Get the current value, check it against the value from the\\n            // position matrix.\\n            int curPosValue = wR * \" + filterWidth + \" + wC;\\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\\n\\n            dotProd += dyValue * mask;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n    }\n    return MaxPool2DBackpropProgram;\n}();\nexports.MaxPool2DBackpropProgram = MaxPool2DBackpropProgram;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/max_pool_backprop_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/mulmat_gpu.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/mulmat_gpu.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MatMulProgram = function () {\n    function MatMulProgram(aShape, bShape, transposeA, transposeB) {\n        if (transposeA === void 0) {\n            transposeA = false;\n        }\n        if (transposeB === void 0) {\n            transposeB = false;\n        }\n        this.variableNames = ['matrixA', 'matrixB'];\n        var outerShapeA = transposeA ? aShape[1] : aShape[0];\n        var outerShapeB = transposeB ? bShape[0] : bShape[1];\n        var sharedDim = transposeA ? aShape[0] : aShape[1];\n        this.outputShape = [outerShapeA, outerShapeB];\n        var aSnippetFromOffset = function (vec4Offset, indexVar) {\n            return transposeA ? indexVar + \" + \" + vec4Offset + \", aRow\" : \"aRow, \" + indexVar + \" + \" + vec4Offset;\n        };\n        var bSnippetFromOffset = function (vec4Offset, indexVar) {\n            return transposeB ? \"bCol, \" + indexVar + \" + \" + vec4Offset : indexVar + \" + \" + vec4Offset + \", bCol\";\n        };\n        var sharedDimNearestVec4 = Math.floor(sharedDim / 4) * 4;\n        var sharedDimVec4Remainder = sharedDim % 4;\n        this.userCode = \" float dotARowBCol(int aRow, int bCol) {\\n      float result = 0.0;\\n      for (int i = 0; i < \" + sharedDimNearestVec4 + \"; i += 4) {\\n        vec4 a = vec4(\\n          getMatrixA(\" + aSnippetFromOffset(0, 'i') + \"),\\n          getMatrixA(\" + aSnippetFromOffset(1, 'i') + \"),\\n          getMatrixA(\" + aSnippetFromOffset(2, 'i') + \"),\\n          getMatrixA(\" + aSnippetFromOffset(3, 'i') + \")\\n        );\\n        vec4 b = vec4(\\n          getMatrixB(\" + bSnippetFromOffset(0, 'i') + \"),\\n          getMatrixB(\" + bSnippetFromOffset(1, 'i') + \"),\\n          getMatrixB(\" + bSnippetFromOffset(2, 'i') + \"),\\n          getMatrixB(\" + bSnippetFromOffset(3, 'i') + \")\\n        );\\n\\n        result += dot(a, b);\\n      }\\n\\n      if (\" + (sharedDimVec4Remainder === 1) + \") {\\n        result += getMatrixA(\" + aSnippetFromOffset(0, sharedDimNearestVec4) + \") *\\n          getMatrixB(\" + bSnippetFromOffset(0, sharedDimNearestVec4) + \");\\n      } else if (\" + (sharedDimVec4Remainder === 2) + \") {\\n        vec2 a = vec2(\\n          getMatrixA(\" + aSnippetFromOffset(0, sharedDimNearestVec4) + \"),\\n          getMatrixA(\" + aSnippetFromOffset(1, sharedDimNearestVec4) + \")\\n        );\\n        vec2 b = vec2(\\n          getMatrixB(\" + bSnippetFromOffset(0, sharedDimNearestVec4) + \"),\\n          getMatrixB(\" + bSnippetFromOffset(1, sharedDimNearestVec4) + \")\\n        );\\n        result += dot(a, b);\\n      } else if (\" + (sharedDimVec4Remainder === 3) + \") {\\n        vec3 a = vec3(\\n          getMatrixA(\" + aSnippetFromOffset(0, sharedDimNearestVec4) + \"),\\n          getMatrixA(\" + aSnippetFromOffset(1, sharedDimNearestVec4) + \"),\\n          getMatrixA(\" + aSnippetFromOffset(2, sharedDimNearestVec4) + \")\\n        );\\n        vec3 b = vec3(\\n          getMatrixB(\" + bSnippetFromOffset(0, sharedDimNearestVec4) + \"),\\n          getMatrixB(\" + bSnippetFromOffset(1, sharedDimNearestVec4) + \"),\\n          getMatrixB(\" + bSnippetFromOffset(2, sharedDimNearestVec4) + \")\\n        );\\n        result += dot(a, b);\\n      }\\n\\n      return result;\\n    }\\n\\n    void main() {\\n      ivec2 resRC = getOutputCoords();\\n      setOutput(dotARowBCol(resRC.x, resRC.y));\\n    }\\n    \";\n    }\n    return MatMulProgram;\n}();\nexports.MatMulProgram = MatMulProgram;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/mulmat_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/multinomial_gpu.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/multinomial_gpu.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MultinomialProgram = function () {\n    function MultinomialProgram(batchSize, numOutcomes, numSamples) {\n        this.variableNames = ['probs'];\n        this.outputShape = [batchSize, numSamples];\n        this.userCode = \"\\n      uniform float seed;\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n\\n        float r = random(seed);\\n        float cdf = 0.0;\\n\\n        for (int i = 0; i < \" + (numOutcomes - 1) + \"; i++) {\\n          cdf += getProbs(batch, i);\\n\\n          if (r < cdf) {\\n            setOutput(float(i));\\n            return;\\n          }\\n        }\\n\\n        // If no other event happened, last event happened.\\n        setOutput(float(\" + (numOutcomes - 1) + \"));\\n      }\\n    \";\n    }\n    MultinomialProgram.prototype.getCustomSetupFunc = function (seed) {\n        var _this = this;\n        return function (gpgpu, webGLProgram) {\n            if (_this.seedLoc == null) {\n                _this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');\n            }\n            gpgpu.gl.uniform1f(_this.seedLoc, seed);\n        };\n    };\n    return MultinomialProgram;\n}();\nexports.MultinomialProgram = MultinomialProgram;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/multinomial_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/onehot_gpu.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/onehot_gpu.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar OneHotProgram = function () {\n    function OneHotProgram(numIndices, depth, onValue, offValue) {\n        this.variableNames = ['indices'];\n        this.outputShape = [numIndices, depth];\n        this.userCode = \"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int index = round(getIndices(coords.x));\\n        setOutput(mix(float(\" + offValue + \"), float(\" + onValue + \"),\\n                      float(index == coords.y)));\\n      }\\n    \";\n    }\n    return OneHotProgram;\n}();\nexports.OneHotProgram = OneHotProgram;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/onehot_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/pad_gpu.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/pad_gpu.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar shader_compiler_1 = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js\");\nvar PadProgram = function () {\n    function PadProgram(xShape, paddings, constantValue) {\n        this.variableNames = ['x'];\n        this.outputShape = paddings.map(function (p, i) {\n            return p[0] + xShape[i] + p[1];\n        });\n        var rank = xShape.length;\n        var type = shader_compiler_1.getCoordsDataType(rank);\n        var start = paddings.map(function (p) {\n            return p[0];\n        }).join(',');\n        var end = paddings.map(function (p, i) {\n            return p[0] + xShape[i];\n        }).join(',');\n        var unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n        if (rank === 1) {\n            this.userCode = \"\\n        int start = \" + start + \";\\n        int end = \" + end + \";\\n\\n        void main() {\\n          int outC = getOutputCoords();\\n          if (outC < start || outC >= end) {\\n            setOutput(float(\" + constantValue + \"));\\n          } else {\\n            setOutput(getX(outC - start));\\n          }\\n        }\\n      \";\n            return;\n        }\n        this.userCode = \"\\n      \" + type + \" start = \" + type + \"(\" + start + \");\\n      \" + type + \" end = \" + type + \"(\" + end + \");\\n\\n      void main() {\\n        \" + type + \" outC = getOutputCoords();\\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\\n          setOutput(float(\" + constantValue + \"));\\n        } else {\\n          \" + type + \" coords = outC - start;\\n          setOutput(getX(\" + unpackedCoords + \"));\\n        }\\n      }\\n    \";\n    }\n    return PadProgram;\n}();\nexports.PadProgram = PadProgram;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/pad_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/pool_gpu.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/pool_gpu.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Pool2DProgram = function () {\n    function Pool2DProgram(convInfo, poolType, computePositions) {\n        this.variableNames = ['x'];\n        if (poolType === 'avg' && computePositions) {\n            throw new Error('Cannot compute positions for average pool.');\n        }\n        var filterHeight = convInfo.filterHeight;\n        var filterWidth = convInfo.filterWidth;\n        var strideHeight = convInfo.strideHeight;\n        var strideWidth = convInfo.strideWidth;\n        var padTop = convInfo.padInfo.top;\n        var padLeft = convInfo.padInfo.left;\n        this.outputShape = convInfo.outShape;\n        var isAvgPool = poolType === 'avg';\n        var initializationValue = '0.0';\n        if (!isAvgPool) {\n            if (poolType === 'min') {\n                initializationValue = '1.0 / 0.0';\n            } else {\n                initializationValue = '-1.0 / 0.0';\n            }\n        }\n        if (computePositions) {\n            var compareOp_1 = poolType === 'min' ? '<=' : '>=';\n            this.userCode = \"\\n        const ivec2 strides = ivec2(\" + strideHeight + \", \" + strideWidth + \");\\n        const ivec2 pads = ivec2(\" + padTop + \", \" + padLeft + \");\\n\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int batch = coords[0];\\n          int d = coords[3];\\n\\n          ivec2 xRCCorner = coords.yz * strides - pads;\\n          int xRCorner = xRCCorner.x;\\n          int xCCorner = xRCCorner.y;\\n\\n          // max/min x(?, ?, d) to get y(yR, yC, d).\\n          // ? = to be determined\\n          float minMaxValue = 0.0;\\n          float minMaxValueFound = 0.0;\\n          int minMaxPosition = 0;\\n          float avgValue = 0.0;\\n\\n          for (int wR = 0; wR < \" + filterHeight + \"; wR++) {\\n            int xR = xRCorner + wR;\\n\\n            if (xR < 0 || xR >= \" + convInfo.inHeight + \") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \" + filterWidth + \"; wC++) {\\n              int xC = xCCorner + wC;\\n\\n              if (xC < 0 || xC >= \" + convInfo.inWidth + \") {\\n                continue;\\n              }\\n\\n              float value = getX(batch, xR, xC, d);\\n\\n              if (isNaN(value)) {\\n                setOutput(value);\\n                return;\\n              }\\n\\n              // If a min / max value has already been found, use it. If not,\\n              // use the current value.\\n              float currMinMaxValue = mix(\\n                  value, minMaxValue, minMaxValueFound);\\n              if (value \" + compareOp_1 + \" currMinMaxValue) {\\n                minMaxValue = value;\\n                minMaxValueFound = 1.0;\\n                minMaxPosition = wR * \" + filterWidth + \" + wC;\\n              }\\n            }\\n          }\\n          setOutput(float(minMaxPosition));\\n        }\\n      \";\n            return;\n        }\n        var compareOp = poolType === 'min' ? 'min' : 'max';\n        var returnValue = poolType + \"(\" + poolType + \"(\" + poolType + \"(\" + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n        if (poolType === 'avg') {\n            returnValue = \"avgValue / \" + filterHeight * filterWidth + \".0\";\n        }\n        var filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n        var filterWidthVec4Remainder = filterWidth % 4;\n        var updateSnippet = \"\\n      if (hasNaN(values)) {\\n        setOutput(getNaN(values));\\n        return;\\n      }\\n      if (\" + isAvgPool + \") {\\n        avgValue += dot(values, ones);\\n      } else {\\n        minMaxValue = \" + compareOp + \"(values, minMaxValue);\\n      }\\n    \";\n        this.userCode = \"\\n      const ivec2 strides = ivec2(\" + strideHeight + \", \" + strideWidth + \");\\n      const ivec2 pads = ivec2(\" + padTop + \", \" + padLeft + \");\\n      const float initializationValue = \" + initializationValue + \";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float getValue(int batch, int xR, int xC, int d) {\\n        if (xC < 0 || xC >= \" + convInfo.inWidth + \") {\\n          return initializationValue;\\n        }\\n        return getX(batch, xR, xC, d);\\n      }\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // max/min x(?, ?, d) to get y(yR, yC, d).\\n        // ? = to be determined\\n        vec4 minMaxValue = vec4(\" + initializationValue + \");\\n        float avgValue = 0.0;\\n\\n        for (int wR = 0; wR < \" + filterHeight + \"; wR++) {\\n          int xR = xRCorner + wR;\\n\\n          if (xR < 0 || xR >= \" + convInfo.inHeight + \") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \" + filterWidthNearestVec4 + \"; wC += 4) {\\n            int xC = xCCorner + wC;\\n\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + 1, d),\\n              getValue(batch, xR, xC + 2, d),\\n              getValue(batch, xR, xC + 3, d)\\n            );\\n\\n            \" + updateSnippet + \"\\n          }\\n\\n          int xC = xCCorner + \" + filterWidthNearestVec4 + \";\\n          if (\" + (filterWidthVec4Remainder === 1) + \") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              initializationValue,\\n              initializationValue,\\n              initializationValue\\n            );\\n            \" + updateSnippet + \"\\n          } else if (\" + (filterWidthVec4Remainder === 2) + \") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + 1, d),\\n              initializationValue,\\n              initializationValue\\n            );\\n\\n            \" + updateSnippet + \"\\n          } else if (\" + (filterWidthVec4Remainder === 3) + \") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + 1, d),\\n              getValue(batch, xR, xC + 2, d),\\n              initializationValue\\n            );\\n\\n            \" + updateSnippet + \"\\n          }\\n        }\\n        setOutput(\" + returnValue + \");\\n      }\\n    \";\n    }\n    return Pool2DProgram;\n}();\nexports.Pool2DProgram = Pool2DProgram;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/pool_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/reduce_gpu.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/reduce_gpu.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ReduceProgram = function () {\n    function ReduceProgram(reduceInfo, reduceType) {\n        this.variableNames = ['x'];\n        var windowSize = reduceInfo.windowSize;\n        var batchSize = reduceInfo.batchSize;\n        var inSize = reduceInfo.inSize;\n        var outSize = Math.ceil(inSize / windowSize);\n        this.outputShape = [batchSize, outSize];\n        var isReduceSum = reduceType === 'sum';\n        var initializationValue = '0.0';\n        if (!isReduceSum) {\n            if (reduceType === 'min') {\n                initializationValue = '1.0 / 0.0';\n            } else {\n                initializationValue = '-1.0 / 0.0';\n            }\n        }\n        var compareOp = reduceType === 'min' ? 'min' : 'max';\n        var returnValue = reduceType + \"(\" + reduceType + \"(\" + reduceType + \"(\" + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n        if (reduceType === 'sum') {\n            returnValue = \"sumValue\";\n        }\n        var windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n        var windowSizeVec4Remainder = windowSize % 4;\n        var updateSnippet = \"\\n      if (\" + isReduceSum + \") {\\n        sumValue += dot(values, ones);\\n      } else {\\n        if (hasNaN(values)) {\\n          setOutput(getNaN(values));\\n          return;\\n        }\\n        minMaxValue = \" + compareOp + \"(values, minMaxValue);\\n      }\\n    \";\n        var checkOutOfBounds = '';\n        if (inSize % windowSize > 0) {\n            checkOutOfBounds = \"\\n        if (inIdx < 0 || inIdx >= \" + inSize + \") {\\n          return initializationValue;\\n        }\\n      \";\n        }\n        this.userCode = \"\\n      const float initializationValue = \" + initializationValue + \";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float getValue(int batch, int inIdx) {\\n        \" + checkOutOfBounds + \"\\n        return getX(batch, inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * \" + windowSize + \";\\n\\n        vec4 minMaxValue = vec4(\" + initializationValue + \");\\n        float sumValue = 0.0;\\n\\n        for (int i = 0; i < \" + windowSizeNearestVec4 + \"; i += 4) {\\n          int inIdx = inOffset + i;\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          \" + updateSnippet + \"\\n        }\\n\\n        int inIdx = inOffset + \" + windowSizeNearestVec4 + \";\\n        if (\" + (windowSizeVec4Remainder === 1) + \") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            initializationValue,\\n            initializationValue,\\n            initializationValue\\n          );\\n          \" + updateSnippet + \"\\n        } else if (\" + (windowSizeVec4Remainder === 2) + \") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            initializationValue,\\n            initializationValue\\n          );\\n          \" + updateSnippet + \"\\n        } else if (\" + (windowSizeVec4Remainder === 3) + \") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            initializationValue\\n          );\\n          \" + updateSnippet + \"\\n        }\\n        setOutput(\" + returnValue + \");\\n      }\\n    \";\n    }\n    return ReduceProgram;\n}();\nexports.ReduceProgram = ReduceProgram;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/reduce_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/resize_bilinear_gpu.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/resize_bilinear_gpu.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ResizeBilinearProgram = function () {\n    function ResizeBilinearProgram(inputShape, newHeight, newWidth, alignCorners) {\n        this.variableNames = ['A'];\n        this.outputShape = [];\n        var batch = inputShape[0],\n            oldHeight = inputShape[1],\n            oldWidth = inputShape[2],\n            depth = inputShape[3];\n        this.outputShape = [batch, newHeight, newWidth, depth];\n        var effectiveInSize = alignCorners ? [oldHeight - 1, oldWidth - 1] : [oldHeight, oldWidth];\n        var effectiveOutSize = alignCorners ? [newHeight - 1, newWidth - 1] : [newHeight, newWidth];\n        this.userCode = \"\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          \" + effectiveInSize[0] / effectiveOutSize[0] + \",\\n          \" + effectiveInSize[1] / effectiveOutSize[1] + \");\\n      const vec2 inputShapeRC = vec2(\" + oldHeight + \".0, \" + oldWidth + \".0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the four integer indices.\\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\\n        ivec2 sourceCeilRC = ivec2(\\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\\n\\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\\n\\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\\n\\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\\n        float newValue = top + (bottom - top) * fracRC.x;\\n\\n        setOutput(newValue);\\n      }\\n    \";\n    }\n    return ResizeBilinearProgram;\n}();\nexports.ResizeBilinearProgram = ResizeBilinearProgram;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/resize_bilinear_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/reverse_gpu.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/reverse_gpu.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar shader_compiler_1 = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js\");\nvar ReverseProgram = function () {\n    function ReverseProgram(xShape, axis) {\n        this.variableNames = ['x'];\n        var rank = xShape.length;\n        if (rank > 4) {\n            throw new Error(\"WebGL backend: Reverse of rank-\" + rank + \" tensor is not yet supported\");\n        }\n        this.outputShape = xShape;\n        if (rank === 1) {\n            this.userCode = \"\\n        void main() {\\n          int coord = getOutputCoords();\\n          setOutput(getX(\" + xShape[0] + \" - coord - 1));\\n        }\\n      \";\n            return;\n        }\n        var getInCoord = function (i) {\n            if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n                return xShape[i] + \" - coords[\" + i + \"] - 1\";\n            }\n            return \"coords[\" + i + \"]\";\n        };\n        var inCoords = xShape.map(function (_, i) {\n            return getInCoord(i);\n        }).join(',');\n        var type = shader_compiler_1.getCoordsDataType(rank);\n        this.userCode = \"\\n      void main() {\\n        \" + type + \" coords = getOutputCoords();\\n        setOutput(getX(\" + inCoords + \"));\\n      }\\n    \";\n    }\n    return ReverseProgram;\n}();\nexports.ReverseProgram = ReverseProgram;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/reverse_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = __webpack_require__(/*! ../../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar util = __webpack_require__(/*! ../../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar broadcast_util = __webpack_require__(/*! ../../ops/broadcast_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js\");\nvar tex_util = __webpack_require__(/*! ./tex_util */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/tex_util.js\");\nfunction makeShader(inputsInfo, outputShape, userCode, broadcast) {\n    var sampleSnippet = getSampleSnippet();\n    var setOutputSnippet = getSetOutputSnippet();\n    var inputPrefixSnippet = inputsInfo.map(function (x) {\n        return \"uniform sampler2D \" + x.name + \";\";\n    }).join('\\n');\n    var inputSamplingSnippet = inputsInfo.map(function (x) {\n        return getInputSamplingSnippet(x, outputShape, broadcast);\n    }).join('\\n');\n    var outTexShape = outputShape.texShape;\n    var outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    var source = [SHADER_PREFIX, sampleSnippet, setOutputSnippet, inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode].join('\\n');\n    return source;\n}\nexports.makeShader = makeShader;\nfunction getSampleSnippet() {\n    return environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED') ? FLOAT_TEXTURE_SAMPLE_SNIPPET : UNSIGNED_BYTE_TEXTURE_SAMPLE_SNIPPET;\n}\nfunction getSetOutputSnippet() {\n    return environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED') ? FLOAT_TEXTURE_SETOUTPUT_SNIPPET : UNSIGNED_BYTE_TEXTURE_SETOUTPUT_SNIPPET;\n}\nfunction getSamplerFromInInfo(inInfo) {\n    var shape = inInfo.shapeInfo.logicalShape;\n    switch (shape.length) {\n        case 0:\n            return getSamplerScalar(inInfo);\n        case 1:\n            return getSampler1D(inInfo);\n        case 2:\n            return getSampler2D(inInfo);\n        case 3:\n            return getSampler3D(inInfo);\n        case 4:\n            return getSampler4D(inInfo);\n        default:\n            throw new Error(shape.length + \"-D input sampling\" + \" is not yet supported\");\n    }\n}\nfunction getInputSamplingSnippet(inInfo, outShapeInfo, broadcast) {\n    var res = getSamplerFlat(inInfo);\n    res += getSamplerFromInInfo(inInfo);\n    if (broadcast || util.arraysEqual(inInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape)) {\n        res += getSamplerAtOutputCoords(inInfo, outShapeInfo, broadcast);\n    }\n    return res;\n}\nfunction getOutputSamplingSnippet(outShape, outTexShape) {\n    switch (outShape.length) {\n        case 0:\n            return getOutputScalarCoords();\n        case 1:\n            return getOutput1DCoords(outShape, outTexShape);\n        case 2:\n            return getOutput2DCoords(outShape, outTexShape);\n        case 3:\n            return getOutput3DCoords(outShape, outTexShape);\n        case 4:\n            return getOutput4DCoords(outShape, outTexShape);\n        default:\n            throw new Error(outShape.length + \"-D output sampling is not yet supported\");\n    }\n}\nvar SAMPLE_1D_SNIPPET = \"\\nvec2 UVfrom1D(int texNumR, int texNumC, int index) {\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_2D_SNIPPET = \"\\nvec2 UVfrom2D(int texNumR, int texNumC, int numC, int row, int col) {\\n  int index = row * numC + col;\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_3D_SNIPPET = \"\\nvec2 UVfrom3D(int texNumR, int texNumC, int stride0,\\n    int stride1, int row, int col, int depth) {\\n  // Explicitly use integer operations as dot() only works on floats.\\n  int index = row * stride0 + col * stride1 + depth;\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar SAMPLE_4D_SNIPPET = \"\\nvec2 UVfrom4D(int texNumR, int texNumC, int stride0,\\n    int stride1, int stride2, int row, int col, int depth,\\n    int depth2) {\\n  // Explicitly use integer operations as dot() only works on floats.\\n  int index = row * stride0 + col * stride1 + depth * stride2 + depth2;\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nvar UNSIGNED_BYTE_TEXTURE_SAMPLE_SNIPPET = \"\\n  uniform float NaN;\\n\\n  const vec4 floatDeltas = vec4(\\n      1.0,\\n      1.0 / 255.0,\\n      1.0 / (255.0 * 255.0),\\n      1.0 / (255.0 * 255.0 * 255.0)\\n  );\\n  const float minValue = \" + tex_util.FLOAT_MIN + \".0;\\n  const float maxValue = \" + tex_util.FLOAT_MAX + \".0;\\n  const float range = (maxValue - minValue) / 255.0;\\n  const vec2 dotRange = vec2(1.0, range);\\n\\n  float sample(sampler2D texture, vec2 uv) {\\n    vec4 sampleValue = texture2D(texture, uv);\\n    if (all(equal(sampleValue, vec4(\" + tex_util.BYTE_NAN_VALUE + \")))) {\\n      return NaN;\\n    }\\n\\n    vec4 encValue = floor(sampleValue * 255.0 + 0.5);\\n    float decodedValue = dot(encValue, floatDeltas);\\n    return dot(vec2(minValue, decodedValue), dotRange);\\n  }\\n\";\nvar UNSIGNED_BYTE_TEXTURE_SETOUTPUT_SNIPPET = \"\\n  const vec4 floatPowers = vec4(\\n    1.0,\\n    255.0,\\n    255.0 * 255.0,\\n    255.0 * 255.0 * 255.0\\n  );\\n  const vec2 recipRange = vec2(1.0/range);\\n  const vec2 recipRange255 = vec2(1.0/(maxValue - minValue));\\n\\n  void setOutput(float decodedValue) {\\n    if (isNaN(decodedValue)) {\\n      gl_FragColor = vec4(\" + tex_util.BYTE_NAN_VALUE + \");\\n      return;\\n    }\\n\\n    float a = dot(vec2(decodedValue, -minValue), recipRange);\\n    float b = fract(a) * 255.0;\\n    float c = fract(b) * 255.0;\\n    float d = fract(c) * 255.0;\\n    gl_FragColor = floor(vec4(a, b, c, d)) / 255.0;\\n\\n    // TODO(dsmilkov): Version above gets better accuracy but probably slower\\n    // than the version below. Benchmark to determine if the accuracy is worth\\n    // the cost.\\n\\n    // float normValue = dot(vec2(decodedValue, -minValue), recipRange255);\\n    // vec4 f = normValue * floatPowers;\\n    // gl_FragColor = floor(fract(f) * 255.0) / 255.0;\\n  }\\n\";\nvar FLOAT_TEXTURE_SAMPLE_SNIPPET = \"\\n  float sample(sampler2D texture, vec2 uv) {\\n    return texture2D(texture, uv).r;\\n  }\\n\";\nvar FLOAT_TEXTURE_SETOUTPUT_SNIPPET = \"\\n  void setOutput(float val) {\\n    gl_FragColor = vec4(val, 0, 0, 0);\\n  }\\n\";\nvar SHADER_PREFIX = \"\\n  precision highp float;\\n  precision highp int;\\n  varying vec2 resultUV;\\n  const vec2 halfCR = vec2(0.5, 0.5);\\n\\n  bool isNaN(float val) {\\n    float v1 = val * val;\\n    float v2 = val * val;\\n    return v1 == v2 ? false : true;\\n  }\\n\\n  bool hasNaN(vec4 values) {\\n    vec4 v1 = values * values;\\n    vec4 v2 = values * values;\\n    return any(notEqual(v1, v2));\\n  }\\n\\n  float getNaN(vec4 values) {\\n    return dot(vec4(1), values);\\n  }\\n\\n  int round(float value) {\\n    return int(floor(value + 0.5));\\n  }\\n\\n  int imod(int x, int y) {\\n    return x - y * (x / y);\\n  }\\n\\n  const vec2 randomConst = vec2(\\n    23.14069263277926, // e^pi (Gelfond's constant)\\n     2.665144142690225 // 2^sqrt(2) (Gelfond\\u2013Schneider constant)\\n  );\\n\\n  float random(float seed) {\\n      return fract(cos(dot(resultUV * seed, randomConst)) * 12345.6789);\\n  }\\n\\n  \" + SAMPLE_1D_SNIPPET + \"\\n  \" + SAMPLE_2D_SNIPPET + \"\\n  \" + SAMPLE_3D_SNIPPET + \"\\n  \" + SAMPLE_4D_SNIPPET + \"\\n\";\nfunction getOutputScalarCoords() {\n    return \"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";\n}\nfunction getOutput1DCoords(shape, texShape) {\n    if (texShape[0] === 1) {\n        return \"\\n      int getOutputCoords() {\\n        return int(resultUV.x * \" + texShape[1] + \".0);\\n      }\\n    \";\n    }\n    if (texShape[1] === 1) {\n        return \"\\n      int getOutputCoords() {\\n        return int(resultUV.y * \" + texShape[0] + \".0);\\n      }\\n    \";\n    }\n    return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      return resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n    }\\n  \";\n}\nfunction getOutput3DCoords(shape, texShape) {\n    var stride0 = shape[1] * shape[2];\n    var stride1 = shape[2];\n    return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n      int r = index / \" + stride0 + \";\\n      index -= r * \" + stride0 + \";\\n      int c = index / \" + stride1 + \";\\n      int d = index - c * \" + stride1 + \";\\n      return ivec3(r, c, d);\\n    }\\n  \";\n}\nfunction getOutput4DCoords(shape, texShape) {\n    var stride2 = shape[3];\n    var stride1 = shape[2] * stride2;\n    var stride0 = shape[1] * stride1;\n    return \"\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n\\n      int r = index / \" + stride0 + \";\\n      index -= r * \" + stride0 + \";\\n\\n      int c = index / \" + stride1 + \";\\n      index -= c * \" + stride1 + \";\\n\\n      int d = index / \" + stride2 + \";\\n      int d2 = index - d * \" + stride2 + \";\\n\\n      return ivec4(r, c, d, d2);\\n    }\\n  \";\n}\nfunction getOutput2DCoords(shape, texShape) {\n    if (util.arraysEqual(shape, texShape)) {\n        return \"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      }\\n    \";\n    }\n    if (shape[1] === 1) {\n        return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n        int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \";\n    }\n    if (shape[0] === 1) {\n        return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n        int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \";\n    }\n    return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + texShape[0] + \", \" + texShape[1] + \"));\\n      int index = resTexRC.x * \" + texShape[1] + \" + resTexRC.y;\\n      int r = index / \" + shape[1] + \";\\n      int c = index - r * \" + shape[1] + \";\\n      return ivec2(r, c);\\n    }\\n  \";\n}\nfunction getSamplerScalar(inputInfo) {\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    return \"\\n    float \" + funcName + \"() {\\n      return sample(\" + texName + \", halfCR);\\n    }\\n  \";\n}\nfunction getSampler1D(inputInfo) {\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    return \"\\n    float \" + funcName + \"(int index) {\\n      return \" + funcName + \"Flat(index);\\n    }\\n  \";\n}\nfunction getSampler2D(inputInfo) {\n    var shape = inputInfo.shapeInfo.logicalShape;\n    var texShape = inputInfo.shapeInfo.texShape;\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    var texNumR = texShape[0];\n    var texNumC = texShape[1];\n    if (util.arraysEqual(shape, texShape)) {\n        return \"\\n    float \" + funcName + \"(int row, int col) {\\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n      return sample(\" + texName + \", uv);\\n    }\\n  \";\n    }\n    var _a = util.squeezeShape(shape),\n        newShape = _a.newShape,\n        keptDims = _a.keptDims;\n    var squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        var params = ['row', 'col'];\n        return \"\\n      \" + getSamplerFromInInfo(newInputInfo) + \"\\n      float \" + funcName + \"(int row, int col) {\\n        return \" + funcName + \"(\" + getSqueezedParams(params, keptDims) + \");\\n      }\\n    \";\n    }\n    if (texNumC === 1) {\n        return \"\\n    float \" + funcName + \"(int row, int col) {\\n      int index = row * \" + shape[1] + \" + col;\\n      vec2 uv = vec2(0.5, (float(index) + 0.5) / \" + texNumR + \".0);\\n      return sample(\" + texName + \", uv);\\n    }\\n  \";\n    }\n    if (texNumR === 1) {\n        return \"\\n    float \" + funcName + \"(int row, int col) {\\n      int index = row * \" + shape[1] + \" + col;\\n      vec2 uv = vec2((float(index) + 0.5) / \" + texNumC + \".0, 0.5);\\n      return sample(\" + texName + \", uv);\\n    }\\n  \";\n    }\n    return \"\\n  float \" + funcName + \"(int row, int col) {\\n    vec2 uv = UVfrom2D(\" + texNumR + \", \" + texNumC + \", \" + shape[1] + \", row, col);\\n    return sample(\" + texName + \", uv);\\n  }\\n\";\n}\nfunction getSampler3D(inputInfo) {\n    var texShape = inputInfo.shapeInfo.texShape;\n    var shape = inputInfo.shapeInfo.logicalShape;\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    var texNumR = texShape[0];\n    var texNumC = texShape[1];\n    var stride0 = shape[1] * shape[2];\n    var stride1 = shape[2];\n    var _a = util.squeezeShape(shape),\n        newShape = _a.newShape,\n        keptDims = _a.keptDims;\n    var squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n        var newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n        var params = ['row', 'col', 'depth'];\n        return \"\\n        \" + getSamplerFromInInfo(newInputInfo) + \"\\n        float \" + funcName + \"(int row, int col, int depth) {\\n          return \" + funcName + \"(\" + getSqueezedParams(params, keptDims) + \");\\n        }\\n      \";\n    }\n    if (texNumC === stride0) {\n        return \"\\n        float \" + funcName + \"(int row, int col, int depth) {\\n          int texR = row;\\n          int texC = col * \" + stride1 + \" + depth;\\n          vec2 uv = (vec2(texC, texR) + halfCR) /\\n                     vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n          return sample(\" + texName + \", uv);\\n        }\\n      \";\n    }\n    if (texNumC === stride1) {\n        return \"\\n    float \" + funcName + \"(int row, int col, int depth) {\\n      int texR = row * \" + shape[1] + \" + col;\\n      int texC = depth;\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n      return sample(\" + texName + \", uv);\\n    }\\n  \";\n    }\n    return \"\\n      float \" + funcName + \"(int row, int col, int depth) {\\n        vec2 uv = UVfrom3D(\\n            \" + texNumR + \", \" + texNumC + \", \" + stride0 + \", \" + stride1 + \", row, col, depth);\\n        return sample(\" + texName + \", uv);\\n      }\\n  \";\n}\nfunction getSampler4D(inputInfo) {\n    var shape = inputInfo.shapeInfo.logicalShape;\n    var texShape = inputInfo.shapeInfo.texShape;\n    var texName = inputInfo.name;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n    var texNumR = texShape[0];\n    var texNumC = texShape[1];\n    var stride2 = shape[3];\n    var stride1 = shape[2] * stride2;\n    var stride0 = shape[1] * stride1;\n    var _a = util.squeezeShape(shape),\n        newShape = _a.newShape,\n        keptDims = _a.keptDims;\n    if (newShape.length < shape.length) {\n        var newInputInfo = squeezeInputInfo(inputInfo, newShape);\n        var params = ['row', 'col', 'depth', 'depth2'];\n        return \"\\n      \" + getSamplerFromInInfo(newInputInfo) + \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n        return \" + funcName + \"(\" + getSqueezedParams(params, keptDims) + \");\\n      }\\n    \";\n    }\n    if (texNumC === stride0) {\n        return \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n        int texR = row;\\n        int texC = col * \" + stride1 + \" + depth * \" + stride2 + \" + depth2;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n        return sample(\" + texName + \", uv);\\n      }\\n    \";\n    }\n    if (texNumC === stride2) {\n        return \"\\n      float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n        int texR = row * \" + shape[1] * shape[2] + \" + col * \" + shape[2] + \" + depth;\\n        int texC = depth2;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\" + texNumC + \".0, \" + texNumR + \".0);\\n        return sample(\" + texName + \", uv);\\n      }\\n    \";\n    }\n    return \"\\n    float \" + funcName + \"(int row, int col, int depth, int depth2) {\\n      vec2 uv = UVfrom4D(\" + texNumR + \", \" + texNumC + \", \" + stride0 + \", \" + stride1 + \",\\n          \" + stride2 + \", row, col, depth, depth2);\\n      return sample(\" + texName + \", uv);\\n    }\\n  \";\n}\nfunction getSamplerFlat(inputInfo) {\n    var texName = inputInfo.name;\n    var texShape = inputInfo.shapeInfo.texShape;\n    var funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1) + 'Flat';\n    var tNumR = texShape[0];\n    var tNumC = texShape[1];\n    if (tNumC === 1 && tNumR === 1) {\n        return \"\\n      float \" + funcName + \"(int index) {\\n        return sample(\" + texName + \", halfCR);\\n      }\\n    \";\n    }\n    if (tNumC === 1) {\n        return \"\\n      float \" + funcName + \"(int index) {\\n        vec2 uv = vec2(0.5, (float(index) + 0.5) / \" + tNumR + \".0);\\n        return sample(\" + texName + \", uv);\\n      }\\n    \";\n    }\n    if (tNumR === 1) {\n        return \"\\n      float \" + funcName + \"(int index) {\\n        vec2 uv = vec2((float(index) + 0.5) / \" + tNumC + \".0, 0.5);\\n        return sample(\" + texName + \", uv);\\n      }\\n    \";\n    }\n    return \"\\n    float \" + funcName + \"(int index) {\\n      vec2 uv = UVfrom1D(\" + tNumR + \", \" + tNumC + \", index);\\n      return sample(\" + texName + \", uv);\\n    }\\n  \";\n}\nfunction getBroadcastOutputCoordsSampler(inputInfo, outShapeInfo, texFuncSnippet, funcName) {\n    var inRank = inputInfo.shapeInfo.logicalShape.length;\n    var outRank = outShapeInfo.logicalShape.length;\n    var type = 'int';\n    if (outRank === 2) {\n        type = 'ivec2';\n    } else if (outRank === 3) {\n        type = 'ivec3';\n    } else if (outRank === 4) {\n        type = 'ivec4';\n    }\n    var broadcastDims = broadcast_util.getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    var rankDiff = outRank - inRank;\n    var coordsSnippet;\n    if (inRank === 0) {\n        coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n        coordsSnippet = 'coords = 0;';\n    } else {\n        coordsSnippet = broadcastDims.map(function (d) {\n            return \"coords[\" + (d + rankDiff) + \"] = 0;\";\n        }).join('\\n');\n    }\n    var unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n        unpackedCoordsSnippet = 'coords';\n    } else {\n        unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map(function (s, i) {\n            return \"coords[\" + (i + rankDiff) + \"]\";\n        }).join(', ');\n    }\n    return \"\\n    float \" + funcName + \"() {\\n      \" + type + \" coords = getOutputCoords();\\n      \" + coordsSnippet + \"\\n      return get\" + texFuncSnippet + \"(\" + unpackedCoordsSnippet + \");\\n    }\\n  \";\n}\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo, supportsBroadcasting) {\n    var inTexShape = inputInfo.shapeInfo.texShape;\n    var texName = inputInfo.name;\n    var texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n    var funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n    var broadcastDims = broadcast_util.getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n    var inRank = inputInfo.shapeInfo.logicalShape.length;\n    var outRank = outShapeInfo.logicalShape.length;\n    var doBroadcast = supportsBroadcasting && (outRank > inRank || broadcastDims.length > 0);\n    var broadcastOverOuter = broadcast_util.broadcastDimsAreOuter(broadcastDims);\n    if (doBroadcast && !broadcastOverOuter) {\n        return getBroadcastOutputCoordsSampler(inputInfo, outShapeInfo, texFuncSnippet, funcName);\n    }\n    var outTexShape = outShapeInfo.texShape;\n    if (util.arraysEqual(inTexShape, outTexShape)) {\n        return \"\\n      float \" + funcName + \"() {\\n        return sample(\" + texName + \", resultUV);\\n      }\\n    \";\n    }\n    var inSize = util.sizeFromShape(inTexShape);\n    var broadcastSnippet = '';\n    if (doBroadcast && broadcastOverOuter) {\n        broadcastSnippet = \"\\n        int mainPart = index / \" + inSize + \";\\n        index -= mainPart * \" + inSize + \";\\n      \";\n    }\n    return \"\\n    float \" + funcName + \"() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + outTexShape[0] + \", \" + outTexShape[1] + \"));\\n      int index = resTexRC.x * \" + outTexShape[1] + \" + resTexRC.y;\\n      \" + broadcastSnippet + \"\\n      int texR = index / \" + inTexShape[1] + \";\\n      int texC = index - texR * \" + inTexShape[1] + \";\\n      vec2 uv = (vec2(texC, texR) + halfCR) /\\n                 vec2(\" + inTexShape[1] + \".0, \" + inTexShape[0] + \".0);\\n\\n      return sample(\" + texName + \", uv);\\n    }\\n  \";\n}\nfunction getCoordsDataType(rank) {\n    if (rank <= 1) {\n        return 'int';\n    } else if (rank === 2) {\n        return 'ivec2';\n    } else if (rank === 3) {\n        return 'ivec3';\n    } else if (rank === 4) {\n        return 'ivec4';\n    } else {\n        throw Error(\"GPU for rank \" + rank + \" is not yet supported\");\n    }\n}\nexports.getCoordsDataType = getCoordsDataType;\nfunction squeezeInputInfo(inInfo, squeezedShape) {\n    var newInputInfo = JSON.parse(JSON.stringify(inInfo));\n    newInputInfo.shapeInfo.logicalShape = squeezedShape;\n    return newInputInfo;\n}\nfunction getSqueezedParams(params, keptDims) {\n    return keptDims.map(function (d) {\n        return params[d];\n    }).join(', ');\n}\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/slice_gpu.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/slice_gpu.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar shader_compiler_1 = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js\");\nvar SliceProgram = function () {\n    function SliceProgram(destSize) {\n        this.variableNames = ['source'];\n        this.outputShape = destSize;\n        this.rank = destSize.length;\n        var dtype = shader_compiler_1.getCoordsDataType(this.rank);\n        var sourceCoords = getCoords(this.rank);\n        this.userCode = \"\\n      uniform \" + dtype + \" start;\\n\\n      void main() {\\n        \" + dtype + \" sourceLoc = start + getOutputCoords();\\n        setOutput(getSource(\" + sourceCoords + \"));\\n      }\\n    \";\n    }\n    SliceProgram.prototype.getCustomSetupFunc = function (start) {\n        var _this = this;\n        if (start.length !== this.rank) {\n            throw Error(\"The rank (\" + this.rank + \") of the program must match the \" + (\"length of start (\" + start.length + \")\"));\n        }\n        return function (gpgpu, webGLProgram) {\n            if (_this.startLoc == null) {\n                _this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n                if (_this.startLoc == null) {\n                    return;\n                }\n            }\n            if (_this.rank === 1) {\n                gpgpu.gl.uniform1i(_this.startLoc, start[0]);\n            } else if (_this.rank === 2) {\n                gpgpu.gl.uniform2i(_this.startLoc, start[0], start[1]);\n            } else if (_this.rank === 3) {\n                gpgpu.gl.uniform3i(_this.startLoc, start[0], start[1], start[2]);\n            } else if (_this.rank === 4) {\n                gpgpu.gl.uniform4i(_this.startLoc, start[0], start[1], start[2], start[3]);\n            } else {\n                throw Error(\"Slicing for rank \" + _this.rank + \" is not yet supported\");\n            }\n        };\n    };\n    return SliceProgram;\n}();\nexports.SliceProgram = SliceProgram;\nfunction getCoords(rank) {\n    if (rank === 1) {\n        return 'sourceLoc';\n    } else if (rank === 2) {\n        return 'sourceLoc.x, sourceLoc.y';\n    } else if (rank === 3) {\n        return 'sourceLoc.x, sourceLoc.y, sourceLoc.z';\n    } else if (rank === 4) {\n        return 'sourceLoc.x, sourceLoc.y, sourceLoc.z, sourceLoc.w';\n    } else {\n        throw Error(\"Slicing for rank \" + rank + \" is not yet supported\");\n    }\n}\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/slice_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/tex_util.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/tex_util.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TextureType;\n(function (TextureType) {\n    TextureType[TextureType[\"FLOAT\"] = 0] = \"FLOAT\";\n    TextureType[TextureType[\"UNSIGNED_BYTE\"] = 1] = \"UNSIGNED_BYTE\";\n})(TextureType = exports.TextureType || (exports.TextureType = {}));\nfunction getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {\n    return [columns, rows];\n}\nexports.getUnpackedMatrixTextureShapeWidthHeight = getUnpackedMatrixTextureShapeWidthHeight;\nfunction getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {\n    return matrixSize * channelsPerTexture;\n}\nexports.getUnpackedArraySizeFromMatrixSize = getUnpackedArraySizeFromMatrixSize;\nfunction getColorMatrixTextureShapeWidthHeight(rows, columns) {\n    return [columns * 4, rows];\n}\nexports.getColorMatrixTextureShapeWidthHeight = getColorMatrixTextureShapeWidthHeight;\nfunction getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {\n    if (unpackedSize % channelsPerTexture !== 0) {\n        throw new Error(\"unpackedSize (\" + unpackedSize + \") must be a multiple of \" + (\"\" + channelsPerTexture));\n    }\n    return unpackedSize / channelsPerTexture;\n}\nexports.getMatrixSizeFromUnpackedArraySize = getMatrixSizeFromUnpackedArraySize;\nfunction encodeMatrixToUnpackedArray(matrix, unpackedArray, channelsPerTexture) {\n    var requiredSize = getUnpackedArraySizeFromMatrixSize(matrix.length, channelsPerTexture);\n    if (unpackedArray.length < requiredSize) {\n        throw new Error(\"unpackedArray length (\" + unpackedArray.length + \") must be >= \" + (\"\" + requiredSize));\n    }\n    var dst = 0;\n    for (var src = 0; src < matrix.length; ++src) {\n        unpackedArray[dst] = matrix[src];\n        dst += channelsPerTexture;\n    }\n}\nexports.encodeMatrixToUnpackedArray = encodeMatrixToUnpackedArray;\nexports.FLOAT_MAX = 20000;\nexports.FLOAT_MIN = -exports.FLOAT_MAX;\nvar FLOAT_RANGE = (exports.FLOAT_MAX - exports.FLOAT_MIN) / 255;\nvar FLOAT_DELTAS = [1, 1 / 255, 1 / (255 * 255), 1 / (255 * 255 * 255)];\nvar FLOAT_POWERS = [1, 255, 255 * 255];\nexports.BYTE_NAN_VALUE = 0;\nfunction encodeFloatArray(floatArray) {\n    var uintArray = new Uint8Array(floatArray.length * 4);\n    var _loop_1 = function (i) {\n        var value = floatArray[i / 4];\n        if (isNaN(value)) {\n            uintArray[i] = exports.BYTE_NAN_VALUE;\n            uintArray[i + 1] = exports.BYTE_NAN_VALUE;\n            uintArray[i + 2] = exports.BYTE_NAN_VALUE;\n            uintArray[i + 3] = exports.BYTE_NAN_VALUE;\n            return \"continue\";\n        }\n        var normalizedValue = (value - exports.FLOAT_MIN) / FLOAT_RANGE;\n        var enc = FLOAT_POWERS.map(function (pow) {\n            return pow * normalizedValue;\n        });\n        var buckets = enc.map(function (value) {\n            return Math.floor(value % 1 * 255);\n        });\n        uintArray[i] = Math.floor(normalizedValue);\n        uintArray[i + 1] = buckets[0];\n        uintArray[i + 2] = buckets[1];\n        uintArray[i + 3] = buckets[2];\n    };\n    for (var i = 0; i < uintArray.length; i += 4) {\n        _loop_1(i);\n    }\n    return uintArray;\n}\nexports.encodeFloatArray = encodeFloatArray;\nfunction decodeToFloatArray(uintArray) {\n    var floatArray = new Float32Array(uintArray.length / 4);\n    var _loop_2 = function (i) {\n        if (uintArray[i] === exports.BYTE_NAN_VALUE && uintArray[i + 1] === exports.BYTE_NAN_VALUE && uintArray[i + 2] === exports.BYTE_NAN_VALUE && uintArray[i + 3] === exports.BYTE_NAN_VALUE) {\n            floatArray[i / 4] = NaN;\n            return \"continue\";\n        }\n        var dot = 0;\n        FLOAT_DELTAS.forEach(function (delta, j) {\n            dot += delta * uintArray[i + j];\n        });\n        var value = dot * FLOAT_RANGE + exports.FLOAT_MIN;\n        floatArray[i / 4] = value;\n    };\n    for (var i = 0; i < uintArray.length; i += 4) {\n        _loop_2(i);\n    }\n    return floatArray;\n}\nexports.decodeToFloatArray = decodeToFloatArray;\nfunction decodeMatrixFromUnpackedArray(unpackedArray, matrix, channelsPerTexture) {\n    var requiredSize = getMatrixSizeFromUnpackedArraySize(unpackedArray.length, channelsPerTexture);\n    if (matrix.length < requiredSize) {\n        throw new Error(\"matrix length (\" + matrix.length + \") must be >= \" + requiredSize);\n    }\n    var dst = 0;\n    for (var src = 0; src < unpackedArray.length; src += channelsPerTexture) {\n        matrix[dst++] = unpackedArray[src];\n    }\n}\nexports.decodeMatrixFromUnpackedArray = decodeMatrixFromUnpackedArray;\nfunction decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {\n    var requiredSize = unpackedArray.length * channels / 4;\n    if (matrix.length < requiredSize) {\n        throw new Error(\"matrix length (\" + matrix.length + \") must be >= \" + requiredSize);\n    }\n    var dst = 0;\n    for (var src = 0; src < unpackedArray.length; src += 4) {\n        for (var c = 0; c < channels; c++) {\n            matrix[dst++] = unpackedArray[src + c];\n        }\n    }\n}\nexports.decodeMatrixFromUnpackedColorRGBAArray = decodeMatrixFromUnpackedColorRGBAArray;\nfunction getPackedMatrixTextureShapeWidthHeight(rows, columns) {\n    return [Math.ceil(columns / 2), Math.ceil(rows / 2)];\n}\nexports.getPackedMatrixTextureShapeWidthHeight = getPackedMatrixTextureShapeWidthHeight;\nfunction getPackedRGBAArraySizeFromMatrixShape(rows, columns) {\n    var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns),\n        w = _a[0],\n        h = _a[1];\n    return w * h * 4;\n}\nexports.getPackedRGBAArraySizeFromMatrixShape = getPackedRGBAArraySizeFromMatrixShape;\nfunction encodeMatrixToPackedRGBA(matrix, rows, columns, packedRGBA) {\n    var requiredSize = getPackedRGBAArraySizeFromMatrixShape(rows, columns);\n    if (packedRGBA.length < requiredSize) {\n        throw new Error(\"packedRGBA length (\" + packedRGBA.length + \") must be >= \" + requiredSize);\n    }\n    var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns),\n        textureWidth = _a[0],\n        textureHeight = _a[1];\n    var oddWidth = columns % 2 === 1;\n    var oddHeight = rows % 2 === 1;\n    var widthInFullBlocks = Math.floor(columns / 2);\n    var heightInFullBlocks = Math.floor(rows / 2);\n    {\n        var dstStride = oddWidth ? 4 : 0;\n        var oneRow = columns;\n        var dst = 0;\n        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {\n            var matrixSrcRow = blockY * 2 * columns;\n            for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {\n                var matrixSrcCol = blockX * 2;\n                var src = matrixSrcRow + matrixSrcCol;\n                packedRGBA[dst] = matrix[src];\n                packedRGBA[dst + 1] = matrix[src + 1];\n                packedRGBA[dst + 2] = matrix[src + oneRow];\n                packedRGBA[dst + 3] = matrix[src + oneRow + 1];\n                dst += 4;\n            }\n            dst += dstStride;\n        }\n    }\n    if (oddWidth) {\n        var src = columns - 1;\n        var dst = (textureWidth - 1) * 4;\n        var srcStride = 2 * columns;\n        var dstStride = textureWidth * 4;\n        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {\n            packedRGBA[dst] = matrix[src];\n            packedRGBA[dst + 2] = matrix[src + columns];\n            src += srcStride;\n            dst += dstStride;\n        }\n    }\n    if (oddHeight) {\n        var src = (rows - 1) * columns;\n        var dst = (textureHeight - 1) * textureWidth * 4;\n        for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {\n            packedRGBA[dst++] = matrix[src++];\n            packedRGBA[dst++] = matrix[src++];\n            dst += 2;\n        }\n    }\n    if (oddWidth && oddHeight) {\n        packedRGBA[packedRGBA.length - 4] = matrix[matrix.length - 1];\n    }\n    return packedRGBA;\n}\nexports.encodeMatrixToPackedRGBA = encodeMatrixToPackedRGBA;\nfunction decodeMatrixFromPackedRGBA(packedRGBA, rows, columns, matrix) {\n    var requiredSize = rows * columns;\n    if (requiredSize < matrix.length) {\n        throw new Error(\"matrix length (\" + matrix.length + \") must be >= \" + requiredSize);\n    }\n    var oddWidth = columns % 2 === 1;\n    var oddHeight = rows % 2 === 1;\n    var widthInFullBlocks = Math.floor(columns / 2);\n    var heightInFullBlocks = Math.floor(rows / 2);\n    var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns),\n        textureWidth = _a[0],\n        textureHeight = _a[1];\n    {\n        var srcStride = oddWidth ? 4 : 0;\n        var dstStride = columns + (oddWidth ? 1 : 0);\n        var src = 0;\n        var dstRow1 = 0;\n        var dstRow2 = columns;\n        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {\n            for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {\n                matrix[dstRow1++] = packedRGBA[src++];\n                matrix[dstRow1++] = packedRGBA[src++];\n                matrix[dstRow2++] = packedRGBA[src++];\n                matrix[dstRow2++] = packedRGBA[src++];\n            }\n            src += srcStride;\n            dstRow1 += dstStride;\n            dstRow2 += dstStride;\n        }\n    }\n    if (oddWidth) {\n        var src = (textureWidth - 1) * 4;\n        var dst = columns - 1;\n        var srcStride = textureWidth * 4;\n        var dstStride = 2 * columns;\n        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {\n            matrix[dst] = packedRGBA[src];\n            matrix[dst + columns] = packedRGBA[src + 2];\n            src += srcStride;\n            dst += dstStride;\n        }\n    }\n    if (oddHeight) {\n        var src = (textureHeight - 1) * textureWidth * 4;\n        var dst = (rows - 1) * columns;\n        for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {\n            matrix[dst++] = packedRGBA[src++];\n            matrix[dst++] = packedRGBA[src++];\n            src += 2;\n        }\n    }\n    if (oddWidth && oddHeight) {\n        matrix[matrix.length - 1] = packedRGBA[packedRGBA.length - 4];\n    }\n    return matrix;\n}\nexports.decodeMatrixFromPackedRGBA = decodeMatrixFromPackedRGBA;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/tex_util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/texture_manager.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/texture_manager.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tex_util_1 = __webpack_require__(/*! ./tex_util */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/tex_util.js\");\nvar TextureManager = function () {\n    function TextureManager(gpgpu) {\n        this.gpgpu = gpgpu;\n        this.numUsedTextures = 0;\n        this.numFreeTextures = 0;\n        this.freeTextures = {};\n        this.logEnabled = false;\n        this.allocatedTextures = [];\n        this.usedTextureCount = {};\n    }\n    TextureManager.prototype.acquireTexture = function (shapeRC, texType) {\n        if (texType === void 0) {\n            texType = tex_util_1.TextureType.FLOAT;\n        }\n        var shapeKey = getKeyFromTextureShape(shapeRC, texType);\n        if (!(shapeKey in this.freeTextures)) {\n            this.freeTextures[shapeKey] = [];\n        }\n        if (!(shapeKey in this.usedTextureCount)) {\n            this.usedTextureCount[shapeKey] = 0;\n        }\n        this.usedTextureCount[shapeKey]++;\n        if (this.freeTextures[shapeKey].length > 0) {\n            this.numFreeTextures--;\n            this.numUsedTextures++;\n            this.log();\n            return this.freeTextures[shapeKey].shift();\n        }\n        this.numUsedTextures++;\n        this.log();\n        var newTexture = this.gpgpu.createMatrixTexture(shapeRC[0], shapeRC[1]);\n        this.allocatedTextures.push(newTexture);\n        return newTexture;\n    };\n    TextureManager.prototype.releaseTexture = function (texture, shape, texType) {\n        if (texType === void 0) {\n            texType = tex_util_1.TextureType.FLOAT;\n        }\n        var shapeKey = getKeyFromTextureShape(shape, texType);\n        if (!(shapeKey in this.freeTextures)) {\n            this.freeTextures[shapeKey] = [];\n        }\n        this.freeTextures[shapeKey].push(texture);\n        this.numFreeTextures++;\n        this.numUsedTextures--;\n        this.usedTextureCount[shapeKey]--;\n        this.log();\n    };\n    TextureManager.prototype.log = function () {\n        if (!this.logEnabled) {\n            return;\n        }\n        var total = this.numFreeTextures + this.numUsedTextures;\n        console.log('Free/Used', this.numFreeTextures + \" / \" + this.numUsedTextures, \"(\" + total + \")\");\n    };\n    TextureManager.prototype.getNumUsedTextures = function () {\n        return this.numUsedTextures;\n    };\n    TextureManager.prototype.getNumFreeTextures = function () {\n        return this.numFreeTextures;\n    };\n    TextureManager.prototype.dispose = function () {\n        var _this = this;\n        if (this.allocatedTextures == null) {\n            return;\n        }\n        this.allocatedTextures.forEach(function (texture) {\n            _this.gpgpu.deleteMatrixTexture(texture);\n        });\n        this.freeTextures = null;\n        this.allocatedTextures = null;\n        this.usedTextureCount = null;\n        this.numUsedTextures = 0;\n        this.numFreeTextures = 0;\n    };\n    return TextureManager;\n}();\nexports.TextureManager = TextureManager;\nfunction getKeyFromTextureShape(shapeRowsCol, texType) {\n    return shapeRowsCol[0] + \"_\" + shapeRowsCol[1] + \"_\" + texType;\n}\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/texture_manager.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/tile_gpu.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/tile_gpu.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar shader_compiler_1 = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js\");\nvar TileProgram = function () {\n    function TileProgram(aShape, reps) {\n        this.variableNames = ['A'];\n        var outputShape = new Array(aShape.length);\n        for (var i = 0; i < outputShape.length; i++) {\n            outputShape[i] = aShape[i] * reps[i];\n        }\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        var dtype = shader_compiler_1.getCoordsDataType(this.rank);\n        var sourceCoords = getSourceCoords(aShape);\n        this.userCode = \"\\n      void main() {\\n        \" + dtype + \" resRC = getOutputCoords();\\n        setOutput(getA(\" + sourceCoords + \"));\\n      }\\n    \";\n    }\n    return TileProgram;\n}();\nexports.TileProgram = TileProgram;\nfunction getSourceCoords(aShape) {\n    var rank = aShape.length;\n    if (rank > 4) {\n        throw Error(\"Tile for rank \" + rank + \" is not yet supported\");\n    }\n    if (rank === 1) {\n        return \"imod(resRC, \" + aShape[0] + \")\";\n    }\n    var currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n    var sourceCoords = [];\n    for (var i = 0; i < aShape.length; i++) {\n        sourceCoords.push(\"imod(\" + currentCoords[i] + \", \" + aShape[i] + \")\");\n    }\n    return sourceCoords.join();\n}\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/tile_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/transpose_gpu.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/transpose_gpu.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar shader_compiler_1 = __webpack_require__(/*! ./shader_compiler */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/shader_compiler.js\");\nvar TransposeProgram = function () {\n    function TransposeProgram(aShape, newDim) {\n        this.variableNames = ['A'];\n        var outputShape = new Array(aShape.length);\n        for (var i = 0; i < outputShape.length; i++) {\n            outputShape[i] = aShape[newDim[i]];\n        }\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        var dtype = shader_compiler_1.getCoordsDataType(this.rank);\n        var switched = getSwitchedCoords(newDim);\n        this.userCode = \"\\n    void main() {\\n      \" + dtype + \" resRC = getOutputCoords();\\n      setOutput(getA(\" + switched + \"));\\n    }\\n    \";\n    }\n    return TransposeProgram;\n}();\nexports.TransposeProgram = TransposeProgram;\nfunction getSwitchedCoords(newDim) {\n    var rank = newDim.length;\n    if (rank > 4) {\n        throw Error(\"Transpose for rank \" + rank + \" is not yet supported\");\n    }\n    var originalOrder = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n    var switchedCoords = new Array(rank);\n    for (var i = 0; i < newDim.length; i++) {\n        switchedCoords[newDim[i]] = originalOrder[i];\n    }\n    return switchedCoords.join();\n}\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/transpose_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/unaryop_gpu.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/unaryop_gpu.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar selu_util = __webpack_require__(/*! ../../ops/selu_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js\");\nvar UnaryOpProgram = function () {\n    function UnaryOpProgram(aShape, opSnippet) {\n        this.variableNames = ['A'];\n        this.outputShape = aShape;\n        this.userCode = \"\\n      float unaryOperation(float x) {\\n        \" + opSnippet + \"\\n      }\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        float y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    \";\n    }\n    return UnaryOpProgram;\n}();\nexports.UnaryOpProgram = UnaryOpProgram;\nvar CHECK_NAN_SNIPPET = \"\\n  if (isNaN(x)) return x;\\n\";\nexports.ABS = \"\\n  return abs(x);\\n\";\nexports.RELU = CHECK_NAN_SNIPPET + \"\\n  return (x < 0.0) ? 0.0 : x;\\n\";\nexports.ELU = \"\\n  return (x >= 0.0) ? x : (exp(x) - 1.0);\\n\";\nexports.ELU_DER = \"\\n  return (x >= 0.0) ? 1.0 : exp(x);\\n\";\nexports.SELU = \"\\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\\n  // see: https://arxiv.org/abs/1706.02515\\n  float scaleAlpha = \" + selu_util.SELU_SCALEALPHA + \";\\n  float scale = \" + selu_util.SELU_SCALE + \";\\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\\n\";\nfunction LEAKY_RELU(alpha) {\n    return \"\\n    return (x >= 0.0) ? x : \" + alpha + \" * x;\\n  \";\n}\nexports.LEAKY_RELU = LEAKY_RELU;\nfunction STEP(alpha) {\n    if (alpha === void 0) {\n        alpha = 0.0;\n    }\n    return CHECK_NAN_SNIPPET + (\"\\n    return x > 0.0 ? 1.0 : float(\" + alpha + \");\\n  \");\n}\nexports.STEP = STEP;\nexports.NEG = \"\\n  return -x;\\n\";\nexports.CEIL = \"\\n  return ceil(x);\\n\";\nexports.FLOOR = \"\\n  return floor(x);\\n\";\nexports.EXP = \"\\n  return exp(x);\\n\";\nexports.LOG = \"\\n  return log(x);\\n\";\nexports.LOG1P = \"\\n  return log(1.0 + x);\\n\";\nexports.SQRT = CHECK_NAN_SNIPPET + \"\\n  return sqrt(x);\\n\";\nexports.SIGMOID = \"\\n  return 1.0 / (1.0 + exp(-1.0 * x));\\n\";\nexports.SIN = CHECK_NAN_SNIPPET + \"\\n  return sin(x);\\n\";\nexports.COS = CHECK_NAN_SNIPPET + \"\\n  return cos(x);\\n\";\nexports.TAN = \"\\n  return tan(x);\\n\";\nexports.ASIN = CHECK_NAN_SNIPPET + \"\\n  return asin(x);\\n\";\nexports.ACOS = CHECK_NAN_SNIPPET + \"\\n  return acos(x);\\n\";\nexports.ATAN = CHECK_NAN_SNIPPET + \"\\n  return atan(x);\\n\";\nexports.SINH = \"\\n  float e2x = exp(x);\\n  return (e2x - 1.0 / e2x) / 2.0;\\n\";\nexports.COSH = \"\\n  float e2x = exp(-x);\\n  return (e2x + 1.0 / e2x) / 2.0;\\n\";\nexports.TANH = \"\\n  float e2x = exp(-2.0 * abs(x));\\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\\n\";\nexports.SQUARE = \"\\n  return x * x;\\n\";\nexports.LOGICAL_NOT = CHECK_NAN_SNIPPET + \"\\n  return float(!(x >= 1.0));\\n\";\nexports.TO_INT = \"\\n  return float(int(x));\\n\";\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/unaryop_gpu.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/webgl_util.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/webgl_util.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MAX_TEXTURE_SIZE = null;\nvar util = __webpack_require__(/*! ../../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar environment_1 = __webpack_require__(/*! ../../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nfunction createWebGLRenderingContext(attributes) {\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    return createWebGLRenderingContextFromCanvas(canvas, attributes);\n}\nexports.createWebGLRenderingContext = createWebGLRenderingContext;\nfunction createWebGLRenderingContextFromCanvas(canvas, attributes) {\n    var gl;\n    var webglVersion = environment_1.ENV.get('WEBGL_VERSION');\n    if (webglVersion === 2) {\n        gl = canvas.getContext('webgl2', attributes);\n    } else if (webglVersion === 1) {\n        gl = canvas.getContext('webgl', attributes) || canvas.getContext('experimental-webgl', attributes);\n    }\n    if (webglVersion === 0 || gl == null) {\n        throw new Error('This browser does not support WebGL.');\n    }\n    return gl;\n}\nexports.createWebGLRenderingContextFromCanvas = createWebGLRenderingContextFromCanvas;\nfunction callAndCheck(gl, func) {\n    var returnValue = func();\n    checkWebGLError(gl);\n    return returnValue;\n}\nexports.callAndCheck = callAndCheck;\nvar webGLDebugErrorCheckingEnabled = false;\nfunction enableDebugWebGLErrorChecking(enabled) {\n    webGLDebugErrorCheckingEnabled = enabled;\n}\nexports.enableDebugWebGLErrorChecking = enableDebugWebGLErrorChecking;\nfunction checkWebGLError(gl) {\n    if (webGLDebugErrorCheckingEnabled) {\n        var error = gl.getError();\n        if (error !== gl.NO_ERROR) {\n            throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n        }\n    }\n}\nexports.checkWebGLError = checkWebGLError;\nfunction getWebGLErrorMessage(gl, status) {\n    switch (status) {\n        case gl.NO_ERROR:\n            return 'NO_ERROR';\n        case gl.INVALID_ENUM:\n            return 'INVALID_ENUM';\n        case gl.INVALID_VALUE:\n            return 'INVALID_VALUE';\n        case gl.INVALID_OPERATION:\n            return 'INVALID_OPERATION';\n        case gl.INVALID_FRAMEBUFFER_OPERATION:\n            return 'INVALID_FRAMEBUFFER_OPERATION';\n        case gl.OUT_OF_MEMORY:\n            return 'OUT_OF_MEMORY';\n        case gl.CONTEXT_LOST_WEBGL:\n            return 'CONTEXT_LOST_WEBGL';\n        default:\n            return \"Unknown error code \" + status;\n    }\n}\nexports.getWebGLErrorMessage = getWebGLErrorMessage;\nfunction getExtensionOrThrow(gl, extensionName) {\n    return throwIfNull(gl, function () {\n        return gl.getExtension(extensionName);\n    }, 'Extension \"' + extensionName + '\" not supported on this browser.');\n}\nexports.getExtensionOrThrow = getExtensionOrThrow;\nfunction createVertexShader(gl, vertexShaderSource) {\n    var vertexShader = throwIfNull(gl, function () {\n        return gl.createShader(gl.VERTEX_SHADER);\n    }, 'Unable to create vertex WebGLShader.');\n    callAndCheck(gl, function () {\n        return gl.shaderSource(vertexShader, vertexShaderSource);\n    });\n    callAndCheck(gl, function () {\n        return gl.compileShader(vertexShader);\n    });\n    if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n        console.log(gl.getShaderInfoLog(vertexShader));\n        throw new Error('Failed to compile vertex shader.');\n    }\n    return vertexShader;\n}\nexports.createVertexShader = createVertexShader;\nfunction createFragmentShader(gl, fragmentShaderSource) {\n    var fragmentShader = throwIfNull(gl, function () {\n        return gl.createShader(gl.FRAGMENT_SHADER);\n    }, 'Unable to create fragment WebGLShader.');\n    callAndCheck(gl, function () {\n        return gl.shaderSource(fragmentShader, fragmentShaderSource);\n    });\n    callAndCheck(gl, function () {\n        return gl.compileShader(fragmentShader);\n    });\n    if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n        logShaderSourceAndInfoLog(fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n    }\n    return fragmentShader;\n}\nexports.createFragmentShader = createFragmentShader;\nvar lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nfunction logShaderSourceAndInfoLog(shaderSource, shaderInfoLog) {\n    var lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n    if (lineNumberRegexResult == null) {\n        console.log(\"Couldn't parse line number in error: \" + shaderInfoLog);\n        console.log(shaderSource);\n        return;\n    }\n    var lineNumber = +lineNumberRegexResult[1];\n    var shaderLines = shaderSource.split('\\n');\n    var pad = shaderLines.length.toString().length + 2;\n    var linesWithLineNumbers = shaderLines.map(function (line, lineNumber) {\n        return util.rightPad((lineNumber + 1).toString(), pad) + line;\n    });\n    var maxLineLength = 0;\n    for (var i = 0; i < linesWithLineNumbers.length; i++) {\n        maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n    }\n    var beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n    var errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n    var afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n    console.log(beforeErrorLines.join('\\n'));\n    console.log(shaderInfoLog.split('\\n')[0]);\n    console.log(\"%c \" + util.rightPad(errorLine[0], maxLineLength), 'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n    console.log(afterErrorLines.join('\\n'));\n}\nfunction createProgram(gl) {\n    return throwIfNull(gl, function () {\n        return gl.createProgram();\n    }, 'Unable to create WebGLProgram.');\n}\nexports.createProgram = createProgram;\nfunction linkProgram(gl, program) {\n    callAndCheck(gl, function () {\n        return gl.linkProgram(program);\n    });\n    if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n        console.log(gl.getProgramInfoLog(program));\n        throw new Error('Failed to link vertex and fragment shaders.');\n    }\n}\nexports.linkProgram = linkProgram;\nfunction validateProgram(gl, program) {\n    callAndCheck(gl, function () {\n        return gl.validateProgram(program);\n    });\n    if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n        console.log(gl.getProgramInfoLog(program));\n        throw new Error('Shader program validation failed.');\n    }\n}\nexports.validateProgram = validateProgram;\nfunction createStaticVertexBuffer(gl, data) {\n    var buffer = throwIfNull(gl, function () {\n        return gl.createBuffer();\n    }, 'Unable to create WebGLBuffer');\n    callAndCheck(gl, function () {\n        return gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    });\n    callAndCheck(gl, function () {\n        return gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n    });\n    return buffer;\n}\nexports.createStaticVertexBuffer = createStaticVertexBuffer;\nfunction createStaticIndexBuffer(gl, data) {\n    var buffer = throwIfNull(gl, function () {\n        return gl.createBuffer();\n    }, 'Unable to create WebGLBuffer');\n    callAndCheck(gl, function () {\n        return gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n    });\n    callAndCheck(gl, function () {\n        return gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW);\n    });\n    return buffer;\n}\nexports.createStaticIndexBuffer = createStaticIndexBuffer;\nfunction queryMaxTextureSize(gl) {\n    if (MAX_TEXTURE_SIZE != null) {\n        return MAX_TEXTURE_SIZE;\n    }\n    MAX_TEXTURE_SIZE = callAndCheck(gl, function () {\n        return gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    });\n    return MAX_TEXTURE_SIZE;\n}\nexports.queryMaxTextureSize = queryMaxTextureSize;\nfunction getChannelsPerTexture() {\n    if (!environment_1.ENV.get('WEBGL_FLOAT_TEXTURE_ENABLED')) {\n        return 4;\n    }\n    if (environment_1.ENV.get('WEBGL_VERSION') === 2) {\n        return 1;\n    }\n    return 4;\n}\nexports.getChannelsPerTexture = getChannelsPerTexture;\nfunction createTexture(gl) {\n    return throwIfNull(gl, function () {\n        return gl.createTexture();\n    }, 'Unable to create WebGLTexture.');\n}\nexports.createTexture = createTexture;\nfunction validateTextureSize(gl, width, height) {\n    var maxTextureSize = queryMaxTextureSize(gl);\n    if (width <= 0 || height <= 0) {\n        var requested = \"[\" + width + \"x\" + height + \"]\";\n        throw new Error('Requested texture size ' + requested + ' is invalid.');\n    }\n    if (width > maxTextureSize || height > maxTextureSize) {\n        var requested = \"[\" + width + \"x\" + height + \"]\";\n        var max = \"[\" + maxTextureSize + \"x\" + maxTextureSize + \"]\";\n        throw new Error('Requested texture size ' + requested + ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n    }\n}\nexports.validateTextureSize = validateTextureSize;\nfunction createFramebuffer(gl) {\n    return throwIfNull(gl, function () {\n        return gl.createFramebuffer();\n    }, 'Unable to create WebGLFramebuffer.');\n}\nexports.createFramebuffer = createFramebuffer;\nfunction bindVertexBufferToProgramAttribute(gl, program, attribute, buffer, arrayEntriesPerItem, itemStrideInBytes, itemOffsetInBytes) {\n    var loc = gl.getAttribLocation(program, attribute);\n    if (loc === -1) {\n        return;\n    }\n    callAndCheck(gl, function () {\n        return gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    });\n    callAndCheck(gl, function () {\n        return gl.vertexAttribPointer(loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes, itemOffsetInBytes);\n    });\n    callAndCheck(gl, function () {\n        return gl.enableVertexAttribArray(loc);\n    });\n}\nexports.bindVertexBufferToProgramAttribute = bindVertexBufferToProgramAttribute;\nfunction bindTextureUnit(gl, texture, textureUnit) {\n    validateTextureUnit(gl, textureUnit);\n    callAndCheck(gl, function () {\n        return gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    });\n    callAndCheck(gl, function () {\n        return gl.bindTexture(gl.TEXTURE_2D, texture);\n    });\n}\nexports.bindTextureUnit = bindTextureUnit;\nfunction unbindTextureUnit(gl, textureUnit) {\n    validateTextureUnit(gl, textureUnit);\n    callAndCheck(gl, function () {\n        return gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    });\n    callAndCheck(gl, function () {\n        return gl.bindTexture(gl.TEXTURE_2D, null);\n    });\n}\nexports.unbindTextureUnit = unbindTextureUnit;\nfunction getProgramUniformLocationOrThrow(gl, program, uniformName) {\n    return throwIfNull(gl, function () {\n        return gl.getUniformLocation(program, uniformName);\n    }, 'uniform \"' + uniformName + '\" not present in program.');\n}\nexports.getProgramUniformLocationOrThrow = getProgramUniformLocationOrThrow;\nfunction getProgramUniformLocation(gl, program, uniformName) {\n    return gl.getUniformLocation(program, uniformName);\n}\nexports.getProgramUniformLocation = getProgramUniformLocation;\nfunction bindTextureToProgramUniformSampler(gl, program, texture, uniformSamplerLocation, textureUnit) {\n    callAndCheck(gl, function () {\n        return bindTextureUnit(gl, texture, textureUnit);\n    });\n    callAndCheck(gl, function () {\n        return gl.uniform1i(uniformSamplerLocation, textureUnit);\n    });\n}\nexports.bindTextureToProgramUniformSampler = bindTextureToProgramUniformSampler;\nfunction bindCanvasToFramebuffer(gl) {\n    callAndCheck(gl, function () {\n        return gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    });\n    callAndCheck(gl, function () {\n        return gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    });\n    callAndCheck(gl, function () {\n        return gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);\n    });\n}\nexports.bindCanvasToFramebuffer = bindCanvasToFramebuffer;\nfunction bindColorTextureToFramebuffer(gl, texture, framebuffer) {\n    callAndCheck(gl, function () {\n        return gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    });\n    callAndCheck(gl, function () {\n        return gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    });\n}\nexports.bindColorTextureToFramebuffer = bindColorTextureToFramebuffer;\nfunction unbindColorTextureFromFramebuffer(gl, framebuffer) {\n    callAndCheck(gl, function () {\n        return gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    });\n    callAndCheck(gl, function () {\n        return gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);\n    });\n}\nexports.unbindColorTextureFromFramebuffer = unbindColorTextureFromFramebuffer;\nfunction validateFramebuffer(gl) {\n    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n        throw new Error('Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n    }\n}\nexports.validateFramebuffer = validateFramebuffer;\nfunction getFramebufferErrorMessage(gl, status) {\n    switch (status) {\n        case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n            return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n        case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n            return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n        case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n            return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n        case gl.FRAMEBUFFER_UNSUPPORTED:\n            return 'FRAMEBUFFER_UNSUPPORTED';\n        default:\n            return \"unknown error \" + status;\n    }\n}\nexports.getFramebufferErrorMessage = getFramebufferErrorMessage;\nfunction throwIfNull(gl, returnTOrNull, failureMessage) {\n    var tOrNull = callAndCheck(gl, function () {\n        return returnTOrNull();\n    });\n    if (tOrNull == null) {\n        throw new Error(failureMessage);\n    }\n    return tOrNull;\n}\nfunction validateTextureUnit(gl, textureUnit) {\n    var maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n    var glTextureUnit = textureUnit + gl.TEXTURE0;\n    if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n        var textureUnitRange = \"[gl.TEXTURE0, gl.TEXTURE\" + maxTextureUnit + \"]\";\n        throw new Error(\"textureUnit must be in \" + textureUnitRange + \".\");\n    }\n}\nfunction getTextureShapeFromLogicalShape(gl, logShape) {\n    if (logShape.length !== 2) {\n        var squeezeResult = util.squeezeShape(logShape);\n        logShape = squeezeResult.newShape;\n    }\n    var maxTexSize = queryMaxTextureSize(gl);\n    var size = util.sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTexSize) {\n        return [size, 1];\n    } else if (logShape.length === 2 && logShape[0] <= maxTexSize && logShape[1] <= maxTexSize) {\n        return logShape;\n    } else if (logShape.length === 3 && logShape[0] <= maxTexSize && logShape[1] * logShape[2] <= maxTexSize) {\n        return [logShape[0], logShape[1] * logShape[2]];\n    } else if (logShape.length === 4 && logShape[0] <= maxTexSize && logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n        return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n        return util.sizeToSquarishShape(size);\n    }\n}\nexports.getTextureShapeFromLogicalShape = getTextureShapeFromLogicalShape;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/kernels/webgl/webgl_util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ../doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar tensor_1 = __webpack_require__(/*! ../tensor */ \"./node_modules/@tensorflow/tfjs-core/dist/tensor.js\");\nvar tensor_util = __webpack_require__(/*! ../tensor_util */ \"./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js\");\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar axis_util_1 = __webpack_require__(/*! ./axis_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js\");\nvar concat_1 = __webpack_require__(/*! ./concat */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js\");\nvar operation_1 = __webpack_require__(/*! ./operation */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js\");\nvar ops = __webpack_require__(/*! ./ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\");\nvar rand_1 = __webpack_require__(/*! ./rand */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/rand.js\");\nvar ArrayOps = function () {\n    function ArrayOps() {}\n    ArrayOps.tensor = function (values, shape, dtype) {\n        if (dtype === void 0) {\n            dtype = 'float32';\n        }\n        var inferredShape = util.inferShape(values);\n        if (shape != null && inferredShape.length !== 1) {\n            util.assertShapesMatch(shape, inferredShape, \"Error creating a new Tensor. \" + (\"Inferred shape (\" + inferredShape + \") does not match the \") + (\"provided shape (\" + shape + \"). \"));\n        }\n        if (!util.isTypedArray(values) && !Array.isArray(values)) {\n            values = [values];\n        }\n        shape = shape || inferredShape;\n        return tensor_1.Tensor.make(shape, { values: toTypedArray(values, dtype) }, dtype);\n    };\n    ArrayOps.scalar = function (value, dtype) {\n        if (dtype === void 0) {\n            dtype = 'float32';\n        }\n        if (util.isTypedArray(value) || Array.isArray(value)) {\n            throw new Error('Error creating a new Scalar: value must be a primitive ' + '(number|boolean)');\n        }\n        return ArrayOps.tensor(value, [], dtype);\n    };\n    ArrayOps.tensor1d = function (values, dtype) {\n        if (dtype === void 0) {\n            dtype = 'float32';\n        }\n        var inferredShape = util.inferShape(values);\n        if (inferredShape.length !== 1) {\n            throw new Error('Error creating a new Tensor1D: values must be a flat/TypedArray');\n        }\n        return ArrayOps.tensor(values, inferredShape, dtype);\n    };\n    ArrayOps.tensor2d = function (values, shape, dtype) {\n        if (dtype === void 0) {\n            dtype = 'float32';\n        }\n        var inferredShape = util.inferShape(values);\n        if (inferredShape.length !== 2 && inferredShape.length !== 1) {\n            throw new Error('Error creating a new Tensor2D: values must be number[][] ' + 'or flat/TypedArray');\n        }\n        shape = shape || inferredShape;\n        return ArrayOps.tensor(values, shape, dtype);\n    };\n    ArrayOps.tensor3d = function (values, shape, dtype) {\n        if (dtype === void 0) {\n            dtype = 'float32';\n        }\n        var inferredShape = util.inferShape(values);\n        if (inferredShape.length !== 3 && inferredShape.length !== 1) {\n            throw new Error('Error creating a new Tensor3D: values must be number[][][]' + 'or flat/TypedArray');\n        }\n        shape = shape || inferredShape;\n        return ArrayOps.tensor(values, shape, dtype);\n    };\n    ArrayOps.tensor4d = function (values, shape, dtype) {\n        if (dtype === void 0) {\n            dtype = 'float32';\n        }\n        var inferredShape = util.inferShape(values);\n        if (inferredShape.length !== 4 && inferredShape.length !== 1) {\n            throw new Error('Error creating a new Tensor4D: values must be number[][][][]' + 'or flat/TypedArray');\n        }\n        shape = shape || inferredShape;\n        return ArrayOps.tensor(values, shape, dtype);\n    };\n    ArrayOps.ones = function (shape, dtype) {\n        if (dtype === void 0) {\n            dtype = 'float32';\n        }\n        var values = makeOnesTypedArray(util.sizeFromShape(shape), dtype);\n        return tensor_1.Tensor.make(shape, { values: values }, dtype);\n    };\n    ArrayOps.zeros = function (shape, dtype) {\n        if (dtype === void 0) {\n            dtype = 'float32';\n        }\n        var values = makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n        return tensor_1.Tensor.make(shape, { values: values }, dtype);\n    };\n    ArrayOps.fill = function (shape, value, dtype) {\n        if (dtype === void 0) {\n            dtype = 'float32';\n        }\n        var values = util.getTypedArrayFromDType(dtype, util.sizeFromShape(shape));\n        values.fill(value);\n        return tensor_1.Tensor.make(shape, { values: values }, dtype);\n    };\n    ArrayOps.onesLike = function (x) {\n        return ArrayOps.ones(x.shape, x.dtype);\n    };\n    ArrayOps.zerosLike = function (x) {\n        return ArrayOps.zeros(x.shape, x.dtype);\n    };\n    ArrayOps.clone = function (x) {\n        return tensor_1.Tensor.make(x.shape, { dataId: x.dataId }, x.dtype);\n    };\n    ArrayOps.randomNormal = function (shape, mean, stdDev, dtype, seed) {\n        if (mean === void 0) {\n            mean = 0;\n        }\n        if (stdDev === void 0) {\n            stdDev = 1;\n        }\n        if (dtype != null && dtype === 'bool') {\n            throw new Error(\"Unsupported data type \" + dtype);\n        }\n        var randGauss = new rand_1.MPRandGauss(mean, stdDev, dtype, false, seed);\n        var res = ArrayOps.buffer(shape, dtype);\n        for (var i = 0; i < res.values.length; i++) {\n            res.values[i] = randGauss.nextValue();\n        }\n        return res.toTensor();\n    };\n    ArrayOps.truncatedNormal = function (shape, mean, stdDev, dtype, seed) {\n        if (mean === void 0) {\n            mean = 0;\n        }\n        if (stdDev === void 0) {\n            stdDev = 1;\n        }\n        if (dtype != null && dtype === 'bool') {\n            throw new Error(\"Unsupported data type \" + dtype);\n        }\n        var randGauss = new rand_1.MPRandGauss(mean, stdDev, dtype, true, seed);\n        var res = ArrayOps.buffer(shape, dtype);\n        for (var i = 0; i < res.values.length; i++) {\n            res.values[i] = randGauss.nextValue();\n        }\n        return res.toTensor();\n    };\n    ArrayOps.randomUniform = function (shape, minval, maxval, dtype) {\n        if (minval === void 0) {\n            minval = 0;\n        }\n        if (maxval === void 0) {\n            maxval = 1;\n        }\n        if (dtype === void 0) {\n            dtype = 'float32';\n        }\n        var res = ArrayOps.buffer(shape, dtype);\n        for (var i = 0; i < res.values.length; i++) {\n            res.values[i] = util.randUniform(minval, maxval);\n        }\n        return res.toTensor();\n    };\n    ArrayOps.rand = function (shape, randFunction, dtype) {\n        var size = util.sizeFromShape(shape);\n        var values = null;\n        if (dtype == null || dtype === 'float32') {\n            values = new Float32Array(size);\n        } else if (dtype === 'int32') {\n            values = new Int32Array(size);\n        } else if (dtype === 'bool') {\n            values = new Uint8Array(size);\n        } else {\n            throw new Error(\"Unknown data type \" + dtype);\n        }\n        for (var i = 0; i < size; i++) {\n            values[i] = randFunction();\n        }\n        return tensor_1.Tensor.make(shape, { values: values }, dtype);\n    };\n    ArrayOps.multinomial = function (logits, numSamples, seed, normalized) {\n        if (normalized === void 0) {\n            normalized = false;\n        }\n        var numOutcomes = logits.size;\n        var origRank = logits.rank;\n        if (numOutcomes < 2) {\n            throw new Error(\"Error in multinomial: you need at least 2 outcomes, but got \" + (numOutcomes + \".\"));\n        }\n        if (origRank > 2) {\n            throw new Error(\"Rank of probabilities must be 1 or 2, but is \" + origRank);\n        }\n        if (!normalized) {\n            logits = ops.softmax(logits);\n        }\n        seed = seed || Math.random();\n        var prob2D = origRank === 1 ? logits.as2D(1, -1) : logits;\n        var res = environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.multinomial(prob2D, numSamples, seed);\n        }, { prob2D: prob2D });\n        return origRank === 1 ? res.as1D() : res;\n    };\n    ArrayOps.oneHot = function (indices, depth, onValue, offValue) {\n        if (onValue === void 0) {\n            onValue = 1;\n        }\n        if (offValue === void 0) {\n            offValue = 0;\n        }\n        if (depth < 2) {\n            throw new Error(\"Error in oneHot: depth must be >=2, but it is \" + depth);\n        }\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.oneHot(indices, depth, onValue, offValue);\n        }, { indices: indices });\n    };\n    ArrayOps.fromPixels = function (pixels, numChannels) {\n        if (numChannels === void 0) {\n            numChannels = 3;\n        }\n        if (numChannels > 4) {\n            throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');\n        }\n        return environment_1.ENV.engine.fromPixels(pixels, numChannels);\n    };\n    ArrayOps.reshape = function (x, shape) {\n        shape = util.inferFromImplicitShape(shape, x.size);\n        util.assert(x.size === util.sizeFromShape(shape), 'new shape and old shape must have the same number of elements.');\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.reshape(x.shape);\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.reshape(x, shape);\n        }, { x: x }, grad);\n    };\n    ArrayOps.squeeze = function (x, axis) {\n        return ArrayOps.reshape(x, util.squeezeShape(x.shape, axis).newShape);\n    };\n    ArrayOps.cast = function (x, dtype) {\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.clone();\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.cast(x, dtype);\n        }, { x: x }, grad);\n    };\n    ArrayOps.tile = function (x, reps) {\n        util.assert(x.rank === reps.length, \"Error in transpose: rank of input \" + x.rank + \" \" + (\"must match length of reps \" + reps + \".\"));\n        var grad = function (dy) {\n            var derX = function () {\n                var xGrad = ArrayOps.zerosLike(x);\n                if (x.rank === 1) {\n                    for (var i = 0; i < reps[0]; ++i) {\n                        xGrad = xGrad.add(dy.slice([i * x.shape[0]], [x.shape[0]]));\n                    }\n                } else if (x.rank === 2) {\n                    for (var i = 0; i < reps[0]; ++i) {\n                        for (var j = 0; j < reps[1]; ++j) {\n                            xGrad = xGrad.add(dy.slice([i * x.shape[0], j * x.shape[1]], [x.shape[0], x.shape[1]]));\n                        }\n                    }\n                } else if (x.rank === 3) {\n                    for (var i = 0; i < reps[0]; ++i) {\n                        for (var j = 0; j < reps[1]; ++j) {\n                            for (var k = 0; k < reps[2]; ++k) {\n                                xGrad = xGrad.add(dy.slice([i * x.shape[0], j * x.shape[1], k * x.shape[2]], [x.shape[0], x.shape[1], x.shape[2]]));\n                            }\n                        }\n                    }\n                } else if (x.rank === 4) {\n                    for (var i = 0; i < reps[0]; ++i) {\n                        for (var j = 0; j < reps[1]; ++j) {\n                            for (var k = 0; k < reps[2]; ++k) {\n                                for (var l = 0; l < reps[3]; ++l) {\n                                    xGrad = xGrad.add(dy.slice([i * x.shape[0], j * x.shape[1], k * x.shape[2], l * x.shape[3]], [x.shape[0], x.shape[1], x.shape[2], x.shape[3]]));\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    throw new Error(\"Gradient for tile operation is not implemented for rank-\" + (x.rank + \" tensors yet.\"));\n                }\n                return xGrad;\n            };\n            return { x: derX };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.tile(x, reps);\n        }, { x: x }, grad);\n    };\n    ArrayOps.gather = function (x, indices, axis) {\n        if (axis === void 0) {\n            axis = 0;\n        }\n        var axes = axis_util_1.parseAxisParam(axis, x.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.gather(x, indices, axes[0]);\n        }, { x: x, indices: indices });\n    };\n    ArrayOps.pad1d = function (x, paddings, constantValue) {\n        if (constantValue === void 0) {\n            constantValue = 0;\n        }\n        util.assert(paddings.length === 2, 'Invalid number of paddings. Must be length of 2.');\n        return ArrayOps.pad(x, [paddings], constantValue);\n    };\n    ArrayOps.pad2d = function (x, paddings, constantValue) {\n        if (constantValue === void 0) {\n            constantValue = 0;\n        }\n        util.assert(paddings.length === 2 && paddings[0].length === 2 && paddings[1].length === 2, 'Invalid number of paddings. Must be length of 2 each.');\n        return ArrayOps.pad(x, paddings, constantValue);\n    };\n    ArrayOps.pad3d = function (x, paddings, constantValue) {\n        if (constantValue === void 0) {\n            constantValue = 0;\n        }\n        util.assert(paddings.length === 3 && paddings[0].length === 2 && paddings[1].length === 2 && paddings[2].length === 2, 'Invalid number of paddings. Must be length of 2 each.');\n        return ArrayOps.pad(x, paddings, constantValue);\n    };\n    ArrayOps.pad4d = function (x, paddings, constantValue) {\n        if (constantValue === void 0) {\n            constantValue = 0;\n        }\n        util.assert(paddings.length === 4 && paddings[0].length === 2 && paddings[1].length === 2 && paddings[2].length === 2 && paddings[3].length === 2, 'Invalid number of paddings. Must be length of 2 each.');\n        return ArrayOps.pad(x, paddings, constantValue);\n    };\n    ArrayOps.pad = function (x, paddings, constantValue) {\n        if (constantValue === void 0) {\n            constantValue = 0;\n        }\n        if (x.rank === 0) {\n            throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');\n        }\n        var begin = paddings.map(function (p) {\n            return p[0];\n        });\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.slice(begin, x.shape);\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.pad(x, paddings, constantValue);\n        }, { x: x }, grad);\n    };\n    ArrayOps.stack = function (tensors, axis) {\n        if (axis === void 0) {\n            axis = 0;\n        }\n        util.assert(tensors.length >= 2, 'Pass at least two tensors to dl.stack');\n        var rank = tensors[0].rank;\n        var shape = tensors[0].shape;\n        var dtype = tensors[0].dtype;\n        util.assert(axis <= rank, 'Axis must be <= rank of the tensor');\n        tensors.forEach(function (t) {\n            util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\n        });\n        tensors.forEach(function (t) {\n            util.assert(dtype === t.dtype, 'All tensors passed to stack must have matching dtypes');\n        });\n        var expandedTensors = tensors.map(function (t) {\n            return t.expandDims(axis);\n        });\n        return concat_1.ConcatOps.concat(expandedTensors, axis);\n    };\n    ArrayOps.expandDims = function (x, axis) {\n        if (axis === void 0) {\n            axis = 0;\n        }\n        util.assert(axis <= x.rank, 'Axis must be <= rank of the tensor');\n        var newShape = x.shape.slice();\n        newShape.splice(axis, 0, 1);\n        return ArrayOps.reshape(x, newShape);\n    };\n    ArrayOps.linspace = function (start, stop, num) {\n        if (num === 0) {\n            throw new Error('Cannot request zero samples');\n        }\n        var step = (stop - start) / (num - 1);\n        var values = makeZerosTypedArray(num, 'float32');\n        values[0] = start;\n        for (var i = 1; i < values.length; i++) {\n            values[i] = values[i - 1] + step;\n        }\n        return ArrayOps.tensor1d(values, 'float32');\n    };\n    ArrayOps.range = function (start, stop, step, dtype) {\n        if (step === void 0) {\n            step = 1;\n        }\n        if (dtype === void 0) {\n            dtype = 'float32';\n        }\n        if (step === 0) {\n            throw new Error('Cannot have a step of zero');\n        }\n        var sameStartStop = start === stop;\n        var increasingRangeNegativeStep = start < stop && step < 0;\n        var decreasingRangePositiveStep = stop < start && step > 1;\n        if (sameStartStop || increasingRangeNegativeStep || decreasingRangePositiveStep) {\n            return ArrayOps.zeros([0], dtype);\n        }\n        var numElements = Math.abs(Math.ceil((stop - start) / step));\n        var values = makeZerosTypedArray(numElements, dtype);\n        if (stop < start && step === 1) {\n            step = -1;\n        }\n        values[0] = start;\n        for (var i = 1; i < values.length; i++) {\n            values[i] = values[i - 1] + step;\n        }\n        return ArrayOps.tensor1d(values, dtype);\n    };\n    ArrayOps.buffer = function (shape, dtype, values) {\n        if (dtype === void 0) {\n            dtype = 'float32';\n        }\n        return new tensor_1.TensorBuffer(shape, dtype, values);\n    };\n    ArrayOps.print = function (x, verbose) {\n        if (verbose === void 0) {\n            verbose = false;\n        }\n        console.log(tensor_util.tensorToString(x, verbose));\n    };\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })], ArrayOps, \"tensor\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })], ArrayOps, \"scalar\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })], ArrayOps, \"tensor1d\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })], ArrayOps, \"tensor2d\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })], ArrayOps, \"tensor3d\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })], ArrayOps, \"tensor4d\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }), operation_1.operation], ArrayOps, \"ones\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }), operation_1.operation], ArrayOps, \"zeros\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }), operation_1.operation], ArrayOps, \"fill\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }), operation_1.operation], ArrayOps, \"onesLike\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }), operation_1.operation], ArrayOps, \"zerosLike\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }), operation_1.operation], ArrayOps, \"clone\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }), operation_1.operation], ArrayOps, \"randomNormal\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }), operation_1.operation], ArrayOps, \"truncatedNormal\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }), operation_1.operation], ArrayOps, \"randomUniform\", null);\n    __decorate([operation_1.operation], ArrayOps, \"rand\", null);\n    __decorate([operation_1.operation], ArrayOps, \"multinomial\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }), operation_1.operation], ArrayOps, \"oneHot\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' }), operation_1.operation], ArrayOps, \"fromPixels\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Transformations' }), operation_1.operation], ArrayOps, \"reshape\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Transformations' })], ArrayOps, \"squeeze\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Transformations' }), operation_1.operation], ArrayOps, \"cast\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }), operation_1.operation], ArrayOps, \"tile\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }), operation_1.operation], ArrayOps, \"gather\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Transformations' }), operation_1.operation], ArrayOps, \"pad\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }), operation_1.operation], ArrayOps, \"stack\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Transformations' }), operation_1.operation], ArrayOps, \"expandDims\", null);\n    __decorate([operation_1.operation, doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })], ArrayOps, \"linspace\", null);\n    __decorate([operation_1.operation, doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })], ArrayOps, \"range\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })], ArrayOps, \"buffer\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })], ArrayOps, \"print\", null);\n    return ArrayOps;\n}();\nexports.ArrayOps = ArrayOps;\nfunction makeZerosTypedArray(size, dtype) {\n    if (dtype == null || dtype === 'float32') {\n        return new Float32Array(size);\n    } else if (dtype === 'int32') {\n        return new Int32Array(size);\n    } else if (dtype === 'bool') {\n        return new Uint8Array(size);\n    } else {\n        throw new Error(\"Unknown data type $ {dtype}\");\n    }\n}\nfunction makeOnesTypedArray(size, dtype) {\n    var array = makeZerosTypedArray(size, dtype);\n    for (var i = 0; i < array.length; i++) {\n        array[i] = 1;\n    }\n    return array;\n}\nfunction toTypedArray(a, dtype) {\n    if (noConversionNeeded(a, dtype)) {\n        return a;\n    }\n    if (Array.isArray(a)) {\n        a = util.flatten(a);\n    }\n    return util.copyTypedArray(a, dtype);\n}\nfunction noConversionNeeded(a, dtype) {\n    return a instanceof Float32Array && dtype === 'float32' || a instanceof Int32Array && dtype === 'int32' || a instanceof Uint8Array && dtype === 'bool';\n}\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nfunction axesAreInnerMostDims(axes, rank) {\n    for (var i = 0; i < axes.length; ++i) {\n        if (axes[axes.length - i - 1] !== rank - 1 - i) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.axesAreInnerMostDims = axesAreInnerMostDims;\nfunction combineLocations(outputLoc, reduceLoc, axes) {\n    var rank = outputLoc.length + reduceLoc.length;\n    var loc = [];\n    var outIdx = 0;\n    var reduceIdx = 0;\n    for (var dim = 0; dim < rank; dim++) {\n        if (axes.indexOf(dim) === -1) {\n            loc.push(outputLoc[outIdx++]);\n        } else {\n            loc.push(reduceLoc[reduceIdx++]);\n        }\n    }\n    return loc;\n}\nexports.combineLocations = combineLocations;\nfunction computeOutAndReduceShapes(aShape, axes) {\n    var outShape = [];\n    var rank = aShape.length;\n    for (var dim = 0; dim < rank; dim++) {\n        if (axes.indexOf(dim) === -1) {\n            outShape.push(aShape[dim]);\n        }\n    }\n    var reduceShape = axes.map(function (dim) {\n        return aShape[dim];\n    });\n    return [outShape, reduceShape];\n}\nexports.computeOutAndReduceShapes = computeOutAndReduceShapes;\nfunction expandShapeToKeepDim(shape, axes) {\n    var reduceSubShape = axes.map(function (x) {\n        return 1;\n    });\n    return combineLocations(shape, reduceSubShape, axes);\n}\nexports.expandShapeToKeepDim = expandShapeToKeepDim;\nfunction parseAxisParam(axis, shape) {\n    var rank = shape.length;\n    axis = axis == null ? shape.map(function (s, i) {\n        return i;\n    }) : [].concat(axis);\n    util.assert(axis.every(function (ax) {\n        return ax >= -rank && ax < rank;\n    }), \"All values in axis param must be in range [-\" + rank + \", \" + rank + \") but \" + (\"got axis \" + axis));\n    util.assert(axis.every(function (ax) {\n        return util.isInt(ax);\n    }), \"All values in axis param must be integers but \" + (\"got axis \" + axis));\n    return axis.map(function (a) {\n        return a < 0 ? rank + a : a;\n    });\n}\nexports.parseAxisParam = parseAxisParam;\nfunction assertAxesAreInnerMostDims(msg, axes, rank) {\n    util.assert(axesAreInnerMostDims(axes, rank), msg + \" supports only inner-most axes for now. \" + (\"Got axes \" + axes + \" and rank-\" + rank + \" input.\"));\n}\nexports.assertAxesAreInnerMostDims = assertAxesAreInnerMostDims;\nfunction getAxesPermutation(axes, rank) {\n    if (axesAreInnerMostDims(axes, rank)) {\n        return null;\n    }\n    var result = [];\n    for (var i = 0; i < rank; ++i) {\n        if (axes.indexOf(i) === -1) {\n            result.push(i);\n        }\n    }\n    axes.forEach(function (axis) {\n        return result.push(axis);\n    });\n    return result;\n}\nexports.getAxesPermutation = getAxesPermutation;\nfunction getUndoAxesPermutation(axes) {\n    return axes.map(function (axis, i) {\n        return [i, axis];\n    }).sort(function (a, b) {\n        return a[1] - b[1];\n    }).map(function (x) {\n        return x[0];\n    });\n}\nexports.getUndoAxesPermutation = getUndoAxesPermutation;\nfunction getInnerMostAxes(numAxes, rank) {\n    var res = [];\n    for (var i = rank - numAxes; i < rank; ++i) {\n        res.push(i);\n    }\n    return res;\n}\nexports.getInnerMostAxes = getInnerMostAxes;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ../doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar operation_1 = __webpack_require__(/*! ./operation */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js\");\nvar BatchNormOps = function () {\n    function BatchNormOps() {}\n    BatchNormOps.batchNormalization2d = function (x, mean, variance, varianceEpsilon, scale, offset) {\n        if (varianceEpsilon === void 0) {\n            varianceEpsilon = .001;\n        }\n        util.assert(x.rank === 2, \"Error in batchNormalization3D: x must be rank 3 but got rank \" + (x.rank + \".\"));\n        util.assert(mean.rank === 2 || mean.rank === 1, \"Error in batchNormalization2D: mean must be rank 2 or rank 1 but \" + (\"got rank \" + mean.rank + \".\"));\n        util.assert(variance.rank === 2 || variance.rank === 1, \"Error in batchNormalization2D: variance must be rank 2 or rank 1 \" + (\"but got rank \" + variance.rank + \".\"));\n        if (scale != null) {\n            util.assert(scale.rank === 2 || scale.rank === 1, \"Error in batchNormalization2D: scale must be rank 2 or rank 1 \" + (\"but got rank \" + scale.rank + \".\"));\n        }\n        if (offset != null) {\n            util.assert(offset.rank === 2 || offset.rank === 1, \"Error in batchNormalization2D: offset must be rank 2 or rank 1 \" + (\"but got rank \" + offset.rank + \".\"));\n        }\n        return BatchNormOps.batchNormalization(x, mean, variance, varianceEpsilon, scale, offset);\n    };\n    BatchNormOps.batchNormalization3d = function (x, mean, variance, varianceEpsilon, scale, offset) {\n        if (varianceEpsilon === void 0) {\n            varianceEpsilon = .001;\n        }\n        util.assert(x.rank === 3, \"Error in batchNormalization3D: x must be rank 3 but got rank \" + (x.rank + \".\"));\n        util.assert(mean.rank === 3 || mean.rank === 1, \"Error in batchNormalization3D: mean must be rank 3 or rank 1 but \" + (\"got rank \" + mean.rank + \".\"));\n        util.assert(variance.rank === 3 || variance.rank === 1, \"Error in batchNormalization3D: variance must be rank 3 or rank 1 \" + (\"but got rank \" + variance.rank + \".\"));\n        if (scale != null) {\n            util.assert(scale.rank === 3 || scale.rank === 1, \"Error in batchNormalization3D: scale must be rank 3 or rank 1 \" + (\"but got rank \" + scale.rank + \".\"));\n        }\n        if (offset != null) {\n            util.assert(offset.rank === 3 || offset.rank === 1, \"Error in batchNormalization3D: offset must be rank 3 or rank 1 \" + (\"but got rank \" + offset.rank + \".\"));\n        }\n        return BatchNormOps.batchNormalization(x, mean, variance, varianceEpsilon, scale, offset);\n    };\n    BatchNormOps.batchNormalization4d = function (x, mean, variance, varianceEpsilon, scale, offset) {\n        if (varianceEpsilon === void 0) {\n            varianceEpsilon = .001;\n        }\n        util.assert(x.rank === 4, \"Error in batchNormalization4D: x must be rank 4 but got rank \" + (x.rank + \".\"));\n        util.assert(mean.rank === 4 || mean.rank === 1, \"Error in batchNormalization4D: mean must be rank 4 or rank 1 but \" + (\"got rank \" + mean.rank + \".\"));\n        util.assert(variance.rank === 4 || variance.rank === 1, \"Error in batchNormalization4D: variance must be rank 4 or rank 1 \" + (\"but got rank \" + variance.rank + \".\"));\n        if (scale != null) {\n            util.assert(scale.rank === 4 || scale.rank === 1, \"Error in batchNormalization4D: scale must be rank 4 or rank 1 \" + (\"but got rank \" + scale.rank + \".\"));\n        }\n        if (offset != null) {\n            util.assert(offset.rank === 4 || offset.rank === 1, \"Error in batchNormalization4D: offset must be rank 4 or rank 1 \" + (\"but got rank \" + offset.rank + \".\"));\n        }\n        return BatchNormOps.batchNormalization(x, mean, variance, varianceEpsilon, scale, offset);\n    };\n    BatchNormOps.batchNormalization = function (x, mean, variance, varianceEpsilon, scale, offset) {\n        if (varianceEpsilon === void 0) {\n            varianceEpsilon = .001;\n        }\n        var x4D;\n        if (x.rank === 0 || x.rank === 1) {\n            x4D = x.as4D(1, 1, 1, x.size);\n        } else if (x.rank === 2) {\n            x4D = x.as4D(1, 1, x.shape[0], x.shape[1]);\n        } else if (x.rank === 3) {\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n        } else {\n            x4D = x;\n        }\n        var res = environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.batchNormalization4D(x4D, batchnormReshape4D(mean), batchnormReshape4D(variance), varianceEpsilon, batchnormReshape4D(scale), batchnormReshape4D(offset));\n        }, { x: x, mean: mean, variance: variance });\n        return res.reshape(x.shape);\n    };\n    __decorate([operation_1.operation], BatchNormOps, \"batchNormalization2d\", null);\n    __decorate([operation_1.operation], BatchNormOps, \"batchNormalization3d\", null);\n    __decorate([operation_1.operation], BatchNormOps, \"batchNormalization4d\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Normalization' })], BatchNormOps, \"batchNormalization\", null);\n    return BatchNormOps;\n}();\nexports.BatchNormOps = BatchNormOps;\nfunction batchnormReshape4D(x) {\n    if (x == null) {\n        return null;\n    }\n    if (x.rank === 0) {\n        return x.as1D();\n    } else if (x.rank === 1) {\n        return x;\n    } else if (x.rank === 2) {\n        return x.as4D(1, 1, x.shape[0], x.shape[1]);\n    } else if (x.rank === 3) {\n        return x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n    }\n    return x;\n}\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ../doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar broadcast_util = __webpack_require__(/*! ./broadcast_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js\");\nvar operation_1 = __webpack_require__(/*! ./operation */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js\");\nvar ops_1 = __webpack_require__(/*! ./ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\");\nvar BinaryOps = function () {\n    function BinaryOps() {}\n    BinaryOps.add = function (a, b) {\n        util.assertTypesMatch(a, b);\n        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        var der = function (dy) {\n            var derA = function () {\n                var res = dy;\n                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    res = res.sum(reduceAxes);\n                }\n                return res.reshape(a.shape);\n            };\n            var derB = function () {\n                var res = dy;\n                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    res = res.sum(reduceAxes);\n                }\n                return res.reshape(b.shape);\n            };\n            return { a: derA, b: derB };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.add(a, b);\n        }, { a: a, b: b }, der);\n    };\n    BinaryOps.addStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in addStrict: ');\n        return a.add(b);\n    };\n    BinaryOps.sub = function (a, b) {\n        util.assertTypesMatch(a, b);\n        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        var der = function (dy) {\n            var derA = function () {\n                var res = dy;\n                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    res = res.sum(reduceAxes);\n                }\n                return res.reshape(a.shape);\n            };\n            var derB = function () {\n                var res = dy;\n                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    res = res.sum(reduceAxes);\n                }\n                return res.neg().reshape(b.shape);\n            };\n            return { a: derA, b: derB };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.subtract(a, b);\n        }, { a: a, b: b }, der);\n    };\n    BinaryOps.subStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in subStrict: ');\n        return a.sub(b);\n    };\n    BinaryOps.pow = function (base, exp) {\n        broadcast_util.assertAndGetBroadcastShape(base.shape, exp.shape);\n        var grad = function (dy) {\n            if (!util.arraysEqual(base.shape, exp.shape) && !util.isScalarShape(exp.shape)) {\n                throw new Error(\"Gradient of pow not yet supported for broadcasted shapes.\");\n            }\n            var derBase = function () {\n                var expFloat = exp.toFloat();\n                var dx = expFloat.mul(base.toFloat().pow(expFloat.sub(ops_1.scalar(1))));\n                return dy.mulStrict(dx);\n            };\n            return { base: derBase };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.pow(base, exp);\n        }, { base: base }, grad);\n    };\n    BinaryOps.powStrict = function (base, exp) {\n        util.assertShapesMatch(base.shape, exp.shape, 'Error in powStrict: ');\n        return base.pow(exp);\n    };\n    BinaryOps.mul = function (a, b) {\n        util.assertTypesMatch(a, b);\n        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        var der = function (dy) {\n            var derA = function () {\n                var res = dy.mul(b.toFloat());\n                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    return res.sum(reduceAxes).reshape(a.shape);\n                }\n                return res;\n            };\n            var derB = function () {\n                var res = dy.mul(a.toFloat());\n                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    return res.sum(reduceAxes).reshape(b.shape);\n                }\n                return res;\n            };\n            return { a: derA, b: derB };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.multiply(a, b);\n        }, { a: a, b: b }, der);\n    };\n    BinaryOps.mulStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in multiplyStrict: ');\n        return a.mul(b);\n    };\n    BinaryOps.div = function (a, b) {\n        var outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        var der = function (dy) {\n            var derA = function () {\n                var res = dy.div(b.toFloat());\n                var reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    return res.sum(reduceAxes).reshape(a.shape);\n                }\n                return res;\n            };\n            var derB = function () {\n                var res = dy.mul(a.toFloat());\n                var reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n                if (reduceAxes.length > 0) {\n                    res = res.sum(reduceAxes).reshape(b.shape);\n                }\n                var tmp = b.square();\n                return res.div(tmp.toFloat()).neg();\n            };\n            return { a: derA, b: derB };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.divide(a, b);\n        }, { a: a, b: b }, der);\n    };\n    BinaryOps.divStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in divideStrict: ');\n        return a.div(b);\n    };\n    BinaryOps.minimum = function (a, b) {\n        util.assertTypesMatch(a, b);\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        var der = function (dy) {\n            var derA = function () {\n                return dy.mul(a.lessEqual(b).toFloat());\n            };\n            var derB = function () {\n                return dy.mul(a.greater(b).toFloat());\n            };\n            return { a: derA, b: derB };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.minimum(a, b);\n        }, { a: a, b: b }, der);\n    };\n    BinaryOps.minimumStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in minimumStrict: ');\n        return a.minimum(b);\n    };\n    BinaryOps.maximum = function (a, b) {\n        util.assertTypesMatch(a, b);\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        var der = function (dy) {\n            var derA = function () {\n                return dy.mul(a.greaterEqual(b).toFloat());\n            };\n            var derB = function () {\n                return dy.mul(a.less(b).toFloat());\n            };\n            return { a: derA, b: derB };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.maximum(a, b);\n        }, { a: a, b: b }, der);\n    };\n    BinaryOps.maximumStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in minimumStrict: ');\n        return a.maximum(b);\n    };\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }), operation_1.operation], BinaryOps, \"add\", null);\n    __decorate([operation_1.operation], BinaryOps, \"addStrict\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }), operation_1.operation], BinaryOps, \"sub\", null);\n    __decorate([operation_1.operation], BinaryOps, \"subStrict\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }), operation_1.operation], BinaryOps, \"pow\", null);\n    __decorate([operation_1.operation], BinaryOps, \"powStrict\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }), operation_1.operation], BinaryOps, \"mul\", null);\n    __decorate([operation_1.operation], BinaryOps, \"mulStrict\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }), operation_1.operation], BinaryOps, \"div\", null);\n    __decorate([operation_1.operation], BinaryOps, \"divStrict\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }), operation_1.operation], BinaryOps, \"minimum\", null);\n    __decorate([operation_1.operation], BinaryOps, \"minimumStrict\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Arithmetic' }), operation_1.operation], BinaryOps, \"maximum\", null);\n    __decorate([operation_1.operation], BinaryOps, \"maximumStrict\", null);\n    return BinaryOps;\n}();\nexports.BinaryOps = BinaryOps;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getBroadcastDims(inShape, outShape) {\n    var inRank = inShape.length;\n    var dims = [];\n    for (var i = 0; i < inRank; i++) {\n        var dim = inRank - 1 - i;\n        var a = inShape[dim] || 1;\n        var b = outShape[outShape.length - 1 - i] || 1;\n        if (b > 1 && a === 1) {\n            dims.unshift(dim);\n        }\n    }\n    return dims;\n}\nexports.getBroadcastDims = getBroadcastDims;\nfunction getReductionAxes(inShape, outShape) {\n    var result = [];\n    for (var i = 0; i < outShape.length; i++) {\n        var inDim = inShape[inShape.length - i - 1];\n        var outAxis = outShape.length - i - 1;\n        var outDim = outShape[outAxis];\n        if (inDim == null || inDim === 1 && outDim > 1) {\n            result.unshift(outAxis);\n        }\n    }\n    return result;\n}\nexports.getReductionAxes = getReductionAxes;\nfunction broadcastDimsAreOuter(dims) {\n    for (var i = 0; i < dims.length; i++) {\n        if (dims[i] !== i) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.broadcastDimsAreOuter = broadcastDimsAreOuter;\nfunction assertAndGetBroadcastShape(shapeA, shapeB) {\n    var result = [];\n    var errMsg = \"Operands could not be broadcast together with shapes \" + (shapeA + \" and \" + shapeB + \".\");\n    var l = Math.max(shapeA.length, shapeB.length);\n    for (var i = 0; i < l; i++) {\n        var a = shapeA[shapeA.length - i - 1] || 1;\n        var b = shapeB[shapeB.length - i - 1] || 1;\n        if (a > 1 && b > 1 && a !== b) {\n            throw Error(errMsg);\n        }\n        result.unshift(Math.max(a, b));\n    }\n    return result;\n}\nexports.assertAndGetBroadcastShape = assertAndGetBroadcastShape;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/compare.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/compare.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ../doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar broadcast_util = __webpack_require__(/*! ./broadcast_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js\");\nvar operation_1 = __webpack_require__(/*! ./operation */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js\");\nvar CompareOps = function () {\n    function CompareOps() {}\n    CompareOps.notEqual = function (a, b) {\n        util.assertTypesMatch(a, b);\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.notEqual(a, b);\n        }, { a: a, b: b });\n    };\n    CompareOps.notEqualStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in notEqualStrict: ');\n        return a.notEqual(b);\n    };\n    CompareOps.less = function (a, b) {\n        util.assertTypesMatch(a, b);\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.less(a, b);\n        }, { a: a, b: b });\n    };\n    CompareOps.lessStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in lessStrict: ');\n        return a.less(b);\n    };\n    CompareOps.equal = function (a, b) {\n        util.assertTypesMatch(a, b);\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.equal(a, b);\n        }, { a: a, b: b });\n    };\n    CompareOps.equalStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in equalStrict: ');\n        return a.equal(b);\n    };\n    CompareOps.lessEqual = function (a, b) {\n        util.assertTypesMatch(a, b);\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.lessEqual(a, b);\n        }, { a: a, b: b });\n    };\n    CompareOps.lessEqualStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in lessEqualStrict: ');\n        return a.lessEqual(b);\n    };\n    CompareOps.greater = function (a, b) {\n        util.assertTypesMatch(a, b);\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.greater(a, b);\n        }, { a: a, b: b });\n    };\n    CompareOps.greaterStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in greaterStrict: ');\n        return a.greater(b);\n    };\n    CompareOps.greaterEqual = function (a, b) {\n        util.assertTypesMatch(a, b);\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.greaterEqual(a, b);\n        }, { a: a, b: b });\n    };\n    CompareOps.greaterEqualStrict = function (a, b) {\n        util.assertShapesMatch(a.shape, b.shape, 'Error in greaterEqualStrict: ');\n        return a.greaterEqual(b);\n    };\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Logical' }), operation_1.operation], CompareOps, \"notEqual\", null);\n    __decorate([operation_1.operation], CompareOps, \"notEqualStrict\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Logical' }), operation_1.operation], CompareOps, \"less\", null);\n    __decorate([operation_1.operation], CompareOps, \"lessStrict\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Logical' }), operation_1.operation], CompareOps, \"equal\", null);\n    __decorate([operation_1.operation], CompareOps, \"equalStrict\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Logical' }), operation_1.operation], CompareOps, \"lessEqual\", null);\n    __decorate([operation_1.operation], CompareOps, \"lessEqualStrict\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Logical' }), operation_1.operation], CompareOps, \"greater\", null);\n    __decorate([operation_1.operation], CompareOps, \"greaterStrict\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Logical' }), operation_1.operation], CompareOps, \"greaterEqual\", null);\n    __decorate([operation_1.operation], CompareOps, \"greaterEqualStrict\", null);\n    return CompareOps;\n}();\nexports.CompareOps = CompareOps;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/compare.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ../doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar axis_util_1 = __webpack_require__(/*! ./axis_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js\");\nvar concat_util = __webpack_require__(/*! ./concat_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/concat_util.js\");\nvar operation_1 = __webpack_require__(/*! ./operation */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js\");\nvar ConcatOps = function () {\n    function ConcatOps() {}\n    ConcatOps.concat1d = function (tensors) {\n        return ConcatOps.concat(tensors, 0);\n    };\n    ConcatOps.concat2d = function (tensors, axis) {\n        return ConcatOps.concat(tensors, axis);\n    };\n    ConcatOps.concat3d = function (tensors, axis) {\n        return ConcatOps.concat(tensors, axis);\n    };\n    ConcatOps.concat4d = function (tensors, axis) {\n        return ConcatOps.concat(tensors, axis);\n    };\n    ConcatOps.concat = function (tensors, axis) {\n        if (axis === void 0) {\n            axis = 0;\n        }\n        util.assert(tensors.length >= 2, 'Pass at least two tensors to concat');\n        var result = tensors[0];\n        var axes = axis_util_1.parseAxisParam(axis, result.shape);\n        for (var i = 1; i < tensors.length; ++i) {\n            result = concat2Tensors(result, tensors[i], axes[0]);\n        }\n        return result;\n    };\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }), operation_1.operation], ConcatOps, \"concat\", null);\n    return ConcatOps;\n}();\nexports.ConcatOps = ConcatOps;\nfunction concat2Tensors(a, b, axis) {\n    concat_util.assertParams(a.shape, b.shape, axis);\n    var outShape = concat_util.computeOutShape(a.shape, b.shape, axis);\n    var a2D = a.as2D(-1, util.sizeFromShape(a.shape.slice(axis)));\n    var b2D = b.as2D(-1, util.sizeFromShape(b.shape.slice(axis)));\n    var _a = concat_util.computeGradientSliceShapes(a2D.shape, b2D.shape),\n        aBegin = _a.aBegin,\n        aSize = _a.aSize,\n        bBegin = _a.bBegin,\n        bSize = _a.bSize;\n    var der = function (dy) {\n        return { a: function () {\n                return dy.slice(aBegin, aSize);\n            }, b: function () {\n                return dy.slice(bBegin, bSize);\n            } };\n    };\n    var res = environment_1.ENV.engine.runKernel(function (backend) {\n        return backend.concat(a2D, b2D);\n    }, { a: a2D, b: b2D }, der);\n    return res.reshape(outShape);\n}\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_util.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/concat_util.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nfunction assertParams(aShape, bShape, axis) {\n    var aRank = aShape.length;\n    var bRank = bShape.length;\n    util.assert(aShape.length === bShape.length, \"Error in concat\" + aRank + \"D: rank of x1 (\" + aRank + \") and x2 (\" + bRank + \") \" + \"must be the same.\");\n    util.assert(axis >= 0 && axis < aRank, \"Error in concat\" + aRank + \"D: axis must be \" + (\"between 0 and \" + (aRank - 1) + \".\"));\n    for (var i = 0; i < aRank; i++) {\n        util.assert(i === axis || aShape[i] === bShape[i], \"Error in concat\" + aRank + \"D: Shape (\" + aShape + \") does not match \" + (\"(\" + bShape + \") along the non-concatenated axis \" + i + \".\"));\n    }\n}\nexports.assertParams = assertParams;\nfunction computeOutShape1D(x1Shape, x2Shape) {\n    util.assert(x1Shape.length === 1 && x2Shape.length === 1, 'x1 and x2 should be 1d array.');\n    var outputShape = x1Shape.slice();\n    outputShape[0] += x2Shape[0];\n    return outputShape;\n}\nexports.computeOutShape1D = computeOutShape1D;\nfunction computeOutShape(x1Shape, x2Shape, axis) {\n    util.assert(x1Shape.length === x2Shape.length, 'x1 and x2 should have the same rank.');\n    var outputShape = x1Shape.slice();\n    outputShape[axis] += x2Shape[axis];\n    return outputShape;\n}\nexports.computeOutShape = computeOutShape;\nfunction computeGradientSliceShapes(aShape, bShape) {\n    return {\n        aBegin: [0, 0],\n        aSize: aShape,\n        bBegin: [0, aShape[1]],\n        bSize: bShape\n    };\n}\nexports.computeGradientSliceShapes = computeGradientSliceShapes;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/concat_util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ../doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar conv_util = __webpack_require__(/*! ./conv_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js\");\nvar operation_1 = __webpack_require__(/*! ./operation */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js\");\nvar ConvOps = function () {\n    function ConvOps() {}\n    ConvOps.conv1d = function (input, filter, stride, pad, dataFormat, dilation, dimRoundingMode) {\n        if (dataFormat === void 0) {\n            dataFormat = 'NWC';\n        }\n        if (dilation === void 0) {\n            dilation = 1;\n        }\n        var input3D = input;\n        var reshapedTo3D = false;\n        if (input.rank === 2) {\n            reshapedTo3D = true;\n            input3D = input.as3D(1, input.shape[0], input.shape[1]);\n        }\n        util.assert(input3D.rank === 3, \"Error in conv1d: input must be rank 3, but got rank \" + input3D.rank + \".\");\n        util.assert(filter.rank === 3, \"Error in conv1d: filter must be rank 3, but got rank \" + (filter.rank + \".\"));\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in conv1d: pad must be an integer when using, \" + (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        util.assert(input3D.shape[2] === filter.shape[1], \"Error in conv1d: depth of input (\" + input3D.shape[2] + \") must match  \" + (\"input depth for filter \" + filter.shape[1] + \".\"));\n        util.assert(eitherStridesOrDilationsAreOne(stride, dilation), 'Error in conv1D: Either stride or dilation must be 1.' + (\"Got stride \" + stride + \" and dilation '\" + dilation + \"'\"));\n        util.assert(dataFormat === 'NWC', \"Error in conv1d: got dataFormat of \" + dataFormat + \" but only NWC is currently supported.\");\n        var filter4D = filter.as4D(1, filter.shape[0], filter.shape[1], filter.shape[2]);\n        var input4D = input3D.as4D(input3D.shape[0], 1, input3D.shape[1], input3D.shape[2]);\n        var strides = [1, stride];\n        var dilations = [1, dilation];\n        var conv2dDataFormat = 'NHWC';\n        var res = ConvOps.conv2d(input4D, filter4D, strides, pad, conv2dDataFormat, dilations, dimRoundingMode);\n        if (reshapedTo3D) {\n            return res.as2D(res.shape[2], res.shape[3]);\n        }\n        return res.as3D(res.shape[0], res.shape[2], res.shape[3]);\n    };\n    ConvOps.conv2d = function (x, filter, strides, pad, dataFormat, dilations, dimRoundingMode) {\n        if (dataFormat === void 0) {\n            dataFormat = 'NHWC';\n        }\n        if (dilations === void 0) {\n            dilations = [1, 1];\n        }\n        var x4D = x;\n        var reshapedTo4D = false;\n        if (x.rank === 3) {\n            reshapedTo4D = true;\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n        }\n        util.assert(x4D.rank === 4, \"Error in conv2d: input must be rank 4, but got rank \" + x4D.rank + \".\");\n        util.assert(filter.rank === 4, \"Error in conv2d: filter must be rank 4, but got rank \" + (filter.rank + \".\"));\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in conv2d: pad must be an integer when using, \" + (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        util.assert(x4D.shape[3] === filter.shape[2], \"Error in conv2d: depth of input (\" + x4D.shape[3] + \") must match  \" + (\"input depth for filter \" + filter.shape[2] + \".\"));\n        util.assert(eitherStridesOrDilationsAreOne(strides, dilations), 'Error in conv2D: Either strides or dilations must be 1.' + (\"Got strides \" + strides + \" and dilations '\" + dilations + \"'\"));\n        util.assert(dataFormat === 'NHWC', \"Error in conv2d: got dataFormat of \" + dataFormat + \" but only NHWC is currently supported.\");\n        var convInfo = conv_util.computeConv2DInfo(x4D.shape, filter.shape, strides, dilations, pad, dimRoundingMode);\n        var grad = function (dy) {\n            util.assert(tupleValuesAreOne(dilations), 'Error in gradient of conv2D: dilation rates greater than 1 are not' + (\"yet supported in gradients. Got dilations '\" + dilations + \"'\"));\n            return {\n                x: function () {\n                    return ConvOps.conv2dDerInput(x4D.shape, dy, filter, strides, pad);\n                },\n                filter: function () {\n                    return ConvOps.conv2dDerFilter(x4D, dy, filter.shape, strides, pad);\n                }\n            };\n        };\n        var res = environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.conv2d(x4D, filter, convInfo);\n        }, { x: x4D, filter: filter }, grad);\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    ConvOps.conv2dDerInput = function (xShape, dy, filter, strides, pad, dimRoundingMode) {\n        util.assert(xShape.length === dy.rank, \"Length of inShape \" + (\"(\" + xShape.length + \") and rank of dy (\" + dy.rank + \") must match\"));\n        var xShape4D = xShape;\n        var dy4D = dy;\n        var reshapedTo4D = false;\n        if (dy.rank === 3) {\n            reshapedTo4D = true;\n            dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n            xShape4D = [1, xShape[0], xShape[1], xShape[2]];\n        }\n        var inDepth = xShape4D[3];\n        var outDepth = dy4D.shape[3];\n        util.assert(xShape4D.length === 4, \"Error in conv2dDerInput: inShape must be length 4, but got length \" + (xShape4D.length + \".\"));\n        util.assert(dy4D.rank === 4, \"Error in conv2dDerInput: dy must be rank 4, but got \" + (\"rank \" + dy4D.rank));\n        util.assert(filter.rank === 4, \"Error in conv2dDerInput: filter must be rank 4, but got \" + (\"rank \" + filter.rank));\n        util.assert(inDepth === filter.shape[2], \"Error in conv2dDerInput: depth of input (\" + inDepth + \") must \" + (\"match input depth for filter \" + filter.shape[2] + \".\"));\n        util.assert(outDepth === filter.shape[3], \"Error in conv2dDerInput: depth of output (\" + outDepth + \") must\" + (\"match output depth for filter \" + filter.shape[3] + \".\"));\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in conv2dDerInput: pad must be an integer when using, \" + (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        var dilations = 1;\n        var convInfo = conv_util.computeConv2DInfo(xShape4D, filter.shape, strides, dilations, pad, dimRoundingMode);\n        var res = environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.conv2dDerInput(dy4D, filter, convInfo);\n        }, { dy4D: dy4D });\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    ConvOps.conv2dDerFilter = function (x, dy, filterShape, strides, pad, dimRoundingMode) {\n        var x4D = x;\n        if (x.rank === 3) {\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n        }\n        var dy4D = dy;\n        if (dy4D.rank === 3) {\n            dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n        }\n        util.assert(x4D.rank === 4, \"Error in conv2dDerFilter: input must be rank 4, but got shape \" + (x4D.shape + \".\"));\n        util.assert(dy4D.rank === 4, \"Error in conv2dDerFilter: dy must be rank 4, but got shape \" + (dy4D.shape + \".\"));\n        util.assert(filterShape.length === 4, \"Error in conv2dDerFilter: filterShape must be length 4, but got \" + (filterShape + \".\"));\n        util.assert(x4D.shape[3] === filterShape[2], \"Error in conv2dDerFilter: depth of input \" + x4D.shape[3] + \") must \" + (\"match input depth in filter (\" + filterShape[2] + \".\"));\n        util.assert(dy4D.shape[3] === filterShape[3], \"Error in conv2dDerFilter: depth of dy (\" + dy4D.shape[3] + \") must \" + (\"match output depth for filter (\" + filterShape[3] + \").\"));\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in conv2dDerFilter: pad must be an integer when using, \" + (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        var dilations = 1;\n        var convInfo = conv_util.computeConv2DInfo(x4D.shape, filterShape, strides, dilations, pad, dimRoundingMode);\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.conv2dDerFilter(x4D, dy4D, convInfo);\n        }, { x4D: x4D, dy4D: dy4D });\n    };\n    ConvOps.conv2dTranspose = function (x, filter, outputShape, strides, pad, dimRoundingMode) {\n        return ConvOps.conv2dDerInput(outputShape, x, filter, strides, pad, dimRoundingMode);\n    };\n    ConvOps.depthwiseConv2d = function (input, filter, strides, pad, dataFormat, dilations, dimRoundingMode) {\n        if (dataFormat === void 0) {\n            dataFormat = 'NHWC';\n        }\n        if (dilations === void 0) {\n            dilations = [1, 1];\n        }\n        var input4D = input;\n        var reshapedTo4D = false;\n        if (input.rank === 3) {\n            reshapedTo4D = true;\n            input4D = input.as4D(1, input.shape[0], input.shape[1], input.shape[2]);\n        }\n        util.assert(input4D.rank === 4, \"Error in depthwiseConv2D: input must be rank 4, but got \" + (\"rank \" + input4D.rank + \".\"));\n        util.assert(filter.rank === 4, \"Error in depthwiseConv2D: filter must be rank 4, but got rank \" + (filter.rank + \".\"));\n        util.assert(input4D.shape[3] === filter.shape[2], \"Error in depthwiseConv2D: number of input channels \" + (\"(\" + input4D.shape[3] + \") must match the inChannels dimension in \") + (\"filter \" + filter.shape[2] + \".\"));\n        if (dilations == null) {\n            dilations = [1, 1];\n        }\n        util.assert(eitherStridesOrDilationsAreOne(strides, dilations), 'Error in depthwiseConv2d: Either strides or dilations must be 1.' + (\"Got strides \" + strides + \" and dilations '\" + dilations + \"'\"));\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in depthwiseConv2D: pad must be an integer when using, \" + (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        var convInfo = conv_util.computeConv2DInfo(input4D.shape, filter.shape, strides, dilations, pad, dimRoundingMode, true);\n        var res = environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.depthwiseConv2D(input4D, filter, convInfo);\n        }, { input4D: input4D, filter: filter });\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }), operation_1.operation], ConvOps, \"conv1d\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }), operation_1.operation], ConvOps, \"conv2d\", null);\n    __decorate([operation_1.operation], ConvOps, \"conv2dDerInput\", null);\n    __decorate([operation_1.operation], ConvOps, \"conv2dDerFilter\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }), operation_1.operation], ConvOps, \"conv2dTranspose\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }), operation_1.operation], ConvOps, \"depthwiseConv2d\", null);\n    return ConvOps;\n}();\nexports.ConvOps = ConvOps;\nfunction parseTupleParam(param) {\n    return typeof param === 'number' ? [param, param] : param;\n}\nfunction tupleValuesAreOne(param) {\n    var _a = parseTupleParam(param),\n        dimA = _a[0],\n        dimB = _a[1];\n    return dimA === 1 && dimB === 1;\n}\nfunction eitherStridesOrDilationsAreOne(strides, dilations) {\n    return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);\n}\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/conv.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nfunction computePool2DInfo(inShape, filterSize, strides, pad, roundingMode, dataFormat) {\n    if (dataFormat === void 0) {\n        dataFormat = 'channelsLast';\n    }\n    var _a = parseTupleParam(filterSize),\n        filterHeight = _a[0],\n        filterWidth = _a[1];\n    var filterShape;\n    if (dataFormat === 'channelsLast') {\n        filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];\n    } else if (dataFormat === 'channelsFirst') {\n        filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];\n    } else {\n        throw new Error(\"Unknown dataFormat \" + dataFormat);\n    }\n    var dilations = 1;\n    return computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, false, dataFormat);\n}\nexports.computePool2DInfo = computePool2DInfo;\nfunction computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, depthwise, dataFormat) {\n    if (depthwise === void 0) {\n        depthwise = false;\n    }\n    if (dataFormat === void 0) {\n        dataFormat = 'channelsLast';\n    }\n    var _a = [-1, -1, -1, -1],\n        batchSize = _a[0],\n        inHeight = _a[1],\n        inWidth = _a[2],\n        inChannels = _a[3];\n    if (dataFormat === 'channelsLast') {\n        batchSize = inShape[0], inHeight = inShape[1], inWidth = inShape[2], inChannels = inShape[3];\n    } else if (dataFormat === 'channelsFirst') {\n        batchSize = inShape[0], inChannels = inShape[1], inHeight = inShape[2], inWidth = inShape[3];\n    } else {\n        throw new Error(\"Unknown dataFormat \" + dataFormat);\n    }\n    var filterHeight = filterShape[0],\n        filterWidth = filterShape[1],\n        filterChannels = filterShape[3];\n    var _b = parseTupleParam(strides),\n        strideHeight = _b[0],\n        strideWidth = _b[1];\n    var _c = parseTupleParam(dilations),\n        dilationHeight = _c[0],\n        dilationWidth = _c[1];\n    var effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);\n    var effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);\n    var _d = getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight, effectiveFilterWidth, roundingMode),\n        padInfo = _d.padInfo,\n        outHeight = _d.outHeight,\n        outWidth = _d.outWidth;\n    var outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n    var outShape;\n    if (dataFormat === 'channelsFirst') {\n        outShape = [batchSize, outChannels, outHeight, outWidth];\n    } else if (dataFormat === 'channelsLast') {\n        outShape = [batchSize, outHeight, outWidth, outChannels];\n    }\n    return {\n        batchSize: batchSize,\n        dataFormat: dataFormat,\n        inHeight: inHeight,\n        inWidth: inWidth,\n        inChannels: inChannels,\n        outHeight: outHeight,\n        outWidth: outWidth,\n        outChannels: outChannels,\n        padInfo: padInfo,\n        strideHeight: strideHeight,\n        strideWidth: strideWidth,\n        filterHeight: filterHeight,\n        filterWidth: filterWidth,\n        dilationHeight: dilationHeight,\n        dilationWidth: dilationWidth,\n        inShape: inShape,\n        outShape: outShape,\n        filterShape: filterShape\n    };\n}\nexports.computeConv2DInfo = computeConv2DInfo;\nfunction computeOutputShape3D(inShape, fieldSize, outDepth, stride, zeroPad, roundingMode) {\n    if (zeroPad == null) {\n        zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n    }\n    var inputRows = inShape[0];\n    var inputCols = inShape[1];\n    var outputRows = conditionalRound((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    util.assert(util.isInt(outputRows), \"The output # of rows (\" + outputRows + \") must be an integer. Change the \" + \"stride and/or zero pad parameters\");\n    var outputCols = conditionalRound((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n    util.assert(util.isInt(outputCols), \"The output # of columns (\" + outputCols + \") must be an integer. Change \" + \"the stride and/or zero pad parameters\");\n    return [outputRows, outputCols, outDepth];\n}\nfunction computeDefaultPad(inputShape, fieldSize, stride, dilation) {\n    if (dilation === void 0) {\n        dilation = 1;\n    }\n    var effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);\n    return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);\n}\nexports.computeDefaultPad = computeDefaultPad;\nfunction parseTupleParam(param) {\n    return typeof param === 'number' ? [param, param] : param;\n}\nfunction getEffectiveFilterSize(filterSize, dilation) {\n    if (dilation <= 1) {\n        return filterSize;\n    }\n    return filterSize + (filterSize - 1) * (dilation - 1);\n}\nfunction getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, filterHeight, filterWidth, roundingMode) {\n    var padInfo;\n    var outHeight;\n    var outWidth;\n    if (typeof pad === 'number') {\n        padInfo = { top: pad, bottom: pad, left: pad, right: pad };\n        var outShape = computeOutputShape3D([inHeight, inWidth, 1], filterHeight, 1, strideHeight, pad, roundingMode);\n        outHeight = outShape[0];\n        outWidth = outShape[1];\n    } else if (pad === 'same') {\n        outHeight = Math.ceil(inHeight / strideHeight);\n        outWidth = Math.ceil(inWidth / strideWidth);\n        var padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;\n        var padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;\n        var top_1 = Math.floor(padAlongHeight / 2);\n        var bottom = padAlongHeight - top_1;\n        var left = Math.floor(padAlongWidth / 2);\n        var right = padAlongWidth - left;\n        padInfo = { top: top_1, bottom: bottom, left: left, right: right };\n    } else if (pad === 'valid') {\n        padInfo = { top: 0, bottom: 0, left: 0, right: 0 };\n        outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n        outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n    } else {\n        throw Error(\"Unknown padding parameter: \" + pad);\n    }\n    return { padInfo: padInfo, outHeight: outHeight, outWidth: outWidth };\n}\nfunction conditionalRound(value, roundingMode) {\n    if (!roundingMode) {\n        return value;\n    }\n    switch (roundingMode) {\n        case 'round':\n            return Math.round(value);\n        case 'ceil':\n            return Math.ceil(value);\n        case 'floor':\n            return Math.floor(value);\n        default:\n            throw new Error(\"Unknown roundingMode \" + roundingMode);\n    }\n}\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image_ops.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image_ops.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ../doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar operation_1 = __webpack_require__(/*! ./operation */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js\");\nvar ImageOps = function () {\n    function ImageOps() {}\n    ImageOps.resizeBilinear = function (images, size, alignCorners) {\n        if (alignCorners === void 0) {\n            alignCorners = false;\n        }\n        util.assert(images.rank === 3 || images.rank === 4, \"Error in resizeBilinear: x must be rank 3 or 4, but got \" + (\"rank \" + images.rank + \".\"));\n        util.assert(size.length === 2, \"Error in resizeBilinear: new shape must 2D, but got shape \" + (size + \".\"));\n        var batchImages = images;\n        var reshapedTo4D = false;\n        if (images.rank === 3) {\n            reshapedTo4D = true;\n            batchImages = images.as4D(1, images.shape[0], images.shape[1], images.shape[2]);\n        }\n        var newHeight = size[0],\n            newWidth = size[1];\n        var res = environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.resizeBilinear(batchImages, newHeight, newWidth, alignCorners);\n        }, { batchImages: batchImages });\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Images', namespace: 'image' }), operation_1.operation], ImageOps, \"resizeBilinear\", null);\n    return ImageOps;\n}();\nexports.ImageOps = ImageOps;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/image_ops.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ../doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar types = __webpack_require__(/*! ../types */ \"./node_modules/@tensorflow/tfjs-core/dist/types.js\");\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar broadcast_util = __webpack_require__(/*! ./broadcast_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js\");\nvar operation_1 = __webpack_require__(/*! ./operation */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js\");\nvar LogicalOps = function () {\n    function LogicalOps() {}\n    LogicalOps.logicalNot = function (x) {\n        util.assert(x.dtype === 'bool', 'Error Array must be of type bool.');\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.logicalNot(x);\n        }, { x: x });\n    };\n    LogicalOps.logicalAnd = function (a, b) {\n        util.assert(a.dtype === 'bool' && b.dtype === 'bool', 'Error Array must be of type bool.');\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.logicalAnd(a, b);\n        }, { a: a, b: b });\n    };\n    LogicalOps.logicalOr = function (a, b) {\n        util.assert(a.dtype === 'bool' && b.dtype === 'bool', 'Error Array must be of type bool.');\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.logicalOr(a, b);\n        }, { a: a, b: b });\n    };\n    LogicalOps.logicalXor = function (a, b) {\n        util.assert(a.dtype === 'bool' && b.dtype === 'bool', 'Error Array must be of type bool.');\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.logicalXor(a, b);\n        }, { a: a, b: b });\n    };\n    LogicalOps.where = function (condition, a, b) {\n        util.assert(condition.dtype === 'bool' || a.dtype === 'bool' || b.dtype === 'bool', 'Error Array must be of type bool.');\n        util.assertShapesMatch(a.shape, b.shape, 'Error in where: ');\n        if (condition.rank === 1) {\n            util.assert(condition.shape[0] === a.shape[0], 'The first dimension of `a` must match the size of `condition`.');\n        } else {\n            util.assertShapesMatch(condition.shape, b.shape, 'Error in where: ');\n        }\n        var dtype = types.upcastType(a.dtype, b.dtype);\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.where(condition, a, b, dtype);\n        }, { condition: condition, a: a, b: b });\n    };\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Logical' }), operation_1.operation], LogicalOps, \"logicalNot\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Logical' }), operation_1.operation], LogicalOps, \"logicalAnd\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Logical' }), operation_1.operation], LogicalOps, \"logicalOr\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Logical' }), operation_1.operation], LogicalOps, \"logicalXor\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Logical' }), operation_1.operation], LogicalOps, \"where\", null);\n    return LogicalOps;\n}();\nexports.LogicalOps = LogicalOps;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/lrn.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/lrn.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ../doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar operation_1 = __webpack_require__(/*! ./operation */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js\");\nvar LRNOps = function () {\n    function LRNOps() {}\n    LRNOps.localResponseNormalization = function (x, radius, bias, alpha, beta, normRegion) {\n        if (radius === void 0) {\n            radius = 5;\n        }\n        if (bias === void 0) {\n            bias = 1;\n        }\n        if (alpha === void 0) {\n            alpha = 1;\n        }\n        if (beta === void 0) {\n            beta = 0.5;\n        }\n        if (normRegion === void 0) {\n            normRegion = 'acrossChannels';\n        }\n        util.assert(x.rank === 4 || x.rank === 3, \"Error in localResponseNormalization: x must be rank 3 or 4 but got\\n               rank \" + x.rank + \".\");\n        util.assert(util.isInt(radius), \"Error in localResponseNormalization3D: radius must be an integer\\n                     but got radius \" + radius + \".\");\n        var x4D = x;\n        var reshapedTo4D = false;\n        if (x.rank === 3) {\n            reshapedTo4D = true;\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n        }\n        var res = environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.localResponseNormalization4D(x4D, radius, bias, alpha, beta, normRegion);\n        }, { x4D: x4D });\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        } else {\n            return res;\n        }\n    };\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Normalization' }), operation_1.operation], LRNOps, \"localResponseNormalization\", null);\n    return LRNOps;\n}();\nexports.LRNOps = LRNOps;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/lrn.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/lstm.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/lstm.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ../doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar operation_1 = __webpack_require__(/*! ./operation */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js\");\nvar LSTMOps = function () {\n    function LSTMOps() {}\n    LSTMOps.multiRNNCell = function (lstmCells, data, c, h) {\n        var input = data;\n        var newStates = [];\n        for (var i = 0; i < lstmCells.length; i++) {\n            var output = lstmCells[i](input, c[i], h[i]);\n            newStates.push(output[0]);\n            newStates.push(output[1]);\n            input = output[1];\n        }\n        var newC = [];\n        var newH = [];\n        for (var i = 0; i < newStates.length; i += 2) {\n            newC.push(newStates[i]);\n            newH.push(newStates[i + 1]);\n        }\n        return [newC, newH];\n    };\n    LSTMOps.basicLSTMCell = function (forgetBias, lstmKernel, lstmBias, data, c, h) {\n        var combined = data.concat(h, 1);\n        var weighted = combined.matMul(lstmKernel);\n        var res = weighted.add(lstmBias);\n        var batchSize = res.shape[0];\n        var sliceCols = res.shape[1] / 4;\n        var sliceSize = [batchSize, sliceCols];\n        var i = res.slice([0, 0], sliceSize);\n        var j = res.slice([0, sliceCols], sliceSize);\n        var f = res.slice([0, sliceCols * 2], sliceSize);\n        var o = res.slice([0, sliceCols * 3], sliceSize);\n        var newC = i.sigmoid().mulStrict(j.tanh()).addStrict(c.mulStrict(forgetBias.add(f).sigmoid()));\n        var newH = newC.tanh().mulStrict(o.sigmoid());\n        return [newC, newH];\n    };\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'RNN' }), operation_1.operation], LSTMOps, \"multiRNNCell\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'RNN' }), operation_1.operation], LSTMOps, \"basicLSTMCell\", null);\n    return LSTMOps;\n}();\nexports.LSTMOps = LSTMOps;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/lstm.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/matmul.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/matmul.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ../doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar operation_1 = __webpack_require__(/*! ./operation */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js\");\nvar MatmulOps = function () {\n    function MatmulOps() {}\n    MatmulOps.matMul = function (a, b, transposeA, transposeB) {\n        if (transposeA === void 0) {\n            transposeA = false;\n        }\n        if (transposeB === void 0) {\n            transposeB = false;\n        }\n        var innerShapeA = transposeA ? a.shape[0] : a.shape[1];\n        var innerShapeB = transposeB ? b.shape[1] : b.shape[0];\n        util.assert(a.rank === 2 && b.rank === 2, \"Error in matMul: inputs must be rank 2, got ranks \" + a.rank + (\" and \" + b.rank + \".\"));\n        util.assert(innerShapeA === innerShapeB, \"Error in matMul: inner shapes (\" + innerShapeA + \") and (\" + (innerShapeB + \") of Tensors with shapes \" + a.shape + \" and \") + (b.shape + \" and transposeA=\" + transposeA) + (\" and transposeB=\" + transposeB + \" must match.\"));\n        var grad = function (dy) {\n            if (transposeA || transposeB) {\n                throw new Error(\"Backprop for transposed MatMul not yet implemented.\");\n            }\n            return {\n                a: function () {\n                    return dy.matMul(b.toFloat(), false, true);\n                },\n                b: function () {\n                    return a.toFloat().matMul(dy, true, false);\n                }\n            };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.matMul(a, b, transposeA, transposeB);\n        }, { a: a, b: b }, grad);\n    };\n    MatmulOps.vectorTimesMatrix = function (v, matrix) {\n        util.assert(v.rank === 1, \"Error in vectorTimesMatrix: first input must be rank 1, but got \" + (\"rank \" + v.rank + \".\"));\n        util.assert(matrix.rank === 2, \"Error in vectorTimesMatrix: second input must be rank 2, but got \" + (\"rank \" + matrix.rank + \".\"));\n        util.assert(v.size === matrix.shape[0], \"Error in vectorTimesMatrix: size of vector (\" + v.size + \") \" + (\"must match first dimension of matrix (\" + matrix.shape[0] + \")\"));\n        return v.as2D(1, -1).matMul(matrix).as1D();\n    };\n    MatmulOps.matrixTimesVector = function (matrix, v) {\n        util.assert(v.rank === 1, \"Error in matrixTimesVector: second input must rank 1, but got \" + (\"rank \" + v.rank + \".\"));\n        util.assert(matrix.rank === 2, \"Error in matrixTimesVector: first input must be a rank 2, but got \" + (\"rank \" + matrix.rank + \".\"));\n        util.assert(v.size === matrix.shape[1], \"Error in matrixTimesVector: size of first rank 1 input \" + v.size + \" \" + \"must match inner dimension of second rank 2 input, but got \" + (\"shape \" + matrix.shape + \".\"));\n        return matrix.matMul(v.as2D(-1, 1)).as1D();\n    };\n    MatmulOps.dotProduct = function (v1, v2) {\n        util.assert(v1.rank === 1 && v2.rank === 1, \"Error in dotProduct: inputs must be rank 1, but got ranks \" + (v1.rank + \" and \" + v2.rank + \".\"));\n        util.assert(v1.size === v2.size, \"Error in dotProduct: size of inputs (\" + v1.size + \") and (\" + (v2.size + \") must match.\"));\n        return v1.as2D(1, -1).matMul(v2.as2D(-1, 1)).asScalar();\n    };\n    MatmulOps.outerProduct = function (v1, v2) {\n        util.assert(v1.rank === 1 && v2.rank === 1, \"Error in outerProduct: inputs must be rank 1, but got ranks \" + (v1.rank + \" and \" + v2.rank + \".\"));\n        return v1.as2D(-1, 1).matMul(v2.as2D(1, -1));\n    };\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Matrices' }), operation_1.operation], MatmulOps, \"matMul\", null);\n    __decorate([operation_1.operation], MatmulOps, \"vectorTimesMatrix\", null);\n    __decorate([operation_1.operation], MatmulOps, \"matrixTimesVector\", null);\n    __decorate([operation_1.operation], MatmulOps, \"dotProduct\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Matrices' }), operation_1.operation], MatmulOps, \"outerProduct\", null);\n    return MatmulOps;\n}();\nexports.MatmulOps = MatmulOps;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/matmul.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/norm.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/norm.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ../doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar axis_util = __webpack_require__(/*! ./axis_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js\");\nvar operation_1 = __webpack_require__(/*! ./operation */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js\");\nvar ops = __webpack_require__(/*! ./ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\");\nvar NormOps = function () {\n    function NormOps() {}\n    NormOps.norm = function (x, ord, axis, keepDims) {\n        if (ord === void 0) {\n            ord = 'euclidean';\n        }\n        if (axis === void 0) {\n            axis = null;\n        }\n        if (keepDims === void 0) {\n            keepDims = false;\n        }\n        var norm = normImpl(x, ord, axis);\n        var keepDimsShape = norm.shape;\n        if (keepDims) {\n            var axes = axis_util.parseAxisParam(axis, x.shape);\n            keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);\n        }\n        return norm.reshape(keepDimsShape);\n    };\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Matrices' }), operation_1.operation], NormOps, \"norm\", null);\n    return NormOps;\n}();\nexports.NormOps = NormOps;\nfunction normImpl(x, p, axis) {\n    if (axis === void 0) {\n        axis = null;\n    }\n    if (x.rank === 0) {\n        return x.abs();\n    }\n    if (x.rank !== 1 && axis === null) {\n        return normImpl(x.reshape([-1]), p, axis);\n    }\n    if (x.rank === 1 || typeof axis === 'number' || axis instanceof Array && axis.length === 1) {\n        if (p === 1) {\n            return x.abs().sum(axis);\n        }\n        if (p === Infinity) {\n            return x.abs().max(axis);\n        }\n        if (p === -Infinity) {\n            return x.abs().min(axis);\n        }\n        if (p === 'euclidean' || p === 2) {\n            return x.abs().pow(ops.scalar(2, 'int32')).sum(axis).sqrt();\n        }\n        throw new Error(\"Error in norm: invalid ord value: \" + p);\n    }\n    if (axis instanceof Array && axis.length === 2) {\n        if (p === 1) {\n            return x.abs().sum(axis[0]).max(axis[1] - 1);\n        }\n        if (p === Infinity) {\n            return x.abs().sum(axis[1]).max(axis[0]);\n        }\n        if (p === -Infinity) {\n            return x.abs().sum(axis[1]).min(axis[0]);\n        }\n        if (p === 'fro' || p === 'euclidean') {\n            return x.square().sum(axis).sqrt();\n        }\n        throw new Error(\"Error in norm: invalid ord value: \" + p);\n    }\n    throw new Error(\"Error in norm: invalid axis: \" + axis);\n}\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/norm.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar globals_1 = __webpack_require__(/*! ../globals */ \"./node_modules/@tensorflow/tfjs-core/dist/globals.js\");\nfunction operation(target, name, descriptor) {\n    var fn = descriptor.value;\n    descriptor.value = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return globals_1.tidy(name, function () {\n            return fn.apply(void 0, args);\n        });\n    };\n    return descriptor;\n}\nexports.operation = operation;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar array_ops_1 = __webpack_require__(/*! ./array_ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/array_ops.js\");\nvar batchnorm_1 = __webpack_require__(/*! ./batchnorm */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js\");\nvar binary_ops_1 = __webpack_require__(/*! ./binary_ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js\");\nvar compare_1 = __webpack_require__(/*! ./compare */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/compare.js\");\nvar concat_1 = __webpack_require__(/*! ./concat */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js\");\nvar conv_1 = __webpack_require__(/*! ./conv */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/conv.js\");\nvar image_ops_1 = __webpack_require__(/*! ./image_ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/image_ops.js\");\nvar logical_ops_1 = __webpack_require__(/*! ./logical_ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/logical_ops.js\");\nvar lrn_1 = __webpack_require__(/*! ./lrn */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/lrn.js\");\nvar lstm_1 = __webpack_require__(/*! ./lstm */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/lstm.js\");\nvar matmul_1 = __webpack_require__(/*! ./matmul */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/matmul.js\");\nvar norm_1 = __webpack_require__(/*! ./norm */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/norm.js\");\nvar pool_1 = __webpack_require__(/*! ./pool */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/pool.js\");\nvar reduction_ops_1 = __webpack_require__(/*! ./reduction_ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/reduction_ops.js\");\nvar reverse_1 = __webpack_require__(/*! ./reverse */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js\");\nvar slice_1 = __webpack_require__(/*! ./slice */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js\");\nvar softmax_1 = __webpack_require__(/*! ./softmax */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js\");\nvar transpose_1 = __webpack_require__(/*! ./transpose */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js\");\nvar unary_ops_1 = __webpack_require__(/*! ./unary_ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/unary_ops.js\");\nexports.batchNormalization = batchnorm_1.BatchNormOps.batchNormalization;\nexports.batchNormalization2d = batchnorm_1.BatchNormOps.batchNormalization2d;\nexports.batchNormalization3d = batchnorm_1.BatchNormOps.batchNormalization3d;\nexports.batchNormalization4d = batchnorm_1.BatchNormOps.batchNormalization4d;\nexports.concat = concat_1.ConcatOps.concat;\nexports.concat1d = concat_1.ConcatOps.concat1d;\nexports.concat2d = concat_1.ConcatOps.concat2d;\nexports.concat3d = concat_1.ConcatOps.concat3d;\nexports.concat4d = concat_1.ConcatOps.concat4d;\nexports.conv1d = conv_1.ConvOps.conv1d;\nexports.conv2d = conv_1.ConvOps.conv2d;\nexports.conv2dTranspose = conv_1.ConvOps.conv2dTranspose;\nexports.depthwiseConv2d = conv_1.ConvOps.depthwiseConv2d;\nexports.matMul = matmul_1.MatmulOps.matMul;\nexports.matrixTimesVector = matmul_1.MatmulOps.matrixTimesVector;\nexports.outerProduct = matmul_1.MatmulOps.outerProduct;\nexports.vectorTimesMatrix = matmul_1.MatmulOps.vectorTimesMatrix;\nexports.avgPool = pool_1.PoolOps.avgPool;\nexports.maxPool = pool_1.PoolOps.maxPool;\nexports.minPool = pool_1.PoolOps.minPool;\nexports.transpose = transpose_1.TransposeOps.transpose;\nexports.reverse = reverse_1.ReverseOps.reverse;\nexports.reverse1d = reverse_1.ReverseOps.reverse1d;\nexports.reverse2d = reverse_1.ReverseOps.reverse2d;\nexports.reverse3d = reverse_1.ReverseOps.reverse3d;\nexports.reverse4d = reverse_1.ReverseOps.reverse4d;\nexports.slice = slice_1.SliceOps.slice;\nexports.slice1d = slice_1.SliceOps.slice1d;\nexports.slice2d = slice_1.SliceOps.slice2d;\nexports.slice3d = slice_1.SliceOps.slice3d;\nexports.slice4d = slice_1.SliceOps.slice4d;\nexports.argMax = reduction_ops_1.ReductionOps.argMax;\nexports.argMin = reduction_ops_1.ReductionOps.argMin;\nexports.logSumExp = reduction_ops_1.ReductionOps.logSumExp;\nexports.max = reduction_ops_1.ReductionOps.max;\nexports.mean = reduction_ops_1.ReductionOps.mean;\nexports.min = reduction_ops_1.ReductionOps.min;\nexports.moments = reduction_ops_1.ReductionOps.moments;\nexports.sum = reduction_ops_1.ReductionOps.sum;\nexports.equal = compare_1.CompareOps.equal;\nexports.equalStrict = compare_1.CompareOps.equalStrict;\nexports.greater = compare_1.CompareOps.greater;\nexports.greaterStrict = compare_1.CompareOps.greaterStrict;\nexports.greaterEqual = compare_1.CompareOps.greaterEqual;\nexports.greaterEqualStrict = compare_1.CompareOps.greaterEqualStrict;\nexports.less = compare_1.CompareOps.less;\nexports.lessStrict = compare_1.CompareOps.lessStrict;\nexports.lessEqual = compare_1.CompareOps.lessEqual;\nexports.lessEqualStrict = compare_1.CompareOps.lessEqualStrict;\nexports.notEqual = compare_1.CompareOps.notEqual;\nexports.notEqualStrict = compare_1.CompareOps.notEqualStrict;\nexports.logicalNot = logical_ops_1.LogicalOps.logicalNot;\nexports.logicalAnd = logical_ops_1.LogicalOps.logicalAnd;\nexports.logicalOr = logical_ops_1.LogicalOps.logicalOr;\nexports.logicalXor = logical_ops_1.LogicalOps.logicalXor;\nexports.where = logical_ops_1.LogicalOps.where;\nexports.abs = unary_ops_1.UnaryOps.abs;\nexports.acos = unary_ops_1.UnaryOps.acos;\nexports.asin = unary_ops_1.UnaryOps.asin;\nexports.atan = unary_ops_1.UnaryOps.atan;\nexports.ceil = unary_ops_1.UnaryOps.ceil;\nexports.clipByValue = unary_ops_1.UnaryOps.clipByValue;\nexports.cos = unary_ops_1.UnaryOps.cos;\nexports.cosh = unary_ops_1.UnaryOps.cosh;\nexports.elu = unary_ops_1.UnaryOps.elu;\nexports.exp = unary_ops_1.UnaryOps.exp;\nexports.floor = unary_ops_1.UnaryOps.floor;\nexports.leakyRelu = unary_ops_1.UnaryOps.leakyRelu;\nexports.log = unary_ops_1.UnaryOps.log;\nexports.log1p = unary_ops_1.UnaryOps.log1p;\nexports.neg = unary_ops_1.UnaryOps.neg;\nexports.prelu = unary_ops_1.UnaryOps.prelu;\nexports.relu = unary_ops_1.UnaryOps.relu;\nexports.selu = unary_ops_1.UnaryOps.selu;\nexports.sigmoid = unary_ops_1.UnaryOps.sigmoid;\nexports.sin = unary_ops_1.UnaryOps.sin;\nexports.sinh = unary_ops_1.UnaryOps.sinh;\nexports.sqrt = unary_ops_1.UnaryOps.sqrt;\nexports.square = unary_ops_1.UnaryOps.square;\nexports.step = unary_ops_1.UnaryOps.step;\nexports.tan = unary_ops_1.UnaryOps.tan;\nexports.tanh = unary_ops_1.UnaryOps.tanh;\nexports.add = binary_ops_1.BinaryOps.add;\nexports.addStrict = binary_ops_1.BinaryOps.addStrict;\nexports.div = binary_ops_1.BinaryOps.div;\nexports.divStrict = binary_ops_1.BinaryOps.divStrict;\nexports.maximum = binary_ops_1.BinaryOps.maximum;\nexports.maximumStrict = binary_ops_1.BinaryOps.maximumStrict;\nexports.minimum = binary_ops_1.BinaryOps.minimum;\nexports.minimumStrict = binary_ops_1.BinaryOps.minimumStrict;\nexports.mul = binary_ops_1.BinaryOps.mul;\nexports.mulStrict = binary_ops_1.BinaryOps.mulStrict;\nexports.pow = binary_ops_1.BinaryOps.pow;\nexports.powStrict = binary_ops_1.BinaryOps.powStrict;\nexports.sub = binary_ops_1.BinaryOps.sub;\nexports.subStrict = binary_ops_1.BinaryOps.subStrict;\nexports.norm = norm_1.NormOps.norm;\nexports.cast = array_ops_1.ArrayOps.cast;\nexports.clone = array_ops_1.ArrayOps.clone;\nexports.fromPixels = array_ops_1.ArrayOps.fromPixels;\nexports.ones = array_ops_1.ArrayOps.ones;\nexports.onesLike = array_ops_1.ArrayOps.onesLike;\nexports.zeros = array_ops_1.ArrayOps.zeros;\nexports.zerosLike = array_ops_1.ArrayOps.zerosLike;\nexports.rand = array_ops_1.ArrayOps.rand;\nexports.randomNormal = array_ops_1.ArrayOps.randomNormal;\nexports.truncatedNormal = array_ops_1.ArrayOps.truncatedNormal;\nexports.randomUniform = array_ops_1.ArrayOps.randomUniform;\nexports.multinomial = array_ops_1.ArrayOps.multinomial;\nexports.reshape = array_ops_1.ArrayOps.reshape;\nexports.squeeze = array_ops_1.ArrayOps.squeeze;\nexports.tile = array_ops_1.ArrayOps.tile;\nexports.gather = array_ops_1.ArrayOps.gather;\nexports.oneHot = array_ops_1.ArrayOps.oneHot;\nexports.linspace = array_ops_1.ArrayOps.linspace;\nexports.range = array_ops_1.ArrayOps.range;\nexports.buffer = array_ops_1.ArrayOps.buffer;\nexports.fill = array_ops_1.ArrayOps.fill;\nexports.tensor = array_ops_1.ArrayOps.tensor;\nexports.scalar = array_ops_1.ArrayOps.scalar;\nexports.tensor1d = array_ops_1.ArrayOps.tensor1d;\nexports.tensor2d = array_ops_1.ArrayOps.tensor2d;\nexports.tensor3d = array_ops_1.ArrayOps.tensor3d;\nexports.tensor4d = array_ops_1.ArrayOps.tensor4d;\nexports.print = array_ops_1.ArrayOps.print;\nexports.expandDims = array_ops_1.ArrayOps.expandDims;\nexports.stack = array_ops_1.ArrayOps.stack;\nexports.pad = array_ops_1.ArrayOps.pad;\nexports.pad1d = array_ops_1.ArrayOps.pad1d;\nexports.pad2d = array_ops_1.ArrayOps.pad2d;\nexports.pad3d = array_ops_1.ArrayOps.pad3d;\nexports.pad4d = array_ops_1.ArrayOps.pad4d;\nexports.basicLSTMCell = lstm_1.LSTMOps.basicLSTMCell;\nexports.multiRNNCell = lstm_1.LSTMOps.multiRNNCell;\nexports.softmax = softmax_1.SoftmaxOps.softmax;\nexports.localResponseNormalization = lrn_1.LRNOps.localResponseNormalization;\nvar tensor_1 = __webpack_require__(/*! ../tensor */ \"./node_modules/@tensorflow/tfjs-core/dist/tensor.js\");\nvar types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@tensorflow/tfjs-core/dist/types.js\");\n[tensor_1.Tensor, types_1.Rank];\nexports.losses = {\n    softmaxCrossEntropy: softmax_1.SoftmaxOps.softmaxCrossEntropy\n};\nexports.image = {\n    resizeBilinear: image_ops_1.ImageOps.resizeBilinear\n};\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/pool.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/pool.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ../doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar conv_util = __webpack_require__(/*! ./conv_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js\");\nvar operation_1 = __webpack_require__(/*! ./operation */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js\");\nvar PoolOps = function () {\n    function PoolOps() {}\n    PoolOps.maxPool = function (x, filterSize, strides, pad, dimRoundingMode) {\n        var x4D = x;\n        var reshapedTo4D = false;\n        if (x.rank === 3) {\n            reshapedTo4D = true;\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n        }\n        util.assert(x4D.rank === 4, \"Error in maxPool: input must be rank 4 but got rank \" + x4D.rank + \".\");\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in maxPool: pad must be an integer when using, \" + (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        var convInfo = conv_util.computePool2DInfo(x4D.shape, filterSize, strides, pad, dimRoundingMode);\n        var grad = function (dy) {\n            return {\n                x: function () {\n                    return PoolOps.maxPoolBackprop(dy, x4D, filterSize, strides, pad);\n                }\n            };\n        };\n        var res = environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.maxPool(x4D, convInfo);\n        }, { x: x4D }, grad);\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    PoolOps.maxPoolBackprop = function (dy, input, filterSize, strides, pad, dimRoundingMode) {\n        util.assert(input.rank === dy.rank, \"Rank of input (\" + input.rank + \") does not match rank of dy (\" + dy.rank + \")\");\n        var input4D = input;\n        var dy4D = dy;\n        var reshapedTo4D = false;\n        if (input.rank === 3) {\n            reshapedTo4D = true;\n            input4D = input.as4D(1, input.shape[0], input.shape[1], input.shape[2]);\n            dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n        }\n        util.assert(dy4D.rank === 4, \"Error in maxPoolBackprop: dy must be rank 4 but got rank \" + (dy4D.rank + \".\"));\n        util.assert(input4D.rank === 4, \"Error in maxPoolBackprop: input must be rank 4 but got rank \" + (input4D.rank + \".\"));\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in maxPoolBackprop: pad must be an integer when using, \" + (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        var convInfo = conv_util.computePool2DInfo(input4D.shape, filterSize, strides, pad, dimRoundingMode);\n        var res = environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.maxPoolBackprop(dy4D, input4D, convInfo);\n        }, { dy4D: dy4D, input4D: input4D });\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    PoolOps.minPool = function (input, filterSize, strides, pad, dimRoundingMode) {\n        var input4D = input;\n        var reshapedTo4D = false;\n        if (input.rank === 3) {\n            reshapedTo4D = true;\n            input4D = input.as4D(1, input.shape[0], input.shape[1], input.shape[2]);\n        }\n        util.assert(input4D.rank === 4, \"Error in minPool: x must be rank 4 but got rank \" + input4D.rank + \".\");\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in minPool: pad must be an integer when using, \" + (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        var convInfo = conv_util.computePool2DInfo(input4D.shape, filterSize, strides, pad, dimRoundingMode);\n        var res = environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.minPool(input4D, convInfo);\n        }, { input4D: input4D });\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    PoolOps.avgPool = function (x, filterSize, strides, pad, dimRoundingMode) {\n        var x4D = x;\n        var reshapedTo4D = false;\n        if (x.rank === 3) {\n            reshapedTo4D = true;\n            x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n        }\n        util.assert(x4D.rank === 4, \"Error in avgPool: x must be rank 4 but got rank \" + x4D.rank + \".\");\n        if (dimRoundingMode != null) {\n            util.assert(util.isInt(pad), \"Error in avgPool: pad must be an integer when using, \" + (\"dimRoundingMode \" + dimRoundingMode + \" but got pad \" + pad + \".\"));\n        }\n        var convInfo = conv_util.computePool2DInfo(x4D.shape, filterSize, strides, pad);\n        var grad = function (dy) {\n            return {\n                x: function () {\n                    return PoolOps.avgPoolBackprop(dy, x4D, filterSize, strides, pad);\n                }\n            };\n        };\n        var res = environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.avgPool(x4D, convInfo);\n        }, { x: x4D }, grad);\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    PoolOps.avgPoolBackprop = function (dy, input, filterSize, strides, pad) {\n        util.assert(input.rank === dy.rank, \"Rank of input (\" + input.rank + \") does not match rank of dy (\" + dy.rank + \")\");\n        var input4D = input;\n        var dy4D = dy;\n        var reshapedTo4D = false;\n        if (input.rank === 3) {\n            reshapedTo4D = true;\n            input4D = input.as4D(1, input.shape[0], input.shape[1], input.shape[2]);\n            dy4D = dy.as4D(1, dy.shape[0], dy.shape[1], dy.shape[2]);\n        }\n        util.assert(dy4D.rank === 4, \"Error in avgPoolBackprop: dy must be rank 4 but got rank \" + (dy4D.rank + \".\"));\n        util.assert(input4D.rank === 4, \"Error in avgPoolBackprop: input must be rank 4 but got rank \" + (input4D.rank + \".\"));\n        var convInfo = conv_util.computePool2DInfo(input4D.shape, filterSize, strides, pad);\n        var res = environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.avgPoolBackprop(dy4D, input4D, convInfo);\n        }, { dy4D: dy4D, input4D: input4D });\n        if (reshapedTo4D) {\n            return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n        }\n        return res;\n    };\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }), operation_1.operation], PoolOps, \"maxPool\", null);\n    __decorate([operation_1.operation], PoolOps, \"maxPoolBackprop\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }), operation_1.operation], PoolOps, \"minPool\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Convolution' }), operation_1.operation], PoolOps, \"avgPool\", null);\n    __decorate([operation_1.operation], PoolOps, \"avgPoolBackprop\", null);\n    return PoolOps;\n}();\nexports.PoolOps = PoolOps;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/pool.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/rand.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/rand.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar seedrandom = __webpack_require__(/*! seedrandom */ \"./node_modules/seedrandom/index.js\");\nvar MPRandGauss = function () {\n    function MPRandGauss(mean, stdDeviation, dtype, truncated, seed) {\n        this.mean = mean;\n        this.stdDev = stdDeviation;\n        this.dtype = dtype;\n        this.nextVal = NaN;\n        this.truncated = truncated;\n        if (this.truncated) {\n            this.upper = this.mean + this.stdDev * 2;\n            this.lower = this.mean - this.stdDev * 2;\n        }\n        var seedValue = seed ? seed : Math.random();\n        this.random = seedrandom.alea(seedValue.toString());\n    }\n    MPRandGauss.prototype.nextValue = function () {\n        if (!isNaN(this.nextVal)) {\n            var value = this.nextVal;\n            this.nextVal = NaN;\n            return value;\n        }\n        var resultX, resultY;\n        var isValid = false;\n        while (!isValid) {\n            var v1 = void 0,\n                v2 = void 0,\n                s = void 0;\n            do {\n                v1 = 2 * this.random() - 1;\n                v2 = 2 * this.random() - 1;\n                s = v1 * v1 + v2 * v2;\n            } while (s >= 1 || s === 0);\n            var mul = Math.sqrt(-2.0 * Math.log(s) / s);\n            resultX = this.mean + this.stdDev * v1 * mul;\n            resultY = this.mean + this.stdDev * v2 * mul;\n            if (!this.truncated || this.isValidTruncated(resultX)) {\n                isValid = true;\n            }\n        }\n        if (!this.truncated || this.isValidTruncated(resultY)) {\n            this.nextVal = this.convertValue(resultY);\n        }\n        return this.convertValue(resultX);\n    };\n    MPRandGauss.prototype.convertValue = function (value) {\n        if (this.dtype == null || this.dtype === 'float32') {\n            return value;\n        }\n        return Math.round(value);\n    };\n    MPRandGauss.prototype.isValidTruncated = function (value) {\n        return value <= this.upper && value >= this.lower;\n    };\n    return MPRandGauss;\n}();\nexports.MPRandGauss = MPRandGauss;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/rand.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/reduce_util.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/reduce_util.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PARALLELIZE_THRESHOLD = 30;\nfunction computeOptimalWindowSize(inSize) {\n    if (inSize <= exports.PARALLELIZE_THRESHOLD) {\n        return inSize;\n    }\n    return nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n}\nexports.computeOptimalWindowSize = computeOptimalWindowSize;\nfunction nearestDivisor(size, start) {\n    for (var i = start; i < size; ++i) {\n        if (size % i === 0) {\n            return i;\n        }\n    }\n    return size;\n}\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/reduce_util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/reduction_ops.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/reduction_ops.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ../doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar globals_1 = __webpack_require__(/*! ../globals */ \"./node_modules/@tensorflow/tfjs-core/dist/globals.js\");\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar axis_util = __webpack_require__(/*! ./axis_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js\");\nvar operation_1 = __webpack_require__(/*! ./operation */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js\");\nvar ops = __webpack_require__(/*! ./ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\");\nvar ReductionOps = function () {\n    function ReductionOps() {}\n    ReductionOps.logSumExp = function (input, axis, keepDims) {\n        if (axis === void 0) {\n            axis = null;\n        }\n        if (keepDims === void 0) {\n            keepDims = false;\n        }\n        var axes = axis_util.parseAxisParam(axis, input.shape);\n        var xMax = input.max(axes, true);\n        var a = input.sub(xMax);\n        var b = a.exp();\n        var c = b.sum(axes);\n        var d = c.log();\n        var res = xMax.reshape(d.shape).add(d);\n        if (keepDims) {\n            var newShape = axis_util.expandShapeToKeepDim(res.shape, axes);\n            return res.reshape(newShape);\n        }\n        return res;\n    };\n    ReductionOps.sum = function (x, axis, keepDims) {\n        if (axis === void 0) {\n            axis = null;\n        }\n        if (keepDims === void 0) {\n            keepDims = false;\n        }\n        var axes = axis_util.parseAxisParam(axis, x.shape);\n        var customOp = globals_1.customGrad(function (x) {\n            var permutation = axis_util.getAxesPermutation(axes, x.rank);\n            var reductionAxes = axes;\n            var permutedX = x;\n            if (permutation != null) {\n                permutedX = x.transpose(permutation);\n                reductionAxes = axis_util.getInnerMostAxes(reductionAxes.length, x.rank);\n            }\n            var value = environment_1.ENV.engine.runKernel(function (backend) {\n                return backend.sum(permutedX, reductionAxes);\n            }, { permutedX: permutedX });\n            if (keepDims) {\n                var newShape = axis_util.expandShapeToKeepDim(value.shape, axes);\n                value = value.reshape(newShape);\n            }\n            var gradFunc = function (dy) {\n                var expandedDyShape = x.shape.slice();\n                axes.forEach(function (axis) {\n                    expandedDyShape[axis] = 1;\n                });\n                var expandedDy = dy.reshape(expandedDyShape);\n                var derX = expandedDy.mul(ops.ones(x.shape, 'float32'));\n                return derX;\n            };\n            return { value: value, gradFunc: gradFunc };\n        });\n        return customOp(x);\n    };\n    ReductionOps.mean = function (x, axis, keepDims) {\n        if (axis === void 0) {\n            axis = null;\n        }\n        if (keepDims === void 0) {\n            keepDims = false;\n        }\n        var axes = axis_util.parseAxisParam(axis, x.shape);\n        var shapes = axis_util.computeOutAndReduceShapes(x.shape, axes);\n        var reduceShape = shapes[1];\n        var reduceSize = util.sizeFromShape(reduceShape);\n        var customOp = globals_1.customGrad(function (x) {\n            var reduceSizeScalar = ops.scalar(reduceSize);\n            var res = x.div(reduceSizeScalar);\n            var value = res.sum(axis, keepDims);\n            var gradFunc = function (dy) {\n                var expandedDyShape = x.shape.slice();\n                axes.forEach(function (axis) {\n                    expandedDyShape[axis] = 1;\n                });\n                var expandedDy = dy.reshape(expandedDyShape);\n                var derX = expandedDy.mul(ops.ones(x.shape, 'float32')).div(reduceSizeScalar);\n                return derX;\n            };\n            return { value: value, gradFunc: gradFunc };\n        });\n        return customOp(x);\n    };\n    ReductionOps.min = function (x, axis, keepDims) {\n        if (axis === void 0) {\n            axis = null;\n        }\n        if (keepDims === void 0) {\n            keepDims = false;\n        }\n        var origAxes = axis_util.parseAxisParam(axis, x.shape);\n        var axes = origAxes;\n        var permutedAxes = axis_util.getAxesPermutation(axes, x.rank);\n        if (permutedAxes != null) {\n            x = x.transpose(permutedAxes);\n            axes = axis_util.getInnerMostAxes(axes.length, x.rank);\n        }\n        var res = environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.min(x, axes);\n        }, { x: x });\n        if (keepDims) {\n            var newShape = axis_util.expandShapeToKeepDim(res.shape, origAxes);\n            return res.reshape(newShape);\n        }\n        return res;\n    };\n    ReductionOps.max = function (x, axis, keepDims) {\n        if (axis === void 0) {\n            axis = null;\n        }\n        if (keepDims === void 0) {\n            keepDims = false;\n        }\n        var origAxes = axis_util.parseAxisParam(axis, x.shape);\n        var axes = origAxes;\n        var permutedAxes = axis_util.getAxesPermutation(axes, x.rank);\n        if (permutedAxes != null) {\n            x = x.transpose(permutedAxes);\n            axes = axis_util.getInnerMostAxes(axes.length, x.rank);\n        }\n        var res = environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.max(x, axes);\n        }, { x: x });\n        if (keepDims) {\n            var newShape = axis_util.expandShapeToKeepDim(res.shape, origAxes);\n            return res.reshape(newShape);\n        }\n        return res;\n    };\n    ReductionOps.argMin = function (x, axis) {\n        if (axis === void 0) {\n            axis = null;\n        }\n        var axes = axis_util.parseAxisParam(axis, x.shape);\n        var permutedAxes = axis_util.getAxesPermutation(axes, x.rank);\n        if (permutedAxes != null) {\n            x = x.transpose(permutedAxes);\n            axes = axis_util.getInnerMostAxes(axes.length, x.rank);\n        }\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.argMin(x, axes);\n        }, { x: x });\n    };\n    ReductionOps.argMax = function (x, axis) {\n        if (axis === void 0) {\n            axis = null;\n        }\n        var axes = axis_util.parseAxisParam(axis, x.shape);\n        var permutedAxes = axis_util.getAxesPermutation(axes, x.rank);\n        if (permutedAxes != null) {\n            x = x.transpose(permutedAxes);\n            axes = axis_util.getInnerMostAxes(axes.length, x.rank);\n        }\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.argMax(x, axes);\n        }, { x: x });\n    };\n    ReductionOps.moments = function (x, axis, keepDims) {\n        if (axis === void 0) {\n            axis = null;\n        }\n        if (keepDims === void 0) {\n            keepDims = false;\n        }\n        var axes = axis_util.parseAxisParam(axis, x.shape);\n        var mean = x.mean(axes, keepDims);\n        var keepDimsShape = mean.shape;\n        if (!keepDims) {\n            keepDimsShape = axis_util.expandShapeToKeepDim(mean.shape, axes);\n        }\n        var devSquared = x.toFloat().sub(mean.reshape(keepDimsShape)).square();\n        var variance = devSquared.mean(axes, keepDims);\n        return { mean: mean, variance: variance };\n    };\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Reduction' }), operation_1.operation], ReductionOps, \"logSumExp\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Reduction' }), operation_1.operation], ReductionOps, \"sum\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Reduction' }), operation_1.operation], ReductionOps, \"mean\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Reduction' }), operation_1.operation], ReductionOps, \"min\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Reduction' }), operation_1.operation], ReductionOps, \"max\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Reduction' }), operation_1.operation], ReductionOps, \"argMin\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Reduction' }), operation_1.operation], ReductionOps, \"argMax\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Normalization' }), operation_1.operation], ReductionOps, \"moments\", null);\n    return ReductionOps;\n}();\nexports.ReductionOps = ReductionOps;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/reduction_ops.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ../doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar axis_util_1 = __webpack_require__(/*! ./axis_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js\");\nvar operation_1 = __webpack_require__(/*! ./operation */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js\");\nvar ReverseOps = function () {\n    function ReverseOps() {}\n    ReverseOps.reverse1d = function (x) {\n        util.assert(x.rank === 1, \"Error in reverse1D: x must be rank 1 but got\\n             rank \" + x.rank + \".\");\n        return ReverseOps.reverse(x, 0);\n    };\n    ReverseOps.reverse2d = function (x, axis) {\n        util.assert(x.rank === 2, \"Error in reverse2D: x must be rank 2 but got\\n             rank \" + x.rank + \".\");\n        return ReverseOps.reverse(x, axis);\n    };\n    ReverseOps.reverse3d = function (x, axis) {\n        util.assert(x.rank === 3, \"Error in reverse3D: x must be rank 3 but got\\n             rank \" + x.rank + \".\");\n        return ReverseOps.reverse(x, axis);\n    };\n    ReverseOps.reverse4d = function (x, axis) {\n        util.assert(x.rank === 4, \"Error in reverse4D: x must be rank 4 but got\\n             rank \" + x.rank + \".\");\n        return ReverseOps.reverse(x, axis);\n    };\n    ReverseOps.reverse = function (x, axis) {\n        if (x.rank === 0) {\n            return x.clone();\n        }\n        var axes = axis_util_1.parseAxisParam(axis, x.shape);\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.reverse(axes);\n                } };\n        };\n        var res = environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.reverse(x, axes);\n        }, { x: x }, grad);\n        return res.reshapeAs(x);\n    };\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }), operation_1.operation], ReverseOps, \"reverse\", null);\n    return ReverseOps;\n}();\nexports.ReverseOps = ReverseOps;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SELU_SCALEALPHA = 1.7580993408473768599402175208123;\nexports.SELU_SCALE = 1.0507009873554804934193349852946;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ../doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar operation_1 = __webpack_require__(/*! ./operation */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js\");\nvar slice_util = __webpack_require__(/*! ./slice_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js\");\nvar SliceOps = function () {\n    function SliceOps() {}\n    SliceOps.slice1d = function (x, begin, size) {\n        util.assert(x.rank === 1, \"slice1d expects a rank-1 tensor, but got a rank-\" + x.rank + \" tensor\");\n        return SliceOps.slice(x, [begin], [size]);\n    };\n    SliceOps.slice2d = function (x, begin, size) {\n        util.assert(x.rank === 2, \"slice1d expects a rank-2 tensor, but got a rank-\" + x.rank + \" tensor\");\n        return SliceOps.slice(x, begin, size);\n    };\n    SliceOps.slice3d = function (x, begin, size) {\n        util.assert(x.rank === 3, \"slice1d expects a rank-3 tensor, but got a rank-\" + x.rank + \" tensor\");\n        return SliceOps.slice(x, begin, size);\n    };\n    SliceOps.slice4d = function (x, begin, size) {\n        util.assert(x.rank === 4, \"slice1d expects a rank-4 tensor, but got a rank-\" + x.rank + \" tensor\");\n        return SliceOps.slice(x, begin, size);\n    };\n    SliceOps.slice = function (x, begin, size) {\n        slice_util.assertParamsValid(x, begin, size);\n        if (x.rank === 0) {\n            throw new Error('Slicing scalar is not possible');\n        }\n        var inputShape = x.shape;\n        var grad = function (dy) {\n            var paddings = [];\n            for (var i = 0; i < dy.rank; i++) {\n                paddings.push([begin[i], inputShape[i] - begin[i] - size[i]]);\n            }\n            return { x: function () {\n                    return dy.pad(paddings);\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.slice(x, begin, size);\n        }, { x: x }, grad);\n    };\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Slicing and Joining' }), operation_1.operation], SliceOps, \"slice\", null);\n    return SliceOps;\n}();\nexports.SliceOps = SliceOps;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nfunction assertParamsValid(input, begin, size) {\n    util.assert(input.rank === begin.length, \"Error in slice\" + input.rank + \"D: Length of begin \" + begin + \" must \" + (\"match the rank of the array (\" + input.rank + \").\"));\n    util.assert(input.rank === size.length, \"Error in slice\" + input.rank + \"D: Length of size \" + size + \" must \" + (\"match the rank of the array (\" + input.rank + \").\"));\n    for (var i = 0; i < input.rank; ++i) {\n        util.assert(begin[i] + size[i] <= input.shape[i], \"Error in slice\" + input.rank + \"D: begin[\" + i + \"] + size[\" + i + \"] \" + (\"(\" + (begin[i] + size[i]) + \") would overflow input.shape[\" + i + \"] (\" + input.shape[i] + \")\"));\n    }\n}\nexports.assertParamsValid = assertParamsValid;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ../doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar globals_1 = __webpack_require__(/*! ../globals */ \"./node_modules/@tensorflow/tfjs-core/dist/globals.js\");\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar axis_util = __webpack_require__(/*! ./axis_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js\");\nvar operation_1 = __webpack_require__(/*! ./operation */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js\");\nvar ops = __webpack_require__(/*! ./ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\");\nvar SoftmaxOps = function () {\n    function SoftmaxOps() {}\n    SoftmaxOps.softmax = function (logits, dim) {\n        if (dim === void 0) {\n            dim = -1;\n        }\n        if (dim === -1) {\n            dim = logits.rank - 1;\n        }\n        if (dim !== logits.rank - 1) {\n            throw Error('Softmax along a non-last dimension is not yet supported. ' + (\"Logits was rank \" + logits.rank + \" and dim was \" + dim));\n        }\n        var customOp = globals_1.customGrad(function (logits) {\n            var keepDims = true;\n            var lse = logits.logSumExp([dim], keepDims);\n            var logResult = logits.toFloat().sub(lse);\n            var y = logResult.exp();\n            var gradFunc = function (dy) {\n                var dyTimesY = dy.mul(y);\n                var keepDims = true;\n                return dyTimesY.sub(dyTimesY.sum([dim], keepDims).mul(y));\n            };\n            return { value: y, gradFunc: gradFunc };\n        });\n        return customOp(logits);\n    };\n    SoftmaxOps.softmaxCrossEntropy = function (labels, logits, dim) {\n        if (dim === void 0) {\n            dim = -1;\n        }\n        util.assertShapesMatch(labels.shape, logits.shape, 'Error in softmaxCrossEntropy: ');\n        if (dim === -1) {\n            dim = logits.rank - 1;\n        }\n        if (dim !== logits.rank - 1) {\n            throw Error(\"Softmax cross entropy along a non-last dimension is not yet \" + (\"supported. Labels / logits was rank \" + logits.rank + \" \") + (\"and dim was \" + dim));\n        }\n        var customOp = globals_1.customGrad(function (labels, logits) {\n            var predictedProbs = logits.softmax(dim);\n            var costVector = ops.scalar(1e-5).add(predictedProbs).log().mul(labels).neg();\n            var value = costVector.sum([dim]);\n            var gradFunc = function (dy) {\n                var dyShape = axis_util.expandShapeToKeepDim(dy.shape, [dim]);\n                return [dy.reshape(dyShape).mul(labels.toFloat().sub(predictedProbs)), dy.reshape(dyShape).mul(predictedProbs.sub(labels.toFloat()))];\n            };\n            return { value: value, gradFunc: gradFunc };\n        });\n        return customOp(labels, logits);\n    };\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Normalization' }), operation_1.operation], SoftmaxOps, \"softmax\", null);\n    __decorate([doc_1.doc({ heading: 'Training', subheading: 'Losses', namespace: 'losses' }), operation_1.operation], SoftmaxOps, \"softmaxCrossEntropy\", null);\n    return SoftmaxOps;\n}();\nexports.SoftmaxOps = SoftmaxOps;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ../doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar axis_util = __webpack_require__(/*! ./axis_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js\");\nvar operation_1 = __webpack_require__(/*! ./operation */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js\");\nvar TransposeOps = function () {\n    function TransposeOps() {}\n    TransposeOps.transpose = function (x, perm) {\n        if (perm == null) {\n            perm = x.shape.map(function (s, i) {\n                return i;\n            }).reverse();\n        }\n        var der = function (dy) {\n            var undoPerm = axis_util.getUndoAxesPermutation(perm);\n            return { x: function () {\n                    return dy.transpose(undoPerm);\n                } };\n        };\n        util.assert(x.rank === perm.length, \"Error in transpose: rank of input \" + x.rank + \" \" + (\"must match length of perm \" + perm + \".\"));\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.transpose(x, perm);\n        }, { x: x }, der);\n    };\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Matrices' }), operation_1.operation], TransposeOps, \"transpose\", null);\n    return TransposeOps;\n}();\nexports.TransposeOps = TransposeOps;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/unary_ops.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/unary_ops.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ../doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar operation_1 = __webpack_require__(/*! ./operation */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js\");\nvar ops = __webpack_require__(/*! ./ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\");\nvar ops_1 = __webpack_require__(/*! ./ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\");\nvar selu_util = __webpack_require__(/*! ./selu_util */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js\");\nvar UnaryOps = function () {\n    function UnaryOps() {}\n    UnaryOps.neg = function (x) {\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.neg();\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.neg(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.ceil = function (x) {\n        var grad = function (dy) {\n            return { x: function () {\n                    return ops.zerosLike(dy);\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.ceil(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.floor = function (x) {\n        var grad = function (dy) {\n            return { x: function () {\n                    return ops.zerosLike(dy);\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.floor(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.exp = function (x) {\n        var bck = function (dy, saved) {\n            var y = saved[0];\n            return { x: function () {\n                    return dy.mulStrict(y);\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend, save) {\n            return save(backend.exp(x));\n        }, { x: x }, bck);\n    };\n    UnaryOps.log = function (x) {\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.divStrict(x.toFloat());\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.log(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.log1p = function (x) {\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.divStrict(x.add(ops.scalar(1)));\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.log1p(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.sqrt = function (x) {\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.divStrict(x.toFloat().sqrt().mul(ops.scalar(2)));\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.sqrt(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.square = function (x) {\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.mulStrict(x.toFloat().mul(ops.scalar(2)));\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.square(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.abs = function (x) {\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.mulStrict(x.toFloat().step(-1));\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.abs(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.clipByValue = function (x, clipValueMin, clipValueMax) {\n        util.assert(clipValueMin <= clipValueMax, \"Error in clip: min (\" + clipValueMin + \") must be\" + (\"less than or equal to max (\" + clipValueMax + \").\"));\n        var grad = function (dy) {\n            return {\n                x: function () {\n                    return dy.where(x.greater(ops.scalar(clipValueMin)).logicalAnd(x.less(ops.scalar(clipValueMax))), ops_1.zerosLike(dy));\n                }\n            };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.clip(x, clipValueMin, clipValueMax);\n        }, { x: x }, grad);\n    };\n    UnaryOps.relu = function (x) {\n        var grad = function (dy) {\n            var stepRes = x.step();\n            return { x: function () {\n                    return dy.mulStrict(stepRes.toFloat());\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.relu(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.elu = function (x) {\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.mulStrict(eluDer(x));\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.elu(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.selu = function (x) {\n        var grad = function (dy) {\n            return {\n                x: function () {\n                    var mask = x.greater(ops.scalar(0));\n                    var scaleAlpha = ops.scalar(selu_util.SELU_SCALEALPHA);\n                    var scale = ops.scalar(selu_util.SELU_SCALE);\n                    var greaterThanZeroDer = dy.mul(scale);\n                    var lessEqualZeroDer = dy.mul(scaleAlpha).mul(x.toFloat().exp());\n                    return ops.where(mask, greaterThanZeroDer, lessEqualZeroDer);\n                }\n            };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.selu(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.leakyRelu = function (x, alpha) {\n        if (alpha === void 0) {\n            alpha = 0.2;\n        }\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.mulStrict(x.step(alpha));\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.leakyRelu(x, alpha);\n        }, { x: x }, grad);\n    };\n    UnaryOps.prelu = function (x, alpha) {\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.mulStrict(preluDer(x, alpha));\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.prelu(x, alpha);\n        }, { x: x }, grad);\n    };\n    UnaryOps.sigmoid = function (x) {\n        var grad = function (dy, saved) {\n            var y = saved[0];\n            return { x: function () {\n                    return dy.mulStrict(y.mul(ops.scalar(1).sub(y)));\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend, save) {\n            return save(backend.sigmoid(x));\n        }, { x: x }, grad);\n    };\n    UnaryOps.sin = function (x) {\n        var grad = function (dy) {\n            return { x: function () {\n                    return x.toFloat().cos().mulStrict(dy);\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.sin(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.cos = function (x) {\n        var grad = function (dy) {\n            return { x: function () {\n                    return x.toFloat().sin().neg().mulStrict(dy);\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.cos(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.tan = function (x) {\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.divStrict(x.cos().square());\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.tan(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.asin = function (x) {\n        var grad = function (dy) {\n            return {\n                x: function () {\n                    return dy.divStrict(UnaryOps.sqrt(ops.scalar(1).sub(x.toFloat().square())));\n                }\n            };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.asin(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.acos = function (x) {\n        var grad = function (dy) {\n            return {\n                x: function () {\n                    return dy.divStrict(UnaryOps.sqrt(ops.scalar(1).sub(x.toFloat().square()))).neg();\n                }\n            };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.acos(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.atan = function (x) {\n        var grad = function (dy) {\n            return { x: function () {\n                    return dy.divStrict(ops.scalar(1).add(x.toFloat().square()));\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.atan(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.sinh = function (x) {\n        var grad = function (dy) {\n            return { x: function () {\n                    return x.toFloat().cosh().mulStrict(dy);\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.sinh(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.cosh = function (x) {\n        var grad = function (dy) {\n            return { x: function () {\n                    return x.toFloat().sinh().mulStrict(dy);\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.cosh(x);\n        }, { x: x }, grad);\n    };\n    UnaryOps.tanh = function (x) {\n        var grad = function (dy, saved) {\n            var y = saved[0];\n            return { x: function () {\n                    return ops.scalar(1).sub(y.square()).mulStrict(dy);\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend, save) {\n            return save(backend.tanh(x));\n        }, { x: x }, grad);\n    };\n    UnaryOps.step = function (x, alpha) {\n        if (alpha === void 0) {\n            alpha = 0.0;\n        }\n        var grad = function (dy) {\n            return { x: function () {\n                    return ops.zerosLike(dy);\n                } };\n        };\n        return environment_1.ENV.engine.runKernel(function (backend) {\n            return backend.step(x, alpha);\n        }, { x: x }, grad);\n    };\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"neg\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"ceil\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"floor\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"exp\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"log\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"log1p\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"sqrt\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"square\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"abs\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"clipByValue\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"relu\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"elu\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"selu\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"leakyRelu\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"prelu\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"sigmoid\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"sin\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"cos\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"tan\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"asin\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"acos\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"atan\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"sinh\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"cosh\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"tanh\", null);\n    __decorate([doc_1.doc({ heading: 'Operations', subheading: 'Basic math' }), operation_1.operation], UnaryOps, \"step\", null);\n    return UnaryOps;\n}();\nexports.UnaryOps = UnaryOps;\nfunction preluDer(x, alpha) {\n    return environment_1.ENV.engine.runKernel(function (backend) {\n        return backend.preluDer(x, alpha);\n    }, { x: x, alpha: alpha });\n}\nfunction eluDer(x) {\n    return environment_1.ENV.engine.runKernel(function (backend) {\n        return backend.eluDer(x);\n    }, { x: x });\n}\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/ops/unary_ops.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar globals_1 = __webpack_require__(/*! ../globals */ \"./node_modules/@tensorflow/tfjs-core/dist/globals.js\");\nvar ops_1 = __webpack_require__(/*! ../ops/ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\");\nvar optimizer_1 = __webpack_require__(/*! ./optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js\");\nvar AdadeltaOptimizer = function (_super) {\n    __extends(AdadeltaOptimizer, _super);\n    function AdadeltaOptimizer(learningRate, rho, epsilon) {\n        if (epsilon === void 0) {\n            epsilon = 1e-8;\n        }\n        var _this = _super.call(this) || this;\n        _this.accumulatedGrads = {};\n        _this.accumulatedUpdates = {};\n        _this.c = globals_1.keep(ops_1.scalar(-learningRate));\n        _this.epsilon = globals_1.keep(ops_1.scalar(epsilon));\n        _this.rho = globals_1.keep(ops_1.scalar(rho));\n        _this.oneMinusRho = globals_1.keep(ops_1.scalar(1 - rho));\n        return _this;\n    }\n    AdadeltaOptimizer.prototype.applyGradients = function (variableGradients) {\n        var _this = this;\n        var _loop_1 = function (variableName) {\n            var value = environment_1.ENV.engine.registeredVariables[variableName];\n            if (this_1.accumulatedGrads[variableName] == null) {\n                var trainable_1 = false;\n                globals_1.tidy(function () {\n                    _this.accumulatedGrads[variableName] = ops_1.zerosLike(value).variable(trainable_1);\n                });\n            }\n            if (this_1.accumulatedUpdates[variableName] == null) {\n                var trainable_2 = false;\n                globals_1.tidy(function () {\n                    _this.accumulatedUpdates[variableName] = ops_1.zerosLike(value).variable(trainable_2);\n                });\n            }\n            var gradient = variableGradients[variableName];\n            var accumulatedGrad = this_1.accumulatedGrads[variableName];\n            var accumulatedUpdate = this_1.accumulatedUpdates[variableName];\n            globals_1.tidy(function () {\n                var newAccumulatedGrad = _this.rho.mul(accumulatedGrad).add(_this.oneMinusRho.mul(gradient.square()));\n                var updates = accumulatedUpdate.add(_this.epsilon).sqrt().div(accumulatedGrad.add(_this.epsilon).sqrt()).mul(gradient);\n                var newAccumulatedUpdate = _this.rho.mul(accumulatedUpdate).add(_this.oneMinusRho.mul(updates.square()));\n                _this.accumulatedGrads[variableName].assign(newAccumulatedGrad);\n                _this.accumulatedUpdates[variableName].assign(newAccumulatedUpdate);\n                var newValue = _this.c.mul(updates).add(value);\n                value.assign(newValue);\n            });\n        };\n        var this_1 = this;\n        for (var variableName in variableGradients) {\n            _loop_1(variableName);\n        }\n    };\n    AdadeltaOptimizer.prototype.dispose = function () {\n        var _this = this;\n        this.c.dispose();\n        this.epsilon.dispose();\n        this.rho.dispose();\n        this.oneMinusRho.dispose();\n        if (this.accumulatedUpdates != null) {\n            Object.keys(this.accumulatedUpdates).forEach(function (name) {\n                return _this.accumulatedUpdates[name].dispose();\n            });\n            Object.keys(this.accumulatedGrads).forEach(function (name) {\n                return _this.accumulatedGrads[name].dispose();\n            });\n        }\n    };\n    return AdadeltaOptimizer;\n}(optimizer_1.Optimizer);\nexports.AdadeltaOptimizer = AdadeltaOptimizer;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar globals_1 = __webpack_require__(/*! ../globals */ \"./node_modules/@tensorflow/tfjs-core/dist/globals.js\");\nvar ops_1 = __webpack_require__(/*! ../ops/ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\");\nvar optimizer_1 = __webpack_require__(/*! ./optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js\");\nvar AdagradOptimizer = function (_super) {\n    __extends(AdagradOptimizer, _super);\n    function AdagradOptimizer(learningRate, initialAccumulatorValue) {\n        if (initialAccumulatorValue === void 0) {\n            initialAccumulatorValue = 0.1;\n        }\n        var _this = _super.call(this) || this;\n        _this.learningRate = learningRate;\n        _this.initialAccumulatorValue = initialAccumulatorValue;\n        _this.accumulatedGrads = {};\n        _this.c = globals_1.keep(ops_1.scalar(-learningRate));\n        _this.epsilon = globals_1.keep(ops_1.scalar(1e-8));\n        return _this;\n    }\n    AdagradOptimizer.prototype.applyGradients = function (variableGradients) {\n        var _this = this;\n        var _loop_1 = function (variableName) {\n            var value = environment_1.ENV.engine.registeredVariables[variableName];\n            if (this_1.accumulatedGrads[variableName] == null) {\n                var trainable_1 = false;\n                globals_1.tidy(function () {\n                    _this.accumulatedGrads[variableName] = ops_1.fill(value.shape, _this.initialAccumulatorValue).variable(trainable_1);\n                });\n            }\n            var gradient = variableGradients[variableName];\n            var accumulatedGrad = this_1.accumulatedGrads[variableName];\n            globals_1.tidy(function () {\n                var newAccumulatedGrad = accumulatedGrad.add(gradient.square());\n                _this.accumulatedGrads[variableName].assign(newAccumulatedGrad);\n                var newValue = _this.c.mul(gradient.div(newAccumulatedGrad.add(_this.epsilon).sqrt())).add(value);\n                value.assign(newValue);\n            });\n        };\n        var this_1 = this;\n        for (var variableName in variableGradients) {\n            _loop_1(variableName);\n        }\n    };\n    AdagradOptimizer.prototype.dispose = function () {\n        var _this = this;\n        this.epsilon.dispose();\n        this.c.dispose();\n        if (this.accumulatedGrads != null) {\n            Object.keys(this.accumulatedGrads).forEach(function (name) {\n                return _this.accumulatedGrads[name].dispose();\n            });\n        }\n    };\n    return AdagradOptimizer;\n}(optimizer_1.Optimizer);\nexports.AdagradOptimizer = AdagradOptimizer;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar globals_1 = __webpack_require__(/*! ../globals */ \"./node_modules/@tensorflow/tfjs-core/dist/globals.js\");\nvar ops_1 = __webpack_require__(/*! ../ops/ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\");\nvar optimizer_1 = __webpack_require__(/*! ./optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js\");\nvar AdamOptimizer = function (_super) {\n    __extends(AdamOptimizer, _super);\n    function AdamOptimizer(learningRate, beta1, beta2, epsilon) {\n        if (epsilon === void 0) {\n            epsilon = 1e-8;\n        }\n        var _this = _super.call(this) || this;\n        _this.learningRate = learningRate;\n        _this.accumulatedFirstMoment = {};\n        _this.accumulatedSecondMoment = {};\n        _this.c = globals_1.keep(ops_1.scalar(-learningRate));\n        _this.eps = globals_1.keep(ops_1.scalar(epsilon));\n        _this.beta1 = globals_1.keep(ops_1.scalar(beta1));\n        _this.beta2 = globals_1.keep(ops_1.scalar(beta2));\n        globals_1.tidy(function () {\n            _this.accBeta1 = ops_1.scalar(beta1).variable();\n            _this.accBeta2 = ops_1.scalar(beta2).variable();\n        });\n        _this.oneMinusBeta1 = globals_1.keep(ops_1.scalar(1 - beta1));\n        _this.oneMinusBeta2 = globals_1.keep(ops_1.scalar(1 - beta2));\n        _this.one = globals_1.keep(ops_1.scalar(1));\n        return _this;\n    }\n    AdamOptimizer.prototype.applyGradients = function (variableGradients) {\n        var _this = this;\n        globals_1.tidy(function () {\n            var oneMinusAccBeta1 = _this.one.sub(_this.accBeta1);\n            var oneMinusAccBeta2 = _this.one.sub(_this.accBeta2);\n            for (var variableName in variableGradients) {\n                var value = environment_1.ENV.engine.registeredVariables[variableName];\n                if (_this.accumulatedFirstMoment[variableName] == null) {\n                    var trainable = false;\n                    _this.accumulatedFirstMoment[variableName] = ops_1.zerosLike(value).variable(trainable);\n                }\n                if (_this.accumulatedSecondMoment[variableName] == null) {\n                    var trainable = false;\n                    _this.accumulatedSecondMoment[variableName] = ops_1.zerosLike(value).variable(trainable);\n                }\n                var gradient = variableGradients[variableName];\n                var firstMoment = _this.accumulatedFirstMoment[variableName];\n                var secondMoment = _this.accumulatedSecondMoment[variableName];\n                var newFirstMoment = _this.beta1.mul(firstMoment).add(_this.oneMinusBeta1.mul(gradient));\n                var newSecondMoment = _this.beta2.mul(secondMoment).add(_this.oneMinusBeta2.mul(gradient.square()));\n                var biasCorrectedFirstMoment = newFirstMoment.div(oneMinusAccBeta1);\n                var biasCorrectedSecondMoment = newSecondMoment.div(oneMinusAccBeta2);\n                _this.accumulatedFirstMoment[variableName].assign(newFirstMoment);\n                _this.accumulatedSecondMoment[variableName].assign(newSecondMoment);\n                var newValue = _this.c.mul(biasCorrectedFirstMoment.div(_this.eps.add(biasCorrectedSecondMoment.sqrt()))).add(value);\n                value.assign(newValue);\n            }\n            _this.accBeta1.assign(_this.accBeta1.mul(_this.beta1));\n            _this.accBeta2.assign(_this.accBeta2.mul(_this.beta2));\n        });\n    };\n    AdamOptimizer.prototype.dispose = function () {\n        var _this = this;\n        this.c.dispose();\n        this.eps.dispose();\n        this.beta1.dispose();\n        this.beta2.dispose();\n        this.accBeta1.dispose();\n        this.accBeta2.dispose();\n        this.oneMinusBeta1.dispose();\n        this.oneMinusBeta2.dispose();\n        this.one.dispose();\n        if (this.accumulatedFirstMoment != null) {\n            Object.keys(this.accumulatedFirstMoment).forEach(function (name) {\n                return _this.accumulatedFirstMoment[name].dispose();\n            });\n        }\n        if (this.accumulatedSecondMoment != null) {\n            Object.keys(this.accumulatedSecondMoment).forEach(function (name) {\n                return _this.accumulatedSecondMoment[name].dispose();\n            });\n        }\n    };\n    return AdamOptimizer;\n}(optimizer_1.Optimizer);\nexports.AdamOptimizer = AdamOptimizer;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar globals_1 = __webpack_require__(/*! ../globals */ \"./node_modules/@tensorflow/tfjs-core/dist/globals.js\");\nvar ops_1 = __webpack_require__(/*! ../ops/ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\");\nvar optimizer_1 = __webpack_require__(/*! ./optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js\");\nvar AdamaxOptimizer = function (_super) {\n    __extends(AdamaxOptimizer, _super);\n    function AdamaxOptimizer(learningRate, beta1, beta2, epsilon, decay) {\n        if (epsilon === void 0) {\n            epsilon = 1e-8;\n        }\n        if (decay === void 0) {\n            decay = 0.0;\n        }\n        var _this = _super.call(this) || this;\n        _this.learningRate = learningRate;\n        _this.accumulatedFirstMoment = {};\n        _this.accumulatedWeightedInfNorm = {};\n        _this.c = globals_1.keep(ops_1.scalar(-learningRate));\n        _this.eps = globals_1.keep(ops_1.scalar(epsilon));\n        _this.beta1 = globals_1.keep(ops_1.scalar(beta1));\n        _this.beta2 = globals_1.keep(ops_1.scalar(beta2));\n        _this.decay = globals_1.keep(ops_1.scalar(decay));\n        globals_1.tidy(function () {\n            _this.iteration = ops_1.scalar(0).variable();\n            _this.accBeta1 = ops_1.scalar(beta1).variable();\n        });\n        _this.oneMinusBeta1 = globals_1.keep(ops_1.scalar(1 - beta1));\n        _this.one = globals_1.keep(ops_1.scalar(1));\n        return _this;\n    }\n    AdamaxOptimizer.prototype.applyGradients = function (variableGradients) {\n        var _this = this;\n        globals_1.tidy(function () {\n            var oneMinusAccBeta1 = _this.one.sub(_this.accBeta1);\n            var lr = _this.c.div(_this.one.add(_this.decay.mul(_this.iteration)));\n            for (var variableName in variableGradients) {\n                var value = environment_1.ENV.engine.registeredVariables[variableName];\n                if (_this.accumulatedFirstMoment[variableName] == null) {\n                    var trainable = false;\n                    _this.accumulatedFirstMoment[variableName] = ops_1.zerosLike(value).variable(trainable);\n                }\n                if (_this.accumulatedWeightedInfNorm[variableName] == null) {\n                    var trainable = false;\n                    _this.accumulatedWeightedInfNorm[variableName] = ops_1.zerosLike(value).variable(trainable);\n                }\n                var gradient = variableGradients[variableName];\n                var firstMoment = _this.accumulatedFirstMoment[variableName];\n                var weightedInfNorm = _this.accumulatedWeightedInfNorm[variableName];\n                var newFirstMoment = _this.beta1.mul(firstMoment).add(_this.oneMinusBeta1.mul(gradient));\n                var ut0 = _this.beta2.mul(weightedInfNorm);\n                var ut1 = gradient.abs();\n                var newWeightedInfNorm = ut0.maximum(ut1);\n                _this.accumulatedFirstMoment[variableName].assign(newFirstMoment);\n                _this.accumulatedWeightedInfNorm[variableName].assign(newWeightedInfNorm);\n                var newValue = lr.div(oneMinusAccBeta1).mul(newFirstMoment.div(_this.eps.add(newWeightedInfNorm))).add(value);\n                value.assign(newValue);\n            }\n            _this.iteration.assign(_this.iteration.add(_this.one));\n            _this.accBeta1.assign(_this.accBeta1.mul(_this.beta1));\n        });\n    };\n    AdamaxOptimizer.prototype.dispose = function () {\n        var _this = this;\n        this.c.dispose();\n        this.eps.dispose();\n        this.accBeta1.dispose();\n        this.beta1.dispose();\n        this.beta2.dispose();\n        this.oneMinusBeta1.dispose();\n        this.decay.dispose();\n        this.iteration.dispose();\n        this.one.dispose();\n        if (this.accumulatedFirstMoment != null) {\n            Object.keys(this.accumulatedFirstMoment).forEach(function (name) {\n                return _this.accumulatedFirstMoment[name].dispose();\n            });\n        }\n        if (this.accumulatedWeightedInfNorm != null) {\n            Object.keys(this.accumulatedWeightedInfNorm).forEach(function (name) {\n                return _this.accumulatedWeightedInfNorm[name].dispose();\n            });\n        }\n    };\n    return AdamaxOptimizer;\n}(optimizer_1.Optimizer);\nexports.AdamaxOptimizer = AdamaxOptimizer;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar globals_1 = __webpack_require__(/*! ../globals */ \"./node_modules/@tensorflow/tfjs-core/dist/globals.js\");\nvar ops_1 = __webpack_require__(/*! ../ops/ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\");\nvar sgd_optimizer_1 = __webpack_require__(/*! ./sgd_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js\");\nvar MomentumOptimizer = function (_super) {\n    __extends(MomentumOptimizer, _super);\n    function MomentumOptimizer(learningRate, momentum, useNesterov) {\n        if (useNesterov === void 0) {\n            useNesterov = false;\n        }\n        var _this = _super.call(this, learningRate) || this;\n        _this.learningRate = learningRate;\n        _this.momentum = momentum;\n        _this.useNesterov = useNesterov;\n        _this.m = ops_1.scalar(_this.momentum);\n        _this.accumulations = {};\n        return _this;\n    }\n    MomentumOptimizer.prototype.applyGradients = function (variableGradients) {\n        var _this = this;\n        var _loop_1 = function (variableName) {\n            var value = environment_1.ENV.engine.registeredVariables[variableName];\n            if (this_1.accumulations[variableName] == null) {\n                var trainable_1 = false;\n                globals_1.tidy(function () {\n                    _this.accumulations[variableName] = ops_1.zerosLike(value).variable(trainable_1);\n                });\n            }\n            var accumulation = this_1.accumulations[variableName];\n            var gradient = variableGradients[variableName];\n            globals_1.tidy(function () {\n                var newValue;\n                var newAccumulation = _this.m.mul(accumulation).add(gradient);\n                if (_this.useNesterov) {\n                    newValue = _this.c.mul(gradient.add(newAccumulation.mul(_this.m))).add(value);\n                } else {\n                    newValue = _this.c.mul(newAccumulation).add(value);\n                }\n                _this.accumulations[variableName].assign(newAccumulation);\n                value.assign(newValue);\n            });\n        };\n        var this_1 = this;\n        for (var variableName in variableGradients) {\n            _loop_1(variableName);\n        }\n    };\n    MomentumOptimizer.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.m.dispose();\n        if (this.accumulations != null) {\n            for (var variableName in this.accumulations) {\n                this.accumulations[variableName].dispose();\n            }\n        }\n    };\n    MomentumOptimizer.prototype.setMomentum = function (momentum) {\n        this.momentum = momentum;\n    };\n    return MomentumOptimizer;\n}(sgd_optimizer_1.SGDOptimizer);\nexports.MomentumOptimizer = MomentumOptimizer;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ../doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar globals_1 = __webpack_require__(/*! ../globals */ \"./node_modules/@tensorflow/tfjs-core/dist/globals.js\");\nvar Optimizer = function () {\n    function Optimizer() {}\n    Optimizer.prototype.minimize = function (f, returnCost, varList) {\n        if (returnCost === void 0) {\n            returnCost = false;\n        }\n        var _a = this.computeGradients(f, varList),\n            value = _a.value,\n            grads = _a.grads;\n        this.applyGradients(grads);\n        var varNames = Object.keys(grads);\n        varNames.forEach(function (varName) {\n            return grads[varName].dispose();\n        });\n        if (returnCost) {\n            return value;\n        } else {\n            value.dispose();\n            return null;\n        }\n    };\n    Optimizer.prototype.computeGradients = function (f, varList) {\n        return globals_1.variableGrads(f, varList);\n    };\n    __decorate([doc_1.doc({ heading: 'Training', subheading: 'Optimizers' })], Optimizer.prototype, \"minimize\", null);\n    Optimizer = __decorate([doc_1.doc({ heading: 'Training', subheading: 'Classes', namespace: 'train' })], Optimizer);\n    return Optimizer;\n}();\nexports.Optimizer = Optimizer;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer_constructors.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer_constructors.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ../doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar adadelta_optimizer_1 = __webpack_require__(/*! ./adadelta_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js\");\nvar adagrad_optimizer_1 = __webpack_require__(/*! ./adagrad_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js\");\nvar adam_optimizer_1 = __webpack_require__(/*! ./adam_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js\");\nvar adamax_optimizer_1 = __webpack_require__(/*! ./adamax_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js\");\nvar momentum_optimizer_1 = __webpack_require__(/*! ./momentum_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js\");\nvar rmsprop_optimizer_1 = __webpack_require__(/*! ./rmsprop_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js\");\nvar sgd_optimizer_1 = __webpack_require__(/*! ./sgd_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js\");\nvar OptimizerConstructors = function () {\n    function OptimizerConstructors() {}\n    OptimizerConstructors.sgd = function (learningRate) {\n        return new sgd_optimizer_1.SGDOptimizer(learningRate);\n    };\n    OptimizerConstructors.momentum = function (learningRate, momentum, useNesterov) {\n        if (useNesterov === void 0) {\n            useNesterov = false;\n        }\n        return new momentum_optimizer_1.MomentumOptimizer(learningRate, momentum, useNesterov);\n    };\n    OptimizerConstructors.rmsprop = function (learningRate, decay, momentum, epsilon) {\n        if (decay === void 0) {\n            decay = .9;\n        }\n        if (momentum === void 0) {\n            momentum = 0.0;\n        }\n        if (epsilon === void 0) {\n            epsilon = 1e-8;\n        }\n        return new rmsprop_optimizer_1.RMSPropOptimizer(learningRate, decay, momentum, epsilon);\n    };\n    OptimizerConstructors.adam = function (learningRate, beta1, beta2, epsilon) {\n        if (learningRate === void 0) {\n            learningRate = 0.001;\n        }\n        if (beta1 === void 0) {\n            beta1 = 0.9;\n        }\n        if (beta2 === void 0) {\n            beta2 = 0.999;\n        }\n        if (epsilon === void 0) {\n            epsilon = 1e-8;\n        }\n        return new adam_optimizer_1.AdamOptimizer(learningRate, beta1, beta2, epsilon);\n    };\n    OptimizerConstructors.adadelta = function (learningRate, rho, epsilon) {\n        if (learningRate === void 0) {\n            learningRate = .001;\n        }\n        if (rho === void 0) {\n            rho = .95;\n        }\n        if (epsilon === void 0) {\n            epsilon = 1e-8;\n        }\n        return new adadelta_optimizer_1.AdadeltaOptimizer(learningRate, rho, epsilon);\n    };\n    OptimizerConstructors.adamax = function (learningRate, beta1, beta2, epsilon, decay) {\n        if (learningRate === void 0) {\n            learningRate = 0.002;\n        }\n        if (beta1 === void 0) {\n            beta1 = 0.9;\n        }\n        if (beta2 === void 0) {\n            beta2 = 0.999;\n        }\n        if (epsilon === void 0) {\n            epsilon = 1e-8;\n        }\n        if (decay === void 0) {\n            decay = 0.0;\n        }\n        return new adamax_optimizer_1.AdamaxOptimizer(learningRate, beta1, beta2, epsilon, decay);\n    };\n    OptimizerConstructors.adagrad = function (learningRate, initialAccumulatorValue) {\n        if (initialAccumulatorValue === void 0) {\n            initialAccumulatorValue = 0.1;\n        }\n        return new adagrad_optimizer_1.AdagradOptimizer(learningRate, initialAccumulatorValue);\n    };\n    __decorate([doc_1.doc({ heading: 'Training', subheading: 'Optimizers', namespace: 'train' })], OptimizerConstructors, \"sgd\", null);\n    __decorate([doc_1.doc({ heading: 'Training', subheading: 'Optimizers', namespace: 'train' })], OptimizerConstructors, \"momentum\", null);\n    __decorate([doc_1.doc({ heading: 'Training', subheading: 'Optimizers', namespace: 'train' })], OptimizerConstructors, \"rmsprop\", null);\n    __decorate([doc_1.doc({ heading: 'Training', subheading: 'Optimizers', namespace: 'train' })], OptimizerConstructors, \"adam\", null);\n    __decorate([doc_1.doc({ heading: 'Training', subheading: 'Optimizers', namespace: 'train' })], OptimizerConstructors, \"adadelta\", null);\n    __decorate([doc_1.doc({ heading: 'Training', subheading: 'Optimizers', namespace: 'train' })], OptimizerConstructors, \"adamax\", null);\n    __decorate([doc_1.doc({ heading: 'Training', subheading: 'Optimizers', namespace: 'train' })], OptimizerConstructors, \"adagrad\", null);\n    return OptimizerConstructors;\n}();\nexports.OptimizerConstructors = OptimizerConstructors;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer_constructors.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar globals_1 = __webpack_require__(/*! ../globals */ \"./node_modules/@tensorflow/tfjs-core/dist/globals.js\");\nvar ops_1 = __webpack_require__(/*! ../ops/ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\");\nvar optimizer_1 = __webpack_require__(/*! ./optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js\");\nvar RMSPropOptimizer = function (_super) {\n    __extends(RMSPropOptimizer, _super);\n    function RMSPropOptimizer(learningRate, decay, momentum, epsilon) {\n        if (decay === void 0) {\n            decay = 0.9;\n        }\n        if (momentum === void 0) {\n            momentum = 0.0;\n        }\n        if (epsilon === void 0) {\n            epsilon = 1e-8;\n        }\n        var _this = _super.call(this) || this;\n        _this.learningRate = learningRate;\n        _this.accumulatedMeanSquares = {};\n        _this.accumulatedMoments = {};\n        _this.c = globals_1.keep(ops_1.scalar(learningRate));\n        _this.epsilon = globals_1.keep(ops_1.scalar(epsilon));\n        _this.decay = globals_1.keep(ops_1.scalar(decay));\n        _this.momentum = globals_1.keep(ops_1.scalar(momentum));\n        _this.oneMinusDecay = globals_1.keep(ops_1.scalar(1 - decay));\n        return _this;\n    }\n    RMSPropOptimizer.prototype.applyGradients = function (variableGradients) {\n        var _this = this;\n        var _loop_1 = function (variableName) {\n            var value = environment_1.ENV.engine.registeredVariables[variableName];\n            if (this_1.accumulatedMeanSquares[variableName] == null) {\n                var trainable_1 = false;\n                globals_1.tidy(function () {\n                    _this.accumulatedMeanSquares[variableName] = ops_1.zerosLike(value).variable(trainable_1);\n                });\n            }\n            if (this_1.accumulatedMoments[variableName] == null) {\n                var trainable_2 = false;\n                globals_1.tidy(function () {\n                    _this.accumulatedMoments[variableName] = ops_1.zerosLike(value).variable(trainable_2);\n                });\n            }\n            var accumulatedMeanSquare = this_1.accumulatedMeanSquares[variableName];\n            var accumulatedMoments = this_1.accumulatedMoments[variableName];\n            var gradient = variableGradients[variableName];\n            globals_1.tidy(function () {\n                var newAccumulatedMeanSquare = _this.decay.mul(accumulatedMeanSquare).add(_this.oneMinusDecay.mul(gradient.square()));\n                var newAccumulatedMoments = _this.momentum.mul(accumulatedMoments).add(_this.c.mul(gradient).div(newAccumulatedMeanSquare.add(_this.epsilon).sqrt()));\n                _this.accumulatedMeanSquares[variableName].assign(newAccumulatedMeanSquare);\n                _this.accumulatedMoments[variableName].assign(newAccumulatedMoments);\n                var newValue = value.sub(newAccumulatedMoments);\n                value.assign(newValue);\n            });\n        };\n        var this_1 = this;\n        for (var variableName in variableGradients) {\n            _loop_1(variableName);\n        }\n    };\n    RMSPropOptimizer.prototype.dispose = function () {\n        var _this = this;\n        this.c.dispose();\n        this.epsilon.dispose();\n        this.decay.dispose();\n        this.momentum.dispose();\n        this.oneMinusDecay.dispose();\n        if (this.accumulatedMeanSquares != null) {\n            Object.keys(this.accumulatedMeanSquares).forEach(function (name) {\n                return _this.accumulatedMeanSquares[name].dispose();\n            });\n        }\n        if (this.accumulatedMoments != null) {\n            Object.keys(this.accumulatedMoments).forEach(function (name) {\n                return _this.accumulatedMoments[name].dispose();\n            });\n        }\n    };\n    return RMSPropOptimizer;\n}(optimizer_1.Optimizer);\nexports.RMSPropOptimizer = RMSPropOptimizer;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = __webpack_require__(/*! ../environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar globals_1 = __webpack_require__(/*! ../globals */ \"./node_modules/@tensorflow/tfjs-core/dist/globals.js\");\nvar ops_1 = __webpack_require__(/*! ../ops/ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\");\nvar optimizer_1 = __webpack_require__(/*! ./optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js\");\nvar SGDOptimizer = function (_super) {\n    __extends(SGDOptimizer, _super);\n    function SGDOptimizer(learningRate) {\n        var _this = _super.call(this) || this;\n        _this.learningRate = learningRate;\n        _this.setLearningRate(learningRate);\n        return _this;\n    }\n    SGDOptimizer.prototype.applyGradients = function (variableGradients) {\n        var _this = this;\n        var varNames = Object.keys(variableGradients);\n        varNames.forEach(function (varName) {\n            var gradient = variableGradients[varName];\n            var value = environment_1.ENV.engine.registeredVariables[varName];\n            globals_1.tidy(function () {\n                var newValue = _this.c.mul(gradient).add(value);\n                value.assign(newValue);\n            });\n        });\n    };\n    SGDOptimizer.prototype.setLearningRate = function (learningRate) {\n        this.learningRate = learningRate;\n        if (this.c != null) {\n            this.c.dispose();\n        }\n        this.c = globals_1.keep(ops_1.scalar(-learningRate));\n    };\n    SGDOptimizer.prototype.dispose = function () {\n        this.c.dispose();\n    };\n    return SGDOptimizer;\n}(optimizer_1.Optimizer);\nexports.SGDOptimizer = SGDOptimizer;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/profiler.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/profiler.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar Profiler = function () {\n    function Profiler(backendTimer, logger) {\n        this.backendTimer = backendTimer;\n        this.logger = logger;\n        if (logger == null) {\n            this.logger = new Logger();\n        }\n    }\n    Profiler.prototype.profileKernel = function (name, f) {\n        var _this = this;\n        var result;\n        var holdResultWrapperFn = function () {\n            result = f();\n        };\n        var timer = this.backendTimer.time(holdResultWrapperFn);\n        var vals = result.dataSync();\n        util.checkForNaN(vals, result.dtype, name);\n        timer.then(function (timing) {\n            _this.logger.logKernelProfile(name, result, vals, timing.kernelMs);\n        });\n        return result;\n    };\n    return Profiler;\n}();\nexports.Profiler = Profiler;\nvar Logger = function () {\n    function Logger() {}\n    Logger.prototype.logKernelProfile = function (name, result, vals, timeMs) {\n        var time = util.rightPad(timeMs + \"ms\", 9);\n        var paddedName = util.rightPad(name, 25);\n        var rank = result.rank;\n        var size = result.size;\n        var shape = util.rightPad(result.shape.toString(), 14);\n        console.log(\"%c\" + paddedName + \"\\t%c\" + time + \"\\t%c\" + rank + \"D \" + shape + \"\\t%c\" + size, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange');\n    };\n    return Logger;\n}();\nexports.Logger = Logger;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/profiler.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/tape.js":
/*!*********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/tape.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nfunction getFilteredNodesXToY(tape, xs, y) {\n    var tensorsFromX = {};\n    var nodesFromX = {};\n    for (var i = 0; i < xs.length; i++) {\n        tensorsFromX[xs[i].id] = true;\n    }\n    for (var i = 0; i < tape.length; i++) {\n        var node = tape[i];\n        var nodeInputs = node.inputs;\n        for (var inputName in nodeInputs) {\n            var input = nodeInputs[inputName];\n            var anyInputFromX = false;\n            for (var j = 0; j < xs.length; j++) {\n                if (tensorsFromX[input.id]) {\n                    tensorsFromX[node.output.id] = true;\n                    anyInputFromX = true;\n                    nodesFromX[node.id] = true;\n                    break;\n                }\n            }\n            if (anyInputFromX) {\n                break;\n            }\n        }\n    }\n    var tensorsLeadToY = {};\n    tensorsLeadToY[y.id] = true;\n    var nodesToY = {};\n    for (var i = tape.length - 1; i >= 0; i--) {\n        var node = tape[i];\n        var nodeInputs = node.inputs;\n        var outputs = [];\n        outputs.push(node.output);\n        for (var j = 0; j < outputs.length; j++) {\n            if (tensorsLeadToY[outputs[j].id]) {\n                for (var inputName in nodeInputs) {\n                    tensorsLeadToY[nodeInputs[inputName].id] = true;\n                    nodesToY[node.id] = true;\n                }\n                break;\n            }\n        }\n    }\n    var filteredTape = [];\n    for (var i = 0; i < tape.length; i++) {\n        var node = tape[i];\n        if (nodesFromX[node.id] && nodesToY[node.id]) {\n            var prunedInputs = {};\n            for (var inputName in node.inputs) {\n                var nodeInput = node.inputs[inputName];\n                if (tensorsFromX[nodeInput.id]) {\n                    prunedInputs[inputName] = nodeInput;\n                }\n            }\n            var prunedNode = Object.assign({}, node);\n            prunedNode.inputs = prunedInputs;\n            prunedNode.output = node.output;\n            filteredTape.push(prunedNode);\n        }\n    }\n    return filteredTape;\n}\nexports.getFilteredNodesXToY = getFilteredNodesXToY;\nfunction backpropagateGradients(tensorAccumulatedGradientMap, filteredTape) {\n    for (var i = filteredTape.length - 1; i >= 0; i--) {\n        var node = filteredTape[i];\n        var dy = tensorAccumulatedGradientMap[node.output.id];\n        if (node.gradient == null) {\n            throw new Error(\"Cannot compute gradient: gradient function not found \" + (\"for \" + node.name + \".\"));\n        }\n        var inputGradients = node.gradient(dy);\n        for (var inputName in node.inputs) {\n            if (!(inputName in inputGradients)) {\n                throw new Error(\"Cannot backprop through input \" + inputName + \". \" + (\"Available gradients found: \" + Object.keys(inputGradients) + \".\"));\n            }\n            var dx = inputGradients[inputName]();\n            var x = node.inputs[inputName];\n            if (!util.arraysEqual(dx.shape, x.shape)) {\n                throw new Error(\"Error in gradient for op \" + node.name + \". The gradient of input \" + (\"'\" + inputName + \"' has shape '\" + dx.shape + \"', which does not match \") + (\"the shape of the input '\" + x.shape + \"'\"));\n            }\n            if (tensorAccumulatedGradientMap[x.id] == null) {\n                tensorAccumulatedGradientMap[x.id] = dx;\n            } else {\n                var curGradient = tensorAccumulatedGradientMap[x.id];\n                tensorAccumulatedGradientMap[x.id] = curGradient.add(dx);\n                curGradient.dispose();\n            }\n        }\n    }\n}\nexports.backpropagateGradients = backpropagateGradients;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/tape.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/tensor.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : new P(function (resolve) {\n                resolve(result.value);\n            }).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n    var _ = { label: 0, sent: function () {\n            if (t[0] & 1) throw t[1];return t[1];\n        }, trys: [], ops: [] },\n        f,\n        y,\n        t,\n        g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n    }), g;\n    function verb(n) {\n        return function (v) {\n            return step([n, v]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0:case 1:\n                    t = op;break;\n                case 4:\n                    _.label++;return { value: op[1], done: false };\n                case 5:\n                    _.label++;y = op[1];op = [0];continue;\n                case 7:\n                    op = _.ops.pop();_.trys.pop();continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];t = op;break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];_.ops.push(op);break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [6, e];y = 0;\n        } finally {\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ./doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar environment_1 = __webpack_require__(/*! ./environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar ops = __webpack_require__(/*! ./ops/ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\");\nvar tensor_util = __webpack_require__(/*! ./tensor_util */ \"./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js\");\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar TensorBuffer = function () {\n    function TensorBuffer(shape, dtype, values) {\n        this.shape = shape;\n        this.dtype = dtype;\n        this.values = values;\n        if (values != null) {\n            var n = values.length;\n            var size = util.sizeFromShape(shape);\n            util.assert(n === size, \"Length of values '\" + n + \"' does not match the size \" + (\"inferred by the shape '\" + size + \"'\"));\n        }\n        this.values = values || util.getTypedArrayFromDType(dtype, util.sizeFromShape(shape));\n        this.strides = computeStrides(shape);\n        this.size = util.sizeFromShape(shape);\n    }\n    TensorBuffer.prototype.set = function (value) {\n        var locs = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            locs[_i - 1] = arguments[_i];\n        }\n        if (locs.length === 0) {\n            locs = [0];\n        }\n        util.assert(locs.length === this.rank, \"The number of provided coordinates (\" + locs.length + \") must \" + (\"match the rank (\" + this.rank + \")\"));\n        var index = this.locToIndex(locs);\n        this.values[index] = value;\n    };\n    TensorBuffer.prototype.get = function () {\n        var locs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            locs[_i] = arguments[_i];\n        }\n        if (locs.length === 0) {\n            locs = [0];\n        }\n        var index = locs[locs.length - 1];\n        for (var i = 0; i < locs.length - 1; ++i) {\n            index += this.strides[i] * locs[i];\n        }\n        return this.values[index];\n    };\n    TensorBuffer.prototype.locToIndex = function (locs) {\n        if (this.rank === 0) {\n            return 0;\n        } else if (this.rank === 1) {\n            return locs[0];\n        }\n        var index = locs[locs.length - 1];\n        for (var i = 0; i < locs.length - 1; ++i) {\n            index += this.strides[i] * locs[i];\n        }\n        return index;\n    };\n    TensorBuffer.prototype.indexToLoc = function (index) {\n        if (this.rank === 0) {\n            return [];\n        } else if (this.rank === 1) {\n            return [index];\n        }\n        var locs = new Array(this.shape.length);\n        for (var i = 0; i < locs.length - 1; ++i) {\n            locs[i] = Math.floor(index / this.strides[i]);\n            index -= locs[i] * this.strides[i];\n        }\n        locs[locs.length - 1] = index;\n        return locs;\n    };\n    Object.defineProperty(TensorBuffer.prototype, \"rank\", {\n        get: function () {\n            return this.shape.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TensorBuffer.prototype.toTensor = function () {\n        return Tensor.make(this.shape, { values: this.values }, this.dtype);\n    };\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })], TensorBuffer.prototype, \"set\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })], TensorBuffer.prototype, \"get\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })], TensorBuffer.prototype, \"toTensor\", null);\n    TensorBuffer = __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], TensorBuffer);\n    return TensorBuffer;\n}();\nexports.TensorBuffer = TensorBuffer;\nvar Tensor = function () {\n    function Tensor(shape, dtype, values, dataId) {\n        this.isDisposed = false;\n        this.size = util.sizeFromShape(shape);\n        if (values != null) {\n            util.assert(this.size === values.length, \"Constructing tensor of shape (\" + this.size + \") should match the \" + (\"length of values (\" + values.length + \")\"));\n        }\n        this.shape = shape;\n        this.dtype = dtype || 'float32';\n        this.strides = computeStrides(shape);\n        this.dataId = dataId != null ? dataId : {};\n        this.id = Tensor_1.nextId++;\n        this.rankType = this.rank < 5 ? this.rank.toString() : 'higher';\n        environment_1.ENV.engine.registerTensor(this);\n        if (values != null) {\n            environment_1.ENV.engine.write(this.dataId, values);\n        }\n    }\n    Tensor_1 = Tensor;\n    Tensor.make = function (shape, data, dtype) {\n        return new Tensor_1(shape, dtype, data.values, data.dataId);\n    };\n    Tensor.prototype.flatten = function () {\n        this.throwIfDisposed();\n        return this.as1D();\n    };\n    Tensor.prototype.asScalar = function () {\n        this.throwIfDisposed();\n        util.assert(this.size === 1, 'The array must have only 1 element.');\n        return this.reshape([]);\n    };\n    Tensor.prototype.as1D = function () {\n        this.throwIfDisposed();\n        return this.reshape([this.size]);\n    };\n    Tensor.prototype.as2D = function (rows, columns) {\n        this.throwIfDisposed();\n        return this.reshape([rows, columns]);\n    };\n    Tensor.prototype.as3D = function (rows, columns, depth) {\n        this.throwIfDisposed();\n        return this.reshape([rows, columns, depth]);\n    };\n    Tensor.prototype.as4D = function (rows, columns, depth, depth2) {\n        this.throwIfDisposed();\n        return this.reshape([rows, columns, depth, depth2]);\n    };\n    Tensor.prototype.asType = function (dtype) {\n        this.throwIfDisposed();\n        return ops.cast(this, dtype);\n    };\n    Object.defineProperty(Tensor.prototype, \"rank\", {\n        get: function () {\n            return this.shape.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Tensor.prototype.get = function () {\n        var locs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            locs[_i] = arguments[_i];\n        }\n        this.throwIfDisposed();\n        if (locs.length === 0) {\n            locs = [0];\n        }\n        var index = locs[locs.length - 1];\n        for (var i = 0; i < locs.length - 1; ++i) {\n            index += this.strides[i] * locs[i];\n        }\n        return this.dataSync()[index];\n    };\n    Tensor.prototype.buffer = function () {\n        return ops.buffer(this.shape, this.dtype, this.dataSync());\n    };\n    Tensor.prototype.data = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                this.throwIfDisposed();\n                return [2, environment_1.ENV.engine.read(this.dataId)];\n            });\n        });\n    };\n    Tensor.prototype.dataSync = function () {\n        this.throwIfDisposed();\n        return environment_1.ENV.engine.readSync(this.dataId);\n    };\n    Tensor.prototype.dispose = function () {\n        if (this.isDisposed) {\n            return;\n        }\n        this.isDisposed = true;\n        environment_1.ENV.engine.disposeTensor(this);\n    };\n    Tensor.prototype.throwIfDisposed = function () {\n        if (this.isDisposed) {\n            throw new Error(\"Tensor is disposed.\");\n        }\n    };\n    Tensor.prototype.toFloat = function () {\n        return this.asType('float32');\n    };\n    Tensor.prototype.toInt = function () {\n        return this.asType('int32');\n    };\n    Tensor.prototype.toBool = function () {\n        return this.asType('bool');\n    };\n    Tensor.prototype.print = function (verbose) {\n        if (verbose === void 0) {\n            verbose = false;\n        }\n        return ops.print(this, verbose);\n    };\n    Tensor.prototype.reshape = function (newShape) {\n        this.throwIfDisposed();\n        return ops.reshape(this, newShape);\n    };\n    Tensor.prototype.reshapeAs = function (x) {\n        this.throwIfDisposed();\n        return this.reshape(x.shape);\n    };\n    Tensor.prototype.expandDims = function (axis) {\n        if (axis === void 0) {\n            axis = 0;\n        }\n        return ops.expandDims(this, axis);\n    };\n    Tensor.prototype.squeeze = function (axis) {\n        this.throwIfDisposed();\n        return ops.squeeze(this, axis);\n    };\n    Tensor.prototype.clone = function () {\n        this.throwIfDisposed();\n        return ops.clone(this);\n    };\n    Tensor.prototype.toString = function () {\n        return tensor_util.tensorToString(this, true);\n    };\n    Tensor.prototype.tile = function (reps) {\n        this.throwIfDisposed();\n        return ops.tile(this, reps);\n    };\n    Tensor.prototype.gather = function (indices, axis) {\n        if (axis === void 0) {\n            axis = 0;\n        }\n        this.throwIfDisposed();\n        return ops.gather(this, indices, axis);\n    };\n    Tensor.prototype.matMul = function (b, transposeA, transposeB) {\n        if (transposeA === void 0) {\n            transposeA = false;\n        }\n        if (transposeB === void 0) {\n            transposeB = false;\n        }\n        this.throwIfDisposed();\n        return ops.matMul(this, b, transposeA, transposeB);\n    };\n    Tensor.prototype.norm = function (ord, axis, keepDims) {\n        if (ord === void 0) {\n            ord = 'euclidean';\n        }\n        if (axis === void 0) {\n            axis = null;\n        }\n        if (keepDims === void 0) {\n            keepDims = false;\n        }\n        this.throwIfDisposed();\n        return ops.norm(this, ord, axis, keepDims);\n    };\n    Tensor.prototype.slice = function (begin, size) {\n        this.throwIfDisposed();\n        return ops.slice(this, begin, size);\n    };\n    Tensor.prototype.reverse = function (axis) {\n        this.throwIfDisposed();\n        return ops.reverse(this, axis);\n    };\n    Tensor.prototype.concat = function (x, axis) {\n        if (axis === void 0) {\n            axis = 0;\n        }\n        this.throwIfDisposed();\n        return ops.concat([this, x], axis);\n    };\n    Tensor.prototype.stack = function (x, axis) {\n        if (axis === void 0) {\n            axis = 0;\n        }\n        return ops.stack([this, x], axis);\n    };\n    Tensor.prototype.pad = function (paddings, constantValue) {\n        if (constantValue === void 0) {\n            constantValue = 0;\n        }\n        return ops.pad(this, paddings, constantValue);\n    };\n    Tensor.prototype.batchNormalization = function (mean, variance, varianceEpsilon, scale, offset) {\n        if (varianceEpsilon === void 0) {\n            varianceEpsilon = .001;\n        }\n        this.throwIfDisposed();\n        return ops.batchNormalization(this, mean, variance, varianceEpsilon, scale, offset);\n    };\n    Tensor.prototype.logSumExp = function (axis, keepDims) {\n        if (axis === void 0) {\n            axis = null;\n        }\n        if (keepDims === void 0) {\n            keepDims = false;\n        }\n        this.throwIfDisposed();\n        return ops.logSumExp(this, axis, keepDims);\n    };\n    Tensor.prototype.sum = function (axis, keepDims) {\n        if (axis === void 0) {\n            axis = null;\n        }\n        if (keepDims === void 0) {\n            keepDims = false;\n        }\n        this.throwIfDisposed();\n        return ops.sum(this, axis, keepDims);\n    };\n    Tensor.prototype.mean = function (axis, keepDims) {\n        if (axis === void 0) {\n            axis = null;\n        }\n        if (keepDims === void 0) {\n            keepDims = false;\n        }\n        this.throwIfDisposed();\n        return ops.mean(this, axis, keepDims);\n    };\n    Tensor.prototype.min = function (axis, keepDims) {\n        if (axis === void 0) {\n            axis = null;\n        }\n        if (keepDims === void 0) {\n            keepDims = false;\n        }\n        this.throwIfDisposed();\n        return ops.min(this, axis, keepDims);\n    };\n    Tensor.prototype.max = function (axis, keepDims) {\n        if (axis === void 0) {\n            axis = null;\n        }\n        if (keepDims === void 0) {\n            keepDims = false;\n        }\n        this.throwIfDisposed();\n        return ops.max(this, axis, keepDims);\n    };\n    Tensor.prototype.argMin = function (axis) {\n        if (axis === void 0) {\n            axis = null;\n        }\n        this.throwIfDisposed();\n        return ops.argMin(this, axis);\n    };\n    Tensor.prototype.argMax = function (axis) {\n        if (axis === void 0) {\n            axis = null;\n        }\n        this.throwIfDisposed();\n        return ops.argMax(this, axis);\n    };\n    Tensor.prototype.add = function (x) {\n        this.throwIfDisposed();\n        return ops.add(this, x);\n    };\n    Tensor.prototype.addStrict = function (x) {\n        this.throwIfDisposed();\n        return ops.addStrict(this, x);\n    };\n    Tensor.prototype.sub = function (x) {\n        this.throwIfDisposed();\n        return ops.sub(this, x);\n    };\n    Tensor.prototype.subStrict = function (x) {\n        this.throwIfDisposed();\n        return ops.subStrict(this, x);\n    };\n    Tensor.prototype.pow = function (exp) {\n        this.throwIfDisposed();\n        return ops.pow(this, exp);\n    };\n    Tensor.prototype.powStrict = function (exp) {\n        this.throwIfDisposed();\n        return ops.powStrict(this, exp);\n    };\n    Tensor.prototype.mul = function (x) {\n        this.throwIfDisposed();\n        return ops.mul(this, x);\n    };\n    Tensor.prototype.mulStrict = function (x) {\n        this.throwIfDisposed();\n        return ops.mulStrict(this, x);\n    };\n    Tensor.prototype.div = function (x) {\n        this.throwIfDisposed();\n        return ops.div(this, x);\n    };\n    Tensor.prototype.divStrict = function (x) {\n        this.throwIfDisposed();\n        return ops.divStrict(this, x);\n    };\n    Tensor.prototype.minimum = function (x) {\n        this.throwIfDisposed();\n        return ops.minimum(this, x);\n    };\n    Tensor.prototype.minimumStrict = function (x) {\n        this.throwIfDisposed();\n        return ops.minimumStrict(this, x);\n    };\n    Tensor.prototype.maximum = function (x) {\n        this.throwIfDisposed();\n        return ops.maximum(this, x);\n    };\n    Tensor.prototype.maximumStrict = function (x) {\n        this.throwIfDisposed();\n        return ops.maximumStrict(this, x);\n    };\n    Tensor.prototype.transpose = function (perm) {\n        this.throwIfDisposed();\n        return ops.transpose(this, perm);\n    };\n    Tensor.prototype.notEqual = function (x) {\n        this.throwIfDisposed();\n        return ops.notEqual(this, x);\n    };\n    Tensor.prototype.notEqualStrict = function (x) {\n        this.throwIfDisposed();\n        return ops.notEqualStrict(this, x);\n    };\n    Tensor.prototype.less = function (x) {\n        this.throwIfDisposed();\n        return ops.less(this, x);\n    };\n    Tensor.prototype.lessStrict = function (x) {\n        this.throwIfDisposed();\n        return ops.lessStrict(this, x);\n    };\n    Tensor.prototype.equal = function (x) {\n        this.throwIfDisposed();\n        return ops.equal(this, x);\n    };\n    Tensor.prototype.equalStrict = function (x) {\n        this.throwIfDisposed();\n        return ops.equalStrict(this, x);\n    };\n    Tensor.prototype.lessEqual = function (x) {\n        this.throwIfDisposed();\n        return ops.lessEqual(this, x);\n    };\n    Tensor.prototype.lessEqualStrict = function (x) {\n        this.throwIfDisposed();\n        return ops.lessEqualStrict(this, x);\n    };\n    Tensor.prototype.greater = function (x) {\n        this.throwIfDisposed();\n        return ops.greater(this, x);\n    };\n    Tensor.prototype.greaterStrict = function (x) {\n        this.throwIfDisposed();\n        return ops.greaterStrict(this, x);\n    };\n    Tensor.prototype.greaterEqual = function (x) {\n        this.throwIfDisposed();\n        return ops.greaterEqual(this, x);\n    };\n    Tensor.prototype.greaterEqualStrict = function (x) {\n        this.throwIfDisposed();\n        return ops.greaterEqualStrict(this, x);\n    };\n    Tensor.prototype.logicalAnd = function (x) {\n        this.throwIfDisposed();\n        return ops.logicalAnd(this, x);\n    };\n    Tensor.prototype.logicalOr = function (x) {\n        this.throwIfDisposed();\n        return ops.logicalOr(this, x);\n    };\n    Tensor.prototype.logicalXor = function (x) {\n        this.throwIfDisposed();\n        return ops.logicalXor(this, x);\n    };\n    Tensor.prototype.where = function (condition, x) {\n        this.throwIfDisposed();\n        return ops.where(condition, this, x);\n    };\n    Tensor.prototype.neg = function () {\n        this.throwIfDisposed();\n        return ops.neg(this);\n    };\n    Tensor.prototype.ceil = function () {\n        this.throwIfDisposed();\n        return ops.ceil(this);\n    };\n    Tensor.prototype.floor = function () {\n        this.throwIfDisposed();\n        return ops.floor(this);\n    };\n    Tensor.prototype.exp = function () {\n        this.throwIfDisposed();\n        return ops.exp(this);\n    };\n    Tensor.prototype.log = function () {\n        this.throwIfDisposed();\n        return ops.log(this);\n    };\n    Tensor.prototype.log1p = function () {\n        this.throwIfDisposed();\n        return ops.log1p(this);\n    };\n    Tensor.prototype.sqrt = function () {\n        this.throwIfDisposed();\n        return ops.sqrt(this);\n    };\n    Tensor.prototype.square = function () {\n        this.throwIfDisposed();\n        return ops.square(this);\n    };\n    Tensor.prototype.abs = function () {\n        this.throwIfDisposed();\n        return ops.abs(this);\n    };\n    Tensor.prototype.clipByValue = function (min, max) {\n        this.throwIfDisposed();\n        return ops.clipByValue(this, min, max);\n    };\n    Tensor.prototype.relu = function () {\n        this.throwIfDisposed();\n        return ops.relu(this);\n    };\n    Tensor.prototype.elu = function () {\n        this.throwIfDisposed();\n        return ops.elu(this);\n    };\n    Tensor.prototype.selu = function () {\n        this.throwIfDisposed();\n        return ops.selu(this);\n    };\n    Tensor.prototype.leakyRelu = function (alpha) {\n        if (alpha === void 0) {\n            alpha = 0.2;\n        }\n        this.throwIfDisposed();\n        return ops.leakyRelu(this, alpha);\n    };\n    Tensor.prototype.prelu = function (alpha) {\n        this.throwIfDisposed();\n        return ops.prelu(this, alpha);\n    };\n    Tensor.prototype.sigmoid = function () {\n        this.throwIfDisposed();\n        return ops.sigmoid(this);\n    };\n    Tensor.prototype.sin = function () {\n        this.throwIfDisposed();\n        return ops.sin(this);\n    };\n    Tensor.prototype.cos = function () {\n        this.throwIfDisposed();\n        return ops.cos(this);\n    };\n    Tensor.prototype.tan = function () {\n        this.throwIfDisposed();\n        return ops.tan(this);\n    };\n    Tensor.prototype.asin = function () {\n        this.throwIfDisposed();\n        return ops.asin(this);\n    };\n    Tensor.prototype.acos = function () {\n        this.throwIfDisposed();\n        return ops.acos(this);\n    };\n    Tensor.prototype.atan = function () {\n        this.throwIfDisposed();\n        return ops.atan(this);\n    };\n    Tensor.prototype.sinh = function () {\n        this.throwIfDisposed();\n        return ops.sinh(this);\n    };\n    Tensor.prototype.cosh = function () {\n        this.throwIfDisposed();\n        return ops.cosh(this);\n    };\n    Tensor.prototype.tanh = function () {\n        this.throwIfDisposed();\n        return ops.tanh(this);\n    };\n    Tensor.prototype.step = function (alpha) {\n        if (alpha === void 0) {\n            alpha = 0.0;\n        }\n        this.throwIfDisposed();\n        return ops.step(this, alpha);\n    };\n    Tensor.prototype.softmax = function (dim) {\n        if (dim === void 0) {\n            dim = -1;\n        }\n        this.throwIfDisposed();\n        return ops.softmax(this, dim);\n    };\n    Tensor.prototype.resizeBilinear = function (newShape2D, alignCorners) {\n        if (alignCorners === void 0) {\n            alignCorners = false;\n        }\n        this.throwIfDisposed();\n        return ops.image.resizeBilinear(this, newShape2D, alignCorners);\n    };\n    Tensor.prototype.conv1d = function (filter, stride, pad, dataFormat, dilation, dimRoundingMode) {\n        if (dataFormat === void 0) {\n            dataFormat = 'NWC';\n        }\n        if (dilation === void 0) {\n            dilation = 1;\n        }\n        this.throwIfDisposed();\n        return ops.conv1d(this, filter, stride, pad, dataFormat, dilation, dimRoundingMode);\n    };\n    Tensor.prototype.conv2d = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {\n        if (dataFormat === void 0) {\n            dataFormat = 'NHWC';\n        }\n        if (dilations === void 0) {\n            dilations = [1, 1];\n        }\n        this.throwIfDisposed();\n        return ops.conv2d(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n    };\n    Tensor.prototype.conv2dTranspose = function (filter, outputShape, strides, pad, dimRoundingMode) {\n        this.throwIfDisposed();\n        return ops.conv2dTranspose(this, filter, outputShape, strides, pad, dimRoundingMode);\n    };\n    Tensor.prototype.depthwiseConv2D = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {\n        if (dataFormat === void 0) {\n            dataFormat = 'NHWC';\n        }\n        if (dilations === void 0) {\n            dilations = [1, 1];\n        }\n        this.throwIfDisposed();\n        return ops.depthwiseConv2d(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n    };\n    Tensor.prototype.avgPool = function (filterSize, strides, pad, dimRoundingMode) {\n        this.throwIfDisposed();\n        return ops.avgPool(this, filterSize, strides, pad, dimRoundingMode);\n    };\n    Tensor.prototype.maxPool = function (filterSize, strides, pad, dimRoundingMode) {\n        this.throwIfDisposed();\n        return ops.maxPool(this, filterSize, strides, pad, dimRoundingMode);\n    };\n    Tensor.prototype.minPool = function (filterSize, strides, pad, dimRoundingMode) {\n        this.throwIfDisposed();\n        return ops.minPool(this, filterSize, strides, pad, dimRoundingMode);\n    };\n    Tensor.prototype.localResponseNormalization = function (radius, bias, alpha, beta, normRegion) {\n        if (radius === void 0) {\n            radius = 5;\n        }\n        if (bias === void 0) {\n            bias = 1;\n        }\n        if (alpha === void 0) {\n            alpha = 1;\n        }\n        if (beta === void 0) {\n            beta = 0.5;\n        }\n        if (normRegion === void 0) {\n            normRegion = 'acrossChannels';\n        }\n        return ops.localResponseNormalization(this, radius, bias, alpha, beta, normRegion);\n    };\n    Tensor.prototype.variable = function (trainable, name, dtype) {\n        if (trainable === void 0) {\n            trainable = true;\n        }\n        this.throwIfDisposed();\n        return Variable.variable(this, trainable, name, dtype);\n    };\n    Tensor.nextId = 0;\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, \"flatten\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, \"asScalar\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, \"as1D\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, \"as2D\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, \"as3D\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, \"as4D\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, \"asType\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, \"buffer\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, \"data\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, \"dataSync\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, \"dispose\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, \"toFloat\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, \"toInt\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, \"toBool\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, \"print\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, \"reshape\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, \"reshapeAs\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, \"expandDims\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, \"squeeze\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, \"clone\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor.prototype, \"toString\", null);\n    Tensor = Tensor_1 = __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Tensor);\n    return Tensor;\n    var Tensor_1;\n}();\nexports.Tensor = Tensor;\nvar Variable = function (_super) {\n    __extends(Variable, _super);\n    function Variable(initialValue, trainable, name) {\n        if (trainable === void 0) {\n            trainable = true;\n        }\n        var _this = _super.call(this, initialValue.shape, initialValue.dtype, null, initialValue.dataId) || this;\n        _this.trainable = trainable;\n        _this.name = name;\n        if (_this.name == null) {\n            _this.name = Variable_1.nextVarId.toString();\n            Variable_1.nextVarId++;\n        }\n        environment_1.ENV.engine.registerVariable(_this);\n        return _this;\n    }\n    Variable_1 = Variable;\n    Variable.variable = function (initialValue, trainable, name, dtype) {\n        if (trainable === void 0) {\n            trainable = true;\n        }\n        if (dtype != null && dtype !== initialValue.dtype) {\n            initialValue = initialValue.asType(dtype);\n        }\n        return new Variable_1(initialValue, trainable, name);\n    };\n    Variable.prototype.assign = function (newValue) {\n        if (newValue.dtype !== this.dtype) {\n            throw new Error(\"dtype of the new value (\" + newValue.dtype + \") and \" + (\"previous value (\" + this.dtype + \") must match\"));\n        }\n        if (!util.arraysEqual(newValue.shape, this.shape)) {\n            throw new Error(\"shape of the new value (\" + newValue.shape + \") and \" + (\"previous value (\" + this.shape + \") must match\"));\n        }\n        environment_1.ENV.engine.disposeTensor(this);\n        this.dataId = newValue.dataId;\n        environment_1.ENV.engine.registerTensor(this);\n    };\n    Variable.nextVarId = 0;\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Variable.prototype, \"assign\", null);\n    __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Creation' })], Variable, \"variable\", null);\n    Variable = Variable_1 = __decorate([doc_1.doc({ heading: 'Tensors', subheading: 'Classes' })], Variable);\n    return Variable;\n    var Variable_1;\n}(Tensor);\nexports.Variable = Variable;\nvar variable = Variable.variable;\nexports.variable = variable;\nfunction computeStrides(shape) {\n    var rank = shape.length;\n    if (rank < 2) {\n        return [];\n    }\n    var strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (var i = rank - 3; i >= 0; --i) {\n        strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    return strides;\n}\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/tensor.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar FORMAT_LIMIT_NUM_VALS = 20;\nvar FORMAT_NUM_FIRST_LAST_VALS = 3;\nvar FORMAT_NUM_SIG_DIGITS = 7;\nfunction tensorToString(t, verbose) {\n    var vals = t.dataSync();\n    var padPerCol = computeMaxSizePerColumn(t);\n    var valsLines = subTensorToString(vals, t.shape, t.strides, padPerCol);\n    var lines = ['Tensor'];\n    if (verbose) {\n        lines.push(\"  dtype: \" + t.dtype);\n        lines.push(\"  rank: \" + t.rank);\n        lines.push(\"  shape: [\" + t.shape + \"]\");\n        lines.push(\"  values:\");\n    }\n    lines.push(valsLines.map(function (l) {\n        return '    ' + l;\n    }).join('\\n'));\n    return lines.join('\\n');\n}\nexports.tensorToString = tensorToString;\nfunction computeMaxSizePerColumn(t) {\n    var vals = t.dataSync();\n    var n = t.size;\n    var numCols = t.strides[t.strides.length - 1];\n    var padPerCol = new Array(numCols).fill(0);\n    if (t.rank > 1) {\n        for (var row = 0; row < n / numCols; row++) {\n            var offset = row * numCols;\n            for (var j = 0; j < numCols; j++) {\n                padPerCol[j] = Math.max(padPerCol[j], valToString(vals[offset + j], 0).length);\n            }\n        }\n    }\n    return padPerCol;\n}\nfunction valToString(val, pad) {\n    return util.rightPad(parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString(), pad);\n}\nfunction subTensorToString(vals, shape, strides, padPerCol, isLast) {\n    if (isLast === void 0) {\n        isLast = true;\n    }\n    var size = shape[0];\n    var rank = shape.length;\n    if (rank === 0) {\n        return [vals[0].toString()];\n    }\n    if (rank === 1) {\n        if (size > FORMAT_LIMIT_NUM_VALS) {\n            var firstVals = Array.from(vals.subarray(0, FORMAT_NUM_FIRST_LAST_VALS));\n            var lastVals = Array.from(vals.subarray(size - FORMAT_NUM_FIRST_LAST_VALS, size));\n            return ['[' + firstVals.map(function (x, i) {\n                return valToString(x, padPerCol[i]);\n            }).join(', ') + ', ..., ' + lastVals.map(function (x, i) {\n                return valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i]);\n            }).join(', ') + ']'];\n        }\n        return ['[' + Array.from(vals).map(function (x, i) {\n            return valToString(x, padPerCol[i]);\n        }).join(', ') + ']'];\n    }\n    var subshape = shape.slice(1);\n    var substrides = strides.slice(1);\n    var stride = strides[0];\n    var lines = [];\n    if (size > FORMAT_LIMIT_NUM_VALS) {\n        for (var i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {\n            var start = i * stride;\n            var end = start + stride;\n            lines.push.apply(lines, subTensorToString(vals.subarray(start, end), subshape, substrides, padPerCol, false));\n        }\n        lines.push('...');\n        for (var i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {\n            var start = i * stride;\n            var end = start + stride;\n            lines.push.apply(lines, subTensorToString(vals.subarray(start, end), subshape, substrides, padPerCol, i === size - 1));\n        }\n    } else {\n        for (var i = 0; i < size; i++) {\n            var start = i * stride;\n            var end = start + stride;\n            lines.push.apply(lines, subTensorToString(vals.subarray(start, end), subshape, substrides, padPerCol, i === size - 1));\n        }\n    }\n    var sep = rank === 2 ? ',' : '';\n    lines[0] = '[' + lines[0] + sep;\n    for (var i = 1; i < lines.length - 1; i++) {\n        lines[i] = ' ' + lines[i] + sep;\n    }\n    var newLineSep = ',\\n';\n    for (var i = 2; i < rank; i++) {\n        newLineSep += '\\n';\n    }\n    lines[lines.length - 1] = ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);\n    return lines;\n}\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/test_util.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/test_util.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = __webpack_require__(/*! ./environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar backend_cpu_1 = __webpack_require__(/*! ./kernels/backend_cpu */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/backend_cpu.js\");\nvar backend_webgl_1 = __webpack_require__(/*! ./kernels/backend_webgl */ \"./node_modules/@tensorflow/tfjs-core/dist/kernels/backend_webgl.js\");\nvar tensor_1 = __webpack_require__(/*! ./tensor */ \"./node_modules/@tensorflow/tfjs-core/dist/tensor.js\");\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nexports.WEBGL_ENVS = [{ 'BACKEND': 'webgl', 'WEBGL_FLOAT_TEXTURE_ENABLED': true, 'WEBGL_VERSION': 1 }, { 'BACKEND': 'webgl', 'WEBGL_FLOAT_TEXTURE_ENABLED': true, 'WEBGL_VERSION': 2 }];\nexports.CPU_ENVS = [{ 'BACKEND': 'cpu' }];\nexports.ALL_ENVS = exports.WEBGL_ENVS.concat(exports.CPU_ENVS);\nexports.TEST_EPSILON = 1e-3;\nfunction expectArraysClose(actual, expected, epsilon) {\n    if (epsilon === void 0) {\n        epsilon = exports.TEST_EPSILON;\n    }\n    if (!(actual instanceof tensor_1.Tensor) && !(expected instanceof tensor_1.Tensor)) {\n        var aType = actual.constructor.name;\n        var bType = expected.constructor.name;\n        if (aType !== bType) {\n            throw new Error(\"Arrays are of different type actual: \" + aType + \" \" + (\"vs expected: \" + bType));\n        }\n    } else if (actual instanceof tensor_1.Tensor && expected instanceof tensor_1.Tensor) {\n        if (actual.dtype !== expected.dtype) {\n            throw new Error(\"Arrays are of different type actual: \" + actual.dtype + \" \" + (\"vs expected: \" + expected.dtype + \".\"));\n        }\n        if (!util.arraysEqual(actual.shape, expected.shape)) {\n            throw new Error(\"Arrays are of different shape actual: \" + actual.shape + \" \" + (\"vs expected: \" + expected.shape + \".\"));\n        }\n    }\n    var actualValues;\n    var expectedValues;\n    if (actual instanceof tensor_1.Tensor) {\n        actualValues = actual.dataSync();\n    } else {\n        actualValues = actual;\n    }\n    if (expected instanceof tensor_1.Tensor) {\n        expectedValues = expected.dataSync();\n    } else {\n        expectedValues = expected;\n    }\n    if (actualValues.length !== expectedValues.length) {\n        throw new Error(\"Arrays have different lengths actual: \" + actualValues.length + \" vs \" + (\"expected: \" + expectedValues.length + \".\\n\") + (\"Actual:   \" + actualValues + \".\\n\") + (\"Expected: \" + expectedValues + \".\"));\n    }\n    for (var i = 0; i < expectedValues.length; ++i) {\n        var a = actualValues[i];\n        var e = expectedValues[i];\n        if (!areClose(a, Number(e), epsilon)) {\n            throw new Error(\"Arrays differ: actual[\" + i + \"] = \" + a + \", expected[\" + i + \"] = \" + e + \".\\n\" + (\"Actual:   \" + actualValues + \".\\n\") + (\"Expected: \" + expectedValues + \".\"));\n        }\n    }\n}\nexports.expectArraysClose = expectArraysClose;\nfunction expectArraysEqual(actual, expected) {\n    return expectArraysClose(actual, expected, 0);\n}\nexports.expectArraysEqual = expectArraysEqual;\nfunction expectNumbersClose(a, e, epsilon) {\n    if (epsilon === void 0) {\n        epsilon = exports.TEST_EPSILON;\n    }\n    if (!areClose(a, e, epsilon)) {\n        throw new Error(\"Numbers differ: actual === \" + a + \", expected === \" + e);\n    }\n}\nexports.expectNumbersClose = expectNumbersClose;\nfunction areClose(a, e, epsilon) {\n    if (isNaN(a) && isNaN(e)) {\n        return true;\n    }\n    if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {\n        return false;\n    }\n    return true;\n}\nfunction expectValuesInRange(actual, low, high) {\n    var actualVals;\n    if (actual instanceof tensor_1.Tensor) {\n        actualVals = actual.dataSync();\n    } else {\n        actualVals = actual;\n    }\n    for (var i = 0; i < actualVals.length; i++) {\n        if (actualVals[i] < low || actualVals[i] > high) {\n            throw new Error(\"Value out of range:\" + actualVals[i] + \" low: \" + low + \", high: \" + high);\n        }\n    }\n}\nexports.expectValuesInRange = expectValuesInRange;\nfunction describeWithFlags(name, featuresList, tests) {\n    featuresList.forEach(function (features) {\n        var testName = name + ' ' + JSON.stringify(features);\n        executeTests(testName, tests, features);\n    });\n}\nexports.describeWithFlags = describeWithFlags;\nfunction executeTests(testName, tests, features) {\n    describe(testName, function () {\n        beforeEach(function () {\n            environment_1.ENV.setFeatures(features || {});\n            environment_1.ENV.addCustomBackend('webgl', function () {\n                return new backend_webgl_1.MathBackendWebGL();\n            });\n            environment_1.ENV.addCustomBackend('cpu', function () {\n                return new backend_cpu_1.MathBackendCPU();\n            });\n            if (features && features.BACKEND != null) {\n                environment_1.Environment.setBackend(features.BACKEND);\n            }\n            environment_1.ENV.engine.startScope();\n        });\n        afterEach(function () {\n            environment_1.ENV.engine.endScope(null);\n            environment_1.ENV.reset();\n        });\n        tests();\n    });\n}\nfunction assertIsNan(val, dtype) {\n    if (!util.isValNaN(val, dtype)) {\n        throw new Error(\"Value \" + val + \" does not represent NaN for dtype \" + dtype);\n    }\n}\nexports.assertIsNan = assertIsNan;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/test_util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/tracking.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/tracking.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar doc_1 = __webpack_require__(/*! ./doc */ \"./node_modules/@tensorflow/tfjs-core/dist/doc.js\");\nvar environment_1 = __webpack_require__(/*! ./environment */ \"./node_modules/@tensorflow/tfjs-core/dist/environment.js\");\nvar util_1 = __webpack_require__(/*! ./util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar Tracking = function () {\n    function Tracking() {}\n    Tracking.tidy = function (nameOrFn, fn, gradMode) {\n        if (gradMode === void 0) {\n            gradMode = false;\n        }\n        var name = null;\n        if (fn == null) {\n            if (typeof nameOrFn !== 'function') {\n                throw new Error('Please provide a function to tidy()');\n            }\n            fn = nameOrFn;\n        } else {\n            if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n                throw new Error('When calling with two arguments, the first argument ' + 'to tidy() must be a string');\n            }\n            if (typeof fn !== 'function') {\n                throw new Error('When calling with two arguments, the 2nd argument ' + 'to tidy() must be a function');\n            }\n            name = nameOrFn;\n        }\n        environment_1.ENV.engine.startScope(name, gradMode);\n        var result = fn();\n        if (result instanceof Promise) {\n            console.error('Cannot return a Promise inside of tidy.');\n        }\n        environment_1.ENV.engine.endScope(result, gradMode);\n        return result;\n    };\n    Tracking.dispose = function (container) {\n        var tensors = util_1.extractTensorsFromAny(container);\n        tensors.forEach(function (tensor) {\n            return tensor.dispose();\n        });\n    };\n    Tracking.keep = function (result) {\n        return environment_1.ENV.engine.keep(result);\n    };\n    Tracking.time = function (f) {\n        return environment_1.ENV.engine.time(f);\n    };\n    __decorate([doc_1.doc({ heading: 'Performance', subheading: 'Memory' })], Tracking, \"tidy\", null);\n    __decorate([doc_1.doc({ heading: 'Performance', subheading: 'Memory' })], Tracking, \"keep\", null);\n    __decorate([doc_1.doc({ heading: 'Performance', subheading: 'Timing' })], Tracking, \"time\", null);\n    return Tracking;\n}();\nexports.Tracking = Tracking;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/tracking.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/train.js":
/*!**********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/train.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar adadelta_optimizer_1 = __webpack_require__(/*! ./optimizers/adadelta_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js\");\nvar adagrad_optimizer_1 = __webpack_require__(/*! ./optimizers/adagrad_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js\");\nvar adam_optimizer_1 = __webpack_require__(/*! ./optimizers/adam_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js\");\nvar adamax_optimizer_1 = __webpack_require__(/*! ./optimizers/adamax_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js\");\nvar momentum_optimizer_1 = __webpack_require__(/*! ./optimizers/momentum_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js\");\nvar optimizer_constructors_1 = __webpack_require__(/*! ./optimizers/optimizer_constructors */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer_constructors.js\");\nvar rmsprop_optimizer_1 = __webpack_require__(/*! ./optimizers/rmsprop_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js\");\nvar sgd_optimizer_1 = __webpack_require__(/*! ./optimizers/sgd_optimizer */ \"./node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js\");\n[momentum_optimizer_1.MomentumOptimizer, sgd_optimizer_1.SGDOptimizer, adadelta_optimizer_1.AdadeltaOptimizer, adagrad_optimizer_1.AdagradOptimizer, rmsprop_optimizer_1.RMSPropOptimizer, adamax_optimizer_1.AdamaxOptimizer, adam_optimizer_1.AdamOptimizer];\nexports.train = {\n    sgd: optimizer_constructors_1.OptimizerConstructors.sgd,\n    momentum: optimizer_constructors_1.OptimizerConstructors.momentum,\n    adadelta: optimizer_constructors_1.OptimizerConstructors.adadelta,\n    adagrad: optimizer_constructors_1.OptimizerConstructors.adagrad,\n    rmsprop: optimizer_constructors_1.OptimizerConstructors.rmsprop,\n    adamax: optimizer_constructors_1.OptimizerConstructors.adamax,\n    adam: optimizer_constructors_1.OptimizerConstructors.adam\n};\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/train.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/types.js":
/*!**********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/types.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DType;\n(function (DType) {\n    DType[\"float32\"] = \"float32\";\n    DType[\"int32\"] = \"int32\";\n    DType[\"bool\"] = \"bool\";\n})(DType = exports.DType || (exports.DType = {}));\nvar Rank;\n(function (Rank) {\n    Rank[\"R0\"] = \"R0\";\n    Rank[\"R1\"] = \"R1\";\n    Rank[\"R2\"] = \"R2\";\n    Rank[\"R3\"] = \"R3\";\n    Rank[\"R4\"] = \"R4\";\n})(Rank = exports.Rank || (exports.Rank = {}));\nvar UpcastInt32AndMap;\n(function (UpcastInt32AndMap) {\n    UpcastInt32AndMap[\"float32\"] = \"float32\";\n    UpcastInt32AndMap[\"int32\"] = \"int32\";\n    UpcastInt32AndMap[\"bool\"] = \"int32\";\n})(UpcastInt32AndMap || (UpcastInt32AndMap = {}));\nvar UpcastBoolAndMap;\n(function (UpcastBoolAndMap) {\n    UpcastBoolAndMap[\"float32\"] = \"float32\";\n    UpcastBoolAndMap[\"int32\"] = \"int32\";\n    UpcastBoolAndMap[\"bool\"] = \"bool\";\n})(UpcastBoolAndMap || (UpcastBoolAndMap = {}));\nvar UpcastFloat32AndMap;\n(function (UpcastFloat32AndMap) {\n    UpcastFloat32AndMap[\"float32\"] = \"float32\";\n    UpcastFloat32AndMap[\"int32\"] = \"float32\";\n    UpcastFloat32AndMap[\"bool\"] = \"float32\";\n})(UpcastFloat32AndMap || (UpcastFloat32AndMap = {}));\nvar upcastTypeMap = {\n    float32: UpcastFloat32AndMap,\n    int32: UpcastInt32AndMap,\n    bool: UpcastBoolAndMap\n};\nfunction upcastType(typeA, typeB) {\n    return upcastTypeMap[typeA][typeB];\n}\nexports.upcastType = upcastType;\nfunction sumOutType(type) {\n    return upcastType(type, 'int32');\n}\nexports.sumOutType = sumOutType;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/types.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/util.js":
/*!*********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/util.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tensor_1 = __webpack_require__(/*! ./tensor */ \"./node_modules/@tensorflow/tfjs-core/dist/tensor.js\");\nfunction shuffle(array) {\n    var counter = array.length;\n    var temp = 0;\n    var index = 0;\n    while (counter > 0) {\n        index = Math.random() * counter | 0;\n        counter--;\n        temp = array[counter];\n        array[counter] = array[index];\n        array[index] = temp;\n    }\n}\nexports.shuffle = shuffle;\nfunction clamp(min, x, max) {\n    return Math.max(min, Math.min(x, max));\n}\nexports.clamp = clamp;\nfunction randUniform(a, b) {\n    return Math.random() * (b - a) + a;\n}\nexports.randUniform = randUniform;\nfunction distSquared(a, b) {\n    var result = 0;\n    for (var i = 0; i < a.length; i++) {\n        var diff = Number(a[i]) - Number(b[i]);\n        result += diff * diff;\n    }\n    return result;\n}\nexports.distSquared = distSquared;\nfunction assert(expr, msg) {\n    if (!expr) {\n        throw new Error(msg);\n    }\n}\nexports.assert = assert;\nfunction assertShapesMatch(shapeA, shapeB, errorMessagePrefix) {\n    if (errorMessagePrefix === void 0) {\n        errorMessagePrefix = '';\n    }\n    assert(arraysEqual(shapeA, shapeB), errorMessagePrefix + (\"Shapes \" + shapeA + \" and \" + shapeB + \" must match\"));\n}\nexports.assertShapesMatch = assertShapesMatch;\nfunction assertTypesMatch(a, b) {\n    assert(a.dtype === b.dtype, \"The dtypes of the first (\" + a.dtype + \") and \" + (\"second (\" + b.dtype + \") input must match\"));\n}\nexports.assertTypesMatch = assertTypesMatch;\nfunction flatten(arr, ret) {\n    if (ret === void 0) {\n        ret = [];\n    }\n    if (Array.isArray(arr)) {\n        for (var i = 0; i < arr.length; ++i) {\n            flatten(arr[i], ret);\n        }\n    } else {\n        ret.push(arr);\n    }\n    return ret;\n}\nexports.flatten = flatten;\nfunction inferShape(val) {\n    if (isTypedArray(val)) {\n        return [val.length];\n    }\n    if (!Array.isArray(val)) {\n        return [];\n    }\n    var shape = [];\n    while (val instanceof Array) {\n        shape.push(val.length);\n        val = val[0];\n    }\n    return shape;\n}\nexports.inferShape = inferShape;\nfunction sizeFromShape(shape) {\n    if (shape.length === 0) {\n        return 1;\n    }\n    var size = shape[0];\n    for (var i = 1; i < shape.length; i++) {\n        size *= shape[i];\n    }\n    return size;\n}\nexports.sizeFromShape = sizeFromShape;\nfunction isScalarShape(shape) {\n    return shape.length === 0;\n}\nexports.isScalarShape = isScalarShape;\nfunction arraysEqual(n1, n2) {\n    if (n1.length !== n2.length) {\n        return false;\n    }\n    for (var i = 0; i < n1.length; i++) {\n        if (n1[i] !== n2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.arraysEqual = arraysEqual;\nfunction isInt(a) {\n    return a % 1 === 0;\n}\nexports.isInt = isInt;\nfunction tanh(x) {\n    if (Math.tanh != null) {\n        return Math.tanh(x);\n    }\n    if (x === Infinity) {\n        return 1;\n    } else if (x === -Infinity) {\n        return -1;\n    } else {\n        var e2x = Math.exp(2 * x);\n        return (e2x - 1) / (e2x + 1);\n    }\n}\nexports.tanh = tanh;\nfunction sizeToSquarishShape(size) {\n    for (var a = Math.floor(Math.sqrt(size)); a > 1; --a) {\n        if (size % a === 0) {\n            return [a, size / a];\n        }\n    }\n    return [1, size];\n}\nexports.sizeToSquarishShape = sizeToSquarishShape;\nfunction createShuffledIndices(n) {\n    var shuffledIndices = new Uint32Array(n);\n    for (var i = 0; i < n; ++i) {\n        shuffledIndices[i] = i;\n    }\n    shuffle(shuffledIndices);\n    return shuffledIndices;\n}\nexports.createShuffledIndices = createShuffledIndices;\nfunction rightPad(a, size) {\n    if (size <= a.length) {\n        return a;\n    }\n    return a + ' '.repeat(size - a.length);\n}\nexports.rightPad = rightPad;\nfunction repeatedTry(checkFn, delayFn, maxCounter) {\n    if (delayFn === void 0) {\n        delayFn = function (counter) {\n            return 0;\n        };\n    }\n    return new Promise(function (resolve, reject) {\n        var tryCount = 0;\n        var tryFn = function () {\n            if (checkFn()) {\n                resolve();\n                return;\n            }\n            tryCount++;\n            var nextBackoff = delayFn(tryCount);\n            if (maxCounter != null && tryCount >= maxCounter) {\n                reject();\n                return;\n            }\n            setTimeout(tryFn, nextBackoff);\n        };\n        setTimeout(tryFn, 0);\n    });\n}\nexports.repeatedTry = repeatedTry;\nfunction getQueryParams(queryString) {\n    var params = {};\n    queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, function (s) {\n        var t = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            t[_i - 1] = arguments[_i];\n        }\n        decodeParam(params, t[0], t[1]);\n        return t.join('=');\n    });\n    return params;\n}\nexports.getQueryParams = getQueryParams;\nfunction decodeParam(params, name, value) {\n    params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\nfunction inferFromImplicitShape(shape, size) {\n    var shapeProd = 1;\n    var implicitIdx = -1;\n    for (var i = 0; i < shape.length; ++i) {\n        if (shape[i] > 0) {\n            shapeProd *= shape[i];\n        } else if (shape[i] === -1) {\n            if (implicitIdx !== -1) {\n                throw Error(\"Shapes can only have 1 implicit size. \" + (\"Found -1 at dim \" + implicitIdx + \" and dim \" + i));\n            }\n            implicitIdx = i;\n        } else if (shape[i] <= 0) {\n            throw Error(\"Shapes can not be <= 0. Found \" + shape[i] + \" at dim \" + i);\n        }\n    }\n    if (implicitIdx === -1) {\n        if (size > 0 && size !== shapeProd) {\n            throw Error(\"Size (\" + size + \") must match the product of shape \" + shape);\n        }\n        return shape;\n    }\n    if (size % shapeProd !== 0) {\n        throw Error(\"The implicit shape can't be a fractional number. \" + (\"Got \" + size + \" / \" + shapeProd));\n    }\n    var newShape = shape.slice();\n    newShape[implicitIdx] = size / shapeProd;\n    return newShape;\n}\nexports.inferFromImplicitShape = inferFromImplicitShape;\nexports.NAN_INT32 = 1 << 31;\nexports.NAN_BOOL = 255;\nexports.NAN_FLOAT32 = NaN;\nfunction getNaN(dtype) {\n    if (dtype === 'float32') {\n        return exports.NAN_FLOAT32;\n    } else if (dtype === 'int32') {\n        return exports.NAN_INT32;\n    } else if (dtype === 'bool') {\n        return exports.NAN_BOOL;\n    } else {\n        throw new Error(\"Unknown dtype \" + dtype);\n    }\n}\nexports.getNaN = getNaN;\nfunction isValNaN(val, dtype) {\n    if (isNaN(val)) {\n        return true;\n    }\n    if (dtype === 'float32') {\n        return false;\n    } else if (dtype === 'int32') {\n        return val === exports.NAN_INT32;\n    } else if (dtype === 'bool') {\n        return val === exports.NAN_BOOL;\n    } else {\n        throw new Error(\"Unknown dtype \" + dtype);\n    }\n}\nexports.isValNaN = isValNaN;\nfunction squeezeShape(shape, axis) {\n    var newShape = [];\n    var keptDims = [];\n    var j = 0;\n    for (var i = 0; i < shape.length; ++i) {\n        if (axis != null) {\n            if (axis[j] === i && shape[i] > 1) {\n                throw new Error(\"Can't squeeze axis \" + i + \" since its dim '\" + shape[i] + \"' is not 1\");\n            }\n            if ((axis[j] == null || axis[j] > i) && shape[i] === 1) {\n                newShape.push(shape[i]);\n                keptDims.push(i);\n            }\n            if (axis[j] <= i) {\n                j++;\n            }\n        }\n        if (shape[i] > 1) {\n            newShape.push(shape[i]);\n            keptDims.push(i);\n        }\n    }\n    return { newShape: newShape, keptDims: keptDims };\n}\nexports.squeezeShape = squeezeShape;\nfunction getTypedArrayFromDType(dtype, size) {\n    var values = null;\n    if (dtype == null || dtype === 'float32') {\n        values = new Float32Array(size);\n    } else if (dtype === 'int32') {\n        values = new Int32Array(size);\n    } else if (dtype === 'bool') {\n        values = new Uint8Array(size);\n    } else {\n        throw new Error(\"Unknown data type \" + dtype);\n    }\n    return values;\n}\nexports.getTypedArrayFromDType = getTypedArrayFromDType;\nfunction isTensorInList(tensor, tensorList) {\n    for (var i = 0; i < tensorList.length; i++) {\n        if (tensorList[i].id === tensor.id) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.isTensorInList = isTensorInList;\nfunction checkForNaN(vals, dtype, name) {\n    for (var i = 0; i < vals.length; i++) {\n        if (isValNaN(vals[i], dtype)) {\n            throw Error(\"The result of the '\" + name + \"' has NaNs.\");\n        }\n    }\n}\nexports.checkForNaN = checkForNaN;\nfunction flattenNameArrayMap(nameArrayMap, keys) {\n    var xs = [];\n    if (nameArrayMap instanceof tensor_1.Tensor) {\n        xs.push(nameArrayMap);\n    } else {\n        var xMap = nameArrayMap;\n        for (var i = 0; i < keys.length; i++) {\n            xs.push(xMap[keys[i]]);\n        }\n    }\n    return xs;\n}\nexports.flattenNameArrayMap = flattenNameArrayMap;\nfunction unflattenToNameArrayMap(keys, flatArrays) {\n    if (keys.length !== flatArrays.length) {\n        throw new Error(\"Cannot unflatten Tensor[], keys and arrays are not of same length.\");\n    }\n    var result = {};\n    for (var i = 0; i < keys.length; i++) {\n        result[keys[i]] = flatArrays[i];\n    }\n    return result;\n}\nexports.unflattenToNameArrayMap = unflattenToNameArrayMap;\nfunction hasEncodingLoss(oldType, newType) {\n    if (newType === 'float32') {\n        return false;\n    }\n    if (newType === 'int32' && oldType !== 'float32') {\n        return false;\n    }\n    if (newType === 'bool' && oldType === 'bool') {\n        return false;\n    }\n    return true;\n}\nexports.hasEncodingLoss = hasEncodingLoss;\nfunction copyTypedArray(array, dtype) {\n    if (dtype == null || dtype === 'float32') {\n        return new Float32Array(array);\n    } else if (dtype === 'int32') {\n        var vals = new Int32Array(array.length);\n        for (var i = 0; i < vals.length; ++i) {\n            var val = array[i];\n            if (isValNaN(val, 'int32')) {\n                vals[i] = getNaN('int32');\n            } else {\n                vals[i] = val;\n            }\n        }\n        return vals;\n    } else if (dtype === 'bool') {\n        var bool = new Uint8Array(array.length);\n        for (var i = 0; i < bool.length; ++i) {\n            var val = array[i];\n            if (isValNaN(val, 'bool')) {\n                bool[i] = getNaN('bool');\n            } else if (Math.round(val) !== 0) {\n                bool[i] = 1;\n            }\n        }\n        return bool;\n    } else {\n        throw new Error(\"Unknown data type \" + dtype);\n    }\n}\nexports.copyTypedArray = copyTypedArray;\nfunction isTypedArray(a) {\n    return a instanceof Float32Array || a instanceof Int32Array || a instanceof Uint8Array;\n}\nexports.isTypedArray = isTypedArray;\nfunction bytesPerElement(dtype) {\n    if (dtype === 'float32' || dtype === 'int32') {\n        return 4;\n    } else if (dtype === 'bool') {\n        return 1;\n    } else {\n        throw new Error(\"Unknown dtype \" + dtype);\n    }\n}\nexports.bytesPerElement = bytesPerElement;\nfunction isFunction(f) {\n    return !!(f && f.constructor && f.call && f.apply);\n}\nexports.isFunction = isFunction;\nfunction extractTensorsFromContainer(result) {\n    return extractTensorsFromAny(result);\n}\nexports.extractTensorsFromContainer = extractTensorsFromContainer;\nfunction extractTensorsFromAny(result) {\n    if (result == null) {\n        return [];\n    }\n    if (result instanceof tensor_1.Tensor) {\n        return [result];\n    }\n    var list = [];\n    var resultObj = result;\n    if (!isIterable(resultObj)) {\n        return [];\n    }\n    for (var k in resultObj) {\n        var sublist = flatten(resultObj[k]).filter(function (x) {\n            return x instanceof tensor_1.Tensor;\n        });\n        list.push.apply(list, sublist);\n    }\n    return list;\n}\nexports.extractTensorsFromAny = extractTensorsFromAny;\nfunction isIterable(obj) {\n    return Array.isArray(obj) || typeof obj === 'object';\n}\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/util.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/version.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/version.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar version = '0.6.0';\nexports.version = version;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/version.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/weights_loader.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/weights_loader.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : new P(function (resolve) {\n                resolve(result.value);\n            }).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n    var _ = { label: 0, sent: function () {\n            if (t[0] & 1) throw t[1];return t[1];\n        }, trys: [], ops: [] },\n        f,\n        y,\n        t,\n        g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n    }), g;\n    function verb(n) {\n        return function (v) {\n            return step([n, v]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0:case 1:\n                    t = op;break;\n                case 4:\n                    _.label++;return { value: op[1], done: false };\n                case 5:\n                    _.label++;y = op[1];op = [0];continue;\n                case 7:\n                    op = _.ops.pop();_.trys.pop();continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];t = op;break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];_.ops.push(op);break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [6, e];y = 0;\n        } finally {\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ops_1 = __webpack_require__(/*! ./ops/ops */ \"./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js\");\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/@tensorflow/tfjs-core/dist/util.js\");\nvar DTYPE_VALUE_SIZE_MAP = {\n    'float32': 4,\n    'int32': 4\n};\nfunction loadWeights(manifest, filePathPrefix, weightNames) {\n    if (filePathPrefix === void 0) {\n        filePathPrefix = '';\n    }\n    return __awaiter(this, void 0, void 0, function () {\n        var groupIndicesToFetchMap, groupWeightsToFetch, weightsFound, allManifestWeightNames, weightsNotFound, groupIndicesToFetch, requests, responses, buffers, weightsTensorMap, bufferIndexOffset;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    groupIndicesToFetchMap = manifest.map(function () {\n                        return false;\n                    });\n                    groupWeightsToFetch = {};\n                    weightsFound = weightNames != null ? weightNames.map(function () {\n                        return false;\n                    }) : [];\n                    allManifestWeightNames = [];\n                    manifest.forEach(function (manifestGroupConfig, groupIndex) {\n                        var groupOffset = 0;\n                        manifestGroupConfig.weights.forEach(function (weightsEntry) {\n                            var weightsBytes = DTYPE_VALUE_SIZE_MAP[weightsEntry.dtype] * util.sizeFromShape(weightsEntry.shape);\n                            var enqueueWeightsForFetchingFn = function () {\n                                groupIndicesToFetchMap[groupIndex] = true;\n                                if (groupWeightsToFetch[groupIndex] == null) {\n                                    groupWeightsToFetch[groupIndex] = [];\n                                }\n                                groupWeightsToFetch[groupIndex].push({\n                                    manifestEntry: weightsEntry,\n                                    groupOffset: groupOffset,\n                                    sizeBytes: weightsBytes\n                                });\n                            };\n                            if (weightNames != null) {\n                                weightNames.forEach(function (weightName, weightIndex) {\n                                    if (weightName === weightsEntry.name) {\n                                        enqueueWeightsForFetchingFn();\n                                        weightsFound[weightIndex] = true;\n                                    }\n                                });\n                            } else {\n                                enqueueWeightsForFetchingFn();\n                            }\n                            allManifestWeightNames.push(weightsEntry.name);\n                            groupOffset += weightsBytes;\n                        });\n                    });\n                    if (!weightsFound.every(function (found) {\n                        return found;\n                    })) {\n                        weightsNotFound = weightNames.filter(function (weight, i) {\n                            return !weightsFound[i];\n                        });\n                        throw new Error(\"Could not find weights in manifest with names: \" + (weightsNotFound.join(', ') + \". \\n\") + \"Manifest JSON has weights with names: \" + (allManifestWeightNames.join(', ') + \".\"));\n                    }\n                    groupIndicesToFetch = groupIndicesToFetchMap.reduce(function (accumulator, shouldFetch, i) {\n                        if (shouldFetch) {\n                            accumulator.push(i);\n                        }\n                        return accumulator;\n                    }, []);\n                    requests = [];\n                    groupIndicesToFetch.forEach(function (i) {\n                        manifest[i].paths.forEach(function (filepath) {\n                            var fetchUrl = filePathPrefix + (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n                            requests.push(fetch(fetchUrl));\n                        });\n                    });\n                    return [4, Promise.all(requests)];\n                case 1:\n                    responses = _a.sent();\n                    return [4, Promise.all(responses.map(function (response) {\n                        return response.arrayBuffer();\n                    }))];\n                case 2:\n                    buffers = _a.sent();\n                    weightsTensorMap = {};\n                    bufferIndexOffset = 0;\n                    groupIndicesToFetch.forEach(function (i) {\n                        var numBuffers = manifest[i].paths.length;\n                        var groupBytes = 0;\n                        for (var i_1 = 0; i_1 < numBuffers; i_1++) {\n                            groupBytes += buffers[bufferIndexOffset + i_1].byteLength;\n                        }\n                        var groupBuffer = new ArrayBuffer(groupBytes);\n                        var groupByteBuffer = new Uint8Array(groupBuffer);\n                        var groupBufferOffset = 0;\n                        for (var i_2 = 0; i_2 < numBuffers; i_2++) {\n                            var buffer = new Uint8Array(buffers[bufferIndexOffset + i_2]);\n                            groupByteBuffer.set(buffer, groupBufferOffset);\n                            groupBufferOffset += buffer.byteLength;\n                        }\n                        var weightsEntries = groupWeightsToFetch[i];\n                        weightsEntries.forEach(function (weightsEntry) {\n                            var byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);\n                            var typedArray;\n                            if (weightsEntry.manifestEntry.dtype === 'float32') {\n                                typedArray = new Float32Array(byteBuffer);\n                            } else if (weightsEntry.manifestEntry.dtype === 'int32') {\n                                typedArray = new Int32Array(byteBuffer);\n                            } else {\n                                throw new Error(\"Weight \" + weightsEntry.manifestEntry.name + \" has unknown dtype \" + (weightsEntry.manifestEntry.dtype + \".\"));\n                            }\n                            var weightName = weightsEntry.manifestEntry.name;\n                            if (weightsTensorMap[weightName] != null) {\n                                throw new Error(\"Duplicate weight with name \" + weightName + \". \" + \"Please make sure weights names are unique in the manifest JSON.\");\n                            }\n                            weightsTensorMap[weightName] = ops_1.tensor(typedArray, weightsEntry.manifestEntry.shape, weightsEntry.manifestEntry.dtype);\n                        });\n                        bufferIndexOffset += numBuffers;\n                    });\n                    return [2, weightsTensorMap];\n            }\n        });\n    });\n}\nexports.loadWeights = loadWeights;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-core/dist/weights_loader.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/activations.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/activations.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar K = __webpack_require__(/*! ./backend/tfjs_backend */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\");\nvar errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nfunction getActivation(activationType) {\n    if (activationType == null) {\n        return linear;\n    } else if (activationType.toLowerCase() === 'elu') {\n        return elu;\n    } else if (activationType.toLowerCase() === 'hardsigmoid') {\n        return hardSigmoid;\n    } else if (activationType.toLowerCase() === 'linear') {\n        return linear;\n    } else if (activationType.toLowerCase() === 'relu') {\n        return relu;\n    } else if (activationType.toLowerCase() === 'relu6') {\n        return relu6;\n    } else if (activationType.toLowerCase() === 'selu') {\n        return selu;\n    } else if (activationType.toLowerCase() === 'sigmoid') {\n        return sigmoid;\n    } else if (activationType.toLowerCase() === 'softmax') {\n        return softmax;\n    } else if (activationType.toLowerCase() === 'softplus') {\n        return softplus;\n    } else if (activationType.toLowerCase() === 'softsign') {\n        return softsign;\n    } else if (activationType.toLowerCase() === 'tanh') {\n        return tanh;\n    } else {\n        throw new errors_1.ValueError(\"Unsupported activation function \" + activationType);\n    }\n}\nexports.getActivation = getActivation;\nfunction elu(x, alpha) {\n    if (alpha === void 0) {\n        alpha = 1;\n    }\n    return K.elu(x, alpha);\n}\nexports.elu = elu;\nfunction selu(x) {\n    return K.selu(x);\n}\nexports.selu = selu;\nfunction relu(x) {\n    return K.relu(x);\n}\nexports.relu = relu;\nfunction relu6(x) {\n    return K.minimum(tfjs_core_1.scalar(6.0), K.relu(x));\n}\nexports.relu6 = relu6;\nfunction linear(x) {\n    return x;\n}\nexports.linear = linear;\nfunction sigmoid(x) {\n    return K.sigmoid(x);\n}\nexports.sigmoid = sigmoid;\nfunction hardSigmoid(x) {\n    return K.hardSigmoid(x);\n}\nexports.hardSigmoid = hardSigmoid;\nfunction softplus(x) {\n    return K.softplus(x);\n}\nexports.softplus = softplus;\nfunction softsign(x) {\n    return K.softsign(x);\n}\nexports.softsign = softsign;\nfunction tanh(x) {\n    return K.tanh(x);\n}\nexports.tanh = tanh;\nfunction softmax(x, axis) {\n    if (axis === void 0) {\n        axis = -1;\n    }\n    return K.softmax(x, axis);\n}\nexports.softmax = softmax;\nfunction serializeActivation(activation) {\n    return activation.name;\n}\nexports.serializeActivation = serializeActivation;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/activations.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/backend/common.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/backend/common.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _epsilon = 1e-7;\nfunction epsilon() {\n    return _epsilon;\n}\nexports.epsilon = epsilon;\nfunction setEpsilon(e) {\n    _epsilon = e;\n}\nexports.setEpsilon = setEpsilon;\nfunction imageDataFormat() {\n    return 'channelsLast';\n}\nexports.imageDataFormat = imageDataFormat;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/backend/common.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar tfjs_core_1 = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\nvar common_1 = __webpack_require__(/*! ../common */ \"./node_modules/@tensorflow/tfjs-layers/dist/common.js\");\nvar errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nvar types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@tensorflow/tfjs-layers/dist/types.js\");\nvar generic_utils_1 = __webpack_require__(/*! ../utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar math_utils = __webpack_require__(/*! ../utils/math_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/math_utils.js\");\nvar common_2 = __webpack_require__(/*! ./common */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/common.js\");\nvar common_3 = __webpack_require__(/*! ./common */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/common.js\");\nvar backend = 'webgl';\nvar DEFAULT_DTYPE = types_1.DType.float32;\nfunction disposeScalarCache() {\n    for (var typeKey in scalarCache) {\n        for (var key in scalarCache[typeKey]) {\n            scalarCache[typeKey][key].dispose();\n            delete scalarCache[typeKey][key];\n        }\n    }\n}\nfunction setBackend(requestedBackend) {\n    tfc.setBackend(requestedBackend);\n    backend = requestedBackend;\n    disposeScalarCache();\n}\nexports.setBackend = setBackend;\nfunction getBackend() {\n    return backend;\n}\nexports.getBackend = getBackend;\nfunction keep(x) {\n    return tfc.keep(x);\n}\nexports.keep = keep;\nvar scalarCache = {\n    float32: {},\n    int32: {}\n};\nfunction getScalar(value, dtype) {\n    if (dtype === undefined) {\n        dtype = DEFAULT_DTYPE;\n    }\n    if (scalarCache[dtype][value] == null) {\n        scalarCache[dtype][value] = tfjs_core_1.scalar(value, dtype);\n        tfc.keep(scalarCache[dtype][value]);\n    }\n    return scalarCache[dtype][value];\n}\nexports.getScalar = getScalar;\nexports.epsilon = common_2.epsilon;\nfunction isBackendSymbolic() {\n    return false;\n}\nexports.isBackendSymbolic = isBackendSymbolic;\nfunction shape(x) {\n    return x.shape;\n}\nexports.shape = shape;\nfunction intShape(x) {\n    return x.shape;\n}\nexports.intShape = intShape;\nfunction ndim(x) {\n    return x.shape.length;\n}\nexports.ndim = ndim;\nfunction dtype(x) {\n    return x instanceof tfjs_core_1.Tensor ? DEFAULT_DTYPE : x.dtype;\n}\nexports.dtype = dtype;\nfunction normalizeAxis(x, axis) {\n    if (axis == null) {\n        return axis;\n    }\n    var xShape = shape(x);\n    if (Array.isArray(axis)) {\n        return axis.map(function (thisAxis) {\n            return generic_utils_1.pyNormalizeArrayIndex(xShape, thisAxis);\n        });\n    }\n    return generic_utils_1.pyNormalizeArrayIndex(xShape, axis);\n}\nexports.normalizeAxis = normalizeAxis;\nfunction countParams(x) {\n    var shape = x.shape;\n    if (shape.length > 0) {\n        return shape.reduce(function (a, b) {\n            return a * b;\n        });\n    } else {\n        return 1;\n    }\n}\nexports.countParams = countParams;\nfunction cast(x, dtype) {\n    return x.asType(dtype);\n}\nexports.cast = cast;\nfunction reshape(x, shape) {\n    return x.reshape(shape);\n}\nexports.reshape = reshape;\nfunction transpose(x, perm) {\n    return tfc.transpose(x, perm);\n}\nexports.transpose = transpose;\nexports.permuteDimensions = transpose;\nfunction reverse(x, axes) {\n    return tfc.reverse(x, axes);\n}\nexports.reverse = reverse;\nfunction expandDims(x, axis) {\n    if (axis === void 0) {\n        axis = -1;\n    }\n    var outShape = shape(x).slice();\n    if (axis < 0) {\n        axis = outShape.length + axis + 1;\n    }\n    outShape.splice(axis, 0, 1);\n    return reshape(x, outShape);\n}\nexports.expandDims = expandDims;\nfunction squeeze(x, axis) {\n    return tfc.squeeze(x, [axis]);\n}\nexports.squeeze = squeeze;\nfunction repeat(x, n) {\n    if (x.shape.length !== 2) {\n        throw new errors_1.ValueError(\"repeat() expects a rank-2 tensor, but received a \" + (\"rank-\" + x.shape.length + \" tensor.\"));\n    }\n    var y = expandDims(x, 1);\n    return tile(y, [1, n, 1]);\n}\nexports.repeat = repeat;\nfunction flatten(x) {\n    var newShape = [math_utils.arrayProd(x.shape)];\n    return reshape(x, newShape);\n}\nexports.flatten = flatten;\nfunction batchFlatten(x) {\n    if (ndim(x) <= 1) {\n        throw new errors_1.ValueError(\"batchFlatten requires a minimum rank of 2. Got rank: \" + ndim(x) + \".\");\n    }\n    var newShape = [x.shape[0], math_utils.arrayProd(x.shape, 1)];\n    return reshape(x, newShape);\n}\nexports.batchFlatten = batchFlatten;\nfunction sliceAlongFirstAxis(array, start, size) {\n    switch (array.rank) {\n        case 1:\n            return tfc.slice1d(array, start, size);\n        case 2:\n            return tfc.slice2d(array, [start, 0], [size, array.shape[1]]);\n        case 3:\n            return tfc.slice3d(array, [start, 0, 0], [size, array.shape[1], array.shape[2]]);\n        case 4:\n            return tfc.slice4d(array, [start, 0, 0, 0], [size, array.shape[1], array.shape[2], array.shape[3]]);\n        default:\n            throw new errors_1.ValueError(\"sliceAlongFirstAxis() received an unsupported subtype of Tensor: \" + (\"\" + array.constructor.name));\n    }\n}\nexports.sliceAlongFirstAxis = sliceAlongFirstAxis;\nfunction sliceAlongLastAxis(array, start, size) {\n    switch (array.rank) {\n        case 1:\n            return tfc.slice1d(array, start, size);\n        case 2:\n            return tfc.slice2d(array, [0, start], [array.shape[0], size]);\n        case 3:\n            return tfc.slice3d(array, [0, 0, start], [array.shape[0], array.shape[1], size]);\n        case 4:\n            return tfc.slice4d(array, [0, 0, 0, start], [array.shape[0], array.shape[1], array.shape[2], size]);\n        default:\n            throw new errors_1.ValueError(\"sliceAlongLastAxis() received an unsupported subtype of Tensor: \" + (\"\" + array.constructor.name));\n    }\n}\nexports.sliceAlongLastAxis = sliceAlongLastAxis;\nfunction concatenate(tensors, axis) {\n    if (axis === void 0) {\n        axis = -1;\n    }\n    var rank;\n    if (axis < 0) {\n        rank = ndim(tensors[0]);\n        if (rank !== 0) {\n            axis = rank;\n        } else {\n            axis = 0;\n        }\n    }\n    if (axis === ndim(tensors[0])) {\n        axis = -1;\n    }\n    return tfc.concat(tensors, axis);\n}\nexports.concatenate = concatenate;\nfunction concatAlongFirstAxis(a, b) {\n    switch (a.rank) {\n        case 1:\n            return tfc.concat1d([a, b]);\n        case 2:\n            return tfc.concat2d([a, b], 0);\n        case 3:\n            return tfc.concat3d([a, b], 0);\n        case 4:\n            return tfc.concat4d([a, b], 0);\n        default:\n            throw new errors_1.ValueError('concatAlongFirstAxis() received an unsupported subtype of ' + 'Tensor: ' + a.constructor.name);\n    }\n}\nexports.concatAlongFirstAxis = concatAlongFirstAxis;\nfunction tile(x, n) {\n    if (!Array.isArray(n)) {\n        n = [n];\n    }\n    if (ndim(x) !== n.length) {\n        throw new errors_1.ValueError(\"The length of input n (\" + n.length + \") does not match \" + (\"the number of dimensions in input x (\" + ndim(x) + \")\"));\n    }\n    return tfc.tile(x, n);\n}\nexports.tile = tile;\nfunction variable(x, dtype, name, constraint) {\n    return new types_1.LayerVariable(x, dtype, name, true, constraint);\n}\nexports.variable = variable;\nfunction batchGetValue(xs) {\n    return xs.map(function (x) {\n        return x.read();\n    });\n}\nexports.batchGetValue = batchGetValue;\nfunction batchSetValue(variablesAndValues) {\n    variablesAndValues.map(function (variableAndValue) {\n        var variable = variableAndValue[0];\n        variable.write(variableAndValue[1]);\n    });\n}\nexports.batchSetValue = batchSetValue;\nfunction zeros(shape, dtype) {\n    return tfc.zeros(shape);\n}\nexports.zeros = zeros;\nfunction zerosVariable(shape, dtype, name) {\n    return new types_1.LayerVariable(zeros(shape), dtype, name);\n}\nexports.zerosVariable = zerosVariable;\nfunction zerosLike(x, dtype, name) {\n    return new types_1.LayerVariable(tfc.zerosLike(x), dtype, name);\n}\nexports.zerosLike = zerosLike;\nfunction ones(shape, dtype) {\n    return tfc.ones(shape);\n}\nexports.ones = ones;\nfunction onesVariable(shape, dtype, name) {\n    var allocated = tfc.ones(shape);\n    return new types_1.LayerVariable(allocated, dtype, name);\n}\nexports.onesVariable = onesVariable;\nfunction onesLike(x, dtype, name) {\n    var allocated = tfc.onesLike(x);\n    return new types_1.LayerVariable(allocated, dtype, name);\n}\nexports.onesLike = onesLike;\nfunction identity(x) {\n    return x.clone();\n}\nexports.identity = identity;\nfunction eye(size, dtype, name) {\n    var buffer = [];\n    for (var i = 0; i < size; ++i) {\n        for (var j = 0; j < size; ++j) {\n            buffer.push(i === j ? 1 : 0);\n        }\n    }\n    return tfjs_core_1.tensor2d(buffer, [size, size]);\n}\nexports.eye = eye;\nfunction eyeVariable(size, dtype, name) {\n    return new types_1.LayerVariable(eye(size, dtype), dtype, name);\n}\nexports.eyeVariable = eyeVariable;\nfunction neg(x) {\n    return tfc.neg(x);\n}\nexports.neg = neg;\nfunction add(x, y) {\n    return tfc.add(x, y);\n}\nexports.add = add;\nfunction subtract(x, y) {\n    return tfc.sub(x, y);\n}\nexports.subtract = subtract;\nfunction multiply(x, y) {\n    return tfc.mul(x, y);\n}\nexports.multiply = multiply;\nfunction divide(x, y) {\n    return tfc.div(x, y);\n}\nexports.divide = divide;\nfunction scalarTimesArray(c, x) {\n    return tfc.mul(c, x);\n}\nexports.scalarTimesArray = scalarTimesArray;\nfunction scalarPlusArray(c, x) {\n    return tfc.add(c, x);\n}\nexports.scalarPlusArray = scalarPlusArray;\nfunction randomUniform(shape, minval, maxval, dtype, seed) {\n    return tfc.randomUniform(shape, minval, maxval);\n}\nexports.randomUniform = randomUniform;\nfunction randomUniformVariable(shape, minval, maxval, dtype, seed, name) {\n    if (name === void 0) {\n        name = 'randomUniform';\n    }\n    return new types_1.LayerVariable(randomUniform(shape, minval, maxval, dtype, seed), dtype, name);\n}\nexports.randomUniformVariable = randomUniformVariable;\nfunction truncatedNormal(shape, mean, stddev, dtype, seed) {\n    if (mean === void 0) {\n        mean = 0.0;\n    }\n    if (stddev === void 0) {\n        stddev = 1.0;\n    }\n    return tfc.truncatedNormal(shape, mean, stddev);\n}\nexports.truncatedNormal = truncatedNormal;\nfunction truncatedNormalVariable(shape, mean, stddev, dtype, seed, name) {\n    if (mean === void 0) {\n        mean = 0.0;\n    }\n    if (stddev === void 0) {\n        stddev = 1.0;\n    }\n    if (name === void 0) {\n        name = 'truncatedNormal';\n    }\n    return new types_1.LayerVariable(truncatedNormal(shape, mean, stddev, dtype, seed), dtype, name);\n}\nexports.truncatedNormalVariable = truncatedNormalVariable;\nfunction randomNormal(shape, mean, stddev, dtype, seed) {\n    if (mean === void 0) {\n        mean = 0.0;\n    }\n    if (stddev === void 0) {\n        stddev = 1.0;\n    }\n    if (dtype === types_1.DType.bool) {\n        throw new errors_1.NotImplementedError(\"randomNormal does not support dType bool.\");\n    }\n    var dtypeString = dtype === types_1.DType.float32 ? 'float32' : 'int32';\n    return tfc.randomNormal(shape, mean, stddev, dtypeString, seed);\n}\nexports.randomNormal = randomNormal;\nfunction randomNormalVariable(shape, mean, stddev, dtype, seed, name) {\n    if (mean === void 0) {\n        mean = 0.0;\n    }\n    if (stddev === void 0) {\n        stddev = 1.0;\n    }\n    if (name === void 0) {\n        name = 'randomNormal';\n    }\n    return new types_1.LayerVariable(randomNormal(shape, mean, stddev, dtype, seed), dtype, name);\n}\nexports.randomNormalVariable = randomNormalVariable;\nfunction update(x, xNew) {\n    return x.write(xNew);\n}\nexports.update = update;\nfunction updateAdd(x, increment) {\n    return x.write(tfc.add(x.read(), increment));\n}\nexports.updateAdd = updateAdd;\nfunction updateSub(x, decrement) {\n    return x.write(tfc.sub(x.read(), decrement));\n}\nexports.updateSub = updateSub;\nfunction dot(x, y) {\n    if (ndim(y) !== 2) {\n        throw new errors_1.NotImplementedError(\"dot support for y other than rank 2 is not yet implemented: \" + (\"y shape = \" + shape));\n    } else {\n        if (ndim(x) === 2) {\n            return tfc.matMul(x, y);\n        } else if (ndim(x) === 3) {\n            var xShape0 = x.shape[0];\n            var xShape1 = x.shape[1];\n            var xShape2 = x.shape[2];\n            x = x.reshape([xShape0 * xShape1, xShape2]);\n            return tfc.matMul(x, y).reshape([xShape0, xShape1, y.shape[1]]);\n        } else {\n            throw new errors_1.NotImplementedError(\"dot support for x of rank \" + ndim(x) + \" is not yet implemented: \" + (\"x shape = \" + shape));\n        }\n    }\n}\nexports.dot = dot;\nfunction sign(x) {\n    var zerosLikeX = tfjs_core_1.zerosLike(x);\n    var onesLikeX = tfjs_core_1.onesLike(x);\n    return tfjs_core_1.where(equal(x, zerosLikeX), zerosLikeX, tfjs_core_1.where(greater(x, tfjs_core_1.zerosLike(x)), onesLikeX, scalarTimesArray(getScalar(-1), onesLikeX)));\n}\nexports.sign = sign;\nfunction qr(x) {\n    if (x.shape.length !== 2) {\n        throw new errors_1.ValueError(\"qr() requires a 2D Tensor, but got a \" + x.shape.length + \"D Tensor.\");\n    }\n    if (x.shape[0] < x.shape[1]) {\n        throw new errors_1.ValueError(\"qr() requires x.shape[0] >= x.shape[1], but got shape: [\" + x.shape + \"]\");\n    }\n    var m = x.shape[0];\n    var n = x.shape[1];\n    var q = eye(m);\n    var r = x;\n    var one2D = tfjs_core_1.tensor2d([[1]], [1, 1]);\n    for (var j = 0; j < n; ++j) {\n        var rjEnd1 = r.slice([j, j], [m - j, 1]);\n        var normX = tfc.norm(rjEnd1);\n        var rjj = r.slice([j, j], [1, 1]);\n        var s = tfc.neg(sign(rjj));\n        var u1 = rjj.sub(multiply(s, normX));\n        var wPre = divide(rjEnd1, u1);\n        var w = void 0;\n        if (wPre.shape[0] === 1) {\n            w = one2D;\n        } else {\n            w = one2D.concat(wPre.slice([1, 0], [wPre.shape[0] - 1, wPre.shape[1]]), 0);\n        }\n        var tau = tfc.neg(divide(tfc.matMul(s, u1), normX));\n        var rjEndAll = r.slice([j, 0], [m - j, n]);\n        var tauTimesW = tau.mul(w);\n        if (j === 0) {\n            r = rjEndAll.sub(tauTimesW.matMul(w.transpose().matMul(rjEndAll)));\n        } else {\n            r = r.slice([0, 0], [j, n]).concat(rjEndAll.sub(tauTimesW.matMul(w.transpose().matMul(rjEndAll))), 0);\n        }\n        var qAllJEnd = q.slice([0, j], [m, q.shape[1] - j]);\n        if (j === 0) {\n            q = qAllJEnd.sub(qAllJEnd.matMul(w).matMul(tauTimesW.transpose()));\n        } else {\n            q = q.slice([0, 0], [m, j]).concat(qAllJEnd.sub(qAllJEnd.matMul(w).matMul(tauTimesW.transpose())), 1);\n        }\n    }\n    return [q, r];\n}\nexports.qr = qr;\nfunction oneHot(indices, numClasses) {\n    if (ndim(indices) !== 1) {\n        throw new Error('Only 1D one-hot tensors are supported in the ' + 'deeplearn backend, at present.');\n    }\n    return tfc.oneHot(indices, numClasses);\n}\nexports.oneHot = oneHot;\nfunction mean(x, axis, keepDims) {\n    axis = normalizeAxis(x, axis);\n    return tfc.mean(x, axis, keepDims);\n}\nexports.mean = mean;\nfunction argmax(x, axis) {\n    if (axis === void 0) {\n        axis = -1;\n    }\n    return tfc.argMax(x, axis);\n}\nexports.argmax = argmax;\nfunction gather(reference, indices, axis) {\n    if (Array.isArray(indices)) {\n        indices = tfjs_core_1.tensor1d(indices);\n    }\n    return tfc.gather(reference, indices, axis);\n}\nexports.gather = gather;\nfunction max(x, axis, keepDims) {\n    return tfc.max(x, axis, keepDims);\n}\nexports.max = max;\nfunction min(x, axis, keepDims) {\n    return tfc.min(x, axis, keepDims);\n}\nexports.min = min;\nfunction minimum(x, y) {\n    return tfc.minimum(x, y);\n}\nexports.minimum = minimum;\nfunction sum(x, axis, keepDims) {\n    return tfc.sum(x, axis, keepDims);\n}\nexports.sum = sum;\nfunction abs(x) {\n    return tfc.abs(x);\n}\nexports.abs = abs;\nfunction square(x) {\n    return tfc.mulStrict(x, x);\n}\nexports.square = square;\nfunction sqrt(x) {\n    return tfc.sqrt(x);\n}\nexports.sqrt = sqrt;\nfunction exp(x) {\n    return tfc.exp(x);\n}\nexports.exp = exp;\nfunction log(x) {\n    return tfc.log(x);\n}\nexports.log = log;\nfunction pow(x, a) {\n    if (typeof a === 'number') {\n        a = tfjs_core_1.scalar(Math.round(a), 'int32');\n    }\n    if (a.dtype !== 'int32') {\n        throw new errors_1.NotImplementedError(\"Non-int32 dtype (\" + a.dtype + \") is not supported by pow() yet\");\n    }\n    return tfc.pow(x, a);\n}\nexports.pow = pow;\nfunction clip(x, minValue, maxValue) {\n    return tfc.clipByValue(x, minValue, maxValue);\n}\nexports.clip = clip;\nfunction equal(x, y) {\n    return tfc.equal(x, y);\n}\nexports.equal = equal;\nfunction greater(x, y) {\n    return tfc.greater(x, y);\n}\nexports.greater = greater;\nfunction greaterEqual(x, y) {\n    return tfc.greaterEqual(x, y);\n}\nexports.greaterEqual = greaterEqual;\nfunction maximum(x, y) {\n    return tfc.maximum(x, y);\n}\nexports.maximum = maximum;\nfunction sin(x) {\n    return tfc.sin(x.value());\n}\nexports.sin = sin;\nfunction cos(x) {\n    return tfc.cos(x.value());\n}\nexports.cos = cos;\nfunction batchNormalization(x, mean, variance, beta, gamma, epsilon) {\n    if (epsilon === void 0) {\n        epsilon = 1e-3;\n    }\n    var out;\n    if (ndim(x) === 2) {\n        out = tfc.batchNormalization2d(x, mean, variance, epsilon);\n    } else if (ndim(x) === 3) {\n        out = tfc.batchNormalization3d(x, mean, variance, epsilon);\n    } else if (ndim(x) === 4) {\n        out = tfc.batchNormalization4d(x, mean, variance, epsilon);\n    } else {\n        throw new errors_1.NotImplementedError(\"batchNormalization is not implememnted for array of rank \" + ndim(x) + \" \" + \"yet\");\n    }\n    if (gamma != null) {\n        out = multiply(out, gamma);\n    }\n    if (beta != null) {\n        out = add(out, beta);\n    }\n    return out;\n}\nexports.batchNormalization = batchNormalization;\nfunction biasAdd(x, bias, dataFormat) {\n    common_1.checkDataFormat(dataFormat);\n    if (ndim(bias) !== 1 && ndim(bias) !== ndim(x)) {\n        throw new errors_1.ValueError('Unexpected bias dimensions: ' + ndim(bias) + '; expected it to be 1 or ' + ndim(x));\n    }\n    if (dataFormat) {\n        throw new errors_1.NotImplementedError('dataFormat logic is not yet implemented.');\n    }\n    return tfc.add(x, bias);\n}\nexports.biasAdd = biasAdd;\nfunction elu(x, alpha) {\n    if (alpha === void 0) {\n        alpha = 1;\n    }\n    if (alpha !== 1) {\n        throw new errors_1.NotImplementedError(\"Support for alpha values other than 1 (\" + alpha + \") is not implemented \" + \"yet.\");\n    }\n    return tfc.elu(x);\n}\nexports.elu = elu;\nfunction selu(x) {\n    return tfc.selu(x);\n}\nexports.selu = selu;\nfunction relu(x) {\n    return tfc.relu(x);\n}\nexports.relu = relu;\nfunction softplus(x) {\n    return tfc.log(tfc.add(getScalar(1), tfc.exp(x)));\n}\nexports.softplus = softplus;\nfunction softsign(x) {\n    return tfc.div(x, tfc.add(getScalar(1), tfc.abs(x)));\n}\nexports.softsign = softsign;\nfunction tanh(x) {\n    return tfc.tanh(x);\n}\nexports.tanh = tanh;\nfunction dropout(x, level, noiseShape, seed) {\n    if (noiseShape != null && !_.isEqual(x.shape, noiseShape)) {\n        throw new errors_1.NotImplementedError('Non-default noise shape is not implemented yet: ' + JSON.stringify(noiseShape));\n    }\n    if (seed != null) {\n        throw new errors_1.NotImplementedError('seed is not implemented for dropout yet.');\n    }\n    var multiplier = tfc.step(tfc.add(neg(level), randomUniform(x.shape, 0, 1, types_1.DType.float32)));\n    multiplier = tfc.mul(divide(getScalar(1), subtract(getScalar(1), level)), multiplier);\n    return tfc.mul(x, multiplier);\n}\nexports.dropout = dropout;\nfunction l2Normalize(x, axis) {\n    var squareSum = sum(square(x), axis, true);\n    var epsilonTensor = scalarTimesArray(tfjs_core_1.scalar(exports.epsilon()), tfc.onesLike(x));\n    var norm = sqrt(maximum(squareSum, epsilonTensor));\n    return divide(x, norm);\n}\nexports.l2Normalize = l2Normalize;\nfunction preprocessConv2DInput(x, dataFormat) {\n    common_1.checkDataFormat(dataFormat);\n    if (dataFormat === 'channelsFirst') {\n        return tfc.transpose(x, [0, 2, 3, 1]);\n    } else {\n        return x;\n    }\n}\nfunction conv1dWithBias(x, kernel, bias, strides, padding, dataFormat, dilationRate) {\n    if (strides === void 0) {\n        strides = 1;\n    }\n    if (padding === void 0) {\n        padding = 'valid';\n    }\n    if (dilationRate === void 0) {\n        dilationRate = 1;\n    }\n    if (dataFormat == null) {\n        dataFormat = common_3.imageDataFormat();\n    }\n    common_1.checkDataFormat(dataFormat);\n    if (dilationRate !== 1) {\n        throw new errors_1.NotImplementedError(\"dilationRate = \" + dilationRate + \" is not implemented for 1D \" + \"convolution yet.\");\n    }\n    if (x.shape.length !== 3) {\n        throw new errors_1.ValueError(\"The input of a conv1dWithBias operation should be 3, but is \" + (x.shape.length + \" instead.\"));\n    }\n    if (kernel.shape.length !== 3) {\n        throw new errors_1.ValueError(\"The kernel for a conv1dWithBias operation should be 3, but is \" + (kernel.shape.length + \" instead\"));\n    }\n    if (bias != null && bias.shape.length !== 1) {\n        throw new errors_1.ValueError(\"The bias for a conv1dWithBias operation should be 1, but is \" + (kernel.shape.length + \" instead\"));\n    }\n    if (dataFormat === 'channelsFirst') {\n        x = transpose(x, [0, 2, 1]);\n    }\n    if (padding === 'casual') {\n        throw new errors_1.NotImplementedError('The support for CASUAL padding mode in conv1dWithBias is not ' + 'implemented yet.');\n    }\n    var y = tfc.conv1d(x, kernel, strides, padding === 'same' ? 'same' : 'valid');\n    if (bias != null) {\n        y = biasAdd(y, bias);\n    }\n    return y;\n}\nexports.conv1dWithBias = conv1dWithBias;\nfunction conv1d(x, kernel, strides, padding, dataFormat, dilationRate) {\n    if (strides === void 0) {\n        strides = 1;\n    }\n    if (padding === void 0) {\n        padding = 'valid';\n    }\n    if (dilationRate === void 0) {\n        dilationRate = 1;\n    }\n    common_1.checkDataFormat(dataFormat);\n    return conv1dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n}\nexports.conv1d = conv1d;\nfunction conv2d(x, kernel, strides, padding, dataFormat, dilationRate) {\n    if (strides === void 0) {\n        strides = [1, 1];\n    }\n    if (padding === void 0) {\n        padding = 'valid';\n    }\n    common_1.checkDataFormat(dataFormat);\n    return conv2dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n}\nexports.conv2d = conv2d;\nfunction conv2dWithBias(x, kernel, bias, strides, padding, dataFormat, dilationRate) {\n    if (strides === void 0) {\n        strides = [1, 1];\n    }\n    if (padding === void 0) {\n        padding = 'valid';\n    }\n    if (dataFormat == null) {\n        dataFormat = common_3.imageDataFormat();\n    }\n    common_1.checkDataFormat(dataFormat);\n    if (dilationRate != null) {\n        throw new errors_1.NotImplementedError('Support for non-default dilation rate is not implemented yet.');\n    }\n    if (ndim(x) !== 3 && ndim(x) !== 4) {\n        throw new errors_1.ValueError(\"conv2dWithBias expects input to be of rank 3 or 4, but received \" + (ndim(x) + \".\"));\n    }\n    if (ndim(kernel) !== 3 && ndim(kernel) !== 4) {\n        throw new errors_1.ValueError(\"conv2dWithBias expects kernel to be of rank 3 or 4, but received \" + (ndim(x) + \".\"));\n    }\n    var y = preprocessConv2DInput(x, dataFormat);\n    if (padding === 'casual') {\n        throw new errors_1.NotImplementedError('The support for CASUAL padding mode in conv1dWithBias is not ' + 'implemented yet.');\n    }\n    y = tfc.conv2d(y, kernel, strides, padding === 'same' ? 'same' : 'valid');\n    if (bias != null) {\n        y = biasAdd(y, bias);\n    }\n    if (dataFormat === 'channelsFirst') {\n        y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n}\nexports.conv2dWithBias = conv2dWithBias;\nfunction depthwiseConv2d(x, depthwiseKernel, strides, padding, dataFormat, dilationRate) {\n    if (strides === void 0) {\n        strides = [1, 1];\n    }\n    if (padding === void 0) {\n        padding = 'valid';\n    }\n    if (dataFormat == null) {\n        dataFormat = common_3.imageDataFormat();\n    }\n    common_1.checkDataFormat(dataFormat);\n    var y = preprocessConv2DInput(x, dataFormat);\n    if (ndim(x) !== 4) {\n        throw new errors_1.ValueError(\"Input for depthwiseConv2d is required to be 4-D, but is instead \" + (ndim(x) + \"-D\"));\n    }\n    if (ndim(depthwiseKernel) !== 4) {\n        throw new errors_1.ValueError(\"depthwiseKernel is required to be 4-D, but is instead \" + (ndim(depthwiseKernel) + \"-D\"));\n    }\n    y = tfc.depthwiseConv2d(y, depthwiseKernel, strides, padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);\n    if (dataFormat === 'channelsFirst') {\n        y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n}\nexports.depthwiseConv2d = depthwiseConv2d;\nfunction pool2d(x, poolSize, strides, padding, dataFormat, poolMode) {\n    common_1.checkDataFormat(dataFormat);\n    common_1.checkPoolMode(poolMode);\n    common_1.checkPaddingMode(padding);\n    if (strides == null) {\n        strides = [1, 1];\n    }\n    if (padding == null) {\n        padding = 'valid';\n    }\n    if (dataFormat == null) {\n        dataFormat = common_3.imageDataFormat();\n    }\n    if (poolMode == null) {\n        poolMode = 'max';\n    }\n    x = preprocessConv2DInput(x, dataFormat);\n    var y;\n    var paddingString = padding === 'same' ? 'same' : 'valid';\n    if (poolMode === 'max') {\n        y = tfc.maxPool(x, poolSize, strides, paddingString);\n    } else {\n        y = tfc.avgPool(x, poolSize, strides, paddingString);\n    }\n    if (dataFormat === 'channelsFirst') {\n        y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n}\nexports.pool2d = pool2d;\nfunction nameScope(name, fn) {\n    return common_1.nameScope(name, fn);\n}\nexports.nameScope = nameScope;\nfunction floatx() {\n    return types_1.DType.float32;\n}\nexports.floatx = floatx;\nvar _uidPrefixes = {};\nfunction getUid(prefix) {\n    if (prefix === void 0) {\n        prefix = '';\n    }\n    if (!(prefix in _uidPrefixes)) {\n        _uidPrefixes[prefix] = 0;\n    }\n    _uidPrefixes[prefix] += 1;\n    return prefix + _uidPrefixes[prefix].toString();\n}\nexports.getUid = getUid;\nfunction softmax(x, axis) {\n    if (axis === void 0) {\n        axis = -1;\n    }\n    return tfc.softmax(x, axis);\n}\nexports.softmax = softmax;\nfunction categoricalCrossentropy(target, output, fromLogits) {\n    if (fromLogits === void 0) {\n        fromLogits = false;\n    }\n    if (fromLogits) {\n        output = softmax(output);\n    } else {\n        var outputSum = sum(output, shape(output).length - 1, true);\n        output = divide(output, outputSum);\n    }\n    output = clip(output, exports.epsilon(), 1 - exports.epsilon());\n    return tfc.neg(tfc.sum(tfc.mul(target, tfc.log(output)), shape(output).length - 1));\n}\nexports.categoricalCrossentropy = categoricalCrossentropy;\nfunction sparseCategoricalCrossentropy(target, output, fromLogits) {\n    if (fromLogits === void 0) {\n        fromLogits = false;\n    }\n    var flatTarget = tfc.floor(flatten(target));\n    var outputShape = shape(output);\n    var oneHotTarget = reshape(tfc.oneHot(flatTarget, outputShape[outputShape.length - 1]), outputShape);\n    return categoricalCrossentropy(oneHotTarget, output, fromLogits);\n}\nexports.sparseCategoricalCrossentropy = sparseCategoricalCrossentropy;\nfunction binaryCrossentropy(target, output, fromLogits) {\n    if (fromLogits === void 0) {\n        fromLogits = false;\n    }\n    var y;\n    if (!fromLogits) {\n        y = clip(output, exports.epsilon(), 1 - exports.epsilon());\n        y = log(divide(y, subtract(tfc.onesLike(y), y)));\n    } else {\n        y = output;\n    }\n    return sigmoidCrossEntropyWithLogits(target, y);\n}\nexports.binaryCrossentropy = binaryCrossentropy;\nfunction sigmoidCrossEntropyWithLogits(target, output) {\n    var maxOutput = tfc.maximum(output, tfc.zerosLike(output));\n    var outputXTarget = tfc.mul(output, target);\n    var sigmoidOutput = tfc.log(tfc.add(getScalar(1), tfc.exp(tfc.neg(tfc.abs(output)))));\n    var result = tfc.add(tfc.sub(maxOutput, outputXTarget), sigmoidOutput);\n    return result;\n}\nexports.sigmoidCrossEntropyWithLogits = sigmoidCrossEntropyWithLogits;\nfunction sigmoid(x) {\n    return tfc.sigmoid(x);\n}\nexports.sigmoid = sigmoid;\nfunction hardSigmoid(x) {\n    var y = scalarPlusArray(tfjs_core_1.scalar(0.5), scalarTimesArray(tfjs_core_1.scalar(0.2), x));\n    return clip(y, 0, 1);\n}\nexports.hardSigmoid = hardSigmoid;\nfunction inTrainPhase(x, alt, training) {\n    if (training === void 0) {\n        training = false;\n    }\n    return training ? x() : alt();\n}\nexports.inTrainPhase = inTrainPhase;\nfunction rnn(stepFunction, inputs, initialStates, goBackwards, mask, constants, unroll, inputLength) {\n    if (goBackwards === void 0) {\n        goBackwards = false;\n    }\n    if (unroll === void 0) {\n        unroll = false;\n    }\n    var ndim = inputs.shape.length;\n    if (ndim < 3) {\n        throw new errors_1.ValueError(\"Input should be at least 3D, but is \" + ndim + \"D.\");\n    }\n    var axes = [1, 0].concat(_.range(2, ndim));\n    inputs = transpose(inputs, axes);\n    if (mask != null) {\n        throw new errors_1.NotImplementedError('The rnn() function of the deeplearn.js backend does not support ' + 'masking yet.');\n    }\n    if (constants != null) {\n        throw new errors_1.NotImplementedError('The rnn() functoin of the deeplearn.js backend does not support ' + 'constants yet.');\n    }\n    if (unroll) {\n        console.warn('Backend rnn(): the unroll = true option is not applicable to the ' + 'imperative deeplearn.js backend.');\n    }\n    if (goBackwards) {\n        inputs = reverse(inputs, 0);\n    }\n    var outputs;\n    var lastOutput;\n    var states = initialStates;\n    var timeSteps = inputs.shape[0];\n    for (var t = 0; t < timeSteps; ++t) {\n        var currentInput = sliceAlongFirstAxis(inputs, t, 1);\n        currentInput = reshape(currentInput, currentInput.shape.slice(1));\n        var stepOutputs = stepFunction(currentInput, states);\n        lastOutput = stepOutputs[0];\n        if (t === 0) {\n            outputs = lastOutput.reshape([1].concat(lastOutput.shape));\n        } else {\n            outputs = concatAlongFirstAxis(outputs, lastOutput.reshape([1].concat(lastOutput.shape)));\n        }\n        states = stepOutputs[1];\n    }\n    return [lastOutput, transpose(outputs, [1, 0].concat(_.range(2, outputs.shape.length))), states];\n}\nexports.rnn = rnn;\nfunction gradients(lossFn, variables) {\n    var variableList = variables.map(function (variable) {\n        return variable.read();\n    });\n    var valudAndGrads = tfjs_core_1.variableGrads(lossFn, variableList);\n    return variables.map(function (variable) {\n        return valudAndGrads.grads[variable.name];\n    });\n}\nexports.gradients = gradients;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/callbacks.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/callbacks.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : new P(function (resolve) {\n                resolve(result.value);\n            }).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n    var _ = { label: 0, sent: function () {\n            if (t[0] & 1) throw t[1];return t[1];\n        }, trys: [], ops: [] },\n        f,\n        y,\n        t,\n        g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n    }), g;\n    function verb(n) {\n        return function (v) {\n            return step([n, v]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0:case 1:\n                    t = op;break;\n                case 4:\n                    _.label++;return { value: op[1], done: false };\n                case 5:\n                    _.label++;y = op[1];op = [0];continue;\n                case 7:\n                    op = _.ops.pop();_.trys.pop();continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];t = op;break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];_.ops.push(op);break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [6, e];y = 0;\n        } finally {\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar K = __webpack_require__(/*! ./backend/tfjs_backend */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\");\nvar generic_utils = __webpack_require__(/*! ./utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar Callback = function () {\n    function Callback() {\n        this.validationData = null;\n        this.model = null;\n    }\n    Callback.prototype.setParams = function (params) {\n        this.params = params;\n    };\n    Callback.prototype.setModel = function (model) {\n        this.model = model;\n    };\n    Callback.prototype.onEpochBegin = function (epoch, logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2];\n            });\n        });\n    };\n    Callback.prototype.onEpochEnd = function (epoch, logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2];\n            });\n        });\n    };\n    Callback.prototype.onBatchBegin = function (batch, logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2];\n            });\n        });\n    };\n    Callback.prototype.onBatchEnd = function (batch, logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2];\n            });\n        });\n    };\n    Callback.prototype.onTrainBegin = function (logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2];\n            });\n        });\n    };\n    Callback.prototype.onTrainEnd = function (logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2];\n            });\n        });\n    };\n    return Callback;\n}();\nexports.Callback = Callback;\nvar CallbackList = function () {\n    function CallbackList(callbacks, queueLength) {\n        if (queueLength === void 0) {\n            queueLength = 10;\n        }\n        if (callbacks == null) {\n            callbacks = [];\n        }\n        this.callbacks = callbacks;\n        this.queueLength = queueLength;\n    }\n    CallbackList.prototype.append = function (callback) {\n        this.callbacks.push(callback);\n    };\n    CallbackList.prototype.setParams = function (params) {\n        for (var _i = 0, _a = this.callbacks; _i < _a.length; _i++) {\n            var callback = _a[_i];\n            callback.setParams(params);\n        }\n    };\n    CallbackList.prototype.setModel = function (model) {\n        for (var _i = 0, _a = this.callbacks; _i < _a.length; _i++) {\n            var callback = _a[_i];\n            callback.setModel(model);\n        }\n    };\n    CallbackList.prototype.onEpochBegin = function (epoch, logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _i, _a, callback;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (logs == null) {\n                            logs = {};\n                        }\n                        _i = 0, _a = this.callbacks;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3, 4];\n                        callback = _a[_i];\n                        return [4, callback.onEpochBegin(epoch, logs)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3, 1];\n                    case 4:\n                        return [2];\n                }\n            });\n        });\n    };\n    CallbackList.prototype.onEpochEnd = function (epoch, logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _i, _a, callback;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (logs == null) {\n                            logs = {};\n                        }\n                        _i = 0, _a = this.callbacks;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3, 4];\n                        callback = _a[_i];\n                        return [4, callback.onEpochEnd(epoch, logs)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3, 1];\n                    case 4:\n                        return [2];\n                }\n            });\n        });\n    };\n    CallbackList.prototype.onBatchBegin = function (batch, logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _i, _a, callback;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (logs == null) {\n                            logs = {};\n                        }\n                        _i = 0, _a = this.callbacks;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3, 4];\n                        callback = _a[_i];\n                        return [4, callback.onBatchBegin(batch, logs)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3, 1];\n                    case 4:\n                        return [2];\n                }\n            });\n        });\n    };\n    CallbackList.prototype.onBatchEnd = function (batch, logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _i, _a, callback;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (logs == null) {\n                            logs = {};\n                        }\n                        _i = 0, _a = this.callbacks;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3, 4];\n                        callback = _a[_i];\n                        return [4, callback.onBatchEnd(batch, logs)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3, 1];\n                    case 4:\n                        return [2];\n                }\n            });\n        });\n    };\n    CallbackList.prototype.onTrainBegin = function (logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _i, _a, callback;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (logs == null) {\n                            logs = {};\n                        }\n                        _i = 0, _a = this.callbacks;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3, 4];\n                        callback = _a[_i];\n                        return [4, callback.onTrainBegin(logs)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3, 1];\n                    case 4:\n                        return [2];\n                }\n            });\n        });\n    };\n    CallbackList.prototype.onTrainEnd = function (logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _i, _a, callback;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (logs == null) {\n                            logs = {};\n                        }\n                        _i = 0, _a = this.callbacks;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3, 4];\n                        callback = _a[_i];\n                        return [4, callback.onTrainEnd(logs)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3, 1];\n                    case 4:\n                        return [2];\n                }\n            });\n        });\n    };\n    return CallbackList;\n}();\nexports.CallbackList = CallbackList;\nvar BaseLogger = function (_super) {\n    __extends(BaseLogger, _super);\n    function BaseLogger() {\n        var _this = _super.call(this) || this;\n        _this.scalarCache = {};\n        return _this;\n    }\n    BaseLogger.prototype.onEpochBegin = function (epoch, logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                this.seen = 0;\n                this.totals = {};\n                return [2];\n            });\n        });\n    };\n    BaseLogger.prototype.onBatchEnd = function (batch, logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var batchSize, _loop_1, this_1, key;\n            return __generator(this, function (_a) {\n                if (logs == null) {\n                    logs = {};\n                }\n                batchSize = logs['size'] == null ? 0 : logs['size'];\n                this.seen += batchSize;\n                _loop_1 = function (key) {\n                    var value = logs[key];\n                    if (typeof value === 'number') {\n                        if (!this_1.totals.hasOwnProperty(key)) {\n                            this_1.totals[key] = 0;\n                        }\n                        this_1.totals[key] = this_1.totals[key] + value * batchSize;\n                    } else {\n                        if (!this_1.totals.hasOwnProperty(key)) {\n                            this_1.totals[key] = K.getScalar(0);\n                        }\n                        tfjs_core_1.tidy(function () {\n                            _this.totals[key] = K.scalarPlusArray(_this.totals[key], K.multiply(value, K.getScalar(batchSize)));\n                            K.keep(_this.totals[key]);\n                        });\n                    }\n                };\n                this_1 = this;\n                for (key in logs) {\n                    _loop_1(key);\n                }\n                return [2];\n            });\n        });\n    };\n    BaseLogger.prototype.onEpochEnd = function (epoch, logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var _loop_2, this_2, _i, _a, key;\n            return __generator(this, function (_b) {\n                if (logs != null) {\n                    _loop_2 = function (key) {\n                        if (this_2.totals[key] == null) {\n                            return \"continue\";\n                        }\n                        if (typeof this_2.totals[key] === 'number') {\n                            logs[key] = this_2.totals[key] / this_2.seen;\n                        } else {\n                            tfjs_core_1.tidy(function () {\n                                logs[key] = K.scalarTimesArray(K.divide(K.getScalar(1), K.getScalar(_this.seen)), _this.totals[key]);\n                                K.keep(logs[key]);\n                            });\n                        }\n                    };\n                    this_2 = this;\n                    for (_i = 0, _a = this.params['metrics']; _i < _a.length; _i++) {\n                        key = _a[_i];\n                        _loop_2(key);\n                    }\n                }\n                return [2];\n            });\n        });\n    };\n    return BaseLogger;\n}(Callback);\nexports.BaseLogger = BaseLogger;\nfunction resolveScalarsInLogs(logs) {\n    return __awaiter(this, void 0, void 0, function () {\n        var promises, keys, key, value, valueScalar, values, i;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (logs == null) {\n                        return [2];\n                    }\n                    promises = [];\n                    keys = [];\n                    for (key in logs) {\n                        value = logs[key];\n                        if (typeof value !== 'number') {\n                            valueScalar = value;\n                            promises.push(valueScalar.data());\n                            keys.push(key);\n                        }\n                    }\n                    return [4, Promise.all(promises)];\n                case 1:\n                    values = _a.sent();\n                    for (i = 0; i < values.length; ++i) {\n                        logs[keys[i]] = values[i][0];\n                    }\n                    return [2];\n            }\n        });\n    });\n}\nexports.resolveScalarsInLogs = resolveScalarsInLogs;\nfunction disposeTensorsInLogs(logs) {\n    if (logs == null) {\n        return;\n    }\n    for (var key in logs) {\n        var value = logs[key];\n        if (typeof value !== 'number') {\n            value.dispose();\n        }\n    }\n}\nexports.disposeTensorsInLogs = disposeTensorsInLogs;\nvar History = function (_super) {\n    __extends(History, _super);\n    function History() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    History.prototype.onTrainBegin = function (logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                this.epoch = [];\n                this.history = {};\n                return [2];\n            });\n        });\n    };\n    History.prototype.onEpochEnd = function (epoch, logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            var key;\n            return __generator(this, function (_a) {\n                if (logs == null) {\n                    logs = {};\n                }\n                this.epoch.push(epoch);\n                for (key in logs) {\n                    if (this.history[key] == null) {\n                        this.history[key] = [];\n                    }\n                    this.history[key].push(logs[key]);\n                }\n                return [2];\n            });\n        });\n    };\n    History.prototype.syncData = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var promises, keys, indices, key, valueArray, i, valueScalar, values, n;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = [];\n                        keys = [];\n                        indices = [];\n                        for (key in this.history) {\n                            valueArray = this.history[key];\n                            for (i = 0; i < valueArray.length; ++i) {\n                                if (typeof valueArray[i] !== 'number') {\n                                    valueScalar = valueArray[i];\n                                    promises.push(valueScalar.data());\n                                    keys.push(key);\n                                    indices.push(i);\n                                }\n                            }\n                        }\n                        return [4, Promise.all(promises)];\n                    case 1:\n                        values = _a.sent();\n                        for (n = 0; n < values.length; ++n) {\n                            this.history[keys[n]][indices[n]].dispose();\n                            this.history[keys[n]][indices[n]] = values[n][0];\n                        }\n                        return [2];\n                }\n            });\n        });\n    };\n    return History;\n}(Callback);\nexports.History = History;\nvar CustomCallback = function (_super) {\n    __extends(CustomCallback, _super);\n    function CustomCallback(config) {\n        var _this = _super.call(this) || this;\n        _this.trainBegin = config.onTrainBegin;\n        _this.trainEnd = config.onTrainEnd;\n        _this.epochBegin = config.onEpochBegin;\n        _this.epochEnd = config.onEpochEnd;\n        _this.batchBegin = config.onBatchBegin;\n        _this.batchEnd = config.onBatchEnd;\n        return _this;\n    }\n    CustomCallback.prototype.onEpochBegin = function (epoch, logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.epochBegin != null)) return [3, 3];\n                        return [4, resolveScalarsInLogs(logs)];\n                    case 1:\n                        _a.sent();\n                        return [4, this.epochBegin(epoch, logs)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        return [2];\n                }\n            });\n        });\n    };\n    CustomCallback.prototype.onEpochEnd = function (epoch, logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.epochEnd != null)) return [3, 3];\n                        return [4, resolveScalarsInLogs(logs)];\n                    case 1:\n                        _a.sent();\n                        return [4, this.epochEnd(epoch, logs)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        return [2];\n                }\n            });\n        });\n    };\n    CustomCallback.prototype.onBatchBegin = function (batch, logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.batchBegin != null)) return [3, 3];\n                        return [4, resolveScalarsInLogs(logs)];\n                    case 1:\n                        _a.sent();\n                        return [4, this.batchBegin(batch, logs)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        return [2];\n                }\n            });\n        });\n    };\n    CustomCallback.prototype.onBatchEnd = function (batch, logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.batchEnd != null)) return [3, 3];\n                        return [4, resolveScalarsInLogs(logs)];\n                    case 1:\n                        _a.sent();\n                        return [4, this.batchEnd(batch, logs)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        return [2];\n                }\n            });\n        });\n    };\n    CustomCallback.prototype.onTrainBegin = function (logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.trainBegin != null)) return [3, 3];\n                        return [4, resolveScalarsInLogs(logs)];\n                    case 1:\n                        _a.sent();\n                        return [4, this.trainBegin(logs)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        return [2];\n                }\n            });\n        });\n    };\n    CustomCallback.prototype.onTrainEnd = function (logs) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.trainEnd != null)) return [3, 3];\n                        return [4, resolveScalarsInLogs(logs)];\n                    case 1:\n                        _a.sent();\n                        return [4, this.trainEnd(logs)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        return [2];\n                }\n            });\n        });\n    };\n    return CustomCallback;\n}(Callback);\nexports.CustomCallback = CustomCallback;\nfunction standardizeCallbacks(callbacks) {\n    if (callbacks == null) {\n        return null;\n    }\n    if (callbacks instanceof Callback) {\n        return [callbacks];\n    }\n    if (Array.isArray(callbacks) && callbacks[0] instanceof Callback) {\n        return callbacks;\n    }\n    var callbackConfigs = generic_utils.toList(callbacks);\n    return callbackConfigs.map(function (callbackConfig) {\n        return new CustomCallback(callbackConfig);\n    });\n}\nexports.standardizeCallbacks = standardizeCallbacks;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/callbacks.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/common.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/common.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nvar generic_utils_1 = __webpack_require__(/*! ./utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar nameMap = new Map();\ngeneric_utils_1.SerializableEnumRegistry.register('data_format', { 'channels_first': 'channelsFirst', 'channels_last': 'channelsLast' });\nexports.VALID_DATA_FORMAT_VALUES = ['channelsFirst', 'channelsLast', undefined, null];\nfunction checkDataFormat(value) {\n    if (value == null) {\n        return;\n    }\n    if (exports.VALID_DATA_FORMAT_VALUES.indexOf(value) < 0) {\n        throw new errors_1.ValueError(value + \" is not a valid DataFormat.  Valid values as \" + exports.VALID_DATA_FORMAT_VALUES);\n    }\n}\nexports.checkDataFormat = checkDataFormat;\ngeneric_utils_1.SerializableEnumRegistry.register('padding', { 'valid': 'valid', 'same': 'same', 'casual': 'casual' });\nexports.VALID_PADDING_MODE_VALUES = ['valid', 'same', 'casual', undefined, null];\nfunction checkPaddingMode(value) {\n    if (value == null) {\n        return;\n    }\n    if (exports.VALID_PADDING_MODE_VALUES.indexOf(value) < 0) {\n        throw new errors_1.ValueError(value + \" is not a valid PaddingMode.  Valid values as \" + exports.VALID_PADDING_MODE_VALUES);\n    }\n}\nexports.checkPaddingMode = checkPaddingMode;\nexports.VALID_POOL_MODE_VALUES = ['max', 'avg', undefined, null];\nfunction checkPoolMode(value) {\n    if (value == null) {\n        return;\n    }\n    if (exports.VALID_POOL_MODE_VALUES.indexOf(value) < 0) {\n        throw new errors_1.ValueError(value + \" is not a valid PoolMode.  Valid values as \" + exports.VALID_POOL_MODE_VALUES);\n    }\n}\nexports.checkPoolMode = checkPoolMode;\nvar _nameScopeStack = [];\nvar _nameScopeDivider = '/';\nfunction nameScope(name, fn) {\n    _nameScopeStack.push(name);\n    try {\n        var val = fn();\n        _nameScopeStack.pop();\n        return val;\n    } catch (e) {\n        _nameScopeStack.pop();\n        throw e;\n    }\n}\nexports.nameScope = nameScope;\nfunction currentNameScopePrefix() {\n    if (_nameScopeStack.length === 0) {\n        return '';\n    } else {\n        return _nameScopeStack.join(_nameScopeDivider) + _nameScopeDivider;\n    }\n}\nfunction getUniqueTensorName(prefix) {\n    if (!isValidTensorName(prefix)) {\n        throw new Error('Not a valid tensor name: \\'' + prefix + '\\'');\n    }\n    prefix = currentNameScopePrefix() + prefix;\n    if (!nameMap.has(prefix)) {\n        nameMap.set(prefix, 0);\n    }\n    var index = nameMap.get(prefix);\n    nameMap.set(prefix, nameMap.get(prefix) + 1);\n    if (index > 0) {\n        return prefix + '_' + index;\n    } else {\n        return prefix;\n    }\n}\nexports.getUniqueTensorName = getUniqueTensorName;\nvar tensorNameRegex = new RegExp(/^[A-Za-z][A-Za-z0-9\\._\\/]*$/);\nfunction isValidTensorName(name) {\n    return name.match(tensorNameRegex) ? true : false;\n}\nexports.isValidTensorName = isValidTensorName;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/common.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/constraints.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/constraints.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar K = __webpack_require__(/*! ./backend/tfjs_backend */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\");\nvar generic_utils_1 = __webpack_require__(/*! ./utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nfunction calcL2Norms(w, axis) {\n    return K.sqrt(K.sum(K.square(w), axis, true));\n}\nvar Constraint = function () {\n    function Constraint() {}\n    Constraint.prototype.getConfig = function () {\n        return {};\n    };\n    Constraint = __decorate([tfjs_core_1.doc({ heading: 'Constraints', subheading: 'Classes', namespace: 'constraints' })], Constraint);\n    return Constraint;\n}();\nexports.Constraint = Constraint;\nvar MaxNorm = function (_super) {\n    __extends(MaxNorm, _super);\n    function MaxNorm(config) {\n        var _this = _super.call(this) || this;\n        _this.defaultMaxValue = 2;\n        _this.defaultAxis = 0;\n        _this.maxValue = config.maxValue != null ? config.maxValue : _this.defaultMaxValue;\n        _this.axis = config.axis != null ? config.axis : _this.defaultAxis;\n        return _this;\n    }\n    MaxNorm.prototype.apply = function (w) {\n        var norms = calcL2Norms(w, this.axis);\n        var desired = K.clip(norms, 0, this.maxValue);\n        return K.multiply(w, K.divide(desired, K.scalarPlusArray(K.getScalar(K.epsilon()), norms)));\n    };\n    MaxNorm.prototype.getConfig = function () {\n        return { maxValue: this.maxValue, axis: this.axis };\n    };\n    return MaxNorm;\n}(Constraint);\nexports.MaxNorm = MaxNorm;\ngeneric_utils_1.ClassNameMap.register('MaxNorm', MaxNorm);\nvar UnitNorm = function (_super) {\n    __extends(UnitNorm, _super);\n    function UnitNorm(config) {\n        var _this = _super.call(this) || this;\n        _this.defaultAxis = 0;\n        _this.axis = config.axis != null ? config.axis : _this.defaultAxis;\n        return _this;\n    }\n    UnitNorm.prototype.apply = function (w) {\n        return K.divide(w, K.scalarPlusArray(K.getScalar(K.epsilon()), calcL2Norms(w, this.axis)));\n    };\n    UnitNorm.prototype.getConfig = function () {\n        return { axis: this.axis };\n    };\n    return UnitNorm;\n}(Constraint);\nexports.UnitNorm = UnitNorm;\ngeneric_utils_1.ClassNameMap.register('UnitNorm', UnitNorm);\nvar NonNeg = function (_super) {\n    __extends(NonNeg, _super);\n    function NonNeg() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NonNeg.prototype.apply = function (w) {\n        return K.relu(w);\n    };\n    return NonNeg;\n}(Constraint);\nexports.NonNeg = NonNeg;\ngeneric_utils_1.ClassNameMap.register('NonNeg', NonNeg);\nvar MinMaxNorm = function (_super) {\n    __extends(MinMaxNorm, _super);\n    function MinMaxNorm(config) {\n        var _this = _super.call(this) || this;\n        _this.defaultMinValue = 0.0;\n        _this.defaultMaxValue = 1.0;\n        _this.defaultRate = 1.0;\n        _this.defaultAxis = 0;\n        _this.minValue = config.minValue != null ? config.minValue : _this.defaultMinValue;\n        _this.maxValue = config.maxValue != null ? config.maxValue : _this.defaultMaxValue;\n        _this.rate = config.rate != null ? config.rate : _this.defaultRate;\n        _this.axis = config.axis != null ? config.axis : _this.defaultAxis;\n        return _this;\n    }\n    MinMaxNorm.prototype.apply = function (w) {\n        var norms = calcL2Norms(w, this.axis);\n        var desired = K.add(K.scalarTimesArray(K.getScalar(this.rate), K.clip(norms, this.minValue, this.maxValue)), K.scalarTimesArray(K.getScalar(1.0 - this.rate), norms));\n        return K.multiply(w, K.divide(desired, K.scalarPlusArray(K.getScalar(K.epsilon()), norms)));\n    };\n    MinMaxNorm.prototype.getConfig = function () {\n        return {\n            minValue: this.minValue,\n            maxValue: this.maxValue,\n            rate: this.rate,\n            axis: this.axis\n        };\n    };\n    return MinMaxNorm;\n}(Constraint);\nexports.MinMaxNorm = MinMaxNorm;\ngeneric_utils_1.ClassNameMap.register('MinMaxNorm', MinMaxNorm);\nexports.CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'maxNorm': 'MaxNorm',\n    'minMaxNorm': 'MinMaxNorm',\n    'nonNeg': 'NonNeg',\n    'unitNorm': 'UnitNorm'\n};\nfunction serializeConstraint(constraint) {\n    return generic_utils_1.serializeKerasObject(constraint);\n}\nexports.serializeConstraint = serializeConstraint;\nfunction deserializeConstraint(config, customObjects) {\n    if (customObjects === void 0) {\n        customObjects = {};\n    }\n    return generic_utils_1.deserializeKerasObject(config, generic_utils_1.ClassNameMap.getMap().pythonClassNameMap, customObjects, 'constraint');\n}\nexports.deserializeConstraint = deserializeConstraint;\nfunction getConstraint(identifier) {\n    if (identifier == null) {\n        return null;\n    }\n    if (typeof identifier === 'string') {\n        var className = identifier in exports.CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ? exports.CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n        var config = { className: className, config: {} };\n        return deserializeConstraint(config);\n    } else if (identifier instanceof Constraint) {\n        return identifier;\n    } else {\n        return deserializeConstraint(identifier);\n    }\n}\nexports.getConstraint = getConstraint;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/constraints.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nvar topology_1 = __webpack_require__(/*! ./topology */ \"./node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js\");\nfunction assertFeedCompatibility(key, val) {\n    if (key.dtype != null && key.dtype !== val.dtype) {\n        throw new errors_1.ValueError(\"The dtype of the feed (\" + val.dtype + \") is incompatible with that of \" + (\"the key '\" + key.name + \"' (\" + key.dtype + \").\"));\n    }\n    if (key.shape != null) {\n        if (key.shape.length !== val.shape.length) {\n            throw new errors_1.ValueError(\"The rank of feed (\" + val.shape.length + \") does not match the rank of \" + (\"the key (\" + key.shape.length + \").\"));\n        }\n        for (var i = 0; i < key.shape.length; ++i) {\n            if (key.shape[i] != null && key.shape[i] !== val.shape[i]) {\n                throw new errors_1.ValueError(\"The \" + i + \"-th dimension of the feed (\" + val.shape[i] + \") is \" + (\"incompatible with that of the key (\" + key.shape[i] + \").\"));\n            }\n        }\n    }\n}\nvar FeedDict = function () {\n    function FeedDict(feeds) {\n        this.id2Value = {};\n        if (feeds instanceof FeedDict) {\n            for (var id in feeds.id2Value) {\n                this.id2Value[id] = feeds.id2Value[id];\n            }\n        } else {\n            if (feeds == null) {\n                return;\n            }\n            for (var _i = 0, feeds_1 = feeds; _i < feeds_1.length; _i++) {\n                var feed = feeds_1[_i];\n                this.add(feed.key, feed.value);\n            }\n        }\n    }\n    FeedDict.prototype.add = function (key, value) {\n        assertFeedCompatibility(key, value);\n        if (this.id2Value[key.id] == null) {\n            this.id2Value[key.id] = value;\n        } else {\n            throw new errors_1.ValueError(\"Duplicate key: name=\" + key.name + \", id=\" + key.id);\n        }\n        return this;\n    };\n    FeedDict.prototype.addFeed = function (feed) {\n        this.add(feed.key, feed.value);\n    };\n    FeedDict.prototype.hasKey = function (key) {\n        return this.id2Value[key.id] != null;\n    };\n    FeedDict.prototype.getValue = function (key) {\n        if (this.id2Value[key.id] == null) {\n            throw new errors_1.ValueError(\"Nonexistent key: \" + JSON.stringify(key));\n        } else {\n            return this.id2Value[key.id];\n        }\n    };\n    return FeedDict;\n}();\nexports.FeedDict = FeedDict;\nfunction execute(fetches, feedDict, kwargs) {\n    var arrayFetches = Array.isArray(fetches);\n    var fetchArray = arrayFetches ? fetches : [fetches];\n    var outputs = [];\n    var internalFeedDict = new FeedDict(feedDict);\n    for (var _i = 0, fetchArray_1 = fetchArray; _i < fetchArray_1.length; _i++) {\n        var fetch_1 = fetchArray_1[_i];\n        outputs.push(executeInternal(fetch_1, internalFeedDict, kwargs));\n    }\n    return arrayFetches ? outputs : outputs[0];\n}\nexports.execute = execute;\nfunction executeInternal(fetch, internalFeedDict, kwargs) {\n    if (internalFeedDict.hasKey(fetch)) {\n        return internalFeedDict.getValue(fetch);\n    }\n    if (fetch.sourceLayer instanceof topology_1.InputLayer) {\n        throw new errors_1.ValueError(\"Missing a feed value for SymbolicTensor from InputLayer \" + (\"'\" + topology_1.InputLayer.name + \"'\"));\n    }\n    var inputs = fetch.inputs;\n    var inputValues = [];\n    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {\n        var input = inputs_1[_i];\n        var inputVal = executeInternal(input, internalFeedDict, kwargs);\n        inputValues.push(inputVal);\n    }\n    var output = fetch.sourceLayer.apply(inputValues, kwargs);\n    if (!Array.isArray(output)) {\n        output = [output];\n    }\n    var layerOutputs = getNodeOutputs(fetch);\n    var outputSymbolicTensors = Array.isArray(layerOutputs) ? layerOutputs : [layerOutputs];\n    for (var i = 0; i < outputSymbolicTensors.length; ++i) {\n        internalFeedDict.add(outputSymbolicTensors[i], output[i]);\n    }\n    return output.length === 1 ? output[0] : output[fetch.outputTensorIndex];\n}\nfunction getNodeOutputs(fetch) {\n    var layerOutputs;\n    if (fetch.sourceLayer.inboundNodes.length === 1) {\n        layerOutputs = fetch.sourceLayer.output;\n    } else {\n        var nodeIndex = null;\n        for (var i = 0; i < fetch.sourceLayer.inboundNodes.length; ++i) {\n            for (var _i = 0, _a = fetch.sourceLayer.inboundNodes[i].outputTensors; _i < _a.length; _i++) {\n                var outputTensor = _a[_i];\n                if (outputTensor.id === fetch.id) {\n                    nodeIndex = i;\n                    break;\n                }\n            }\n        }\n        layerOutputs = fetch.sourceLayer.getOutputAt(nodeIndex);\n    }\n    return layerOutputs;\n}\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\nvar K = __webpack_require__(/*! ../backend/tfjs_backend */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\");\nvar errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nvar serialization_1 = __webpack_require__(/*! ../layers/serialization */ \"./node_modules/@tensorflow/tfjs-layers/dist/layers/serialization.js\");\nvar types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@tensorflow/tfjs-layers/dist/types.js\");\nvar generic_utils = __webpack_require__(/*! ../utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar serialization_utils_1 = __webpack_require__(/*! ../utils/serialization_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/serialization_utils.js\");\nvar InputSpec = function () {\n    function InputSpec(config) {\n        this.dtype = config.dtype;\n        this.shape = config.shape;\n        if (config.shape != null) {\n            this.ndim = config.shape.length;\n        } else {\n            this.ndim = config.ndim;\n        }\n        this.maxNDim = config.maxNDim;\n        this.minNDim = config.minNDim;\n        this.axes = config.axes || {};\n    }\n    return InputSpec;\n}();\nexports.InputSpec = InputSpec;\nvar _nextNodeID = 0;\nvar Node = function () {\n    function Node(config, callArgs) {\n        this.callArgs = callArgs;\n        this.id = _nextNodeID++;\n        this.outboundLayer = config.outboundLayer;\n        this.inboundLayers = config.inboundLayers;\n        this.nodeIndices = config.nodeIndices;\n        this.tensorIndices = config.tensorIndices;\n        this.inputTensors = config.inputTensors;\n        this.outputTensors = config.outputTensors;\n        this.inputMasks = config.inputMasks;\n        this.outputMasks = config.outputMasks;\n        this.inputShapes = config.inputShapes;\n        this.outputShapes = config.outputShapes;\n        for (var _i = 0, _a = config.inboundLayers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            if (layer != null) {\n                layer.outboundNodes.push(this);\n            }\n        }\n        config.outboundLayer.inboundNodes.push(this);\n    }\n    Node.prototype.getConfig = function () {\n        var inboundNames = [];\n        for (var _i = 0, _a = this.inboundLayers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            if (layer != null) {\n                inboundNames.push(layer.name);\n            } else {\n                inboundNames.push(null);\n            }\n        }\n        return {\n            outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,\n            inboundLayers: inboundNames,\n            nodeIndices: this.nodeIndices,\n            tensorIndices: this.tensorIndices\n        };\n    };\n    return Node;\n}();\nexports.Node = Node;\nvar _nextLayerID = 0;\nvar Layer = function () {\n    function Layer(config) {\n        this._callHook = null;\n        this._stateful = false;\n        this.id = _nextLayerID++;\n        this.activityRegularizer = null;\n        this.inputSpec = null;\n        this.supportsMasking = false;\n        this._trainableWeights = [];\n        this._nonTrainableWeights = [];\n        this._losses = [];\n        this._updates = [];\n        this._built = false;\n        this.inboundNodes = [];\n        this.outboundNodes = [];\n        var name = config.name;\n        if (!name) {\n            var prefix = this.constructor.name;\n            name = generic_utils.toSnakeCase(prefix) + '_' + K.getUid(prefix);\n        }\n        this.name = name;\n        this.trainable = generic_utils.pyGetAttr(config, 'trainable', true);\n        this.updatable = generic_utils.pyGetAttr(config, 'updatable', true);\n        if (config.inputShape != null || config.batchInputShape != null) {\n            var batchInputShape = void 0;\n            if (config.batchInputShape != null) {\n                batchInputShape = config.batchInputShape;\n            } else if (config.inputShape != null) {\n                var batchSize = null;\n                if (config.batchSize != null) {\n                    batchSize = config.batchSize;\n                }\n                batchInputShape = [batchSize].concat(config.inputShape);\n            }\n            this.batchInputShape = batchInputShape;\n            var dtype = config.dtype;\n            if (dtype == null) {\n                dtype = config.inputDType;\n            }\n            if (dtype == null) {\n                dtype = K.floatx();\n            }\n            this.dtype = dtype;\n        }\n        if (config.weights != null) {\n            this.initialWeights = config.weights;\n        } else {\n            this.initialWeights = null;\n        }\n    }\n    Layer.nodeKey = function (layer, nodeIndex) {\n        return layer.name + '_ib-' + nodeIndex.toString();\n    };\n    Layer.prototype.getNodeAtIndex = function (nodeIndex, attrName) {\n        if (this.inboundNodes.length === 0) {\n            throw new errors_1.RuntimeError('The layer has never been called ' + (\"and thus has no defined \" + attrName + \".\"));\n        }\n        if (this.inboundNodes.length <= nodeIndex) {\n            throw new errors_1.ValueError(\"Asked to get \" + attrName + \" at node \" + nodeIndex + \", \" + (\"but the layer has only \" + this.inboundNodes.length + \" inbound nodes.\"));\n        }\n        return this.inboundNodes[nodeIndex];\n    };\n    Layer.prototype.getInputAt = function (nodeIndex) {\n        return generic_utils.singletonOrArray(this.getNodeAtIndex(nodeIndex, 'input').inputTensors);\n    };\n    Layer.prototype.getOutputAt = function (nodeIndex) {\n        return generic_utils.singletonOrArray(this.getNodeAtIndex(nodeIndex, 'output').outputTensors);\n    };\n    Object.defineProperty(Layer.prototype, \"input\", {\n        get: function () {\n            if (this.inboundNodes.length > 1) {\n                throw new errors_1.AttributeError(\"Layer \" + this.name + ' has multiple inbound nodes, ' + 'hence the notion of \"layer input\" ' + 'is ill-defined. ' + 'Use `getInputAt(nodeIndex)` instead.');\n            } else if (this.inboundNodes.length === 0) {\n                throw new errors_1.AttributeError(\"Layer \" + this.name + ' is not connected, no input to return.');\n            }\n            return generic_utils.singletonOrArray(this.getNodeAtIndex(0, 'input').inputTensors);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"output\", {\n        get: function () {\n            if (this.inboundNodes.length === 0) {\n                throw new errors_1.AttributeError(\"Layer \" + this.name + ' has no inbound nodes.');\n            }\n            if (this.inboundNodes.length > 1) {\n                throw new errors_1.AttributeError(\"Layer \" + this.name + ' has multiple inbound nodes, ' + 'hence the notion of \"layer output\" ' + 'is ill-defined. ' + 'Use `getOutputAt(nodeIndex)` instead.');\n            }\n            return generic_utils.singletonOrArray(this.getNodeAtIndex(0, 'output').outputTensors);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"losses\", {\n        get: function () {\n            return this._losses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Layer.prototype.calculateLosses = function () {\n        return this.losses.map(function (lossFn) {\n            return lossFn();\n        });\n    };\n    Object.defineProperty(Layer.prototype, \"updates\", {\n        get: function () {\n            return this._updates;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"built\", {\n        get: function () {\n            return this._built;\n        },\n        set: function (built) {\n            this._built = built;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"trainableWeights\", {\n        get: function () {\n            if (this.trainable) {\n                return this._trainableWeights;\n            } else {\n                return [];\n            }\n        },\n        set: function (weights) {\n            this._trainableWeights = weights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"nonTrainableWeights\", {\n        get: function () {\n            if (!this.trainable) {\n                return this._trainableWeights.concat(this._nonTrainableWeights);\n            } else {\n                return this._nonTrainableWeights;\n            }\n        },\n        set: function (weights) {\n            this._nonTrainableWeights = weights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"weights\", {\n        get: function () {\n            return this.trainableWeights.concat(this.nonTrainableWeights);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"stateful\", {\n        get: function () {\n            return this._stateful;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Layer.prototype.assertInputCompatibility = function (inputs) {\n        inputs = generic_utils.toList(inputs);\n        if (this.inputSpec == null || this.inputSpec.length === 0) {\n            return;\n        }\n        var inputSpec = generic_utils.toList(this.inputSpec);\n        if (inputs.length !== inputSpec.length) {\n            throw new errors_1.ValueError(\"Layer \" + this.name + \" expects \" + inputSpec.length + \" inputs, \" + (\"but it received \" + inputs.length + \" input tensors. \") + (\"Input received: \" + inputs));\n        }\n        for (var inputIndex = 0; inputIndex < inputs.length; inputIndex++) {\n            var x = inputs[inputIndex];\n            var spec = inputSpec[inputIndex];\n            if (spec == null) {\n                continue;\n            }\n            var ndim = K.ndim(x);\n            if (spec.ndim != null) {\n                if (ndim !== spec.ndim) {\n                    throw new errors_1.ValueError(\"Input \" + inputIndex + \" is incompatible with layer \" + this.name + \": \" + (\"expected ndim=\" + spec.ndim + \", found ndim=\" + ndim));\n                }\n            }\n            if (spec.maxNDim != null) {\n                if (ndim > spec.maxNDim) {\n                    throw new errors_1.ValueError(\"Input \" + inputIndex + \" is incompatible with layer \" + this.name + (\": expected max_ndim=\" + spec.maxNDim + \", found ndim=\" + ndim));\n                }\n            }\n            if (spec.minNDim != null) {\n                if (ndim < spec.minNDim) {\n                    throw new errors_1.ValueError(\"Input \" + inputIndex + \" is incompatible with layer \" + this.name + (\": expected min_ndim=\" + spec.minNDim + \", found ndim=\" + ndim + \".\"));\n                }\n            }\n            if (spec.dtype != null) {\n                if (K.dtype(x) !== spec.dtype) {\n                    var xDType = K.dtype(x);\n                    throw new errors_1.ValueError(\"Input \" + inputIndex + \" is incompatible with layer \" + this.name + \" \" + (\": expected dtype=\" + spec.dtype + \", found dtype=\" + xDType + \".\"));\n                }\n            }\n            if (spec.axes) {\n                var xShape = K.intShape(x);\n                for (var _i = 0, _a = _.pairs(spec.axes); _i < _a.length; _i++) {\n                    var pair = _a[_i];\n                    var axis = pair[0];\n                    var value = pair[1];\n                    axis = Number(axis);\n                    var xShapeAtAxis = axis >= 0 ? xShape[axis] : xShape[xShape.length + axis];\n                    if (value != null && !_.contains([value, null], xShapeAtAxis)) {\n                        throw new errors_1.ValueError(\"Input \" + inputIndex + \" is incompatible with layer \" + (this.name + \": expected axis \" + axis + \" of input shape to \") + (\"have value \" + value + \" but got shape \" + xShape + \".\"));\n                    }\n                }\n            }\n            if (spec.shape != null) {\n                var xShape = K.intShape(x);\n                for (var _b = 0, _c = _.zip(spec.shape, xShape); _b < _c.length; _b++) {\n                    var _d = _c[_b],\n                        specDim = _d[0],\n                        dim = _d[1];\n                    if (specDim != null && dim != null) {\n                        if (specDim !== dim) {\n                            throw new errors_1.ValueError(\"Input \" + inputIndex + \" is incompatible with layer \" + (this.name + \": expected shape=\" + spec.shape + \", \") + 'found shape=${xShape}.');\n                        }\n                    }\n                }\n            }\n        }\n    };\n    Layer.prototype.call = function (inputs, kwargs) {\n        return inputs;\n    };\n    Layer.prototype.invokeCallHook = function (inputs, kwargs) {\n        if (this._callHook != null) {\n            this._callHook(inputs, kwargs);\n        }\n    };\n    Layer.prototype.setCallHook = function (callHook) {\n        this._callHook = callHook;\n    };\n    Layer.prototype.clearCallHook = function () {\n        this._callHook = null;\n    };\n    Layer.prototype.apply = function (inputs, kwargs) {\n        var _this = this;\n        kwargs = kwargs || {};\n        var inputsList = generic_utils.toList(inputs);\n        var allAreSymbolic = _.every(inputsList, function (x) {\n            return x instanceof types_1.SymbolicTensor;\n        });\n        var noneAreSymbolic = _.every(inputsList, function (x) {\n            return !(x instanceof types_1.SymbolicTensor);\n        });\n        if (allAreSymbolic === noneAreSymbolic) {\n            throw new errors_1.ValueError('Arguments to apply() must be all ' + 'SymbolicTensors or all Tensors');\n        }\n        return K.nameScope(this.name, function () {\n            if (!_this.built) {\n                _this.assertInputCompatibility(inputs);\n                var inputShapes = [];\n                for (var _i = 0, _a = generic_utils.toList(inputs); _i < _a.length; _i++) {\n                    var xElem = _a[_i];\n                    inputShapes.push(K.intShape(xElem));\n                }\n                _this.build(generic_utils.singletonOrArray(inputShapes));\n                _this.built = true;\n                if (_this.initialWeights) {\n                    _this.setWeights(_this.initialWeights);\n                }\n            }\n            _this.assertInputCompatibility(inputs);\n            if (noneAreSymbolic) {\n                var output = _this.call(inputs, kwargs);\n                var outputList = generic_utils.toList(output);\n                var outputListCopy = [];\n                for (var _b = 0, outputList_1 = outputList; _b < outputList_1.length; _b++) {\n                    var x = outputList_1[_b];\n                    if (_.contains(inputsList, x)) {\n                        x = K.identity(x);\n                    }\n                    outputListCopy.push(x);\n                }\n                output = generic_utils.singletonOrArray(outputListCopy);\n                if (_this.activityRegularizer != null) {\n                    throw new errors_1.NotImplementedError('Layer invocation in the presence of activity ' + 'regularizer(s) is not supported yet.');\n                }\n                return output;\n            } else {\n                var inputShape = collectInputShape(inputs);\n                var outputShape = _this.computeOutputShape(inputShape);\n                var output = void 0;\n                var outputDType_1 = guessOutputDType(inputs);\n                if (outputShape != null && outputShape.length > 0 && Array.isArray(outputShape[0])) {\n                    output = outputShape.map(function (shape, index) {\n                        return new types_1.SymbolicTensor(outputDType_1, shape, _this, generic_utils.toList(inputs), kwargs, _this.name, index);\n                    });\n                } else {\n                    output = new types_1.SymbolicTensor(outputDType_1, outputShape, _this, generic_utils.toList(inputs), kwargs, _this.name);\n                }\n                _this.addInboundNode(inputs, output, null, null, inputShape, outputShape, kwargs);\n                if (_this.activityRegularizer != null) {\n                    throw new errors_1.NotImplementedError('Layer invocation in the presence of activity ' + 'regularizer(s) is not supported yet.');\n                }\n                return output;\n            }\n        });\n    };\n    Layer.prototype.build = function (inputShape) {\n        this.built = true;\n    };\n    Layer.prototype.getWeights = function () {\n        return K.batchGetValue(this.weights);\n    };\n    Layer.prototype.setWeights = function (weights) {\n        var params = this.weights;\n        if (params.length !== weights.length) {\n            throw new errors_1.ValueError(\"You called setWeights(weights) on layer \\\"\" + this.name + \"\\\" \" + (\"with a weight list of length \" + weights.length + \", \") + (\"but the layer was expecting \" + params.length + \" weights. \") + (\"Provided weights: \" + weights + \"...\"));\n        }\n        if (params.length === 0) {\n            return;\n        }\n        var weightValueTuples = [];\n        var paramValues = K.batchGetValue(params);\n        for (var _i = 0, _a = _.zip(paramValues, params, weights); _i < _a.length; _i++) {\n            var _b = _a[_i],\n                pv = _b[0],\n                p = _b[1],\n                w = _b[2];\n            if (!_.isEqual(pv.shape, w.shape)) {\n                throw new errors_1.ValueError(\"Layer weight shape \" + pv.shape + \" \" + (\"not compatible with provided weight shape \" + w.shape));\n            }\n            weightValueTuples.push([p, w]);\n        }\n        K.batchSetValue(weightValueTuples);\n    };\n    Layer.prototype.addWeight = function (name, shape, dtype, initializer, regularizer, trainable, constraint) {\n        if (dtype == null) {\n            dtype = K.floatx();\n        }\n        var weight = new types_1.LayerVariable(initializer.apply(shape, dtype), dtype, name, trainable, constraint);\n        if (regularizer != null) {\n            this.addLoss(function () {\n                return regularizer.apply(weight.read());\n            });\n        }\n        if (trainable == null) {\n            trainable = true;\n        }\n        if (trainable) {\n            this._trainableWeights.push(weight);\n        } else {\n            this._nonTrainableWeights.push(weight);\n        }\n        return weight;\n    };\n    Layer.prototype.addLoss = function (losses) {\n        if (losses == null || Array.isArray(losses) && losses.length === 0) {\n            return;\n        }\n        losses = generic_utils.toList(losses);\n        if (this._losses !== undefined && this._losses !== null) {\n            (_a = this.losses).push.apply(_a, losses);\n        }\n        var _a;\n    };\n    Layer.prototype.computeOutputShape = function (inputShape) {\n        return inputShape;\n    };\n    Layer.prototype.computeMask = function (inputs, mask) {\n        if (!this.supportsMasking) {\n            if (mask != null) {\n                if (Array.isArray(mask)) {\n                    if (_.any(mask)) {\n                        throw new TypeError(\"Layer \" + this.name + \" does not support masking,\" + 'but was passed an inputMask.');\n                    }\n                } else {\n                    throw new TypeError(\"Layer \" + this.name + \" does not support masking,\" + 'but was passed an inputMask.');\n                }\n            }\n            return null;\n        }\n        return mask;\n    };\n    Layer.prototype.addInboundNode = function (inputTensors, outputTensors, inputMasks, outputMasks, inputShapes, outputShapes, kwargs) {\n        if (kwargs === void 0) {\n            kwargs = null;\n        }\n        var inputTensorList = generic_utils.toList(inputTensors);\n        outputTensors = generic_utils.toList(outputTensors);\n        inputMasks = generic_utils.toList(inputMasks);\n        outputMasks = generic_utils.toList(outputMasks);\n        inputShapes = generic_utils.normalizeShapeList(inputShapes);\n        outputShapes = generic_utils.normalizeShapeList(outputShapes);\n        var inboundLayers = [];\n        var nodeIndices = [];\n        var tensorIndices = [];\n        for (var _i = 0, inputTensorList_1 = inputTensorList; _i < inputTensorList_1.length; _i++) {\n            var x = inputTensorList_1[_i];\n            inboundLayers.push(x.sourceLayer);\n            nodeIndices.push(x.nodeIndex);\n            tensorIndices.push(x.tensorIndex);\n        }\n        new Node({\n            outboundLayer: this,\n            inboundLayers: inboundLayers,\n            nodeIndices: nodeIndices,\n            tensorIndices: tensorIndices,\n            inputTensors: inputTensorList,\n            outputTensors: outputTensors,\n            inputMasks: inputMasks,\n            outputMasks: outputMasks,\n            inputShapes: inputShapes,\n            outputShapes: outputShapes\n        }, kwargs);\n        for (var i = 0; i < outputTensors.length; i++) {\n            outputTensors[i].sourceLayer = this;\n            outputTensors[i].nodeIndex = this.inboundNodes.length - 1;\n            outputTensors[i].tensorIndex = i;\n        }\n    };\n    Layer.prototype.getConfig = function () {\n        var config = { name: this.name, trainable: this.trainable };\n        if (this.batchInputShape != null) {\n            config['batchInputShape'] = this.batchInputShape;\n        }\n        if (this.dtype != null) {\n            config['dtype'] = this.dtype;\n        }\n        return config;\n    };\n    Layer.fromConfig = function (cls, config) {\n        return new cls(config);\n    };\n    __decorate([tfjs_core_1.doc({ heading: 'Models', 'subheading': 'Classes' })], Layer.prototype, \"apply\", null);\n    Layer = __decorate([tfjs_core_1.doc({ heading: 'Layers', subheading: 'Classes', namespace: 'layers' })], Layer);\n    return Layer;\n}();\nexports.Layer = Layer;\nfunction collectInputShape(inputTensors) {\n    inputTensors = generic_utils.toList(inputTensors);\n    var shapes = [];\n    for (var _i = 0, inputTensors_1 = inputTensors; _i < inputTensors_1.length; _i++) {\n        var x = inputTensors_1[_i];\n        shapes.push(K.intShape(x));\n    }\n    return generic_utils.singletonOrArray(shapes);\n}\nfunction guessOutputDType(inputTensors) {\n    return types_1.DType.float32;\n}\nvar InputLayer = function (_super) {\n    __extends(InputLayer, _super);\n    function InputLayer(config) {\n        var _this = _super.call(this, {\n            dtype: config.dtype,\n            name: config.name != null ? config.name : K.getUid('input').toString()\n        }) || this;\n        if (config.batchSize == null) {\n            config.batchSize = null;\n        }\n        if (config.sparse == null) {\n            config.sparse = false;\n        }\n        _this.trainable = false;\n        _this.built = true;\n        _this.sparse = config.sparse;\n        if (config.inputShape != null && config.batchInputShape != null) {\n            throw new errors_1.ValueError('Only provide the inputShape OR ' + 'batchInputShape argument to inputLayer, not both at the same time.');\n        }\n        var batchInputShape = config.batchInputShape;\n        if (batchInputShape == null) {\n            if (config.inputShape == null) {\n                throw new errors_1.ValueError('An InputLayer should be passed either a ' + '`batchInputShape` or an `inputShape`.');\n            } else {\n                batchInputShape = [config.batchSize].concat(config.inputShape);\n            }\n        } else {\n            if (config.batchSize != null) {\n                throw new errors_1.ValueError('Cannot specify batchSize if batchInputShape is' + 'specified when creating an InputLayer.');\n            }\n        }\n        var dtype = config.dtype || K.floatx();\n        _this.batchInputShape = batchInputShape;\n        _this.dtype = dtype;\n        _this.inputSpec = [{ shape: batchInputShape }];\n        var inputTensor = new types_1.SymbolicTensor(_this.dtype, _this.batchInputShape, _this, [], {}, _this.name);\n        inputTensor.nodeIndex = 0;\n        inputTensor.tensorIndex = 0;\n        new Node({\n            outboundLayer: _this,\n            inboundLayers: [],\n            nodeIndices: [],\n            tensorIndices: [],\n            inputTensors: [inputTensor],\n            outputTensors: [inputTensor],\n            inputMasks: [null],\n            outputMasks: [null],\n            inputShapes: [batchInputShape],\n            outputShapes: [batchInputShape]\n        });\n        return _this;\n    }\n    InputLayer.prototype.apply = function (inputs, kwargs) {\n        throw new errors_1.ValueError('Cannot pass any input to an ' + (\"InputLayer's apply() method. InputLayer name: \" + this.name));\n    };\n    InputLayer.prototype.getConfig = function () {\n        return {\n            batchInputShape: this.batchInputShape,\n            dtype: this.dtype,\n            sparse: this.sparse,\n            name: this.name\n        };\n    };\n    return InputLayer;\n}(Layer);\nexports.InputLayer = InputLayer;\ngeneric_utils.ClassNameMap.register('InputLayer', InputLayer);\nfunction Input(config) {\n    if (config.batchShape == null && config.shape == null) {\n        throw new Error('Please provide to Input either a `shape`' + ' or a `batchShape` argument. Note that ' + '`shape` does not include the batch ' + 'dimension.');\n    }\n    if (config.batchShape != null && config.shape != null) {\n        throw new errors_1.ValueError('Please provide either a `shape` or `batchShape` ' + 'argument to Input, but not both.');\n    }\n    var batchShape = config.batchShape;\n    if (config.shape != null && batchShape == null) {\n        batchShape = [null].concat(config.shape);\n    }\n    var dtype = config.dtype;\n    if (dtype == null) {\n        dtype = K.floatx();\n    }\n    var inputLayer = new InputLayer({\n        batchInputShape: batchShape,\n        name: config.name,\n        dtype: dtype,\n        sparse: config.sparse\n    });\n    var outputs = inputLayer.inboundNodes[0].outputTensors;\n    return outputs[0];\n}\nexports.Input = Input;\nvar Container = function (_super) {\n    __extends(Container, _super);\n    function Container(config) {\n        var _this = _super.call(this, {}) || this;\n        _this.containerNodes = new Set();\n        _this.name = config.name;\n        if (_this.name == null) {\n            var prefix = _this.constructor.name.toLowerCase();\n            _this.name = K.getUid(prefix);\n        }\n        _this.supportsMasking = false;\n        _this.trainable = true;\n        _this.updatable = true;\n        if (Array.isArray(config.inputs)) {\n            _this.inputs = config.inputs.slice();\n        } else {\n            _this.inputs = [config.inputs];\n        }\n        if (Array.isArray(config.outputs)) {\n            _this.outputs = config.outputs.slice();\n        } else {\n            _this.outputs = [config.outputs];\n        }\n        if (_.uniq(_this.inputs).length !== _this.inputs.length) {\n            throw new errors_1.ValueError('The list of inputs passed to the model is ' + 'redundant. All inputs should only appear once. Found: ' + _this.inputs.map(function (x) {\n                return x.name;\n            }));\n        }\n        if (_.uniq(_this.outputs).length !== _this.outputs.length) {\n            console.warn('The list of outputs passed to the model is redundant. ' + 'All outputs should only appear once. Found: ' + _this.outputs.map(function (x) {\n                return x.name;\n            }));\n        }\n        _this.inputLayers = [];\n        _this.inputLayersNodeIndices = [];\n        _this.inputLayersTensorIndices = [];\n        _this.outputLayers = [];\n        _this.outputLayersNodeIndices = [];\n        _this.outputLayersTensorIndices = [];\n        _this.layers = [];\n        for (var _i = 0, _a = _this.outputs; _i < _a.length; _i++) {\n            var x = _a[_i];\n            var layer = x.sourceLayer;\n            var nodeIndex = x.nodeIndex;\n            var tensorIndex = x.tensorIndex;\n            _this.outputLayers.push(layer);\n            _this.outputLayersNodeIndices.push(nodeIndex);\n            _this.outputLayersTensorIndices.push(tensorIndex);\n        }\n        for (var _b = 0, _c = _this.inputs; _b < _c.length; _b++) {\n            var x = _c[_b];\n            var layer = x.sourceLayer;\n            var nodeIndex = x.nodeIndex;\n            var tensorIndex = x.tensorIndex;\n            generic_utils.assert(nodeIndex === 0, 'input layer has >1 nodes');\n            generic_utils.assert(tensorIndex === 0, 'input layer has >1 tensors');\n            _this.inputLayers.push(layer);\n            _this.inputLayersNodeIndices.push(nodeIndex);\n            _this.inputLayersTensorIndices.push(tensorIndex);\n        }\n        _this.inputNames = [];\n        _this.outputNames = [];\n        _this.feedInputShapes = [];\n        _this.feedInputNames = [];\n        _this.feedOutputNames = [];\n        for (var i = 0; i < _this.inputLayers.length; i++) {\n            var layer = _this.inputLayers[i];\n            if (!(layer instanceof InputLayer)) {\n                throw new TypeError('Input layers to a Model must be InputLayer objects. ' + (\"Received inputs: \" + config.inputs + \". \") + (\"Input \" + i + \" (0-based) originates \") + (\"from layer type \" + layer.constructor.name + \".\"));\n            }\n            _this.inputNames.push(layer.name);\n            _this.feedInputShapes.push(layer.batchInputShape);\n            _this.feedInputNames.push(layer.name);\n        }\n        for (var _d = 0, _e = _this.outputLayers; _d < _e.length; _d++) {\n            var layer = _e[_d];\n            _this.outputNames.push(layer.name);\n        }\n        _this.internalInputShapes = _this.inputs.map(function (x) {\n            return x.shape;\n        });\n        _this.internalOutputShapes = _this.outputs.map(function (x) {\n            return x.shape;\n        });\n        var nodesDepths = {};\n        var nodeIDToNode = {};\n        var layersDepths = {};\n        var layerIDToLayer = {};\n        var layerIndices = {};\n        var nodesInDecreasingDepth = [];\n        var buildMapOfGraph = function (tensor, finishedNodes, nodesInProgress, layer, nodeIndex, tensorIndex) {\n            if (layer == null || nodeIndex == null || tensorIndex == null) {\n                layer = tensor.sourceLayer;\n                nodeIndex = tensor.nodeIndex;\n                tensorIndex = tensor.tensorIndex;\n            }\n            var node = layer.inboundNodes[nodeIndex];\n            if (_.contains(nodesInProgress, node)) {\n                throw new errors_1.RuntimeError(\"The tensor \" + tensor.name + \" at layer \\\"\" + layer.name + \"\\\" \" + 'is part of a cycle.');\n            }\n            if (_.contains(finishedNodes, node)) {\n                return;\n            }\n            _this.containerNodes.add(Container.nodeKey(layer, nodeIndex));\n            if (!(layer.id in layerIndices)) {\n                layerIndices[layer.id] = _.keys(layerIndices).length;\n            }\n            if (!_.contains(nodesInProgress, node)) {\n                nodesInProgress.push(node);\n            }\n            var numInboundLayers = node.inboundLayers.length;\n            for (var i = 0; i < numInboundLayers; i++) {\n                var x = node.inputTensors[i];\n                var layer_1 = node.inboundLayers[i];\n                var nodeIndex_1 = node.nodeIndices[i];\n                var tensorIndex_1 = node.tensorIndices[i];\n                buildMapOfGraph(x, finishedNodes, nodesInProgress, layer_1, nodeIndex_1, tensorIndex_1);\n            }\n            finishedNodes.push(node);\n            while (nodesInProgress.indexOf(node) >= 0) {\n                nodesInProgress.splice(nodesInProgress.indexOf(node), 1);\n            }\n            nodesInDecreasingDepth.push(node);\n        };\n        var finishedNodes = [];\n        var nodesInProgress = [];\n        for (var _f = 0, _g = _this.outputs; _f < _g.length; _f++) {\n            var x = _g[_f];\n            buildMapOfGraph(x, finishedNodes, nodesInProgress);\n        }\n        var reversedNodesInDecreasingDepth = nodesInDecreasingDepth.slice().reverse();\n        for (var _h = 0, reversedNodesInDecreasingDepth_1 = reversedNodesInDecreasingDepth; _h < reversedNodesInDecreasingDepth_1.length; _h++) {\n            var node = reversedNodesInDecreasingDepth_1[_h];\n            nodeIDToNode[node.id] = node;\n            if (!(node.id in nodesDepths)) {\n                nodesDepths[node.id] = 0;\n            }\n            var depth = nodesDepths[node.id];\n            var previousDepth = layersDepths[node.outboundLayer.id] == null ? 0 : layersDepths[node.outboundLayer.id];\n            depth = Math.max(depth, previousDepth);\n            layersDepths[node.outboundLayer.id] = depth;\n            layerIDToLayer[node.outboundLayer.id] = node.outboundLayer;\n            nodesDepths[node.id] = depth;\n            for (var i = 0; i < node.inboundLayers.length; i++) {\n                var inboundLayer = node.inboundLayers[i];\n                var nodeIndex = node.nodeIndices[i];\n                var inboundNode = inboundLayer.inboundNodes[nodeIndex];\n                var previousDepth_1 = nodesDepths[inboundNode.id] == null ? 0 : nodesDepths[inboundNode.id];\n                nodesDepths[inboundNode.id] = Math.max(depth + 1, previousDepth_1);\n                nodeIDToNode[inboundNode.id] = inboundNode;\n            }\n        }\n        var nodesByDepth = {};\n        for (var _j = 0, _k = _.pairs(nodesDepths); _j < _k.length; _j++) {\n            var _l = _k[_j],\n                nodeID = _l[0],\n                depth = _l[1];\n            if (!(depth in nodesByDepth)) {\n                nodesByDepth[depth] = [];\n            }\n            nodesByDepth[depth].push(nodeIDToNode[nodeID]);\n        }\n        var layersByDepth = {};\n        for (var _m = 0, _o = _.pairs(layersDepths); _m < _o.length; _m++) {\n            var _p = _o[_m],\n                layerID = _p[0],\n                depth = _p[1];\n            if (!(depth in layersByDepth)) {\n                layersByDepth[depth] = [];\n            }\n            layersByDepth[depth].push(layerIDToLayer[layerID]);\n        }\n        var depthKeys = _.keys(layersByDepth).map(function (x) {\n            return parseInt(x, 10);\n        }).sort(generic_utils.reverseNumberCompare);\n        _this.layers = [];\n        for (var _q = 0, depthKeys_1 = depthKeys; _q < depthKeys_1.length; _q++) {\n            var depth = depthKeys_1[_q];\n            var layersForDepth = layersByDepth[depth];\n            layersForDepth.sort(function (a, b) {\n                var aIndex = layerIndices[a.id];\n                var bIndex = layerIndices[b.id];\n                if (aIndex < bIndex) {\n                    return -1;\n                }\n                if (aIndex > bIndex) {\n                    return 1;\n                }\n                return 0;\n            });\n            for (var _r = 0, layersForDepth_1 = layersForDepth; _r < layersForDepth_1.length; _r++) {\n                var layer = layersForDepth_1[_r];\n                _this.layers.push(layer);\n            }\n        }\n        _this.layersByDepth = layersByDepth;\n        depthKeys = _.keys(nodesByDepth).map(function (x) {\n            return parseInt(x, 10);\n        }).sort(generic_utils.reverseNumberCompare);\n        var computableTensors = _this.inputs.slice();\n        var layersWithCompleteInput = [];\n        for (var _s = 0, depthKeys_2 = depthKeys; _s < depthKeys_2.length; _s++) {\n            var depth = depthKeys_2[_s];\n            for (var _t = 0, _u = nodesByDepth[depth]; _t < _u.length; _t++) {\n                var node = _u[_t];\n                var layer = node.outboundLayer;\n                if (layer != null) {\n                    for (var _v = 0, _w = node.inputTensors; _v < _w.length; _v++) {\n                        var x = _w[_v];\n                        if (!_.contains(computableTensors, x)) {\n                            throw new errors_1.RuntimeError(\"Graph disconnected: cannot obtain value for tensor \" + x + (\" at layer \\\"\" + layer.name + \"\\\". \") + 'The following previous layers were accessed without ' + (\"issue: \" + layersWithCompleteInput));\n                        }\n                    }\n                    for (var _x = 0, _y = node.outputTensors; _x < _y.length; _x++) {\n                        var x = _y[_x];\n                        computableTensors.push(x);\n                    }\n                    layersWithCompleteInput.push(layer.name);\n                }\n            }\n        }\n        _this.nodesByDepth = nodesByDepth;\n        var allNames = _this.layers.map(function (x) {\n            return x.name;\n        });\n        var _loop_1 = function (name_1) {\n            var numOccurrences = allNames.filter(function (x) {\n                return x === name_1;\n            }).length;\n            if (numOccurrences !== 1) {\n                throw new errors_1.RuntimeError(\"The name \\\"\" + name_1 + \"\\\" is used \" + numOccurrences + \" times \" + 'in the model. All layer names should be unique. Layer names: ' + JSON.stringify(allNames));\n            }\n        };\n        for (var _z = 0, allNames_1 = allNames; _z < allNames_1.length; _z++) {\n            var name_1 = allNames_1[_z];\n            _loop_1(name_1);\n        }\n        _this.outboundNodes = [];\n        _this.inboundNodes = [];\n        new Node({\n            outboundLayer: _this,\n            inboundLayers: [],\n            nodeIndices: [],\n            tensorIndices: [],\n            inputTensors: _this.inputs,\n            outputTensors: _this.outputs,\n            inputMasks: _this.inputs.map(function (x) {\n                return null;\n            }),\n            outputMasks: _this.outputs.map(function (x) {\n                return null;\n            }),\n            inputShapes: _this.inputs.map(function (x) {\n                return x.shape;\n            }),\n            outputShapes: _this.outputs.map(function (x) {\n                return x.shape;\n            })\n        });\n        _this.built = true;\n        return _this;\n    }\n    Object.defineProperty(Container.prototype, \"trainableWeights\", {\n        get: function () {\n            if (this._trainableWeights.length > 0) {\n                throw new errors_1.ValueError('Container instance unexpectedly contains _trainableWeights.' + 'The trainable weights of a Container are a union of the ' + 'trainable weights of its consituent Layers. Its own ' + '_trainableWeights must remain an empty Array.');\n            }\n            if (!this.trainable) {\n                return [];\n            }\n            var weights = [];\n            for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n                var layer = _a[_i];\n                weights = weights.concat(layer.trainableWeights);\n            }\n            return weights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Container.prototype, \"nonTrainableWeights\", {\n        get: function () {\n            var weights = [];\n            for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n                var layer = _a[_i];\n                weights.push.apply(weights, layer.nonTrainableWeights);\n            }\n            if (!this.trainable) {\n                var trainableWeights = [];\n                for (var _b = 0, _c = this.layers; _b < _c.length; _b++) {\n                    var layer = _c[_b];\n                    trainableWeights.push.apply(trainableWeights, layer.trainableWeights);\n                }\n                return trainableWeights.concat(weights);\n            }\n            return weights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Container.prototype, \"weights\", {\n        get: function () {\n            return this.trainableWeights.concat(this.nonTrainableWeights);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Container.prototype.loadWeights = function (weightsJSON, skipMismatch, isNamedTensorMap) {\n        if (skipMismatch === void 0) {\n            skipMismatch = false;\n        }\n        if (isNamedTensorMap === void 0) {\n            isNamedTensorMap = false;\n        }\n        if (isNamedTensorMap) {\n            loadWeightsFromNamedTensorMap(weightsJSON, this.layers);\n        } else {\n            loadWeightsFromJson(weightsJSON, this.layers, skipMismatch);\n        }\n    };\n    Container.prototype.updatedConfig = function () {\n        var theConfig = this.getConfig();\n        var modelConfig = {\n            className: this.constructor.name,\n            config: theConfig,\n            kerasVersion: 'tfjs-layers pre-release',\n            backend: 'TensorFlow.js'\n        };\n        return modelConfig;\n    };\n    Container.prototype.toJSON = function (unused) {\n        var modelConfig = this.updatedConfig();\n        return JSON.stringify(serialization_utils_1.convertTsToPythonic(modelConfig));\n    };\n    Container.prototype.call = function (inputs, kwargs) {\n        inputs = generic_utils.toList(inputs);\n        var masks;\n        if ('mask' in kwargs) {\n            masks = generic_utils.toList(kwargs['mask']);\n        } else {\n            masks = generic_utils.pyListRepeat(null, inputs.length);\n        }\n        return this.runInternalGraph(inputs, masks)[0];\n    };\n    Container.prototype.computeMask = function (inputs, mask) {\n        inputs = generic_utils.toList(inputs);\n        var masks;\n        if (mask == null) {\n            masks = generic_utils.pyListRepeat(null, inputs.length);\n        } else {\n            masks = generic_utils.toList(mask);\n        }\n        return this.runInternalGraph(inputs, masks)[1];\n    };\n    Container.prototype.computeOutputShape = function (inputShape) {\n        var inputShapes = generic_utils.normalizeShapeList(inputShape);\n        if (inputShapes.length !== this.inputLayers.length) {\n            throw new errors_1.ValueError(\"Invalid inputShape argument \" + inputShape + \": \" + (\"model has \" + this.inputLayers.length + \" tensor inputs.\"));\n        }\n        var layersToOutputShapes = {};\n        for (var i = 0; i < inputShapes.length; i++) {\n            var layer = this.inputLayers[i];\n            var inputShape_1 = inputShapes[i];\n            var shapeKey = layer.name + '_0_0';\n            layersToOutputShapes[shapeKey] = inputShape_1;\n        }\n        var depthKeys = Object.keys(this.nodesByDepth).map(function (x) {\n            return parseInt(x, 10);\n        }).sort(generic_utils.reverseNumberCompare);\n        if (depthKeys.length > 1) {\n            for (var _i = 0, depthKeys_3 = depthKeys; _i < depthKeys_3.length; _i++) {\n                var depth = depthKeys_3[_i];\n                var nodes = this.nodesByDepth[depth];\n                for (var _a = 0, nodes_1 = nodes; _a < nodes_1.length; _a++) {\n                    var node = nodes_1[_a];\n                    var layer = node.outboundLayer;\n                    if (_.contains(this.inputLayers.map(function (x) {\n                        return x.id;\n                    }), layer.id)) {\n                        continue;\n                    }\n                    var inputShapes_1 = [];\n                    for (var j = 0; j < node.inboundLayers.length; j++) {\n                        var inboundLayer = node.inboundLayers[j];\n                        var nodeIndex_2 = node.nodeIndices[j];\n                        var tensorIndex = node.tensorIndices[j];\n                        var shapeKey = inboundLayer.name + \"_\" + nodeIndex_2 + \"_\" + tensorIndex;\n                        var inputShape_2 = layersToOutputShapes[shapeKey];\n                        inputShapes_1.push(inputShape_2);\n                    }\n                    var outputShape = layer.computeOutputShape(generic_utils.singletonOrArray(inputShapes_1));\n                    var outputShapes_1 = generic_utils.normalizeShapeList(outputShape);\n                    var nodeIndex = layer.inboundNodes.indexOf(node);\n                    for (var j = 0; j < outputShapes_1.length; j++) {\n                        var shapeKey = layer.name + \"_\" + nodeIndex + \"_\" + j;\n                        layersToOutputShapes[shapeKey] = outputShapes_1[j];\n                    }\n                }\n            }\n        }\n        var outputShapes = [];\n        var outputShapeKeys = [];\n        for (var i = 0; i < this.outputLayers.length; i++) {\n            var layer = this.outputLayers[i];\n            var nodeIndex = this.outputLayersNodeIndices[i];\n            var tensorIndex = this.outputLayersTensorIndices[i];\n            var shapeKey = layer.name + \"_\" + nodeIndex + \"_\" + tensorIndex;\n            outputShapeKeys.push(shapeKey);\n        }\n        for (var i = 0; i < outputShapeKeys.length; i++) {\n            var key = outputShapeKeys[i];\n            generic_utils.assert(key in layersToOutputShapes);\n            outputShapes.push(layersToOutputShapes[key]);\n        }\n        return generic_utils.singletonOrArray(outputShapes);\n    };\n    Container.prototype.runInternalGraph = function (inputs, masks) {\n        if (masks == null) {\n            masks = generic_utils.pyListRepeat(null, inputs.length);\n        }\n        var tensorMap = {};\n        for (var _i = 0, _a = _.zip(this.inputs, inputs, masks); _i < _a.length; _i++) {\n            var _b = _a[_i],\n                x = _b[0],\n                y = _b[1],\n                mask = _b[2];\n            tensorMap[x.id] = [y, mask];\n        }\n        var depthKeys = Object.keys(this.nodesByDepth).map(function (x) {\n            return parseInt(x, 10);\n        }).sort(generic_utils.reverseNumberCompare);\n        for (var _c = 0, depthKeys_4 = depthKeys; _c < depthKeys_4.length; _c++) {\n            var depth = depthKeys_4[_c];\n            var nodes = this.nodesByDepth[depth];\n            for (var _d = 0, nodes_2 = nodes; _d < nodes_2.length; _d++) {\n                var node = nodes_2[_d];\n                var layer = node.outboundLayer;\n                var referenceInputTensors = node.inputTensors;\n                var referenceOutputTensors = node.outputTensors;\n                var computedData = new Array();\n                for (var _e = 0, referenceInputTensors_1 = referenceInputTensors; _e < referenceInputTensors_1.length; _e++) {\n                    var x = referenceInputTensors_1[_e];\n                    if (x.id in tensorMap) {\n                        computedData.push(tensorMap[x.id]);\n                    }\n                }\n                if (computedData.length === referenceInputTensors.length) {\n                    var kwargs = {};\n                    var computedTensors = void 0;\n                    var computedMasks = void 0;\n                    var outputTensors_1 = void 0;\n                    var outputMasks_1 = void 0;\n                    if (node.callArgs != null) {\n                        kwargs = node.callArgs;\n                    }\n                    if (computedData.length === 1) {\n                        var _f = computedData[0],\n                            computedTensor = _f[0],\n                            computedMask = _f[1];\n                        if (kwargs.mask == null) {\n                            kwargs['mask'] = computedMask;\n                        }\n                        outputTensors_1 = generic_utils.toList(layer.call(computedTensor, kwargs));\n                        outputMasks_1 = generic_utils.toList(layer.computeMask(computedTensor, computedMask));\n                        computedTensors = [computedTensor];\n                        computedMasks = [computedMask];\n                    } else {\n                        computedTensors = computedData.map(function (x) {\n                            return x[0];\n                        });\n                        computedMasks = computedData.map(function (x) {\n                            return x[1];\n                        });\n                        if (kwargs.mask == null) {\n                            kwargs['mask'] = computedMasks;\n                        }\n                        outputTensors_1 = generic_utils.toList(layer.call(computedTensors, kwargs));\n                        outputMasks_1 = generic_utils.toList(layer.computeMask(computedTensors, computedMasks));\n                    }\n                    if (layer.activityRegularizer) {\n                        throw new errors_1.NotImplementedError('Model invocation with concrete Tensor value(s) in the ' + 'presence of activity regularizer(s) is not supported yet.');\n                    }\n                    for (var _g = 0, _h = _.zip(referenceOutputTensors, outputTensors_1, outputMasks_1); _g < _h.length; _g++) {\n                        var _j = _h[_g],\n                            x = _j[0],\n                            y = _j[1],\n                            mask = _j[2];\n                        tensorMap[x.id] = [y, mask];\n                    }\n                }\n            }\n        }\n        var outputTensors = [];\n        var outputMasks = [];\n        var outputShapes = [];\n        for (var _k = 0, _l = this.outputs; _k < _l.length; _k++) {\n            var x = _l[_k];\n            generic_utils.assert(x.id in tensorMap, \"Could not compute output \" + x.name + \" : \" + x.id);\n            var _m = tensorMap[x.id],\n                tensor = _m[0],\n                mask = _m[1];\n            outputShapes.push(tensor.shape);\n            outputTensors.push(tensor);\n            outputMasks.push(mask);\n        }\n        return [outputTensors, outputMasks, outputShapes];\n    };\n    Container.prototype.buildNodeConversionMap = function (layers) {\n        var nodeConversionMap = {};\n        var keptNodes;\n        for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            keptNodes = layer instanceof Container ? 1 : 0;\n            for (var originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {\n                var nodeKey = Container.nodeKey(layer, originalNodeIndex);\n                if (nodeKey in this.containerNodes) {\n                    nodeConversionMap[nodeKey] = keptNodes;\n                    keptNodes += 1;\n                }\n            }\n        }\n        return nodeConversionMap;\n    };\n    Container.prototype.getLayer = function (name, index) {\n        if (index != null) {\n            if (this.layers.length <= index) {\n                throw new errors_1.ValueError(\"Was asked to retrieve layer at index \" + index + \", but model only \" + (\"has \" + this.layers.length + \" layer(s).\"));\n            } else {\n                return this.layers[index];\n            }\n        } else {\n            if (name == null) {\n                throw new errors_1.ValueError('Provide either a layer name or layer index');\n            }\n        }\n        for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            if (layer.name === name) {\n                return layer;\n            }\n        }\n        throw new errors_1.ValueError(\"No such layer: \" + name);\n    };\n    Container.prototype.calculateLosses = function () {\n        var _this = this;\n        return tfjs_core_1.tidy(function () {\n            var losses = [];\n            for (var _i = 0, _a = _this.layers; _i < _a.length; _i++) {\n                var layer = _a[_i];\n                for (var nodeIndex = 0; nodeIndex < layer.inboundNodes.length; ++nodeIndex) {\n                    var nodeKey = Container.nodeKey(layer, nodeIndex);\n                    if (_this.containerNodes.has(nodeKey)) {\n                        losses.push.apply(losses, layer.calculateLosses());\n                    }\n                }\n            }\n            return losses;\n        });\n    };\n    Container.prototype.getConfig = function () {\n        var config = { name: this.name };\n        var nodeConversionMap = this.buildNodeConversionMap(this.layers);\n        var layerConfigs = [];\n        for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            var layerClassName = layer.constructor.name;\n            var layerConfig = layer.getConfig();\n            var filteredInboundNodes = [];\n            for (var originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {\n                var node = layer.inboundNodes[originalNodeIndex];\n                var nodeKey = Container.nodeKey(layer, originalNodeIndex);\n                var kwargs = {};\n                if (this.containerNodes.has(nodeKey)) {\n                    if (node.callArgs) {\n                        var testString = JSON.stringify(node.callArgs);\n                        if (testString.indexOf('undefined') === -1) {\n                            kwargs = node.callArgs;\n                        } else {\n                            console.warn(\"Layer \" + layer.name + \" was passed \" + \"non-serializable keyword arguments: \" + (node.callArgs + \". They will not be included \") + \"in the serialized model (and thus will be \" + \"missing at deserialization time).\");\n                            kwargs = {};\n                        }\n                    }\n                    if (node.inboundLayers.length > 0) {\n                        var nodeData = [];\n                        for (var i = 0; i < node.inboundLayers.length; i++) {\n                            var inboundLayer = node.inboundLayers[i];\n                            var nodeIndex = node.nodeIndices[i];\n                            var tensorIndex = node.tensorIndices[i];\n                            var nodeKey_1 = Container.nodeKey(inboundLayer, nodeIndex);\n                            var newNodeIndex = nodeConversionMap[nodeKey_1];\n                            if (newNodeIndex === null || newNodeIndex === undefined) {\n                                newNodeIndex = 0;\n                            }\n                            nodeData.push([inboundLayer.name, newNodeIndex, tensorIndex, kwargs]);\n                        }\n                        filteredInboundNodes.push(nodeData);\n                    }\n                }\n            }\n            layerConfigs.push({\n                name: layer.name,\n                className: layerClassName,\n                config: layerConfig,\n                inboundNodes: filteredInboundNodes\n            });\n        }\n        config['layers'] = layerConfigs;\n        var modelInputs = [];\n        for (var i = 0; i < this.inputLayers.length; i++) {\n            var layer = this.inputLayers[i];\n            var nodeIndex = this.inputLayersNodeIndices[i];\n            var nodeKey = Container.nodeKey(layer, nodeIndex);\n            if (!this.containerNodes.has(nodeKey)) {\n                continue;\n            }\n            var newNodeIndex = nodeConversionMap[nodeKey];\n            if (newNodeIndex === null || newNodeIndex === undefined) {\n                newNodeIndex = 0;\n            }\n            var tensorIndex = this.inputLayersTensorIndices[i];\n            modelInputs.push([layer.name, newNodeIndex, tensorIndex]);\n        }\n        config['inputLayers'] = modelInputs;\n        var modelOutputs = [];\n        for (var i = 0; i < this.outputLayers.length; i++) {\n            var layer = this.outputLayers[i];\n            var nodeIndex = this.outputLayersNodeIndices[i];\n            var nodeKey = Container.nodeKey(layer, nodeIndex);\n            if (!this.containerNodes.has(nodeKey)) {\n                continue;\n            }\n            var newNodeIndex = nodeConversionMap[nodeKey];\n            if (newNodeIndex === null || newNodeIndex === undefined) {\n                newNodeIndex = 0;\n            }\n            var tensorIndex = this.outputLayersTensorIndices[i];\n            modelOutputs.push([layer.name, newNodeIndex, tensorIndex]);\n        }\n        config['outputLayers'] = modelOutputs;\n        return config;\n    };\n    Container.fromConfig = function (cls, config) {\n        var createdLayers = {};\n        var unprocessedNodes = {};\n        function addUnprocessedNode(layer, nodeData) {\n            if (!(layer.name in unprocessedNodes)) {\n                unprocessedNodes[layer.name] = [nodeData];\n            } else {\n                unprocessedNodes[layer.name].push(nodeData);\n            }\n        }\n        function processNode(layer, nodeData) {\n            var inputTensors = [];\n            var kwargs;\n            for (var _i = 0, nodeData_1 = nodeData; _i < nodeData_1.length; _i++) {\n                var inputData = nodeData_1[_i];\n                var inboundLayerName = inputData[0];\n                var inboundNodeIndex = inputData[1];\n                var inboundTensorIndex = inputData[2];\n                if (inputData.length === 3) {\n                    kwargs = {};\n                } else if (inputData.length === 4) {\n                    kwargs = inputData[3];\n                } else {\n                    throw new errors_1.ValueError(\"Improperly formatted model config for layer \" + JSON.stringify(layer) + \": \" + JSON.stringify(inputData));\n                }\n                if (!(inboundLayerName in createdLayers)) {\n                    addUnprocessedNode(layer, nodeData);\n                    return;\n                }\n                var inboundLayer = createdLayers[inboundLayerName];\n                if (inboundLayer.inboundNodes.length <= inboundNodeIndex) {\n                    addUnprocessedNode(layer, nodeData);\n                    return;\n                }\n                var inboundNode = inboundLayer.inboundNodes[inboundNodeIndex];\n                inputTensors.push(inboundNode.outputTensors[inboundTensorIndex]);\n            }\n            if (!_.isEmpty(inputTensors)) {\n                layer.apply(generic_utils.singletonOrArray(inputTensors), kwargs);\n            }\n        }\n        function processLayer(layerData) {\n            var layerName = layerData.name;\n            var layer = serialization_1.deserialize(layerData, config.customObjects != null ? config.customObjects : {});\n            createdLayers[layerName] = layer;\n            var inboundNodesData = layerData.inboundNodes;\n            for (var _i = 0, inboundNodesData_1 = inboundNodesData; _i < inboundNodesData_1.length; _i++) {\n                var nodeData = inboundNodesData_1[_i];\n                if (!(nodeData instanceof Array)) {\n                    throw new errors_1.ValueError(\"Corrupted configuration, expected array for nodeData: \" + nodeData);\n                }\n                addUnprocessedNode(layer, nodeData);\n            }\n        }\n        var name = config.name;\n        var layersFromConfig = config.layers;\n        for (var _i = 0, layersFromConfig_1 = layersFromConfig; _i < layersFromConfig_1.length; _i++) {\n            var layerData = layersFromConfig_1[_i];\n            processLayer(layerData);\n        }\n        while (!_.isEmpty(unprocessedNodes)) {\n            for (var _a = 0, layersFromConfig_2 = layersFromConfig; _a < layersFromConfig_2.length; _a++) {\n                var layerData = layersFromConfig_2[_a];\n                var layer = createdLayers[layerData.name];\n                if (layer.name in unprocessedNodes) {\n                    for (var _b = 0, _c = unprocessedNodes[layer.name]; _b < _c.length; _b++) {\n                        var nodeData = _c[_b];\n                        processNode(layer, nodeData);\n                    }\n                    delete unprocessedNodes[layer.name];\n                }\n            }\n        }\n        var inputTensors = [];\n        var outputTensors = [];\n        var inputLayersFromConfig = config.inputLayers;\n        for (var _d = 0, inputLayersFromConfig_1 = inputLayersFromConfig; _d < inputLayersFromConfig_1.length; _d++) {\n            var layerData = inputLayersFromConfig_1[_d];\n            var layerName = layerData[0];\n            var nodeIndex = layerData[1];\n            var tensorIndex = layerData[2];\n            generic_utils.assert(layerName in createdLayers);\n            var layer = createdLayers[layerName];\n            var layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;\n            inputTensors.push(layerOutputTensors[tensorIndex]);\n        }\n        var outputLayersFromConfig = config.outputLayers;\n        for (var _e = 0, outputLayersFromConfig_1 = outputLayersFromConfig; _e < outputLayersFromConfig_1.length; _e++) {\n            var layerData = outputLayersFromConfig_1[_e];\n            var layerName = layerData[0];\n            var nodeIndex = layerData[1];\n            var tensorIndex = layerData[2];\n            generic_utils.assert(layerName in createdLayers);\n            var layer = createdLayers[layerName];\n            var layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;\n            outputTensors.push(layerOutputTensors[tensorIndex]);\n        }\n        return new cls({ inputs: inputTensors, outputs: outputTensors, name: name });\n    };\n    Object.defineProperty(Container.prototype, \"stateful\", {\n        get: function () {\n            if (this._stateful) {\n                throw new errors_1.ValueError('Container instance unexpectedly has _stateful = true. The ' + 'statefulness of a Container is determined by the Layers it ' + 'contains. Its _stateful property must remain the default false.');\n            }\n            for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n                var layer = _a[_i];\n                if (layer.stateful) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Container;\n}(Layer);\nexports.Container = Container;\nfunction getSourceInputs(tensor, layer, nodeIndex) {\n    if (layer == null || nodeIndex != null && nodeIndex > 0) {\n        layer = tensor.sourceLayer;\n        nodeIndex = tensor.nodeIndex;\n    }\n    if (layer.inboundNodes.length === 0) {\n        return [tensor];\n    } else {\n        var node = layer.inboundNodes[nodeIndex];\n        if (node.inboundLayers.length === 0) {\n            return node.inputTensors;\n        } else {\n            var sourceTensors = [];\n            for (var i = 0; i < node.inboundLayers.length; i++) {\n                var x = node.inputTensors[i];\n                var layer_2 = node.inboundLayers[i];\n                var nodeIndex_3 = node.nodeIndices[i];\n                var previousSources = getSourceInputs(x, layer_2, nodeIndex_3);\n                for (var _i = 0, previousSources_1 = previousSources; _i < previousSources_1.length; _i++) {\n                    var x_1 = previousSources_1[_i];\n                    if (!_.contains(sourceTensors, x_1)) {\n                        sourceTensors.push(x_1);\n                    }\n                }\n            }\n            return sourceTensors;\n        }\n    }\n}\nexports.getSourceInputs = getSourceInputs;\nfunction loadTensor(dtype, shape, value) {\n    var dataType = generic_utils.stringToDType(dtype);\n    return tfjs_core_1.Tensor.make(shape, { values: shape.length === 0 ? value : _.flatten(value) }, dataType);\n}\nfunction preprocessWeightsForLoading(layer, weights, originalKerasVersion, originalBackend) {\n    if (!originalKerasVersion.startsWith('2.')) {\n        throw new errors_1.ValueError('Unsupported Keras version in weights being loaded: ' + originalKerasVersion);\n    }\n    return weights;\n}\nfunction loadWeightsFromNamedTensorMap(weights, layers) {\n    var nameToWeight = {};\n    var totalWeightsCount = 0;\n    for (var _i = 0, layers_1 = layers; _i < layers_1.length; _i++) {\n        var layer = layers_1[_i];\n        for (var _a = 0, _b = layer.weights; _a < _b.length; _a++) {\n            var weight = _b[_a];\n            if (nameToWeight[weight.name] != null) {\n                throw new errors_1.ValueError(\"Duplicate weight name: \" + weight.name);\n            }\n            nameToWeight[weight.name] = weight;\n            totalWeightsCount++;\n        }\n    }\n    var weightValueTuples = [];\n    for (var name_2 in weights) {\n        weightValueTuples.push([nameToWeight[name_2], weights[name_2]]);\n        delete nameToWeight[name_2];\n    }\n    var unsetNames = [];\n    for (var name_3 in nameToWeight) {\n        unsetNames.push(name_3);\n    }\n    if (unsetNames.length > 0) {\n        throw new errors_1.ValueError(unsetNames.length + \" of \" + totalWeightsCount + \" weights are not set: \" + (\"\" + unsetNames));\n    }\n    K.batchSetValue(weightValueTuples);\n}\nexports.loadWeightsFromNamedTensorMap = loadWeightsFromNamedTensorMap;\nfunction loadWeightsFromJson(weightsJSON, layers, skipMismatch) {\n    if (skipMismatch === void 0) {\n        skipMismatch = false;\n    }\n    var originalKerasVersion = weightsJSON['keras_version'];\n    var originalBackend = weightsJSON['backend'];\n    var layerNames = layers.map(function (layer) {\n        return layer.name;\n    });\n    var index = {};\n    for (var _i = 0, layers_2 = layers; _i < layers_2.length; _i++) {\n        var layer = layers_2[_i];\n        if (layer.name != null) {\n            if (index[layer.name] == null) {\n                index[layer.name] = [];\n            }\n            index[layer.name].push(layer);\n        }\n    }\n    var nameToWeights = weightsJSON['weights'];\n    var weightValueTuples = [];\n    for (var k = 0; k < layerNames.length; ++k) {\n        var name_4 = layerNames[k];\n        var layerWeights = nameToWeights[name_4];\n        if (layerWeights == null) {\n            layerWeights = [];\n        }\n        var weightValues = [];\n        for (var n = 0; n < layerWeights.length; ++n) {\n            var weightEntry = layerWeights[n];\n            weightValues.push(new types_1.LayerVariable(loadTensor(weightEntry['dtype'], weightEntry['shape'], weightEntry['value'])));\n        }\n        for (var _a = 0, _b = index[name_4]; _a < _b.length; _a++) {\n            var layer = _b[_a];\n            var symbolicWeights = layer.weights;\n            weightValues = preprocessWeightsForLoading(layer, weightValues, originalKerasVersion, originalBackend);\n            if (weightValues.length !== symbolicWeights.length) {\n                if (skipMismatch) {\n                    console.warn(\"Skipping loading of weights of layer \" + layer.name + \" \" + (\"due to mismatch in number of weights: (\" + weightValues.length + \" \") + (\"vs \" + symbolicWeights.length + \").\"));\n                } else {\n                    throw new errors_1.ValueError(\"Layer #\" + k + \" (named \\\"\" + layer.name + \"\\\") expects \" + (symbolicWeights.length + \" weight(s), but the saved weights \") + (\"have \" + weightValues.length + \" element(s).\"));\n                }\n            }\n            for (var i = 0; i < weightValues.length; ++i) {\n                if (skipMismatch) {\n                    if (!_.isEqual(symbolicWeights[i].shape, weightValues[i].shape)) {\n                        console.warn(\"Skipping loading of weights for layer \" + layer.name + \" due \" + (\"to mismatch in shape (\" + symbolicWeights[i].shape + \" vs \") + (weightValues[i].shape + \")\"));\n                        continue;\n                    }\n                }\n                weightValueTuples.push([symbolicWeights[i], weightValues[i].read()]);\n            }\n        }\n    }\n    K.batchSetValue(weightValueTuples);\n}\nexports.loadWeightsFromJson = loadWeightsFromJson;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/engine/training.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/engine/training.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : new P(function (resolve) {\n                resolve(result.value);\n            }).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n    var _ = { label: 0, sent: function () {\n            if (t[0] & 1) throw t[1];return t[1];\n        }, trys: [], ops: [] },\n        f,\n        y,\n        t,\n        g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n    }), g;\n    function verb(n) {\n        return function (v) {\n            return step([n, v]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0:case 1:\n                    t = op;break;\n                case 4:\n                    _.label++;return { value: op[1], done: false };\n                case 5:\n                    _.label++;y = op[1];op = [0];continue;\n                case 7:\n                    op = _.ops.pop();_.trys.pop();continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];t = op;break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];_.ops.push(op);break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [6, e];y = 0;\n        } finally {\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar tfjs_core_1 = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\nvar K = __webpack_require__(/*! ../backend/tfjs_backend */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\");\nvar callbacks_1 = __webpack_require__(/*! ../callbacks */ \"./node_modules/@tensorflow/tfjs-layers/dist/callbacks.js\");\nvar errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nvar losses = __webpack_require__(/*! ../losses */ \"./node_modules/@tensorflow/tfjs-layers/dist/losses.js\");\nvar Metrics = __webpack_require__(/*! ../metrics */ \"./node_modules/@tensorflow/tfjs-layers/dist/metrics.js\");\nvar optimizers = __webpack_require__(/*! ../optimizers */ \"./node_modules/@tensorflow/tfjs-layers/dist/optimizers.js\");\nvar generic_utils_1 = __webpack_require__(/*! ../utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar executor_1 = __webpack_require__(/*! ./executor */ \"./node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js\");\nvar topology_1 = __webpack_require__(/*! ./topology */ \"./node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js\");\nfunction isDataTensor(x) {\n    return x instanceof tfjs_core_1.Tensor;\n}\nexports.isDataTensor = isDataTensor;\nfunction isDataArray(x) {\n    return Array.isArray(x);\n}\nexports.isDataArray = isDataArray;\nfunction isDataDict(x) {\n    return !isDataTensor(x) && !isDataArray(x);\n}\nexports.isDataDict = isDataDict;\nfunction standardizeInputData(data, names, shapes, checkBatchAxis, exceptionPrefix) {\n    if (checkBatchAxis === void 0) {\n        checkBatchAxis = true;\n    }\n    if (exceptionPrefix === void 0) {\n        exceptionPrefix = '';\n    }\n    if (names == null || names.length === 0) {\n        if (data != null) {\n            var gotUnexpectedData = false;\n            if (isDataArray(data) && data.length > 0) {\n                gotUnexpectedData = true;\n            } else if (isDataDict(data)) {\n                for (var key in data) {\n                    if (data.hasOwnProperty(key)) {\n                        gotUnexpectedData = true;\n                        break;\n                    }\n                }\n            } else {\n                gotUnexpectedData = true;\n            }\n            if (gotUnexpectedData) {\n                throw new errors_1.ValueError(\"Error when checking model \" + exceptionPrefix + \" expected no data, \" + (\"but got \" + data));\n            }\n        }\n        return [];\n    }\n    if (data == null) {\n        return names.map(function (name) {\n            return null;\n        });\n    }\n    var arrays;\n    if (isDataDict(data)) {\n        data = data;\n        arrays = [];\n        for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {\n            var name_1 = names_1[_i];\n            if (data[name_1] == null) {\n                throw new errors_1.ValueError(\"No data provided for \\\"\" + name_1 + \"\\\". Need data for each key in: \" + (\"\" + names));\n            }\n            arrays.push(data[name_1]);\n        }\n    } else if (isDataArray(data)) {\n        data = data;\n        if (data.length !== names.length) {\n            throw new errors_1.ValueError(\"Error when checking model \" + exceptionPrefix + \": the Array of \" + \"Tensors that you are passing to your model is not the size the \" + (\"model expected. Expected to see \" + names.length + \" Tensor(s), but \") + (\"instead got the following list of Tensor(s): \" + data));\n        }\n        arrays = data;\n    } else {\n        data = data;\n        if (names.length > 1) {\n            throw new errors_1.ValueError(\"The model \" + exceptionPrefix + \" expects \" + names.length + \" Tensor(s), \" + (\"but only received one Tensor. Found: Tensor with shape \" + data.shape));\n        }\n        arrays = [data];\n    }\n    for (var i = 0; i < names.length; ++i) {\n        var array = arrays[i];\n        if (array.shape.length === 1) {\n            arrays[i] = K.expandDims(array, 1);\n        }\n    }\n    if (shapes != null) {\n        for (var i = 0; i < names.length; ++i) {\n            if (shapes[i] == null) {\n                continue;\n            }\n            var array = arrays[i];\n            if (array.shape.length !== shapes[i].length) {\n                throw new errors_1.ValueError(\"Error when checking \" + exceptionPrefix + \": expected \" + names[i] + \" \" + (\"to have \" + shapes[i].length + \" dimension(s). but got array with \") + (\"shape \" + array.shape));\n            }\n            for (var j = 0; j < shapes[i].length; ++j) {\n                if (j === 0 && !checkBatchAxis) {\n                    continue;\n                }\n                var dim = array.shape[j];\n                var refDim = shapes[i][j];\n                if (refDim != null && refDim >= 0 && dim !== refDim) {\n                    throw new errors_1.ValueError(\"Error when checking \" + exceptionPrefix + \": expected \" + names[i] + \" \" + (\"to have shape [\" + shapes[i] + \"], but got array with shape \") + (\"[\" + array.shape + \"].\"));\n                }\n            }\n        }\n    }\n    return arrays;\n}\nexports.standardizeInputData = standardizeInputData;\nfunction checkArrayLengths(inputs, targets, weights) {\n    var setX = _.unique(inputs.map(function (input) {\n        return input.shape[0];\n    }));\n    setX.sort();\n    var setY = _.unique(targets.map(function (target) {\n        return target.shape[0];\n    }));\n    setY.sort();\n    if (setX.length > 1) {\n        throw new errors_1.ValueError(\"All input Tensors (x) should have the same number of samples. \" + \"Got array shapes: \" + (\"\" + JSON.stringify(inputs.map(function (input) {\n            return input.shape;\n        }))));\n    }\n    if (setY.length > 1) {\n        throw new errors_1.ValueError(\"All target Tensors (y) should have the same number of samples. \" + \"Got array shapes: \" + (\"\" + JSON.stringify(targets.map(function (target) {\n            return target.shape;\n        }))));\n    }\n    if (setX.length > 0 && setY.length > 0 && !_.isEqual(setX, setY)) {\n        throw new errors_1.ValueError(\"Input Tensors should have the same number of samples as target \" + (\"Tensors. Found \" + setX[0] + \" input sample(s) and \" + setY[0] + \" target \") + \"sample(s).\");\n    }\n}\nexports.checkArrayLengths = checkArrayLengths;\nfunction checkLossAndTargetCompatibility(targets, lossFns, outputShapes) {\n    var keyLosses = [losses.meanSquaredError, losses.binaryCrossentropy, losses.categoricalCrossentropy];\n    for (var i = 0; i < targets.length; ++i) {\n        var y = targets[i];\n        var loss = lossFns[i];\n        var shape = outputShapes[i];\n        if (loss == null) {\n            continue;\n        }\n        if (loss === losses.categoricalCrossentropy) {\n            if (y.shape[y.shape.length - 1] === 1) {\n                throw new errors_1.ValueError(\"You are passing a target array of shape \" + y.shape + \" while using \" + \"a loss 'categorical_crossentropy'. 'categorical_crossentropy'\" + \"expects targets to be binary matrices (1s and 0s) of shape \" + \"[samples, classes].\");\n            }\n        }\n        if (_.contains(keyLosses, loss)) {\n            var slicedYShape = y.shape.slice(1);\n            var slicedShape = shape.slice(1);\n            for (var j = 0; j < slicedYShape.length; ++j) {\n                var targetDim = slicedYShape[j];\n                var outDim = slicedShape[j];\n                if (outDim != null && targetDim !== outDim) {\n                    throw new errors_1.ValueError(\"A target Tensor with shape \" + y.shape + \" was passed for an \" + (\"output of shape \" + shape + \", while using a loss function that \") + \"expects targets to have the same shape as the output.\");\n                }\n            }\n        }\n    }\n}\nfunction makeBatches(size, batchSize) {\n    var output = [];\n    var batchStart = 0;\n    var batchEnd = null;\n    while (batchStart < size) {\n        batchEnd = batchStart + batchSize;\n        if (batchEnd >= size) {\n            batchEnd = size;\n        }\n        output.push([batchStart, batchEnd]);\n        batchStart = batchEnd;\n    }\n    return output;\n}\nexports.makeBatches = makeBatches;\nfunction sliceArrays(arrays, start, stop) {\n    if (arrays == null) {\n        return [null];\n    } else if (Array.isArray(arrays)) {\n        return arrays.map(function (array) {\n            return K.sliceAlongFirstAxis(array, start, stop - start);\n        });\n    } else {\n        return K.sliceAlongFirstAxis(arrays, start, stop - start);\n    }\n}\nfunction sliceArraysByIndices(arrays, indices) {\n    if (arrays == null) {\n        return null;\n    } else if (Array.isArray(arrays)) {\n        return arrays.map(function (array) {\n            return sliceArraysByIndices(array, indices);\n        });\n    } else {\n        return K.gather(arrays, indices);\n    }\n}\nexports.sliceArraysByIndices = sliceArraysByIndices;\nfunction checkInputData(data, names, shapes, checkBatchAxis, exceptionPrefix) {\n    if (checkBatchAxis === void 0) {\n        checkBatchAxis = true;\n    }\n    if (exceptionPrefix === void 0) {\n        exceptionPrefix = '';\n    }\n    var arrays;\n    if (Array.isArray(data)) {\n        if (data.length !== names.length) {\n            throw new errors_1.ValueError(\"Error when checking model \" + exceptionPrefix + \": the Array of \" + \"Tensors that you are passing to your model is not the size the \" + (\"the model expected. Expected to see \" + names.length + \" Tensor(s),\") + (\" but instead got \" + data.length + \" Tensors(s).\"));\n        }\n        arrays = data;\n    } else {\n        if (names.length > 1) {\n            throw new errors_1.ValueError(\"The model expects \" + names.length + \" \" + exceptionPrefix + \" Tensors, \" + \"but only received one Tensor. Found: array with shape \" + (JSON.stringify(data.shape) + \".\"));\n        }\n        arrays = [data];\n    }\n    if (shapes != null) {\n        for (var i = 0; i < names.length; ++i) {\n            if (shapes[i] == null) {\n                continue;\n            }\n            var array = arrays[i];\n            if (array.shape.length !== shapes[i].length) {\n                throw new errors_1.ValueError(\"Error when checking \" + exceptionPrefix + \": expected \" + names[i] + \" \" + (\"to have \" + shapes[i].length + \" dimension(s), but got array with \") + (\"shape \" + JSON.stringify(array.shape)));\n            }\n            for (var j = 0; j < shapes[i].length; ++j) {\n                if (j === 0 && !checkBatchAxis) {\n                    continue;\n                }\n                var dim = array.shape[j];\n                var refDim = shapes[i][j];\n                if (refDim != null) {\n                    if (refDim !== dim) {\n                        throw new errors_1.ValueError(\"Error when checking \" + exceptionPrefix + \": expected \" + (names[i] + \" to have shape \" + JSON.stringify(shapes[i]) + \" but \") + (\"got array with shape \" + JSON.stringify(array.shape) + \".\"));\n                    }\n                }\n            }\n        }\n    }\n}\nfunction collectMetrics(metrics, outputNames) {\n    if (metrics == null || Array.isArray(metrics) && metrics.length === 0) {\n        return outputNames.map(function (name) {\n            return [];\n        });\n    }\n    if (Array.isArray(metrics)) {\n        return outputNames.map(function (name) {\n            return metrics;\n        });\n    } else if (metrics != null) {\n        var nestedMetrics = [];\n        for (var _i = 0, outputNames_1 = outputNames; _i < outputNames_1.length; _i++) {\n            var name_2 = outputNames_1[_i];\n            var outputMetrics = metrics.hasOwnProperty(name_2) ? metrics[name_2] : [];\n            if (!Array.isArray(outputMetrics)) {\n                outputMetrics = [outputMetrics];\n            }\n            nestedMetrics.push(outputMetrics);\n        }\n        return nestedMetrics;\n    } else {\n        throw new TypeError('Type of metrics argument not understood. Expected an Array or ' + 'Object, found: ' + metrics);\n    }\n}\nvar ModelLoggingVerbosity;\n(function (ModelLoggingVerbosity) {\n    ModelLoggingVerbosity[ModelLoggingVerbosity[\"SILENT\"] = 0] = \"SILENT\";\n    ModelLoggingVerbosity[ModelLoggingVerbosity[\"VERBOSE\"] = 1] = \"VERBOSE\";\n})(ModelLoggingVerbosity = exports.ModelLoggingVerbosity || (exports.ModelLoggingVerbosity = {}));\nvar Model = function (_super) {\n    __extends(Model, _super);\n    function Model(config) {\n        return _super.call(this, config) || this;\n    }\n    Model.prototype.compile = function (config) {\n        var _this = this;\n        if (config.loss == null) {\n            config.loss = [];\n        }\n        this.loss = config.loss;\n        var optimizerConstructor = optimizers.get(config.optimizer);\n        if (typeof config.optimizer === 'string') {\n            this.optimizer = new optimizerConstructor({});\n        } else {\n            this.optimizer = new optimizerConstructor(config.optimizer);\n        }\n        var lossFunctions = [];\n        if (!Array.isArray(config.loss) && typeof config.loss !== 'string') {\n            config.loss = config.loss;\n            for (var name_3 in config.loss) {\n                if (!_.contains(this.outputNames, name_3)) {\n                    throw new errors_1.ValueError(\"Unknown entry in loss dictionary: \\\"\" + name_3 + \"\\\". Only expect the \" + (\"following keys: \" + this.outputNames));\n                }\n            }\n            for (var name_4 in this.outputNames) {\n                if (config.loss[name_4] == null) {\n                    console.warn(\"Output \\\"\" + name_4 + \"\\\" is missing from loss dictionary. We assume \" + \"this was done on purpose, and we will not be expecting data \" + (\"to be passed to \" + name_4 + \" during training\"));\n                }\n                lossFunctions.push(losses.get(config.loss[name_4]));\n            }\n        } else if (Array.isArray(config.loss)) {\n            if (config.loss.length !== this.outputs.length) {\n                throw new errors_1.ValueError(\"When passing an Array as loss, it should have one entry per \" + (\"model output. The model has \" + this.outputs.length + \" output(s), \") + (\"but you passed loss=\" + config.loss + \".\"));\n            }\n            lossFunctions = config.loss.map(function (l) {\n                return losses.get(l);\n            });\n        } else {\n            var lossFunction_1 = losses.get(config.loss);\n            this.outputs.map(function (layer) {\n                lossFunctions.push(lossFunction_1);\n            });\n        }\n        this.lossFunctions = lossFunctions;\n        this.feedOutputNames = [];\n        this.feedOutputShapes = [];\n        this.feedLossFns = [];\n        for (var i = 0; i < this.outputs.length; ++i) {\n            var shape = this.internalOutputShapes[i];\n            var name_5 = this.outputNames[i];\n            this.feedOutputNames.push(name_5);\n            this.feedOutputShapes.push(shape);\n            this.feedLossFns.push(this.lossFunctions[i]);\n        }\n        var skipTargetIndices = [];\n        this.metrics = config.metrics;\n        this.metricsNames = ['loss'];\n        this.metricsTensors = [];\n        K.nameScope('loss', function () {\n            for (var i = 0; i < _this.outputs.length; ++i) {\n                if (skipTargetIndices.indexOf(i) !== -1) {\n                    continue;\n                }\n                var weightedLoss = _this.lossFunctions[i];\n                if (_this.outputs.length > 1) {\n                    _this.metricsTensors.push([weightedLoss, i]);\n                    _this.metricsNames.push(_this.outputNames[i] + '_loss');\n                }\n            }\n        });\n        var nestedMetrics = collectMetrics(config.metrics, this.outputNames);\n        var appendMetric = function (outputIndex, metricName, metricTensor) {\n            if (_this.outputNames.length > 1) {\n                metricName = _this.outputNames[outputIndex] + '_' + metricName;\n            }\n            _this.metricsNames.push(metricName);\n            _this.metricsTensors.push([metricTensor, outputIndex]);\n        };\n        K.nameScope('metric', function () {\n            var _loop_1 = function (i) {\n                if (skipTargetIndices.indexOf(i) !== -1) {\n                    return \"continue\";\n                }\n                var outputMetrics = nestedMetrics[i];\n                var handleMetrics = function (metrics) {\n                    var metricNamePrefix = '';\n                    var metricName;\n                    var accFn;\n                    var weightedMetricFn;\n                    var _loop_2 = function (metric) {\n                        if (['accuracy', 'acc', 'crossentropy', 'ce'].indexOf(metric) !== -1) {\n                            var outputShape = _this.internalOutputShapes[i];\n                            if (outputShape[outputShape.length - 1] === 1 || _this.lossFunctions[i] === losses.binaryCrossentropy) {\n                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.binaryAccuracy;\n                                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.binaryCrossentropy;\n                                }\n                            } else if (_this.lossFunctions[i] === losses.sparseCategoricalCrossentropy) {\n                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.sparseCategoricalAccuracy;\n                                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.sparseCategoricalCrossentropy;\n                                }\n                            } else {\n                                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.categoricalAccuracy;\n                                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                    accFn = Metrics.categoricalCrossentropy;\n                                }\n                            }\n                            var suffix = void 0;\n                            if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                                suffix = 'acc';\n                            } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                                suffix = 'ce';\n                            }\n                            weightedMetricFn = accFn;\n                            metricName = metricNamePrefix + suffix;\n                        } else {\n                            var metricFn = Metrics.get(metric);\n                            weightedMetricFn = metricFn;\n                            metricName = metricNamePrefix + metric;\n                        }\n                        var metricResult;\n                        K.nameScope(metricName, function () {\n                            metricResult = weightedMetricFn;\n                        });\n                        appendMetric(i, metricName, metricResult);\n                    };\n                    for (var _i = 0, metrics_1 = metrics; _i < metrics_1.length; _i++) {\n                        var metric = metrics_1[_i];\n                        _loop_2(metric);\n                    }\n                };\n                handleMetrics(outputMetrics);\n            };\n            for (var i = 0; i < _this.outputs.length; ++i) {\n                _loop_1(i);\n            }\n        });\n        this.collectedTrainableWeights = this.trainableWeights;\n    };\n    Model.prototype.checkTrainableWeightsConsistency = function () {\n        if (this.collectedTrainableWeights == null) {\n            return;\n        }\n        if (this.trainableWeights.length !== this.collectedTrainableWeights.length) {\n            console.warn('Discrepancy between trainableweights and collected trainable ' + 'weights. Did you set `model.trainable` without calling ' + '`model.compile()` afterwards?');\n        }\n    };\n    Model.prototype.evaluate = function (x, y, config) {\n        if (config === void 0) {\n            config = {};\n        }\n        var batchSize = config.batchSize == null ? 32 : config.batchSize;\n        var standardizedOuts = this.standardizeUserData(x, y, true, batchSize);\n        var ins = standardizedOuts[0].concat(standardizedOuts[1]);\n        this.makeTestFunction();\n        var f = this.testFunction;\n        var testOuts = this.testLoop(f, ins, batchSize, config.verbose, config.steps);\n        return generic_utils_1.singletonOrArray(testOuts);\n    };\n    Model.prototype.checkNumSamples = function (ins, batchSize, steps, stepsName) {\n        if (stepsName === void 0) {\n            stepsName = 'steps';\n        }\n        var numSamples;\n        if (steps != null) {\n            numSamples = null;\n            if (batchSize != null) {\n                throw new errors_1.ValueError(\"If \" + stepsName + \" is set, batchSize must be null or undefined.\" + (\"Got batchSize = \" + batchSize));\n            }\n        } else if (ins != null) {\n            if (Array.isArray(ins)) {\n                numSamples = ins[0].shape[0];\n            } else {\n                numSamples = ins.shape[0];\n            }\n        } else {\n            throw new errors_1.ValueError(\"Either the input data should have a defined shape, or \" + (stepsName + \" shoud be specified.\"));\n        }\n        return numSamples;\n    };\n    Model.prototype.predictLoop = function (ins, batchSize, verbose) {\n        var _this = this;\n        if (batchSize === void 0) {\n            batchSize = 32;\n        }\n        if (verbose === void 0) {\n            verbose = false;\n        }\n        var numSamples = this.checkNumSamples(ins);\n        if (verbose) {\n            throw new errors_1.NotImplementedError('Verbose predictLoop() is not implemented yet.');\n        }\n        var batches = makeBatches(numSamples, batchSize);\n        var outs = [];\n        var _loop_3 = function (batchIndex) {\n            var batchOuts = tfc.tidy(function () {\n                var batchStart = batches[batchIndex][0];\n                var batchEnd = batches[batchIndex][1];\n                var insBatch = sliceArrays(ins, batchStart, batchEnd);\n                var feeds = [];\n                if (Array.isArray(insBatch)) {\n                    for (var i = 0; i < insBatch.length; ++i) {\n                        feeds.push({ key: _this.inputs[i], value: insBatch[i] });\n                    }\n                } else {\n                    feeds.push({ key: _this.inputs[0], value: insBatch });\n                }\n                var feedDict = new executor_1.FeedDict(feeds);\n                return executor_1.execute(_this.outputs, feedDict);\n            });\n            if (batchIndex === 0) {\n                for (var _i = 0, batchOuts_1 = batchOuts; _i < batchOuts_1.length; _i++) {\n                    var batchOut = batchOuts_1[_i];\n                    outs.push(batchOut);\n                }\n            } else {\n                for (var i = 0; i < batchOuts.length; ++i) {\n                    outs[i] = K.concatAlongFirstAxis(outs[i], batchOuts[i]);\n                }\n            }\n        };\n        for (var batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n            _loop_3(batchIndex);\n        }\n        return generic_utils_1.singletonOrArray(outs);\n    };\n    Model.prototype.predict = function (x, config) {\n        if (config === void 0) {\n            config = {};\n        }\n        checkInputData(x, this.inputNames, this.feedInputShapes, false);\n        var batchSize = config.batchSize == null ? 32 : config.batchSize;\n        return this.predictLoop(x, batchSize);\n    };\n    Model.prototype.predictOnBatch = function (x) {\n        checkInputData(x, this.inputNames, this.feedInputShapes, true);\n        return this.predictLoop(x, x.shape[0]);\n    };\n    Model.prototype.standardizeUserData = function (x, y, checkBatchAxis, batchSize) {\n        if (checkBatchAxis === void 0) {\n            checkBatchAxis = true;\n        }\n        if (this.optimizer == null) {\n            throw new errors_1.RuntimeError('You must compile a model before training/testing. Use ' + 'Model.compile(modelCompileConfig).');\n        }\n        var outputShapes = [];\n        for (var i = 0; i < this.feedOutputShapes.length; ++i) {\n            var outputShape = this.feedOutputShapes[i];\n            var lossFn = this.feedLossFns[i];\n            if (lossFn === losses.sparseCategoricalCrossentropy) {\n                outputShapes.push(outputShape.slice(0, outputShape.length - 1).concat([1]));\n            } else {\n                outputShapes.push(outputShape);\n            }\n        }\n        x = standardizeInputData(x, this.feedInputNames, this.feedInputShapes, false, 'input');\n        y = standardizeInputData(y, this.feedOutputNames, outputShapes, false, 'target');\n        checkArrayLengths(x, y, null);\n        checkLossAndTargetCompatibility(y, this.feedLossFns, this.feedOutputShapes);\n        if (this.stateful && batchSize != null && batchSize > 0) {\n            if (x[0].shape[0] % batchSize !== 0) {\n                throw new errors_1.ValueError(\"In a stateful network, you should only pass inputs with a \" + \"number of samples that is divisible by the batch size \" + (batchSize + \". Found: \" + x[0].shape[0] + \" sample(s).\"));\n            }\n        }\n        return [x, y, null];\n    };\n    Model.prototype.fitLoop = function (f, ins, outLabels, batchSize, epochs, verbose, callbacks, valF, valIns, shuffle, callbackMetrics, initialEpoch, stepsPerEpoch, validationSteps) {\n        if (initialEpoch === void 0) {\n            initialEpoch = 0;\n        }\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var doValidation, numTrainSamples, indexArray, callbackList, _loop_4, epoch;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (batchSize == null) {\n                            batchSize = 32;\n                        }\n                        if (epochs == null) {\n                            epochs = 100;\n                        }\n                        if (shuffle == null) {\n                            shuffle = true;\n                        }\n                        if (initialEpoch == null) {\n                            initialEpoch = 0;\n                        }\n                        doValidation = false;\n                        if (valF != null && valIns != null) {\n                            doValidation = true;\n                        }\n                        if (validationSteps != null) {\n                            doValidation = true;\n                            if (stepsPerEpoch == null) {\n                                throw new errors_1.ValueError('Can only use `validationSteps` when doing step-wise training, ' + 'i.e., `stepsPerEpoch` must be set.');\n                            }\n                        }\n                        numTrainSamples = this.checkNumSamples(ins, batchSize, stepsPerEpoch, 'steps_per_epoch');\n                        if (numTrainSamples != null) {\n                            indexArray = _.range(numTrainSamples);\n                        }\n                        this.history = new callbacks_1.History();\n                        if (callbacks == null) {\n                            callbacks = [new callbacks_1.BaseLogger()];\n                        } else {\n                            callbacks = [new callbacks_1.BaseLogger()].concat(callbacks);\n                        }\n                        callbacks = callbacks.concat([this.history]);\n                        if (verbose > 0) {\n                            throw new errors_1.NotImplementedError('Verbose mode is not implemented yet.');\n                        }\n                        callbackList = new callbacks_1.CallbackList(callbacks);\n                        callbackList.setModel(this);\n                        callbackList.setParams({\n                            epochs: epochs,\n                            steps: stepsPerEpoch,\n                            verbose: verbose,\n                            doValidation: doValidation,\n                            metrics: callbackMetrics\n                        });\n                        return [4, callbackList.onTrainBegin()];\n                    case 1:\n                        _a.sent();\n                        _loop_4 = function (epoch) {\n                            var epochLogs, epochIndexArray, epochIndexArray1D_1, batches_1, _loop_5, batchIndex;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        return [4, callbackList.onEpochBegin(epoch)];\n                                    case 1:\n                                        _a.sent();\n                                        epochLogs = {};\n                                        epochIndexArray = indexArray;\n                                        if (!(stepsPerEpoch != null)) return [3, 2];\n                                        throw new errors_1.NotImplementedError('stepsPerEpoch mode is not implemented yet.');\n                                    case 2:\n                                        if (shuffle === 'batch') {\n                                            throw new errors_1.NotImplementedError('batch shuffling is not implemneted yet');\n                                        } else if (shuffle) {\n                                            epochIndexArray = _.shuffle(indexArray);\n                                        }\n                                        epochIndexArray1D_1 = tfjs_core_1.tensor1d(epochIndexArray);\n                                        batches_1 = makeBatches(numTrainSamples, batchSize);\n                                        _loop_5 = function (batchIndex) {\n                                            var batchLogs;\n                                            return __generator(this, function (_a) {\n                                                switch (_a.label) {\n                                                    case 0:\n                                                        batchLogs = {};\n                                                        return [4, callbackList.onBatchBegin(batchIndex, batchLogs)];\n                                                    case 1:\n                                                        _a.sent();\n                                                        tfc.tidy(function () {\n                                                            var batchStart = batches_1[batchIndex][0];\n                                                            var batchEnd = batches_1[batchIndex][1];\n                                                            var batchIds = K.sliceAlongFirstAxis(epochIndexArray1D_1, batchStart, batchEnd - batchStart);\n                                                            batchLogs['batch'] = batchIndex;\n                                                            batchLogs['size'] = batchEnd - batchStart;\n                                                            var insBatch = sliceArraysByIndices(ins, batchIds);\n                                                            var outs = f(insBatch);\n                                                            for (var i = 0; i < outLabels.length; ++i) {\n                                                                var label = outLabels[i];\n                                                                var out = outs[i];\n                                                                batchLogs[label] = out;\n                                                                K.keep(out);\n                                                            }\n                                                            if (batchIndex === batches_1.length - 1) {\n                                                                if (doValidation) {\n                                                                    var valOuts = _this.testLoop(valF, valIns, batchSize);\n                                                                    for (var i = 0; i < outLabels.length; ++i) {\n                                                                        var label = outLabels[i];\n                                                                        var out = valOuts[i];\n                                                                        K.keep(out);\n                                                                        epochLogs['val_' + label] = out;\n                                                                    }\n                                                                }\n                                                            }\n                                                        });\n                                                        return [4, callbackList.onBatchEnd(batchIndex, batchLogs)];\n                                                    case 2:\n                                                        _a.sent();\n                                                        callbacks_1.disposeTensorsInLogs(batchLogs);\n                                                        return [2];\n                                                }\n                                            });\n                                        };\n                                        batchIndex = 0;\n                                        _a.label = 3;\n                                    case 3:\n                                        if (!(batchIndex < batches_1.length)) return [3, 6];\n                                        return [5, _loop_5(batchIndex)];\n                                    case 4:\n                                        _a.sent();\n                                        _a.label = 5;\n                                    case 5:\n                                        ++batchIndex;\n                                        return [3, 3];\n                                    case 6:\n                                        epochIndexArray1D_1.dispose();\n                                        _a.label = 7;\n                                    case 7:\n                                        return [4, callbackList.onEpochEnd(epoch, epochLogs)];\n                                    case 8:\n                                        _a.sent();\n                                        return [2];\n                                }\n                            });\n                        };\n                        epoch = initialEpoch;\n                        _a.label = 2;\n                    case 2:\n                        if (!(epoch < epochs)) return [3, 5];\n                        return [5, _loop_4(epoch)];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4:\n                        ++epoch;\n                        return [3, 2];\n                    case 5:\n                        return [4, callbackList.onTrainEnd()];\n                    case 6:\n                        _a.sent();\n                        return [4, this.history.syncData()];\n                    case 7:\n                        _a.sent();\n                        return [2, this.history];\n                }\n            });\n        });\n    };\n    Model.prototype.testLoop = function (f, ins, batchSize, verbose, steps) {\n        if (verbose === void 0) {\n            verbose = 0;\n        }\n        var numSamples = this.checkNumSamples(ins, batchSize, steps, 'steps');\n        var outs = [];\n        if (verbose === 1) {\n            throw new errors_1.NotImplementedError('Verbose mode is not implemented yet.');\n        }\n        if (steps != null) {\n            throw new errors_1.NotImplementedError('steps mode in testLoop() is not implemented yet');\n        } else {\n            var batches = makeBatches(numSamples, batchSize);\n            var indexArray = tfjs_core_1.tensor1d(_.range(numSamples));\n            for (var batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n                var batchStart = batches[batchIndex][0];\n                var batchEnd = batches[batchIndex][1];\n                var batchIds = K.sliceAlongFirstAxis(indexArray, batchStart, batchEnd - batchStart);\n                var insBatch = sliceArraysByIndices(ins, batchIds);\n                var batchOuts = f(insBatch);\n                if (batchIndex === 0) {\n                    for (var i = 0; i < batchOuts.length; ++i) {\n                        outs.push(K.getScalar(0));\n                    }\n                }\n                for (var i = 0; i < batchOuts.length; ++i) {\n                    var batchOut = batchOuts[i];\n                    outs[i] = K.add(outs[i], K.scalarTimesArray(K.getScalar(batchEnd - batchStart), batchOut));\n                }\n            }\n            for (var i = 0; i < outs.length; ++i) {\n                outs[i] = K.divide(outs[i], K.getScalar(numSamples));\n            }\n        }\n        return outs;\n    };\n    Model.prototype.getDedupedMetricsNames = function () {\n        var outLabels = this.metricsNames;\n        var dedupedOutLabels = [];\n        for (var i = 0; i < outLabels.length; ++i) {\n            var label = outLabels[i];\n            var newLabel = label;\n            if (generic_utils_1.count(outLabels, label) > 1) {\n                var dupIndex = generic_utils_1.count(outLabels.slice(0, i), label);\n                newLabel += \"_\" + dupIndex;\n            }\n            dedupedOutLabels.push(newLabel);\n        }\n        return dedupedOutLabels;\n    };\n    Model.prototype.makeTestFunction = function () {\n        var _this = this;\n        this.testFunction = function (data) {\n            return tfc.tidy(function () {\n                var valOutputs = [];\n                var totalLoss;\n                var inputs = data.slice(0, _this.inputs.length);\n                var targets = data.slice(_this.inputs.length, _this.inputs.length + _this.outputs.length);\n                var feeds = [];\n                for (var i = 0; i < _this.inputs.length; ++i) {\n                    feeds.push({ key: _this.inputs[i], value: inputs[i] });\n                }\n                var feedDict = new executor_1.FeedDict(feeds);\n                var outputs = executor_1.execute(_this.outputs, feedDict);\n                for (var i = 0; i < _this.lossFunctions.length; ++i) {\n                    var lossFunction = _this.lossFunctions[i];\n                    var loss = K.mean(lossFunction(targets[i], outputs[i]));\n                    if (i === 0) {\n                        totalLoss = loss;\n                    } else {\n                        totalLoss = K.add(totalLoss, loss);\n                    }\n                    valOutputs.push(totalLoss);\n                }\n                for (var i = 0; i < _this.metricsTensors.length; ++i) {\n                    var metric = _this.metricsTensors[i][0];\n                    var outputIndex = _this.metricsTensors[i][1];\n                    var meanMetric = K.mean(metric(targets[outputIndex], outputs[outputIndex]));\n                    valOutputs.push(meanMetric);\n                }\n                return valOutputs;\n            });\n        };\n    };\n    Model.prototype.fit = function (x, y, config) {\n        if (config === void 0) {\n            config = {};\n        }\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            var batchSize, standardizedOuts, inputs, targets, doValidation, valX, valY, valIns, valStandardized, splitAt, originalBatchSize, ins, trainFunction, outLabels, valFunction, callbackMetrics, callbacks;\n            return __generator(this, function (_a) {\n                batchSize = config.batchSize == null ? 32 : config.batchSize;\n                standardizedOuts = this.standardizeUserData(x, y, false, batchSize);\n                inputs = standardizedOuts[0];\n                targets = standardizedOuts[1];\n                doValidation = false;\n                if (config.validationData != null && config.validationData.length > 0) {\n                    doValidation = true;\n                    if (config.validationData.length === 2) {\n                        valX = config.validationData[0];\n                        valY = config.validationData[1];\n                    } else if (config.validationData.length === 3) {\n                        throw new errors_1.NotImplementedError('validationData including sample weights is not supported yet.');\n                    } else {\n                        throw new errors_1.ValueError(\"When passing validation data, it must contain 2 (valX, valY) \" + \"or 3 (valX, valY, valSampleWeight) items, however it contains \" + (config.validationData.length + \" items\"));\n                    }\n                    valStandardized = this.standardizeUserData(valX, valY, true, batchSize);\n                    valX = valStandardized[0];\n                    valY = valStandardized[1];\n                    valIns = valX.concat(valY);\n                } else if (config.validationSplit != null && config.validationSplit > 0 && config.validationSplit < 1) {\n                    doValidation = true;\n                    splitAt = Math.floor(inputs[0].shape[0] * (1 - config.validationSplit));\n                    originalBatchSize = inputs[0].shape[0];\n                    valX = sliceArrays(inputs, splitAt, originalBatchSize);\n                    inputs = sliceArrays(inputs, 0, splitAt);\n                    valY = sliceArrays(targets, splitAt, originalBatchSize);\n                    targets = sliceArrays(targets, 0, splitAt);\n                    valIns = valX.concat(valY);\n                } else if (config.validationSteps != null) {\n                    doValidation = true;\n                }\n                ins = inputs.concat(targets);\n                this.checkTrainableWeightsConsistency();\n                trainFunction = function (data) {\n                    var losses = [];\n                    var lossValues = [];\n                    var inputs = data.slice(0, _this.inputs.length);\n                    var targets = data.slice(_this.inputs.length, _this.inputs.length + _this.outputs.length);\n                    var metricsValues = [];\n                    var totalLossFunction = function () {\n                        var feeds = [];\n                        for (var i = 0; i < _this.inputs.length; ++i) {\n                            feeds.push({ key: _this.inputs[i], value: inputs[i] });\n                        }\n                        var feedDict = new executor_1.FeedDict(feeds);\n                        var outputs = executor_1.execute(_this.outputs, feedDict, { 'training': true });\n                        var totalLoss;\n                        for (var i = 0; i < _this.lossFunctions.length; ++i) {\n                            var lossFunction = _this.lossFunctions[i];\n                            var loss = lossFunction(targets[i], outputs[i]);\n                            losses.push(loss);\n                            var meanLoss = K.mean(loss);\n                            lossValues.push(meanLoss);\n                            if (i === 0) {\n                                totalLoss = loss;\n                            } else {\n                                totalLoss = K.add(totalLoss, loss);\n                            }\n                        }\n                        for (var i = 0; i < _this.metricsTensors.length; ++i) {\n                            var metric = _this.metricsTensors[i][0];\n                            var outputIndex = _this.metricsTensors[i][1];\n                            var meanMetric = K.mean(metric(targets[outputIndex], outputs[outputIndex]));\n                            K.keep(meanMetric);\n                            metricsValues.push(meanMetric);\n                        }\n                        totalLoss = K.mean(totalLoss);\n                        _this.calculateLosses().forEach(function (regularizerLoss) {\n                            totalLoss = K.add(totalLoss, regularizerLoss);\n                        });\n                        return totalLoss;\n                    };\n                    var totalLossValue = _this.optimizer.updateVariables(totalLossFunction, _this.collectedTrainableWeights);\n                    return [totalLossValue].concat(metricsValues);\n                };\n                outLabels = this.getDedupedMetricsNames();\n                if (doValidation) {\n                    this.makeTestFunction();\n                    valFunction = this.testFunction;\n                    callbackMetrics = outLabels.slice().concat(outLabels.map(function (n) {\n                        return 'val_' + n;\n                    }));\n                } else {\n                    valFunction = null;\n                    valIns = [];\n                    callbackMetrics = outLabels.slice();\n                }\n                callbacks = callbacks_1.standardizeCallbacks(config.callbacks);\n                return [2, this.fitLoop(trainFunction, ins, outLabels, batchSize, config.epochs, config.verbose, callbacks, valFunction, valIns, config.shuffle, callbackMetrics, null, null, null)];\n            });\n        });\n    };\n    __decorate([tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [0] })], Model.prototype, \"compile\", null);\n    __decorate([tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [2] })], Model.prototype, \"evaluate\", null);\n    __decorate([tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [1] })], Model.prototype, \"predict\", null);\n    __decorate([tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes' })], Model.prototype, \"predictOnBatch\", null);\n    __decorate([tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [2] })], Model.prototype, \"fit\", null);\n    Model = __decorate([tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes' })], Model);\n    return Model;\n}(topology_1.Container);\nexports.Model = Model;\ngeneric_utils_1.ClassNameMap.register('Model', Model);\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/engine/training.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/errors.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/errors.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AttributeError = function (_super) {\n    __extends(AttributeError, _super);\n    function AttributeError(message) {\n        var _this = _super.call(this, message) || this;\n        Object.setPrototypeOf(_this, AttributeError.prototype);\n        return _this;\n    }\n    return AttributeError;\n}(Error);\nexports.AttributeError = AttributeError;\nvar RuntimeError = function (_super) {\n    __extends(RuntimeError, _super);\n    function RuntimeError(message) {\n        var _this = _super.call(this, message) || this;\n        Object.setPrototypeOf(_this, RuntimeError.prototype);\n        return _this;\n    }\n    return RuntimeError;\n}(Error);\nexports.RuntimeError = RuntimeError;\nvar ValueError = function (_super) {\n    __extends(ValueError, _super);\n    function ValueError(message) {\n        var _this = _super.call(this, message) || this;\n        Object.setPrototypeOf(_this, ValueError.prototype);\n        return _this;\n    }\n    return ValueError;\n}(Error);\nexports.ValueError = ValueError;\nvar NotImplementedError = function (_super) {\n    __extends(NotImplementedError, _super);\n    function NotImplementedError(message) {\n        var _this = _super.call(this, message) || this;\n        Object.setPrototypeOf(_this, NotImplementedError.prototype);\n        return _this;\n    }\n    return NotImplementedError;\n}(Error);\nexports.NotImplementedError = NotImplementedError;\nvar AssertionError = function (_super) {\n    __extends(AssertionError, _super);\n    function AssertionError(message) {\n        var _this = _super.call(this, message) || this;\n        Object.setPrototypeOf(_this, AssertionError.prototype);\n        return _this;\n    }\n    return AssertionError;\n}(Error);\nexports.AssertionError = AssertionError;\nvar IndexError = function (_super) {\n    __extends(IndexError, _super);\n    function IndexError(message) {\n        var _this = _super.call(this, message) || this;\n        Object.setPrototypeOf(_this, IndexError.prototype);\n        return _this;\n    }\n    return IndexError;\n}(Error);\nexports.IndexError = IndexError;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/errors.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/exports.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/exports.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar constraints_1 = __webpack_require__(/*! ./constraints */ \"./node_modules/@tensorflow/tfjs-layers/dist/constraints.js\");\nvar topology_1 = __webpack_require__(/*! ./engine/topology */ \"./node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js\");\nvar training_1 = __webpack_require__(/*! ./engine/training */ \"./node_modules/@tensorflow/tfjs-layers/dist/engine/training.js\");\nvar initializers_1 = __webpack_require__(/*! ./initializers */ \"./node_modules/@tensorflow/tfjs-layers/dist/initializers.js\");\nvar convolutional_1 = __webpack_require__(/*! ./layers/convolutional */ \"./node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js\");\nvar convolutional_depthwise_1 = __webpack_require__(/*! ./layers/convolutional_depthwise */ \"./node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional_depthwise.js\");\nvar core_1 = __webpack_require__(/*! ./layers/core */ \"./node_modules/@tensorflow/tfjs-layers/dist/layers/core.js\");\nvar embeddings_1 = __webpack_require__(/*! ./layers/embeddings */ \"./node_modules/@tensorflow/tfjs-layers/dist/layers/embeddings.js\");\nvar merge_1 = __webpack_require__(/*! ./layers/merge */ \"./node_modules/@tensorflow/tfjs-layers/dist/layers/merge.js\");\nvar normalization_1 = __webpack_require__(/*! ./layers/normalization */ \"./node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js\");\nvar pooling_1 = __webpack_require__(/*! ./layers/pooling */ \"./node_modules/@tensorflow/tfjs-layers/dist/layers/pooling.js\");\nvar recurrent_1 = __webpack_require__(/*! ./layers/recurrent */ \"./node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js\");\nvar wrappers_1 = __webpack_require__(/*! ./layers/wrappers */ \"./node_modules/@tensorflow/tfjs-layers/dist/layers/wrappers.js\");\nvar models_1 = __webpack_require__(/*! ./models */ \"./node_modules/@tensorflow/tfjs-layers/dist/models.js\");\nvar regularizers_1 = __webpack_require__(/*! ./regularizers */ \"./node_modules/@tensorflow/tfjs-layers/dist/regularizers.js\");\nvar ModelExports = function () {\n    function ModelExports() {}\n    ModelExports.model = function (config) {\n        return new training_1.Model(config);\n    };\n    ModelExports.sequential = function (config) {\n        return new models_1.Sequential(config);\n    };\n    ModelExports.loadModel = function (modelConfigPath) {\n        return models_1.loadModelInternal(modelConfigPath);\n    };\n    ModelExports.input = function (config) {\n        return topology_1.Input(config);\n    };\n    __decorate([tfjs_core_1.doc({ heading: 'Models', subheading: 'Creation', configParamIndices: [0] })], ModelExports, \"model\", null);\n    __decorate([tfjs_core_1.doc({ heading: 'Models', subheading: 'Creation', configParamIndices: [0] })], ModelExports, \"sequential\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Models',\n        subheading: 'Loading',\n        useDocsFrom: 'loadModelInternal'\n    })], ModelExports, \"loadModel\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Models',\n        subheading: 'Inputs',\n        useDocsFrom: 'Input',\n        configParamIndices: [0]\n    })], ModelExports, \"input\", null);\n    return ModelExports;\n}();\nexports.ModelExports = ModelExports;\nvar LayerExports = function () {\n    function LayerExports() {}\n    LayerExports.inputLayer = function (config) {\n        return new topology_1.InputLayer(config);\n    };\n    LayerExports.conv1d = function (config) {\n        return new convolutional_1.Conv1D(config);\n    };\n    LayerExports.conv2d = function (config) {\n        return new convolutional_1.Conv2D(config);\n    };\n    LayerExports.depthwiseConv2d = function (config) {\n        return new convolutional_depthwise_1.DepthwiseConv2D(config);\n    };\n    LayerExports.activation = function (config) {\n        return new core_1.Activation(config);\n    };\n    LayerExports.dense = function (config) {\n        return new core_1.Dense(config);\n    };\n    LayerExports.dropout = function (config) {\n        return new core_1.Dropout(config);\n    };\n    LayerExports.flatten = function (config) {\n        return new core_1.Flatten(config);\n    };\n    LayerExports.repeatVector = function (config) {\n        return new core_1.RepeatVector(config);\n    };\n    LayerExports.embedding = function (config) {\n        return new embeddings_1.Embedding(config);\n    };\n    LayerExports.add = function (config) {\n        return new merge_1.Add(config);\n    };\n    LayerExports.average = function (config) {\n        return new merge_1.Average(config);\n    };\n    LayerExports.concatenate = function (config) {\n        return new merge_1.Concatenate(config);\n    };\n    LayerExports.maximum = function (config) {\n        return new merge_1.Maximum(config);\n    };\n    LayerExports.minimum = function (config) {\n        return new merge_1.Minimum(config);\n    };\n    LayerExports.multiply = function (config) {\n        return new merge_1.Multiply(config);\n    };\n    LayerExports.batchNormalization = function (config) {\n        return new normalization_1.BatchNormalization(config);\n    };\n    LayerExports.avgPooling1d = function (config) {\n        return new pooling_1.AvgPooling1D(config);\n    };\n    LayerExports.avgPooling2d = function (config) {\n        return new pooling_1.AvgPooling2D(config);\n    };\n    LayerExports.globalAveragePooling1d = function (config) {\n        return new pooling_1.GlobalAveragePooling1D(config);\n    };\n    LayerExports.globalAveragePooling2d = function (config) {\n        return new pooling_1.GlobalAveragePooling2D(config);\n    };\n    LayerExports.globalMaxPooling1d = function (config) {\n        return new pooling_1.GlobalMaxPooling1D(config);\n    };\n    LayerExports.globalMaxPooling2d = function (config) {\n        return new pooling_1.GlobalMaxPooling2D(config);\n    };\n    LayerExports.maxPooling1d = function (config) {\n        return new pooling_1.MaxPooling1D(config);\n    };\n    LayerExports.maxPooling2d = function (config) {\n        return new pooling_1.MaxPooling2D(config);\n    };\n    LayerExports.gru = function (config) {\n        return new recurrent_1.GRU(config);\n    };\n    LayerExports.gruCell = function (config) {\n        return new recurrent_1.GRUCell(config);\n    };\n    LayerExports.lstm = function (config) {\n        return new recurrent_1.LSTM(config);\n    };\n    LayerExports.lstmCell = function (config) {\n        return new recurrent_1.LSTMCell(config);\n    };\n    LayerExports.simpleRNN = function (config) {\n        return new recurrent_1.SimpleRNN(config);\n    };\n    LayerExports.simpleRNNCell = function (config) {\n        return new recurrent_1.SimpleRNNCell(config);\n    };\n    LayerExports.rnn = function (config) {\n        return new recurrent_1.RNN(config);\n    };\n    LayerExports.stackedRNNCells = function (config) {\n        return new recurrent_1.StackedRNNCells(config);\n    };\n    LayerExports.bidirectional = function (config) {\n        return new wrappers_1.Bidirectional(config);\n    };\n    LayerExports.timeDistributed = function (config) {\n        return new wrappers_1.TimeDistributed(config);\n    };\n    LayerExports.Layer = topology_1.Layer;\n    LayerExports.RNNCell = recurrent_1.RNNCell;\n    LayerExports.input = ModelExports.input;\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Inputs',\n        namespace: 'layers',\n        useDocsFrom: 'InputLayer',\n        configParamIndices: [0]\n    })], LayerExports, \"inputLayer\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Convolutional',\n        namespace: 'layers',\n        useDocsFrom: 'Conv1D',\n        configParamIndices: [0]\n    })], LayerExports, \"conv1d\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Convolutional',\n        namespace: 'layers',\n        useDocsFrom: 'Conv2D',\n        configParamIndices: [0]\n    })], LayerExports, \"conv2d\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Convolutional',\n        namespace: 'layers',\n        useDocsFrom: 'DepthwiseConv2D',\n        configParamIndices: [0]\n    })], LayerExports, \"depthwiseConv2d\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Basic',\n        namespace: 'layers',\n        useDocsFrom: 'Activation',\n        configParamIndices: [0]\n    })], LayerExports, \"activation\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Basic',\n        namespace: 'layers',\n        useDocsFrom: 'Dense',\n        configParamIndices: [0]\n    })], LayerExports, \"dense\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Basic',\n        namespace: 'layers',\n        useDocsFrom: 'Dropout',\n        configParamIndices: [0]\n    })], LayerExports, \"dropout\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Basic',\n        namespace: 'layers',\n        useDocsFrom: 'Flatten',\n        configParamIndices: [0]\n    })], LayerExports, \"flatten\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Basic',\n        namespace: 'layers',\n        useDocsFrom: 'RepeatVector',\n        configParamIndices: [0]\n    })], LayerExports, \"repeatVector\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Basic',\n        namespace: 'layers',\n        useDocsFrom: 'Embedding',\n        configParamIndices: [0]\n    })], LayerExports, \"embedding\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Merge',\n        namespace: 'layers',\n        useDocsFrom: 'Add',\n        configParamIndices: [0]\n    })], LayerExports, \"add\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Merge',\n        namespace: 'layers',\n        useDocsFrom: 'Average',\n        configParamIndices: [0]\n    })], LayerExports, \"average\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Merge',\n        namespace: 'layers',\n        useDocsFrom: 'Concatenate',\n        configParamIndices: [0]\n    })], LayerExports, \"concatenate\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Merge',\n        namespace: 'layers',\n        useDocsFrom: 'Maximum',\n        configParamIndices: [0]\n    })], LayerExports, \"maximum\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Merge',\n        namespace: 'layers',\n        useDocsFrom: 'Minimum',\n        configParamIndices: [0]\n    })], LayerExports, \"minimum\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Merge',\n        namespace: 'layers',\n        useDocsFrom: 'Multiply',\n        configParamIndices: [0]\n    })], LayerExports, \"multiply\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Normalization',\n        namespace: 'layers',\n        useDocsFrom: 'BatchNormalization',\n        configParamIndices: [0]\n    })], LayerExports, \"batchNormalization\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Pooling',\n        namespace: 'layers',\n        useDocsFrom: 'AvgPooling1D',\n        configParamIndices: [0]\n    })], LayerExports, \"avgPooling1d\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Pooling',\n        namespace: 'layers',\n        useDocsFrom: 'AvgPooling2D',\n        configParamIndices: [0]\n    })], LayerExports, \"avgPooling2d\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Pooling',\n        namespace: 'layers',\n        useDocsFrom: 'GlobalAveragePooling1D',\n        configParamIndices: [0]\n    })], LayerExports, \"globalAveragePooling1d\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Pooling',\n        namespace: 'layers',\n        useDocsFrom: 'GlobalAveragePooling2D',\n        configParamIndices: [0]\n    })], LayerExports, \"globalAveragePooling2d\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Pooling',\n        namespace: 'layers',\n        useDocsFrom: 'GlobalMaxPooling1D',\n        configParamIndices: [0]\n    })], LayerExports, \"globalMaxPooling1d\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Pooling',\n        namespace: 'layers',\n        useDocsFrom: 'GlobalMaxPooling2D',\n        configParamIndices: [0]\n    })], LayerExports, \"globalMaxPooling2d\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Pooling',\n        namespace: 'layers',\n        useDocsFrom: 'MaxPooling1D',\n        configParamIndices: [0]\n    })], LayerExports, \"maxPooling1d\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Pooling',\n        namespace: 'layers',\n        useDocsFrom: 'MaxPooling2D',\n        configParamIndices: [0]\n    })], LayerExports, \"maxPooling2d\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Recurrent',\n        namespace: 'layers',\n        useDocsFrom: 'GRU',\n        configParamIndices: [0]\n    })], LayerExports, \"gru\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Recurrent',\n        namespace: 'layers',\n        useDocsFrom: 'GRUCell',\n        configParamIndices: [0]\n    })], LayerExports, \"gruCell\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Recurrent',\n        namespace: 'layers',\n        useDocsFrom: 'LSTM',\n        configParamIndices: [0]\n    })], LayerExports, \"lstm\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Recurrent',\n        namespace: 'layers',\n        useDocsFrom: 'LSTMCell',\n        configParamIndices: [0]\n    })], LayerExports, \"lstmCell\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Recurrent',\n        namespace: 'layers',\n        useDocsFrom: 'SimpleRNN',\n        configParamIndices: [0]\n    })], LayerExports, \"simpleRNN\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Recurrent',\n        namespace: 'layers',\n        useDocsFrom: 'SimpleRNNCell',\n        configParamIndices: [0]\n    })], LayerExports, \"simpleRNNCell\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Recurrent',\n        namespace: 'layers',\n        useDocsFrom: 'RNN',\n        configParamIndices: [0]\n    })], LayerExports, \"rnn\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Recurrent',\n        namespace: 'layers',\n        useDocsFrom: 'RNN',\n        configParamIndices: [0]\n    })], LayerExports, \"stackedRNNCells\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Wrapper',\n        namespace: 'layers',\n        useDocsFrom: 'Bidirectional',\n        configParamIndices: [0]\n    })], LayerExports, \"bidirectional\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Layers',\n        subheading: 'Wrapper',\n        namespace: 'layers',\n        useDocsFrom: 'TimeDistributed',\n        configParamIndices: [0]\n    })], LayerExports, \"timeDistributed\", null);\n    return LayerExports;\n}();\nexports.LayerExports = LayerExports;\nvar ConstraintExports = function () {\n    function ConstraintExports() {}\n    ConstraintExports.maxNorm = function (config) {\n        return new constraints_1.MaxNorm(config);\n    };\n    ConstraintExports.unitNorm = function (config) {\n        return new constraints_1.UnitNorm(config);\n    };\n    ConstraintExports.nonNeg = function () {\n        return new constraints_1.NonNeg();\n    };\n    ConstraintExports.minMaxNorm = function (config) {\n        return new constraints_1.MinMaxNorm(config);\n    };\n    __decorate([tfjs_core_1.doc({\n        heading: 'Constraints',\n        namespace: 'constraints',\n        useDocsFrom: 'MaxNorm',\n        configParamIndices: [0]\n    })], ConstraintExports, \"maxNorm\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Constraints',\n        namespace: 'constraints',\n        useDocsFrom: 'UnitNorm',\n        configParamIndices: [0]\n    })], ConstraintExports, \"unitNorm\", null);\n    __decorate([tfjs_core_1.doc({ heading: 'Constraints', namespace: 'constraints', useDocsFrom: 'NonNeg' })], ConstraintExports, \"nonNeg\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Constraints',\n        namespace: 'constraints',\n        useDocsFrom: 'MinMaxNormConfig',\n        configParamIndices: [0]\n    })], ConstraintExports, \"minMaxNorm\", null);\n    return ConstraintExports;\n}();\nexports.ConstraintExports = ConstraintExports;\nvar InitializerExports = function () {\n    function InitializerExports() {}\n    InitializerExports.zeros = function () {\n        return new initializers_1.Zeros();\n    };\n    InitializerExports.ones = function () {\n        return new initializers_1.Ones();\n    };\n    InitializerExports.constant = function (config) {\n        return new initializers_1.Constant(config);\n    };\n    InitializerExports.randomUniform = function (config) {\n        return new initializers_1.RandomUniform(config);\n    };\n    InitializerExports.randomNormal = function (config) {\n        return new initializers_1.RandomNormal(config);\n    };\n    InitializerExports.truncatedNormal = function (config) {\n        return new initializers_1.TruncatedNormal(config);\n    };\n    InitializerExports.identity = function (config) {\n        return new initializers_1.Identity(config);\n    };\n    InitializerExports.varianceScaling = function (config) {\n        return new initializers_1.VarianceScaling(config);\n    };\n    InitializerExports.glorotUniform = function (config) {\n        return new initializers_1.GlorotUniform(config);\n    };\n    InitializerExports.glorotNormal = function (config) {\n        return new initializers_1.GlorotNormal(config);\n    };\n    InitializerExports.heNormal = function (config) {\n        return new initializers_1.HeNormal(config);\n    };\n    InitializerExports.leCunNormal = function (config) {\n        return new initializers_1.LeCunNormal(config);\n    };\n    InitializerExports.orthogonal = function (config) {\n        return new initializers_1.Orthogonal(config);\n    };\n    __decorate([tfjs_core_1.doc({\n        heading: 'Initializers',\n        namespace: 'initializers',\n        useDocsFrom: 'Zeros'\n    })], InitializerExports, \"zeros\", null);\n    __decorate([tfjs_core_1.doc({ heading: 'Initializers', namespace: 'initializers', useDocsFrom: 'Ones' })], InitializerExports, \"ones\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Initializers',\n        namespace: 'initializers',\n        useDocsFrom: 'Constant',\n        configParamIndices: [0]\n    })], InitializerExports, \"constant\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Initializers',\n        namespace: 'initializers',\n        useDocsFrom: 'RandomUniform',\n        configParamIndices: [0]\n    })], InitializerExports, \"randomUniform\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Initializers',\n        namespace: 'initializers',\n        useDocsFrom: 'RandomNormal',\n        configParamIndices: [0]\n    })], InitializerExports, \"randomNormal\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Initializers',\n        namespace: 'initializers',\n        useDocsFrom: 'TruncatedNormal',\n        configParamIndices: [0]\n    })], InitializerExports, \"truncatedNormal\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Initializers',\n        namespace: 'initializers',\n        useDocsFrom: 'Identity',\n        configParamIndices: [0]\n    })], InitializerExports, \"identity\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Initializers',\n        namespace: 'initializers',\n        useDocsFrom: 'VarianceScaling',\n        configParamIndices: [0]\n    })], InitializerExports, \"varianceScaling\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Initializers',\n        namespace: 'initializers',\n        useDocsFrom: 'GlorotUniform',\n        configParamIndices: [0]\n    })], InitializerExports, \"glorotUniform\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Initializers',\n        namespace: 'initializers',\n        useDocsFrom: 'GlorotNormal',\n        configParamIndices: [0]\n    })], InitializerExports, \"glorotNormal\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Initializers',\n        namespace: 'initializers',\n        useDocsFrom: 'HeNormal',\n        configParamIndices: [0]\n    })], InitializerExports, \"heNormal\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Initializers',\n        namespace: 'initializers',\n        useDocsFrom: 'LeCunNormal',\n        configParamIndices: [0]\n    })], InitializerExports, \"leCunNormal\", null);\n    __decorate([tfjs_core_1.doc({\n        heading: 'Initializers',\n        namespace: 'initializers',\n        useDocsFrom: 'Orthogonal',\n        configParamIndices: [0]\n    })], InitializerExports, \"orthogonal\", null);\n    return InitializerExports;\n}();\nexports.InitializerExports = InitializerExports;\nvar RegularizerExports = function () {\n    function RegularizerExports() {}\n    RegularizerExports.l1l2 = function (config) {\n        return new regularizers_1.L1L2(config);\n    };\n    RegularizerExports.l1 = function (config) {\n        return regularizers_1.l1(config);\n    };\n    RegularizerExports.l2 = function (config) {\n        return regularizers_1.l2(config);\n    };\n    __decorate([tfjs_core_1.doc({ heading: 'Regularizers', namespace: 'regularizers', useDocsFrom: 'L1L2' })], RegularizerExports, \"l1l2\", null);\n    __decorate([tfjs_core_1.doc({ heading: 'Regularizers', namespace: 'regularizers', useDocsFrom: 'L1L2' })], RegularizerExports, \"l1\", null);\n    __decorate([tfjs_core_1.doc({ heading: 'Regularizers', namespace: 'regularizers', useDocsFrom: 'L1L2' })], RegularizerExports, \"l2\", null);\n    return RegularizerExports;\n}();\nexports.RegularizerExports = RegularizerExports;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/exports.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar backend = __webpack_require__(/*! ./backend/tfjs_backend */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\");\nexports.backend = backend;\nvar exports_1 = __webpack_require__(/*! ./exports */ \"./node_modules/@tensorflow/tfjs-layers/dist/exports.js\");\nvar callbacks_1 = __webpack_require__(/*! ./callbacks */ \"./node_modules/@tensorflow/tfjs-layers/dist/callbacks.js\");\nexports.Callback = callbacks_1.Callback;\nexports.CallbackList = callbacks_1.CallbackList;\nexports.CustomCallback = callbacks_1.CustomCallback;\nvar training_1 = __webpack_require__(/*! ./engine/training */ \"./node_modules/@tensorflow/tfjs-layers/dist/engine/training.js\");\nexports.Model = training_1.Model;\nvar recurrent_1 = __webpack_require__(/*! ./layers/recurrent */ \"./node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js\");\nexports.RNN = recurrent_1.RNN;\nvar models_1 = __webpack_require__(/*! ./models */ \"./node_modules/@tensorflow/tfjs-layers/dist/models.js\");\nexports.Sequential = models_1.Sequential;\nvar types_1 = __webpack_require__(/*! ./types */ \"./node_modules/@tensorflow/tfjs-layers/dist/types.js\");\nexports.SymbolicTensor = types_1.SymbolicTensor;\nvar version_1 = __webpack_require__(/*! ./version */ \"./node_modules/@tensorflow/tfjs-layers/dist/version.js\");\nexports.version_layers = version_1.version;\nexports.model = exports_1.ModelExports.model;\nexports.sequential = exports_1.ModelExports.sequential;\nexports.loadModel = exports_1.ModelExports.loadModel;\nexports.input = exports_1.ModelExports.input;\nexports.layers = exports_1.LayerExports;\nexports.constraints = exports_1.ConstraintExports;\nexports.initializers = exports_1.InitializerExports;\nexports.regularizers = exports_1.RegularizerExports;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/index.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/initializers.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/initializers.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\nvar K = __webpack_require__(/*! ./backend/tfjs_backend */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\");\nvar common_1 = __webpack_require__(/*! ./common */ \"./node_modules/@tensorflow/tfjs-layers/dist/common.js\");\nvar errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nvar types_1 = __webpack_require__(/*! ./types */ \"./node_modules/@tensorflow/tfjs-layers/dist/types.js\");\nvar generic_utils_1 = __webpack_require__(/*! ./utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar math_utils_1 = __webpack_require__(/*! ./utils/math_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/math_utils.js\");\ngeneric_utils_1.SerializableEnumRegistry.register('mode', { 'fan_in': 'fanIn', 'fan_out': 'fanOut', 'fan_avg': 'fanAvg' });\nexports.VALID_FAN_MODE_VALUES = ['fanIn', 'fanOut', 'fanAvg', undefined, null];\nfunction checkFanMode(value) {\n    if (value == null) {\n        return;\n    }\n    if (exports.VALID_FAN_MODE_VALUES.indexOf(value) < 0) {\n        throw new errors_1.ValueError(value + \" is not a valid FanMode.  Valid values as \" + exports.VALID_FAN_MODE_VALUES);\n    }\n}\nexports.checkFanMode = checkFanMode;\ngeneric_utils_1.SerializableEnumRegistry.register('distribution', { 'normal': 'normal', 'uniform': 'uniform' });\nexports.VALID_DISTRIBUTION_VALUES = ['normal', 'uniform', undefined, null];\nfunction checkDistribution(value) {\n    if (value == null) {\n        return;\n    }\n    if (exports.VALID_DISTRIBUTION_VALUES.indexOf(value) < 0) {\n        throw new errors_1.ValueError(value + \" is not a valid Distribution.  Valid values as \" + exports.VALID_DISTRIBUTION_VALUES);\n    }\n}\nexports.checkDistribution = checkDistribution;\nvar Initializer = function () {\n    function Initializer() {}\n    Initializer.fromConfig = function (cls, config) {\n        return new cls(config);\n    };\n    Initializer.prototype.fromConfigUsesCustomObjects = function () {\n        return false;\n    };\n    Initializer.prototype.getConfig = function () {\n        return {};\n    };\n    Initializer = __decorate([tfjs_core_1.doc({ heading: 'Initializers', subheading: 'Classes', namespace: 'initializers' })], Initializer);\n    return Initializer;\n}();\nexports.Initializer = Initializer;\nvar Zeros = function (_super) {\n    __extends(Zeros, _super);\n    function Zeros() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Zeros.prototype.apply = function (shape, dtype) {\n        return K.zeros(shape, dtype);\n    };\n    return Zeros;\n}(Initializer);\nexports.Zeros = Zeros;\ngeneric_utils_1.ClassNameMap.register('Zeros', Zeros);\nvar Ones = function (_super) {\n    __extends(Ones, _super);\n    function Ones() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Ones.prototype.apply = function (shape, dtype) {\n        return K.ones(shape, dtype);\n    };\n    return Ones;\n}(Initializer);\nexports.Ones = Ones;\ngeneric_utils_1.ClassNameMap.register('Ones', Ones);\nvar Constant = function (_super) {\n    __extends(Constant, _super);\n    function Constant(config) {\n        var _this = _super.call(this) || this;\n        _this.value = config.value;\n        return _this;\n    }\n    Constant.prototype.apply = function (shape, dtype) {\n        return K.scalarTimesArray(tfjs_core_1.scalar(this.value), K.ones(shape, dtype));\n    };\n    Constant.prototype.getConfig = function () {\n        return {\n            value: this.value\n        };\n    };\n    return Constant;\n}(Initializer);\nexports.Constant = Constant;\ngeneric_utils_1.ClassNameMap.register('Constant', Constant);\nvar RandomUniform = function (_super) {\n    __extends(RandomUniform, _super);\n    function RandomUniform(config) {\n        var _this = _super.call(this) || this;\n        _this.DEFAULT_MINVAL = -0.05;\n        _this.DEFAULT_MAXVAL = 0.05;\n        _this.minval = config.minval || _this.DEFAULT_MINVAL;\n        _this.maxval = config.maxval || _this.DEFAULT_MAXVAL;\n        _this.seed = config.seed;\n        return _this;\n    }\n    RandomUniform.prototype.apply = function (shape, dtype) {\n        return K.randomUniform(shape, this.minval, this.maxval, dtype, this.seed);\n    };\n    RandomUniform.prototype.getConfig = function () {\n        return { minval: this.minval, maxval: this.maxval, seed: this.seed };\n    };\n    return RandomUniform;\n}(Initializer);\nexports.RandomUniform = RandomUniform;\ngeneric_utils_1.ClassNameMap.register('RandomUniform', RandomUniform);\nvar RandomNormal = function (_super) {\n    __extends(RandomNormal, _super);\n    function RandomNormal(config) {\n        var _this = _super.call(this) || this;\n        _this.DEFAULT_MEAN = 0.;\n        _this.DEFAULT_STDDEV = 0.05;\n        _this.mean = config.mean || _this.DEFAULT_MEAN;\n        _this.stddev = config.stddev || _this.DEFAULT_STDDEV;\n        _this.seed = config.seed;\n        return _this;\n    }\n    RandomNormal.prototype.apply = function (shape, dtype) {\n        return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);\n    };\n    RandomNormal.prototype.getConfig = function () {\n        return { mean: this.mean, stddev: this.stddev, seed: this.seed };\n    };\n    return RandomNormal;\n}(Initializer);\nexports.RandomNormal = RandomNormal;\ngeneric_utils_1.ClassNameMap.register('RandomNormal', RandomNormal);\nvar TruncatedNormal = function (_super) {\n    __extends(TruncatedNormal, _super);\n    function TruncatedNormal(config) {\n        var _this = _super.call(this) || this;\n        _this.DEFAULT_MEAN = 0.;\n        _this.DEFAULT_STDDEV = 0.05;\n        _this.mean = config.mean || _this.DEFAULT_MEAN;\n        _this.stddev = config.stddev || _this.DEFAULT_STDDEV;\n        _this.seed = config.seed;\n        return _this;\n    }\n    TruncatedNormal.prototype.apply = function (shape, dtype) {\n        return K.truncatedNormal(shape, this.mean, this.stddev, dtype, this.seed);\n    };\n    TruncatedNormal.prototype.getConfig = function () {\n        return { mean: this.mean, stddev: this.stddev, seed: this.seed };\n    };\n    return TruncatedNormal;\n}(Initializer);\nexports.TruncatedNormal = TruncatedNormal;\ngeneric_utils_1.ClassNameMap.register('TruncatedNormal', TruncatedNormal);\nvar Identity = function (_super) {\n    __extends(Identity, _super);\n    function Identity(config) {\n        var _this = _super.call(this) || this;\n        _this.gain = config.gain != null ? tfjs_core_1.scalar(config.gain) : K.getScalar(1.0);\n        return _this;\n    }\n    Identity.prototype.apply = function (shape, dtype) {\n        if (shape.length !== 2 || shape[0] !== shape[1]) {\n            throw new errors_1.ValueError('Identity matrix initializer can only be used for' + ' 2D square matrices.');\n        } else {\n            return K.scalarTimesArray(this.gain, K.eye(shape[0]));\n        }\n    };\n    Identity.prototype.getConfig = function () {\n        return { gain: this.gain.get() };\n    };\n    return Identity;\n}(Initializer);\nexports.Identity = Identity;\ngeneric_utils_1.ClassNameMap.register('Identity', Identity);\nfunction computeFans(shape, dataFormat) {\n    if (dataFormat === void 0) {\n        dataFormat = 'channelsLast';\n    }\n    var fanIn;\n    var fanOut;\n    common_1.checkDataFormat(dataFormat);\n    if (shape.length === 2) {\n        fanIn = shape[0];\n        fanOut = shape[1];\n    } else if (_.contains([3, 4, 5], shape.length)) {\n        if (dataFormat === 'channelsFirst') {\n            var receptiveFieldSize = math_utils_1.arrayProd(shape, 2);\n            fanIn = shape[1] * receptiveFieldSize;\n            fanOut = shape[0] * receptiveFieldSize;\n        } else if (dataFormat === 'channelsLast') {\n            var receptiveFieldSize = math_utils_1.arrayProd(shape, 0, shape.length - 2);\n            fanIn = shape[shape.length - 2] * receptiveFieldSize;\n            fanOut = shape[shape.length - 1] * receptiveFieldSize;\n        }\n    } else {\n        var shapeProd = math_utils_1.arrayProd(shape);\n        fanIn = Math.sqrt(shapeProd);\n        fanOut = Math.sqrt(shapeProd);\n    }\n    return [fanIn, fanOut];\n}\nvar VarianceScaling = function (_super) {\n    __extends(VarianceScaling, _super);\n    function VarianceScaling(config) {\n        var _this = _super.call(this) || this;\n        if (config.scale < 0.0) {\n            throw new errors_1.ValueError(\"scale must be a positive float. Got: \" + config.scale);\n        }\n        _this.scale = config.scale == null ? 1.0 : config.scale;\n        _this.mode = config.mode;\n        checkFanMode(_this.mode);\n        _this.distribution = config.distribution;\n        checkDistribution(_this.distribution);\n        _this.seed = config.seed;\n        return _this;\n    }\n    VarianceScaling.prototype.apply = function (shape, dtype) {\n        var fans = computeFans(shape);\n        var fanIn = fans[0];\n        var fanOut = fans[1];\n        var scale = this.scale;\n        if (this.mode === 'fanIn') {\n            scale /= Math.max(1, fanIn);\n        } else if (this.mode === 'fanOut') {\n            scale /= Math.max(1, fanOut);\n        } else {\n            scale /= Math.max(1, (fanIn + fanOut) / 2);\n        }\n        if (this.distribution === 'normal') {\n            var stddev = Math.sqrt(scale);\n            return K.truncatedNormal(shape, 0, stddev, dtype, this.seed);\n        } else {\n            var limit = Math.sqrt(3 * scale);\n            return K.randomUniform(shape, -limit, limit, dtype, this.seed);\n        }\n    };\n    VarianceScaling.prototype.getConfig = function () {\n        return {\n            scale: this.scale,\n            mode: this.mode,\n            distribution: this.distribution,\n            seed: this.seed\n        };\n    };\n    return VarianceScaling;\n}(Initializer);\nexports.VarianceScaling = VarianceScaling;\ngeneric_utils_1.ClassNameMap.register('VarianceScaling', VarianceScaling);\nvar GlorotUniform = function (_super) {\n    __extends(GlorotUniform, _super);\n    function GlorotUniform(config) {\n        return _super.call(this, {\n            scale: 1.0,\n            mode: 'fanAvg',\n            distribution: 'uniform',\n            seed: config.seed\n        }) || this;\n    }\n    return GlorotUniform;\n}(VarianceScaling);\nexports.GlorotUniform = GlorotUniform;\ngeneric_utils_1.ClassNameMap.register('GlorotUniform', GlorotUniform);\nvar GlorotNormal = function (_super) {\n    __extends(GlorotNormal, _super);\n    function GlorotNormal(config) {\n        return _super.call(this, {\n            scale: 1.0,\n            mode: 'fanAvg',\n            distribution: 'normal',\n            seed: config.seed\n        }) || this;\n    }\n    return GlorotNormal;\n}(VarianceScaling);\nexports.GlorotNormal = GlorotNormal;\ngeneric_utils_1.ClassNameMap.register('GlorotNormal', GlorotNormal);\nvar HeNormal = function (_super) {\n    __extends(HeNormal, _super);\n    function HeNormal(config) {\n        return _super.call(this, { scale: 2.0, mode: 'fanIn', distribution: 'normal', seed: config.seed }) || this;\n    }\n    return HeNormal;\n}(VarianceScaling);\nexports.HeNormal = HeNormal;\ngeneric_utils_1.ClassNameMap.register('HeNormal', HeNormal);\nvar LeCunNormal = function (_super) {\n    __extends(LeCunNormal, _super);\n    function LeCunNormal(config) {\n        return _super.call(this, { scale: 1.0, mode: 'fanIn', distribution: 'normal', seed: config.seed }) || this;\n    }\n    return LeCunNormal;\n}(VarianceScaling);\nexports.LeCunNormal = LeCunNormal;\ngeneric_utils_1.ClassNameMap.register('LeCunNormal', LeCunNormal);\nvar Orthogonal = function (_super) {\n    __extends(Orthogonal, _super);\n    function Orthogonal(config) {\n        var _this = _super.call(this) || this;\n        _this.DEFAULT_GAIN = 1;\n        _this.gain = config.gain == null ? _this.DEFAULT_GAIN : config.gain;\n        _this.seed = config.seed;\n        if (_this.seed != null) {\n            throw new errors_1.NotImplementedError('Random seed is not implemented for Orthogonal Initializer yet.');\n        }\n        return _this;\n    }\n    Orthogonal.prototype.apply = function (shape, dtype) {\n        if (shape.length !== 2) {\n            throw new errors_1.NotImplementedError('The Orthogonal Initializer does not support non-2D shapes yet.');\n        }\n        var normalizedShape = shape[0] >= shape[1] ? shape : [shape[1], shape[0]];\n        var a = K.randomNormal(normalizedShape, 0, 1, types_1.DType.float32);\n        var q = K.qr(a)[0];\n        if (q.shape[1] > normalizedShape[1]) {\n            q = q.slice([0, 0], normalizedShape);\n        }\n        if (shape[0] < shape[1]) {\n            q = q.transpose();\n        }\n        return K.scalarTimesArray(K.getScalar(this.gain), q);\n    };\n    Orthogonal.prototype.getConfig = function () {\n        return {\n            gain: this.gain,\n            seed: this.seed\n        };\n    };\n    return Orthogonal;\n}(Initializer);\nexports.Orthogonal = Orthogonal;\ngeneric_utils_1.ClassNameMap.register('Orthogonal', Orthogonal);\nexports.INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'constant': 'Constant',\n    'glorotNormal': 'GlorotNormal',\n    'glorotUniform': 'GlorotUniform',\n    'heNormal': 'HeNormal',\n    'identity': 'Identity',\n    'leCunNormal': 'LeCunNormal',\n    'ones': 'Ones',\n    'orthogonal': 'Orthogonal',\n    'randomNormal': 'RandomNormal',\n    'randomUniform': 'RandomUniform',\n    'truncatedNormal': 'TruncatedNormal',\n    'varianceScaling': 'VarianceScaling',\n    'zeros': 'Zeros'\n};\nfunction deserializeInitializer(config, customObjects) {\n    if (customObjects === void 0) {\n        customObjects = {};\n    }\n    return generic_utils_1.deserializeKerasObject(config, generic_utils_1.ClassNameMap.getMap().pythonClassNameMap, customObjects, 'initializer');\n}\nfunction serializeInitializer(initializer) {\n    return generic_utils_1.serializeKerasObject(initializer);\n}\nexports.serializeInitializer = serializeInitializer;\nfunction getInitializer(identifier) {\n    if (typeof identifier === 'string') {\n        var className = identifier in exports.INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? exports.INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n        var config = { className: className, config: {} };\n        return deserializeInitializer(config);\n    } else if (identifier instanceof Initializer) {\n        return identifier;\n    } else {\n        return deserializeInitializer(identifier);\n    }\n}\nexports.getInitializer = getInitializer;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/initializers.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\nvar activations_1 = __webpack_require__(/*! ../activations */ \"./node_modules/@tensorflow/tfjs-layers/dist/activations.js\");\nvar K = __webpack_require__(/*! ../backend/tfjs_backend */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\");\nvar common_1 = __webpack_require__(/*! ../common */ \"./node_modules/@tensorflow/tfjs-layers/dist/common.js\");\nvar constraints_1 = __webpack_require__(/*! ../constraints */ \"./node_modules/@tensorflow/tfjs-layers/dist/constraints.js\");\nvar topology_1 = __webpack_require__(/*! ../engine/topology */ \"./node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js\");\nvar errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nvar initializers_1 = __webpack_require__(/*! ../initializers */ \"./node_modules/@tensorflow/tfjs-layers/dist/initializers.js\");\nvar regularizers_1 = __webpack_require__(/*! ../regularizers */ \"./node_modules/@tensorflow/tfjs-layers/dist/regularizers.js\");\nvar conv_utils_1 = __webpack_require__(/*! ../utils/conv_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/conv_utils.js\");\nvar generic_utils = __webpack_require__(/*! ../utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar Conv = function (_super) {\n    __extends(Conv, _super);\n    function Conv(rank, config) {\n        var _this = _super.call(this, config) || this;\n        _this.kernel = null;\n        _this.bias = null;\n        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        _this.rank = rank;\n        if (_this.rank !== 1 && _this.rank !== 2) {\n            throw new errors_1.NotImplementedError(\"Convolution layer for rank other than 1 or 2 (\" + _this.rank + \") is \" + \"not implemented yet.\");\n        }\n        _this.filters = config.filters;\n        _this.kernelSize = conv_utils_1.normalizeArray(config.kernelSize, rank, 'kernelSize');\n        _this.strides = conv_utils_1.normalizeArray(config.strides == null ? 1 : config.strides, rank, 'strides');\n        _this.padding = config.padding == null ? 'valid' : config.padding;\n        common_1.checkPaddingMode(_this.padding);\n        _this.dataFormat = config.dataFormat == null ? 'channelsLast' : config.dataFormat;\n        common_1.checkDataFormat(_this.dataFormat);\n        _this.dilationRate = config.dilationRate == null ? 1 : config.dilationRate;\n        if (!(_this.dilationRate === 1 || Array.isArray(_this.dilationRate) && _.isEqual(_.uniq(_this.dilationRate), [1]))) {\n            throw new errors_1.NotImplementedError('Non-default dilation is not implemented for convolution layers ' + 'yet.');\n        }\n        _this.activation = activations_1.getActivation(config.activation);\n        _this.useBias = config.useBias == null ? true : config.useBias;\n        _this.kernelInitializer = initializers_1.getInitializer(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n        _this.biasInitializer = initializers_1.getInitializer(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);\n        _this.kernelConstraint = constraints_1.getConstraint(config.kernelConstraint);\n        _this.biasConstraint = constraints_1.getConstraint(config.biasConstraint);\n        _this.kernelRegularizer = regularizers_1.getRegularizer(config.kernelRegularizer);\n        _this.biasRegularizer = regularizers_1.getRegularizer(config.biasRegularizer);\n        _this.activityRegularizer = regularizers_1.getRegularizer(config.activityRegularizer);\n        return _this;\n    }\n    Conv.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n        if (inputShape[channelAxis] == null) {\n            throw new errors_1.ValueError(\"The channel dimension of the input should be defined. \" + (\"Found \" + inputShape[channelAxis]));\n        }\n        var inputDim = inputShape[channelAxis];\n        var kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n        this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        this.inputSpec = [{ ndim: this.rank + 2, axes: (_a = {}, _a[channelAxis] = inputDim, _a) }];\n        this.built = true;\n        var _a;\n    };\n    Conv.prototype.call = function (inputs, kwargs) {\n        inputs = generic_utils.getExactlyOneTensor(inputs);\n        var outputs;\n        var biasValue = this.bias == null ? null : this.bias.read();\n        if (this.rank === 1) {\n            outputs = K.conv1dWithBias(inputs, this.kernel.read(), biasValue, this.strides[0], this.padding, this.dataFormat);\n        } else if (this.rank === 2) {\n            outputs = K.conv2dWithBias(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat);\n        } else if (this.rank === 3) {\n            throw new errors_1.NotImplementedError('3D convolution is not implemented yet.');\n        }\n        if (this.activation != null) {\n            outputs = this.activation(outputs);\n        }\n        return outputs;\n    };\n    Conv.prototype.computeOutputShape = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var newSpace = [];\n        var space = this.dataFormat === 'channelsLast' ? inputShape.slice(1, inputShape.length - 1) : inputShape.slice(2);\n        for (var i = 0; i < space.length; ++i) {\n            var newDim = conv_utils_1.convOutputLength(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === 'number' ? this.dilationRate : this.dilationRate[i]);\n            newSpace.push(newDim);\n        }\n        var outputShape = [inputShape[0]];\n        if (this.dataFormat === 'channelsLast') {\n            outputShape = outputShape.concat(newSpace);\n            outputShape.push(this.filters);\n        } else {\n            outputShape.push(this.filters);\n            outputShape = outputShape.concat(newSpace);\n        }\n        return outputShape;\n    };\n    Conv.prototype.getConfig = function () {\n        var config = {\n            rank: this.rank,\n            filters: this.filters,\n            kernelSize: this.kernelSize,\n            strides: this.strides,\n            padding: this.padding,\n            dataFormat: this.dataFormat,\n            dilationRate: this.dilationRate,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint)\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return Conv;\n}(topology_1.Layer);\nexports.Conv = Conv;\nvar Conv2D = function (_super) {\n    __extends(Conv2D, _super);\n    function Conv2D(config) {\n        return _super.call(this, 2, config) || this;\n    }\n    Conv2D.prototype.getConfig = function () {\n        var config = _super.prototype.getConfig.call(this);\n        delete config['rank'];\n        return config;\n    };\n    return Conv2D;\n}(Conv);\nexports.Conv2D = Conv2D;\ngeneric_utils.ClassNameMap.register('Conv2D', Conv2D);\nvar Conv1D = function (_super) {\n    __extends(Conv1D, _super);\n    function Conv1D(config) {\n        var _this = _super.call(this, 1, config) || this;\n        _this.inputSpec = [{ ndim: 3 }];\n        return _this;\n    }\n    Conv1D.prototype.getConfig = function () {\n        var config = _super.prototype.getConfig.call(this);\n        delete config['rank'];\n        delete config['dataFormat'];\n        return config;\n    };\n    return Conv1D;\n}(Conv);\nexports.Conv1D = Conv1D;\ngeneric_utils.ClassNameMap.register('Conv1D', Conv1D);\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional_depthwise.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional_depthwise.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar K = __webpack_require__(/*! ../backend/tfjs_backend */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\");\nvar constraints_1 = __webpack_require__(/*! ../constraints */ \"./node_modules/@tensorflow/tfjs-layers/dist/constraints.js\");\nvar errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nvar initializers_1 = __webpack_require__(/*! ../initializers */ \"./node_modules/@tensorflow/tfjs-layers/dist/initializers.js\");\nvar regularizers_1 = __webpack_require__(/*! ../regularizers */ \"./node_modules/@tensorflow/tfjs-layers/dist/regularizers.js\");\nvar conv_utils_1 = __webpack_require__(/*! ../utils/conv_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/conv_utils.js\");\nvar generic_utils = __webpack_require__(/*! ../utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar generic_utils_1 = __webpack_require__(/*! ../utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar convolutional_1 = __webpack_require__(/*! ./convolutional */ \"./node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional.js\");\nvar DepthwiseConv2D = function (_super) {\n    __extends(DepthwiseConv2D, _super);\n    function DepthwiseConv2D(config) {\n        var _this = _super.call(this, config) || this;\n        _this.depthwiseKernel = null;\n        _this.depthMultiplier = config.depthMultiplier == null ? 1 : config.depthMultiplier;\n        _this.depthwiseInitializer = initializers_1.getInitializer(config.depthwiseInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n        _this.depthwiseConstraint = constraints_1.getConstraint(config.depthwiseConstraint);\n        _this.depthwiseRegularizer = regularizers_1.getRegularizer(config.depthwiseRegularizer);\n        return _this;\n    }\n    DepthwiseConv2D.prototype.build = function (inputShape) {\n        inputShape = generic_utils_1.getExactlyOneShape(inputShape);\n        if (inputShape.length < 4) {\n            throw new errors_1.ValueError(\"Inputs to DepthwiseConv2D should have rank 4. \" + (\"Received input shape: \" + JSON.stringify(inputShape) + \".\"));\n        }\n        var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n            throw new errors_1.ValueError('The channel dimension of the inputs to DepthwiseConv2D should ' + (\"be defined, but is not (\" + inputShape[channelAxis] + \").\"));\n        }\n        var inputDim = inputShape[channelAxis];\n        var depthwiseKernelShape = [this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier];\n        this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [inputDim * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        } else {\n            this.bias = null;\n        }\n        this.built = true;\n    };\n    DepthwiseConv2D.prototype.call = function (inputs, kwargs) {\n        inputs = generic_utils_1.getExactlyOneTensor(inputs);\n        var outputs = K.depthwiseConv2d(inputs, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);\n        if (this.useBias) {\n            outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n        }\n        if (this.activation != null) {\n            outputs = this.activation(outputs);\n        }\n        return outputs;\n    };\n    DepthwiseConv2D.prototype.computeOutputShape = function (inputShape) {\n        inputShape = generic_utils_1.getExactlyOneShape(inputShape);\n        var rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        var cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        var outFilters = this.dataFormat === 'channelsFirst' ? inputShape[1] * this.depthMultiplier : inputShape[3] * this.depthMultiplier;\n        var outRows = conv_utils_1.convOutputLength(rows, this.kernelSize[0], this.padding, this.strides[0]);\n        var outCols = conv_utils_1.convOutputLength(cols, this.kernelSize[1], this.padding, this.strides[1]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], outFilters, outRows, outCols];\n        } else {\n            return [inputShape[0], outRows, outCols, outFilters];\n        }\n    };\n    return DepthwiseConv2D;\n}(convolutional_1.Conv2D);\nexports.DepthwiseConv2D = DepthwiseConv2D;\ngeneric_utils.ClassNameMap.register('DepthwiseConv2D', DepthwiseConv2D);\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/layers/convolutional_depthwise.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/layers/core.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/core.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\nvar activations_1 = __webpack_require__(/*! ../activations */ \"./node_modules/@tensorflow/tfjs-layers/dist/activations.js\");\nvar K = __webpack_require__(/*! ../backend/tfjs_backend */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\");\nvar constraints_1 = __webpack_require__(/*! ../constraints */ \"./node_modules/@tensorflow/tfjs-layers/dist/constraints.js\");\nvar topology_1 = __webpack_require__(/*! ../engine/topology */ \"./node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js\");\nvar errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nvar initializers_1 = __webpack_require__(/*! ../initializers */ \"./node_modules/@tensorflow/tfjs-layers/dist/initializers.js\");\nvar regularizers_1 = __webpack_require__(/*! ../regularizers */ \"./node_modules/@tensorflow/tfjs-layers/dist/regularizers.js\");\nvar generic_utils = __webpack_require__(/*! ../utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar generic_utils_1 = __webpack_require__(/*! ../utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar math_utils = __webpack_require__(/*! ../utils/math_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/math_utils.js\");\nvar Dropout = function (_super) {\n    __extends(Dropout, _super);\n    function Dropout(config) {\n        var _this = _super.call(this, config) || this;\n        _this.rate = Math.max(Math.min(config.rate, 1), 0);\n        _this.rateScalar = K.getScalar(_this.rate);\n        _this.noiseShape = config.noiseShape;\n        _this.seed = config.seed;\n        if (_this.seed != null) {\n            throw new errors_1.NotImplementedError('Non-default seed is not implemented in Dropout layer yet: ' + _this.seed);\n        }\n        _this.supportsMasking = true;\n        return _this;\n    }\n    Dropout.prototype.getNoiseShape = function (input) {\n        if (this.noiseShape == null) {\n            return this.noiseShape;\n        }\n        var inputShape = input.shape;\n        var noiseShape = [];\n        for (var i = 0; i < this.noiseShape.length; ++i) {\n            noiseShape.push(this.noiseShape[i] == null ? inputShape[i] : this.noiseShape[i]);\n        }\n        return noiseShape;\n    };\n    Dropout.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        this.invokeCallHook(inputs, kwargs);\n        var input = generic_utils.getExactlyOneTensor(inputs);\n        if (this.noiseShape != null && !_.isEqual(input.shape, this.noiseShape)) {\n            throw new errors_1.NotImplementedError('Non-default noise shape is not implemented in Dropout layer yet: ' + JSON.stringify(this.noiseShape));\n        }\n        if (0 < this.rate && this.rate < 1) {\n            var training = kwargs['training'] == null ? false : kwargs['training'];\n            var noiseShape_1 = this.getNoiseShape(input);\n            var output = K.inTrainPhase(function () {\n                return K.dropout(input, _this.rateScalar, noiseShape_1, _this.seed);\n            }, function () {\n                return input;\n            }, training);\n            return output;\n        }\n        return inputs;\n    };\n    Dropout.prototype.getConfig = function () {\n        var config = {\n            rate: this.rate,\n            noiseShape: this.noiseShape,\n            seed: this.seed\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return Dropout;\n}(topology_1.Layer);\nexports.Dropout = Dropout;\ngeneric_utils.ClassNameMap.register('Dropout', Dropout);\nvar Dense = function (_super) {\n    __extends(Dense, _super);\n    function Dense(config) {\n        var _this = _super.call(this, config) || this;\n        _this.activation = null;\n        _this.useBias = true;\n        _this.kernel = null;\n        _this.bias = null;\n        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        if (config.batchInputShape == null && config.inputShape == null && config.inputDim != null) {\n            var batchSize = null;\n            if (config.batchSize != null) {\n                batchSize = config.batchSize;\n            }\n            _this.batchInputShape = [batchSize, config.inputDim];\n        }\n        _this.units = config.units;\n        _this.activation = activations_1.getActivation(config.activation);\n        if (config.useBias != null) {\n            _this.useBias = config.useBias;\n        }\n        _this.kernelInitializer = initializers_1.getInitializer(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n        _this.biasInitializer = initializers_1.getInitializer(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);\n        _this.kernelConstraint = constraints_1.getConstraint(config.kernelConstraint);\n        _this.biasConstraint = constraints_1.getConstraint(config.biasConstraint);\n        _this.kernelRegularizer = regularizers_1.getRegularizer(config.kernelRegularizer);\n        _this.biasRegularizer = regularizers_1.getRegularizer(config.biasRegularizer);\n        _this.activityRegularizer = regularizers_1.getRegularizer(config.activityRegularizer);\n        _this.inputSpec = [{ minNDim: 2 }];\n        return _this;\n    }\n    Dense.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var inputLastDim = inputShape[inputShape.length - 1];\n        if (this.kernel == null) {\n            this.kernel = this.addWeight('kernel', [inputLastDim, this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n            if (this.useBias) {\n                this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n            }\n        }\n        this.inputSpec = [{ minNDim: 2, axes: (_a = {}, _a[-1] = inputLastDim, _a) }];\n        this.built = true;\n        var _a;\n    };\n    Dense.prototype.computeOutputShape = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var outputShape = inputShape.slice();\n        outputShape[outputShape.length - 1] = this.units;\n        return outputShape;\n    };\n    Dense.prototype.call = function (inputs, kwargs) {\n        this.invokeCallHook(inputs, kwargs);\n        var input = generic_utils.getExactlyOneTensor(inputs);\n        var output = K.dot(input, this.kernel.read());\n        if (this.bias != null) {\n            output = K.biasAdd(output, this.bias.read());\n        }\n        if (this.activation != null) {\n            output = this.activation(output);\n        }\n        return output;\n    };\n    Dense.prototype.getConfig = function () {\n        var config = {\n            units: this.units,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint)\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return Dense;\n}(topology_1.Layer);\nexports.Dense = Dense;\ngeneric_utils.ClassNameMap.register('Dense', Dense);\nvar Flatten = function (_super) {\n    __extends(Flatten, _super);\n    function Flatten(config) {\n        var _this = _super.call(this, config || {}) || this;\n        _this.inputSpec = [{ minNDim: 3 }];\n        return _this;\n    }\n    Flatten.prototype.computeOutputShape = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        for (var _i = 0, _a = inputShape.slice(1); _i < _a.length; _i++) {\n            var dim = _a[_i];\n            if (dim == null) {\n                throw new errors_1.ValueError(\"The shape of the input to \\\"Flatten\\\" is not fully defined \" + (\"(got \" + inputShape.slice(1) + \"). Make sure to pass a complete \") + \"\\\"input_shape\\\" or \\\"batch_input_shape\\\" argument to the first \" + \"layer in your model.\");\n            }\n        }\n        return [inputShape[0], math_utils.arrayProd(inputShape, 1)];\n    };\n    Flatten.prototype.call = function (inputs, kwargs) {\n        this.invokeCallHook(inputs, kwargs);\n        return K.batchFlatten(generic_utils.getExactlyOneTensor(inputs));\n    };\n    return Flatten;\n}(topology_1.Layer);\nexports.Flatten = Flatten;\ngeneric_utils.ClassNameMap.register('Flatten', Flatten);\nvar Activation = function (_super) {\n    __extends(Activation, _super);\n    function Activation(config) {\n        var _this = _super.call(this, config) || this;\n        _this.supportsMasking = true;\n        _this.activation = activations_1.getActivation(config.activation);\n        return _this;\n    }\n    Activation.prototype.call = function (inputs, kwargs) {\n        this.invokeCallHook(inputs, kwargs);\n        var input = generic_utils.getExactlyOneTensor(inputs);\n        return this.activation(input);\n    };\n    return Activation;\n}(topology_1.Layer);\nexports.Activation = Activation;\ngeneric_utils.ClassNameMap.register('Activation', Activation);\nvar RepeatVector = function (_super) {\n    __extends(RepeatVector, _super);\n    function RepeatVector(config) {\n        var _this = _super.call(this, config) || this;\n        _this.n = config.n;\n        _this.inputSpec = [{ ndim: 2 }];\n        return _this;\n    }\n    RepeatVector.prototype.computeOutputShape = function (inputShape) {\n        return [inputShape[0], this.n, inputShape[1]];\n    };\n    RepeatVector.prototype.call = function (inputs, kwargs) {\n        inputs = generic_utils_1.getExactlyOneTensor(inputs);\n        return K.repeat(inputs, this.n);\n    };\n    RepeatVector.prototype.getConfig = function () {\n        var config = {\n            n: this.n\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return RepeatVector;\n}(topology_1.Layer);\nexports.RepeatVector = RepeatVector;\ngeneric_utils.ClassNameMap.register('RepeatVector', RepeatVector);\nvar Reshape = function (_super) {\n    __extends(Reshape, _super);\n    function Reshape(config) {\n        var _this = _super.call(this, config) || this;\n        _this.targetShape = config.targetShape;\n        for (var i = 0; i < _this.targetShape.length; ++i) {\n            if (_this.isUnknown(_this.targetShape[i])) {\n                _this.targetShape[i] = null;\n            }\n        }\n        return _this;\n    }\n    Reshape.prototype.isUnknown = function (dim) {\n        return dim < 0 || dim == null;\n    };\n    Reshape.prototype.fixUnknownDimension = function (inputShape, outputShape) {\n        var errorMsg = 'Total size of new array must be unchanged.';\n        var finalShape = outputShape.slice();\n        var known = 1;\n        var unknown = null;\n        for (var i = 0; i < finalShape.length; ++i) {\n            var dim = finalShape[i];\n            if (this.isUnknown(dim)) {\n                if (unknown === null) {\n                    unknown = i;\n                } else {\n                    throw new errors_1.ValueError('Can only specifiy one unknown dimension.');\n                }\n            } else {\n                known *= dim;\n            }\n        }\n        var originalSize = math_utils.arrayProd(inputShape);\n        if (unknown !== null) {\n            if (known === 0 || originalSize % known !== 0) {\n                throw new errors_1.ValueError(errorMsg);\n            }\n            finalShape[unknown] = originalSize / known;\n        } else if (originalSize !== known) {\n            throw new errors_1.ValueError(errorMsg);\n        }\n        return finalShape;\n    };\n    Reshape.prototype.computeOutputShape = function (inputShape) {\n        var anyUnknownDims = false;\n        for (var i = 0; i < inputShape.length; ++i) {\n            if (this.isUnknown(inputShape[i])) {\n                anyUnknownDims = true;\n                break;\n            }\n        }\n        if (anyUnknownDims) {\n            return inputShape.slice(0, 1).concat(this.targetShape);\n        } else {\n            return inputShape.slice(0, 1).concat(this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n        }\n    };\n    Reshape.prototype.call = function (inputs, kwargs) {\n        this.invokeCallHook(inputs, kwargs);\n        var input = generic_utils.getExactlyOneTensor(inputs);\n        var inputShape = K.shape(input);\n        var outputShape = inputShape.slice(0, 1).concat(this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n        return K.reshape(input, outputShape);\n    };\n    return Reshape;\n}(topology_1.Layer);\nexports.Reshape = Reshape;\ngeneric_utils.ClassNameMap.register('Reshape', Reshape);\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/layers/core.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/layers/embeddings.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/embeddings.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\nvar K = __webpack_require__(/*! ../backend/tfjs_backend */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\");\nvar constraints_1 = __webpack_require__(/*! ../constraints */ \"./node_modules/@tensorflow/tfjs-layers/dist/constraints.js\");\nvar topology_1 = __webpack_require__(/*! ../engine/topology */ \"./node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js\");\nvar errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nvar initializers_1 = __webpack_require__(/*! ../initializers */ \"./node_modules/@tensorflow/tfjs-layers/dist/initializers.js\");\nvar regularizers_1 = __webpack_require__(/*! ../regularizers */ \"./node_modules/@tensorflow/tfjs-layers/dist/regularizers.js\");\nvar generic_utils = __webpack_require__(/*! ../utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar generic_utils_1 = __webpack_require__(/*! ../utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar Embedding = function (_super) {\n    __extends(Embedding, _super);\n    function Embedding(config) {\n        var _this = _super.call(this, config) || this;\n        _this.embeddings = null;\n        _this.DEFAULT_EMBEDDINGS_INITIALIZER = 'randomUniform';\n        if (config.batchInputShape == null && config.inputShape == null) {\n            var batchSize = null;\n            if (config.batchSize != null) {\n                batchSize = config.batchSize;\n            }\n            if (config.inputLength == null) {\n                _this.batchInputShape = [batchSize, null];\n            } else {\n                _this.batchInputShape = [batchSize].concat(generic_utils.toList(config.inputLength));\n            }\n        }\n        _this.inputDim = config.inputDim;\n        _this.outputDim = config.outputDim;\n        _this.embeddingsInitializer = initializers_1.getInitializer(config.embeddingsInitializer || _this.DEFAULT_EMBEDDINGS_INITIALIZER);\n        _this.embeddingsRegularizer = regularizers_1.getRegularizer(config.embeddingsRegularizer);\n        _this.activityRegularizer = regularizers_1.getRegularizer(config.activityRegularizer);\n        _this.embeddingsConstraint = constraints_1.getConstraint(config.embeddingsConstraint);\n        _this.maskZero = config.maskZero;\n        _this.inputLength = config.inputLength;\n        return _this;\n    }\n    Embedding.prototype.build = function (inputShape) {\n        this.embeddings = this.addWeight('embeddings', [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint);\n        this.built = true;\n    };\n    Embedding.prototype.computeMask = function (inputs, mask) {\n        throw new errors_1.NotImplementedError('computeMask has not been implemented for Embedding yet');\n    };\n    Embedding.prototype.computeOutputShape = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        if (this.inputLength == null) {\n            return inputShape.concat([this.outputDim]);\n        }\n        var inLens = generic_utils.toList(this.inputLength);\n        if (inLens.length !== inputShape.length - 1) {\n            throw new errors_1.ValueError(\"\\\"inputLength\\\" is \" + this.inputLength + \", but received \" + (\"input shape has shape \" + inputShape));\n        } else {\n            var i = 0;\n            for (var _i = 0, _a = _.zip(inLens, inputShape.slice(1)); _i < _a.length; _i++) {\n                var _b = _a[_i],\n                    s1 = _b[0],\n                    s2 = _b[1];\n                if (s1 != null && s2 != null && s1 !== s2) {\n                    throw new errors_1.ValueError(\"\\\"inputLength\\\" is \" + this.inputLength + \", but received \" + (\"input shape has shape \" + inputShape));\n                } else if (s1 == null) {\n                    inLens[i] = s2;\n                }\n                i++;\n            }\n        }\n        return [inputShape[0]].concat(inLens, [this.outputDim]);\n    };\n    Embedding.prototype.call = function (inputs, kwargs) {\n        this.invokeCallHook(inputs, kwargs);\n        var input = generic_utils.getExactlyOneTensor(inputs);\n        if (K.dtype(input) !== 'int32') {\n            input = K.cast(input, 'int32');\n        }\n        var output = K.gather(this.embeddings.read(), input.as1D());\n        return K.reshape(output, generic_utils_1.getExactlyOneShape(this.computeOutputShape(input.shape)));\n    };\n    Embedding.prototype.getConfig = function () {\n        var config = {\n            inputDim: this.inputDim,\n            outputDim: this.outputDim,\n            embeddingsInitializer: initializers_1.serializeInitializer(this.embeddingsInitializer),\n            embeddingsRegularizer: regularizers_1.serializeRegularizer(this.embeddingsRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            embeddingsConstraint: constraints_1.serializeConstraint(this.embeddingsConstraint),\n            maskZero: this.maskZero,\n            inputLength: this.inputLength\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return Embedding;\n}(topology_1.Layer);\nexports.Embedding = Embedding;\ngeneric_utils.ClassNameMap.register('Embedding', Embedding);\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/layers/embeddings.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/layers/merge.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/merge.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\nvar K = __webpack_require__(/*! ../backend/tfjs_backend */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\");\nvar topology_1 = __webpack_require__(/*! ../engine/topology */ \"./node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js\");\nvar errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nvar generic_utils = __webpack_require__(/*! ../utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar mathUtils = __webpack_require__(/*! ../utils/math_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/math_utils.js\");\nvar Merge = function (_super) {\n    __extends(Merge, _super);\n    function Merge(config) {\n        var _this = _super.call(this, config || {}) || this;\n        _this.supportsMasking = true;\n        return _this;\n    }\n    Merge.prototype.mergeFunction = function (inputs) {\n        throw new errors_1.NotImplementedError();\n    };\n    Merge.prototype.computeElementwiseOpOutputShape = function (shape1, shape2) {\n        if (shape1 == null || shape2 == null) {\n            return null;\n        } else if (shape1.length < shape2.length) {\n            return this.computeElementwiseOpOutputShape(shape2, shape1);\n        } else if (shape2.length === 0) {\n            return shape1;\n        }\n        var outputShape = shape1.slice(0, shape1.length - shape2.length);\n        for (var k = 0; k < shape2.length; ++k) {\n            var i = shape1[shape1.length - shape2.length + k];\n            var j = shape2[k];\n            if (i == null || j == null || i < 0 || j < 0) {\n                outputShape.push(null);\n            } else if (i === 1) {\n                outputShape.push(j);\n            } else if (j === 1) {\n                outputShape.push(i);\n            } else {\n                if (i !== j) {\n                    throw new errors_1.ValueError('Operands could not be broadcast together with shapes ' + JSON.stringify(shape1) + ' ' + JSON.stringify(shape2));\n                }\n                outputShape.push(i);\n            }\n        }\n        return outputShape;\n    };\n    Merge.prototype.build = function (inputShape) {\n        if (Array.isArray(inputShape) && !Array.isArray(inputShape[0])) {\n            inputShape = [generic_utils.getExactlyOneShape(inputShape)];\n        }\n        inputShape = inputShape;\n        if (inputShape.length < 2) {\n            throw new errors_1.ValueError('A merge layer should be called on an Array of at least 2 inputs.' + (\" Got \" + inputShape.length + \" input(s).\"));\n        }\n        var batchSizes = [];\n        for (var _i = 0, inputShape_1 = inputShape; _i < inputShape_1.length; _i++) {\n            var shape = inputShape_1[_i];\n            if (shape != null && shape[0] !== null) {\n                batchSizes.push(shape[0]);\n            }\n        }\n        batchSizes = _.uniq(batchSizes);\n        if (batchSizes.length > 1) {\n            throw new errors_1.ValueError(\"Can not merge tensors with different batch sizes. \" + (\"Got tensors with shapes: \" + JSON.stringify(inputShape) + \".\"));\n        }\n        var outputShape = inputShape[0] == null ? null : inputShape[0].slice(1);\n        for (var i = 1; i < inputShape.length; ++i) {\n            var shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n            outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n        }\n        var allRanks = inputShape.map(function (shape) {\n            return shape.length;\n        });\n        if (!_.contains(inputShape, null) && _.uniq(allRanks).length === 1) {\n            this.reshapeRequired = false;\n        } else {\n            this.reshapeRequired = true;\n        }\n    };\n    Merge.prototype.call = function (inputs, kwargs) {\n        inputs = inputs;\n        if (this.reshapeRequired) {\n            var reshapedInputs = [];\n            var inputDims = inputs.map(function (input) {\n                return K.ndim(input);\n            });\n            if (!_.contains(inputDims, null)) {\n                var maxNDim = _.max(inputDims);\n                for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {\n                    var x = inputs_1[_i];\n                    var xNDim = K.ndim(x);\n                    for (var k = 0; k < maxNDim - xNDim; ++k) {\n                        x = K.expandDims(x, 1);\n                    }\n                    reshapedInputs.push(x);\n                }\n                return this.mergeFunction(reshapedInputs);\n            } else {\n                var transposed = false;\n                for (var _a = 0, inputs_2 = inputs; _a < inputs_2.length; _a++) {\n                    var x = inputs_2[_a];\n                    var xNDim = K.ndim(x);\n                    if (xNDim == null) {\n                        var xShape = K.shape(x);\n                        var batchSize = xShape[0];\n                        var newShape = xShape.slice(1).concat([batchSize]);\n                        var xTransposed = K.reshape(x, [batchSize].concat(mathUtils.arrayProd(xShape.slice(1))));\n                        xTransposed = K.permuteDimensions(xTransposed, [1, 0]);\n                        xTransposed = K.reshape(xTransposed, newShape);\n                        reshapedInputs.push(xTransposed);\n                        transposed = true;\n                    } else if (xNDim > 1) {\n                        var dims = _.range(1, xNDim).concat([0]);\n                        reshapedInputs.push(K.permuteDimensions(x, dims));\n                        transposed = true;\n                    } else {\n                        reshapedInputs.push(x);\n                    }\n                }\n                var y = this.mergeFunction(reshapedInputs);\n                var yNDim = K.ndim(y);\n                if (transposed) {\n                    if (yNDim == null) {\n                        var yShape = K.shape(y);\n                        var yNDim_1 = yShape.length;\n                        var batchSize = yShape[yNDim_1 - 1];\n                        var newShape = [batchSize].concat(yShape.slice(0, yShape.length - 1));\n                        y = K.reshape(K.permuteDimensions(K.reshape(y, [-1, batchSize]), [1, 0]), newShape);\n                    } else if (yNDim > 1) {\n                        var dims = [yNDim - 1].concat(_.range(0, yNDim - 1));\n                        y = K.permuteDimensions(y, dims);\n                    }\n                }\n                return y;\n            }\n        } else {\n            return this.mergeFunction(inputs);\n        }\n    };\n    Merge.prototype.computeOutputShape = function (inputShape) {\n        inputShape = inputShape;\n        var outputShape;\n        if (inputShape[0] == null) {\n            outputShape = null;\n        } else {\n            outputShape = inputShape[0].slice(1);\n        }\n        for (var i = 1; i < inputShape.length; ++i) {\n            var shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n            outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n        }\n        var batchSizes = [];\n        for (var _i = 0, inputShape_2 = inputShape; _i < inputShape_2.length; _i++) {\n            var shape = inputShape_2[_i];\n            if (shape != null && shape[0] !== null) {\n                batchSizes.push(shape[0]);\n            }\n        }\n        batchSizes = _.uniq(batchSizes);\n        if (batchSizes.length === 1) {\n            outputShape = batchSizes.concat(outputShape);\n        } else {\n            outputShape = [null].concat(outputShape);\n        }\n        return outputShape;\n    };\n    return Merge;\n}(topology_1.Layer);\nexports.Merge = Merge;\nvar Add = function (_super) {\n    __extends(Add, _super);\n    function Add(config) {\n        return _super.call(this, config) || this;\n    }\n    Add.prototype.mergeFunction = function (inputs) {\n        var output = K.zeros(inputs[0].shape);\n        for (var _i = 0, inputs_3 = inputs; _i < inputs_3.length; _i++) {\n            var input = inputs_3[_i];\n            output = K.add(output, input);\n        }\n        return output;\n    };\n    return Add;\n}(Merge);\nexports.Add = Add;\ngeneric_utils.ClassNameMap.register('Add', Add);\nfunction add(config) {\n    if (Array.isArray(config)) {\n        var layer = new Add({});\n        return layer.apply(config);\n    } else {\n        return new Add(config);\n    }\n}\nexports.add = add;\nvar Multiply = function (_super) {\n    __extends(Multiply, _super);\n    function Multiply(config) {\n        return _super.call(this, config) || this;\n    }\n    Multiply.prototype.mergeFunction = function (inputs) {\n        var output = K.ones(inputs[0].shape);\n        for (var _i = 0, inputs_4 = inputs; _i < inputs_4.length; _i++) {\n            var input = inputs_4[_i];\n            output = K.multiply(output, input);\n        }\n        return output;\n    };\n    return Multiply;\n}(Merge);\nexports.Multiply = Multiply;\ngeneric_utils.ClassNameMap.register('Multiply', Multiply);\nfunction multiply(config) {\n    if (Array.isArray(config)) {\n        var layer = new Multiply({});\n        return layer.apply(config);\n    } else {\n        return new Multiply(config);\n    }\n}\nexports.multiply = multiply;\nvar Average = function (_super) {\n    __extends(Average, _super);\n    function Average(config) {\n        return _super.call(this, config) || this;\n    }\n    Average.prototype.mergeFunction = function (inputs) {\n        var output = K.zeros(inputs[0].shape);\n        for (var _i = 0, inputs_5 = inputs; _i < inputs_5.length; _i++) {\n            var input = inputs_5[_i];\n            output = K.add(output, input);\n        }\n        return K.scalarTimesArray(K.getScalar(1 / inputs.length), output);\n    };\n    return Average;\n}(Merge);\nexports.Average = Average;\ngeneric_utils.ClassNameMap.register('Average', Average);\nfunction average(config) {\n    if (Array.isArray(config)) {\n        var layer = new Average({});\n        return layer.apply(config);\n    } else {\n        return new Average(config);\n    }\n}\nexports.average = average;\nvar Maximum = function (_super) {\n    __extends(Maximum, _super);\n    function Maximum(config) {\n        return _super.call(this, config) || this;\n    }\n    Maximum.prototype.mergeFunction = function (inputs) {\n        var output = inputs[0];\n        for (var i = 1; i < inputs.length; ++i) {\n            output = K.maximum(output, inputs[i]);\n        }\n        return output;\n    };\n    return Maximum;\n}(Merge);\nexports.Maximum = Maximum;\ngeneric_utils.ClassNameMap.register('Maximum', Maximum);\nfunction maximum(config) {\n    if (Array.isArray(config)) {\n        var layer = new Maximum({});\n        return layer.apply(config);\n    } else {\n        return new Maximum(config);\n    }\n}\nexports.maximum = maximum;\nvar Minimum = function (_super) {\n    __extends(Minimum, _super);\n    function Minimum(config) {\n        return _super.call(this, config) || this;\n    }\n    Minimum.prototype.mergeFunction = function (inputs) {\n        var output = inputs[0];\n        for (var i = 1; i < inputs.length; ++i) {\n            output = K.minimum(output, inputs[i]);\n        }\n        return output;\n    };\n    return Minimum;\n}(Merge);\nexports.Minimum = Minimum;\ngeneric_utils.ClassNameMap.register('Minimum', Minimum);\nfunction minimum(config) {\n    if (Array.isArray(config)) {\n        var layer = new Minimum({});\n        return layer.apply(config);\n    } else {\n        return new Minimum(config);\n    }\n}\nexports.minimum = minimum;\nvar Concatenate = function (_super) {\n    __extends(Concatenate, _super);\n    function Concatenate(config) {\n        var _this = _super.call(this, config) || this;\n        _this.DEFAULT_AXIS = -1;\n        if (config == null) {\n            config = {};\n        }\n        _this.axis = config.axis == null ? _this.DEFAULT_AXIS : config.axis;\n        _this.supportsMasking = true;\n        _this.reshapeRequired = false;\n        return _this;\n    }\n    Concatenate.prototype.build = function (inputShape) {\n        if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0])) || inputShape.length === 1) {\n            throw new errors_1.ValueError('A `Concatenate` layer should be called on a list of at least 2 ' + 'inputs');\n        }\n        inputShape = inputShape;\n        var allNoneShape = true;\n        for (var _i = 0, inputShape_3 = inputShape; _i < inputShape_3.length; _i++) {\n            var shape = inputShape_3[_i];\n            if (shape != null) {\n                allNoneShape = false;\n                break;\n            }\n        }\n        if (allNoneShape) {\n            return;\n        }\n        var shapeSet = [];\n        for (var i = 0; i < inputShape.length; ++i) {\n            var shapeWithoutConcatAxis = inputShape[i].slice();\n            shapeWithoutConcatAxis.splice(this.axis, 1);\n            var exists = false;\n            for (var _a = 0, shapeSet_1 = shapeSet; _a < shapeSet_1.length; _a++) {\n                var shape = shapeSet_1[_a];\n                if (_.isEqual(shape, shapeWithoutConcatAxis)) {\n                    exists = true;\n                    break;\n                }\n            }\n            if (!exists) {\n                shapeSet.push(shapeWithoutConcatAxis);\n            }\n        }\n        if (shapeSet.length > 1) {\n            throw new errors_1.ValueError('A `Concatenate` layer requires inputs with matching shapes ' + 'except for the concat axis. Got input shapes: ' + JSON.stringify(inputShape));\n        }\n    };\n    Concatenate.prototype.mergeFunction = function (inputs) {\n        return K.concatenate(inputs, this.axis);\n    };\n    Concatenate.prototype.computeOutputShape = function (inputShape) {\n        if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0]))) {\n            throw new errors_1.ValueError('A `Concatenate` layer should be called on a list of inputs.');\n        }\n        var inputShapes = inputShape;\n        var outputShape = inputShapes[0].slice();\n        var axis = this.axis < 0 ? outputShape.length + this.axis : this.axis;\n        for (var _i = 0, _a = inputShapes.slice(1); _i < _a.length; _i++) {\n            var shape = _a[_i];\n            if (outputShape[axis] == null || shape[axis] == null) {\n                outputShape[axis] = null;\n                break;\n            }\n            outputShape[axis] += shape[axis];\n        }\n        return outputShape;\n    };\n    return Concatenate;\n}(Merge);\nexports.Concatenate = Concatenate;\ngeneric_utils.ClassNameMap.register('Concatenate', Concatenate);\nfunction concatenate(config) {\n    if (Array.isArray(config)) {\n        var layer = new Concatenate({});\n        return layer.apply(config);\n    } else {\n        return new Concatenate(config);\n    }\n}\nexports.concatenate = concatenate;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/layers/merge.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\nvar K = __webpack_require__(/*! ../backend/tfjs_backend */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\");\nvar constraints_1 = __webpack_require__(/*! ../constraints */ \"./node_modules/@tensorflow/tfjs-layers/dist/constraints.js\");\nvar topology_1 = __webpack_require__(/*! ../engine/topology */ \"./node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js\");\nvar errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nvar initializers_1 = __webpack_require__(/*! ../initializers */ \"./node_modules/@tensorflow/tfjs-layers/dist/initializers.js\");\nvar regularizers_1 = __webpack_require__(/*! ../regularizers */ \"./node_modules/@tensorflow/tfjs-layers/dist/regularizers.js\");\nvar generic_utils = __webpack_require__(/*! ../utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar BatchNormalization = function (_super) {\n    __extends(BatchNormalization, _super);\n    function BatchNormalization(config) {\n        var _this = _super.call(this, config) || this;\n        _this.supportsMasking = true;\n        _this.axis = config.axis == null ? -1 : config.axis;\n        _this.momentum = config.momentum == null ? 0.99 : config.momentum;\n        _this.epsilon = config.epsilon == null ? 1e-3 : config.epsilon;\n        _this.center = config.center == null ? true : config.center;\n        _this.scale = config.scale == null ? true : config.scale;\n        _this.betaInitializer = initializers_1.getInitializer(config.betaInitializer || 'zeros');\n        _this.gammaInitializer = initializers_1.getInitializer(config.gammaInitializer || 'ones');\n        _this.movingMeanInitializer = initializers_1.getInitializer(config.movingMeanInitializer || 'zeros');\n        _this.movingVarianceInitializer = initializers_1.getInitializer(config.movingVarianceInitializer || 'ones');\n        _this.betaConstraint = constraints_1.getConstraint(config.betaConstraint);\n        _this.gammaConstraint = constraints_1.getConstraint(config.gammaConstraint);\n        _this.betaRegularizer = regularizers_1.getRegularizer(config.betaRegularizer);\n        _this.gammaRegularizer = regularizers_1.getRegularizer(config.gammaRegularizer);\n        return _this;\n    }\n    BatchNormalization.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var axis = this.axis >= 0 ? this.axis : this.axis + inputShape.length;\n        var dim = inputShape[axis];\n        if (dim == null) {\n            throw new errors_1.ValueError(\"Axis \" + axis + \" of input tensor should have a defined dimension but \" + \"the layer received an input with shape \" + (JSON.stringify(inputShape) + \".\"));\n        }\n        this.inputSpec = [new topology_1.InputSpec({ ndim: inputShape.length, axes: (_a = {}, _a[axis] = dim, _a) })];\n        var shape = [dim];\n        if (this.scale) {\n            this.gamma = this.addWeight('gamma', shape, null, this.gammaInitializer, this.gammaRegularizer, true, this.gammaConstraint);\n        }\n        if (this.center) {\n            this.beta = this.addWeight('beta', shape, null, this.betaInitializer, this.betaRegularizer, true, this.betaConstraint);\n        }\n        this.movingMean = this.addWeight('moving_mean', shape, null, this.movingMeanInitializer, null, false);\n        this.movingVariance = this.addWeight('moving_variance', shape, null, this.movingVarianceInitializer, null, false);\n        this.built = true;\n        var _a;\n    };\n    BatchNormalization.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        var training = kwargs['training'] == null ? false : kwargs['training'];\n        var input = generic_utils.getExactlyOneTensor(inputs);\n        var inputShape = K.shape(input);\n        var ndim = inputShape.length;\n        var reductionAxes = _.range(ndim);\n        var axis = this.axis >= 0 ? this.axis : this.axis + ndim;\n        reductionAxes.splice(axis, 1);\n        var broadcastShape = generic_utils.pyListRepeat(1, ndim);\n        broadcastShape[axis] = inputShape[axis];\n        var sortedReductionAxes = reductionAxes.slice();\n        sortedReductionAxes.sort();\n        var needsBroadcasting = !_.isEqual(sortedReductionAxes, _.range(ndim).slice(0, ndim - 1));\n        var normalizeInference = function () {\n            if (needsBroadcasting) {\n                var broadcastMovingMean = K.reshape(_this.movingMean.read(), broadcastShape);\n                var broadcastMovingVariance = K.reshape(_this.movingVariance.read(), broadcastShape);\n                var broadcastBeta = _this.center ? K.reshape(_this.beta.read(), broadcastShape) : null;\n                var broadcastGamma = _this.center ? K.reshape(_this.gamma.read(), broadcastShape) : null;\n                return K.batchNormalization(input, broadcastMovingMean, broadcastMovingVariance, broadcastBeta, broadcastGamma, _this.epsilon);\n            } else {\n                return K.batchNormalization(input, _this.movingMean.read(), _this.movingVariance.read(), _this.beta.read(), _this.gamma.read(), _this.epsilon);\n            }\n        };\n        if (!training) {\n            return normalizeInference();\n        }\n        throw new errors_1.NotImplementedError('BatchNormalization.call() has not been implemented for training ' + 'mode yet.');\n    };\n    BatchNormalization.prototype.getConfig = function () {\n        var config = {\n            axis: this.axis,\n            momentum: this.momentum,\n            epsilon: this.epsilon,\n            center: this.center,\n            scale: this.scale,\n            betaInitializer: initializers_1.serializeInitializer(this.betaInitializer),\n            gammaInitializer: initializers_1.serializeInitializer(this.gammaInitializer),\n            movingMeanInitializer: initializers_1.serializeInitializer(this.movingMeanInitializer),\n            movingVarianceInitializer: initializers_1.serializeInitializer(this.movingVarianceInitializer),\n            betaRegularizer: regularizers_1.serializeRegularizer(this.betaRegularizer),\n            gammaRegularizer: regularizers_1.serializeRegularizer(this.gammaRegularizer),\n            betaConstraint: constraints_1.serializeConstraint(this.betaConstraint),\n            gammaConstraint: constraints_1.serializeConstraint(this.gammaConstraint)\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return BatchNormalization;\n}(topology_1.Layer);\nexports.BatchNormalization = BatchNormalization;\ngeneric_utils.ClassNameMap.register('BatchNormalization', BatchNormalization);\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/layers/normalization.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/layers/pooling.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/pooling.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar K = __webpack_require__(/*! ../backend/tfjs_backend */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\");\nvar common_1 = __webpack_require__(/*! ../common */ \"./node_modules/@tensorflow/tfjs-layers/dist/common.js\");\nvar topology_1 = __webpack_require__(/*! ../engine/topology */ \"./node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js\");\nvar topology_2 = __webpack_require__(/*! ../engine/topology */ \"./node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js\");\nvar errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nvar conv_utils_1 = __webpack_require__(/*! ../utils/conv_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/conv_utils.js\");\nvar generic_utils = __webpack_require__(/*! ../utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar Pooling1D = function (_super) {\n    __extends(Pooling1D, _super);\n    function Pooling1D(config) {\n        var _this = this;\n        if (config.poolSize == null) {\n            config.poolSize = 2;\n        }\n        _this = _super.call(this, config) || this;\n        _this.poolSize = [config.poolSize];\n        _this.strides = config.strides == null ? _this.poolSize : [config.strides];\n        _this.padding = config.padding == null ? 'valid' : config.padding;\n        common_1.checkPaddingMode(_this.padding);\n        _this.inputSpec = [new topology_1.InputSpec({ ndim: 3 })];\n        return _this;\n    }\n    Pooling1D.prototype.computeOutputShape = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        length = conv_utils_1.convOutputLength(inputShape[1], this.poolSize[0], this.padding, this.strides[0]);\n        return [inputShape[0], length, inputShape[2]];\n    };\n    Pooling1D.prototype.call = function (inputs, kwargs) {\n        this.invokeCallHook(inputs, kwargs);\n        inputs = K.expandDims(generic_utils.getExactlyOneTensor(inputs), 2);\n        var output = this.poolingFunction(generic_utils.getExactlyOneTensor(inputs), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, 'channelsLast');\n        return K.squeeze(output, 2);\n    };\n    Pooling1D.prototype.getConfig = function () {\n        var config = {\n            poolSize: this.poolSize,\n            padding: this.padding,\n            strides: this.strides\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return Pooling1D;\n}(topology_2.Layer);\nexports.Pooling1D = Pooling1D;\nvar MaxPooling1D = function (_super) {\n    __extends(MaxPooling1D, _super);\n    function MaxPooling1D(config) {\n        return _super.call(this, config) || this;\n    }\n    MaxPooling1D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {\n        common_1.checkDataFormat(dataFormat);\n        common_1.checkPaddingMode(padding);\n        return K.pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    };\n    return MaxPooling1D;\n}(Pooling1D);\nexports.MaxPooling1D = MaxPooling1D;\ngeneric_utils.ClassNameMap.register('MaxPooling1D', MaxPooling1D);\nvar AvgPooling1D = function (_super) {\n    __extends(AvgPooling1D, _super);\n    function AvgPooling1D(config) {\n        return _super.call(this, config) || this;\n    }\n    AvgPooling1D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {\n        common_1.checkDataFormat(dataFormat);\n        common_1.checkPaddingMode(padding);\n        return K.pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    };\n    return AvgPooling1D;\n}(Pooling1D);\nexports.AvgPooling1D = AvgPooling1D;\ngeneric_utils.ClassNameMap.register('AvgPooling1D', AvgPooling1D);\nvar Pooling2D = function (_super) {\n    __extends(Pooling2D, _super);\n    function Pooling2D(config) {\n        var _this = this;\n        if (config.poolSize == null) {\n            config.poolSize = [2, 2];\n        }\n        _this = _super.call(this, config) || this;\n        _this.poolSize = Array.isArray(config.poolSize) ? config.poolSize : [config.poolSize, config.poolSize];\n        _this.strides = config.strides == null ? _this.poolSize : config.strides;\n        _this.padding = config.padding == null ? 'valid' : config.padding;\n        _this.dataFormat = config.dataFormat == null ? 'channelsLast' : config.dataFormat;\n        common_1.checkDataFormat(_this.dataFormat);\n        common_1.checkPaddingMode(_this.padding);\n        _this.inputSpec = [new topology_1.InputSpec({ ndim: 4 })];\n        return _this;\n    }\n    Pooling2D.prototype.computeOutputShape = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        var cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        rows = conv_utils_1.convOutputLength(rows, this.poolSize[0], this.padding, this.strides[0]);\n        cols = conv_utils_1.convOutputLength(cols, this.poolSize[1], this.padding, this.strides[1]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], inputShape[1], rows, cols];\n        } else {\n            return [inputShape[0], rows, cols, inputShape[3]];\n        }\n    };\n    Pooling2D.prototype.call = function (inputs, kwargs) {\n        this.invokeCallHook(inputs, kwargs);\n        return this.poolingFunction(generic_utils.getExactlyOneTensor(inputs), this.poolSize, this.strides, this.padding, this.dataFormat);\n    };\n    Pooling2D.prototype.getConfig = function () {\n        var config = {\n            poolSize: this.poolSize,\n            padding: this.padding,\n            strides: this.strides,\n            dataFormat: this.dataFormat\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return Pooling2D;\n}(topology_2.Layer);\nexports.Pooling2D = Pooling2D;\nvar MaxPooling2D = function (_super) {\n    __extends(MaxPooling2D, _super);\n    function MaxPooling2D(config) {\n        return _super.call(this, config) || this;\n    }\n    MaxPooling2D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {\n        common_1.checkDataFormat(dataFormat);\n        common_1.checkPaddingMode(padding);\n        return K.pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    };\n    return MaxPooling2D;\n}(Pooling2D);\nexports.MaxPooling2D = MaxPooling2D;\ngeneric_utils.ClassNameMap.register('MaxPooling2D', MaxPooling2D);\nvar AvgPooling2D = function (_super) {\n    __extends(AvgPooling2D, _super);\n    function AvgPooling2D(config) {\n        return _super.call(this, config) || this;\n    }\n    AvgPooling2D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {\n        common_1.checkDataFormat(dataFormat);\n        common_1.checkPaddingMode(padding);\n        return K.pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    };\n    return AvgPooling2D;\n}(Pooling2D);\nexports.AvgPooling2D = AvgPooling2D;\ngeneric_utils.ClassNameMap.register('AvgPooling2D', AvgPooling2D);\nvar GlobalPooling1D = function (_super) {\n    __extends(GlobalPooling1D, _super);\n    function GlobalPooling1D(config) {\n        var _this = _super.call(this, config) || this;\n        _this.inputSpec = [new topology_1.InputSpec({ ndim: 3 })];\n        return _this;\n    }\n    GlobalPooling1D.prototype.computeOutputShape = function (inputShape) {\n        return [inputShape[0], inputShape[2]];\n    };\n    GlobalPooling1D.prototype.call = function (inputs, kwargs) {\n        throw new errors_1.NotImplementedError();\n    };\n    return GlobalPooling1D;\n}(topology_2.Layer);\nexports.GlobalPooling1D = GlobalPooling1D;\nvar GlobalAveragePooling1D = function (_super) {\n    __extends(GlobalAveragePooling1D, _super);\n    function GlobalAveragePooling1D(config) {\n        return _super.call(this, config) || this;\n    }\n    GlobalAveragePooling1D.prototype.call = function (inputs, kwargs) {\n        var input = generic_utils.getExactlyOneTensor(inputs);\n        return K.mean(input, 1);\n    };\n    return GlobalAveragePooling1D;\n}(GlobalPooling1D);\nexports.GlobalAveragePooling1D = GlobalAveragePooling1D;\ngeneric_utils.ClassNameMap.register('GlobalAveragePooling1D', GlobalAveragePooling1D);\nvar GlobalMaxPooling1D = function (_super) {\n    __extends(GlobalMaxPooling1D, _super);\n    function GlobalMaxPooling1D(config) {\n        return _super.call(this, config) || this;\n    }\n    GlobalMaxPooling1D.prototype.call = function (inputs, kwargs) {\n        var input = generic_utils.getExactlyOneTensor(inputs);\n        return K.max(input, 1);\n    };\n    return GlobalMaxPooling1D;\n}(GlobalPooling1D);\nexports.GlobalMaxPooling1D = GlobalMaxPooling1D;\ngeneric_utils.ClassNameMap.register('GlobalMaxPooling1D', GlobalMaxPooling1D);\nvar GlobalPooling2D = function (_super) {\n    __extends(GlobalPooling2D, _super);\n    function GlobalPooling2D(config) {\n        var _this = _super.call(this, config) || this;\n        _this.dataFormat = config.dataFormat == null ? 'channelsLast' : config.dataFormat;\n        common_1.checkDataFormat(_this.dataFormat);\n        _this.inputSpec = [new topology_1.InputSpec({ ndim: 4 })];\n        return _this;\n    }\n    GlobalPooling2D.prototype.computeOutputShape = function (inputShape) {\n        inputShape = inputShape;\n        if (this.dataFormat === 'channelsLast') {\n            return [inputShape[0], inputShape[3]];\n        } else {\n            return [inputShape[0], inputShape[1]];\n        }\n    };\n    GlobalPooling2D.prototype.call = function (inputs, kwargs) {\n        throw new errors_1.NotImplementedError();\n    };\n    GlobalPooling2D.prototype.getConfig = function () {\n        var config = { dataFormat: this.dataFormat };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return GlobalPooling2D;\n}(topology_2.Layer);\nexports.GlobalPooling2D = GlobalPooling2D;\nvar GlobalAveragePooling2D = function (_super) {\n    __extends(GlobalAveragePooling2D, _super);\n    function GlobalAveragePooling2D() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GlobalAveragePooling2D.prototype.call = function (inputs, kwargs) {\n        var input = generic_utils.getExactlyOneTensor(inputs);\n        if (this.dataFormat === 'channelsLast') {\n            return K.mean(input, [1, 2]);\n        } else {\n            return K.mean(input, [2, 3]);\n        }\n    };\n    return GlobalAveragePooling2D;\n}(GlobalPooling2D);\nexports.GlobalAveragePooling2D = GlobalAveragePooling2D;\ngeneric_utils.ClassNameMap.register('GlobalAveragePooling2D', GlobalAveragePooling2D);\nvar GlobalMaxPooling2D = function (_super) {\n    __extends(GlobalMaxPooling2D, _super);\n    function GlobalMaxPooling2D() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GlobalMaxPooling2D.prototype.call = function (inputs, kwargs) {\n        var input = generic_utils.getExactlyOneTensor(inputs);\n        if (this.dataFormat === 'channelsLast') {\n            return K.max(input, [1, 2]);\n        } else {\n            return K.max(input, [2, 3]);\n        }\n    };\n    return GlobalMaxPooling2D;\n}(GlobalPooling2D);\nexports.GlobalMaxPooling2D = GlobalMaxPooling2D;\ngeneric_utils.ClassNameMap.register('GlobalMaxPooling2D', GlobalMaxPooling2D);\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/layers/pooling.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\nvar activations_1 = __webpack_require__(/*! ../activations */ \"./node_modules/@tensorflow/tfjs-layers/dist/activations.js\");\nvar K = __webpack_require__(/*! ../backend/tfjs_backend */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\");\nvar constraints_1 = __webpack_require__(/*! ../constraints */ \"./node_modules/@tensorflow/tfjs-layers/dist/constraints.js\");\nvar topology_1 = __webpack_require__(/*! ../engine/topology */ \"./node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js\");\nvar topology_2 = __webpack_require__(/*! ../engine/topology */ \"./node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js\");\nvar errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nvar initializers_1 = __webpack_require__(/*! ../initializers */ \"./node_modules/@tensorflow/tfjs-layers/dist/initializers.js\");\nvar regularizers_1 = __webpack_require__(/*! ../regularizers */ \"./node_modules/@tensorflow/tfjs-layers/dist/regularizers.js\");\nvar types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@tensorflow/tfjs-layers/dist/types.js\");\nvar generic_utils = __webpack_require__(/*! ../utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar math_utils = __webpack_require__(/*! ../utils/math_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/math_utils.js\");\nvar serialization_1 = __webpack_require__(/*! ./serialization */ \"./node_modules/@tensorflow/tfjs-layers/dist/layers/serialization.js\");\nvar RNN = function (_super) {\n    __extends(RNN, _super);\n    function RNN(config) {\n        var _this = _super.call(this, config) || this;\n        var cell;\n        if (config.cell == null) {\n            throw new errors_1.ValueError('cell property is missing for the constructor of RNN.');\n        } else if (Array.isArray(config.cell)) {\n            cell = new StackedRNNCells({ cells: config.cell });\n        } else {\n            cell = config.cell;\n        }\n        if (cell.stateSize == null) {\n            throw new errors_1.ValueError('The RNN cell should have an attribute `stateSize` (tuple of ' + 'integers, one integer per RNN state).');\n        }\n        _this.cell = cell;\n        _this.returnSequences = config.returnSequences == null ? false : config.returnSequences;\n        _this.returnState = config.returnState == null ? false : config.returnState;\n        _this.goBackwards = config.goBackwards == null ? false : config.goBackwards;\n        _this._stateful = config.stateful == null ? false : config.stateful;\n        _this.unroll = config.unroll == null ? false : config.unroll;\n        _this.supportsMasking = true;\n        _this.inputSpec = [new topology_1.InputSpec({ ndim: 3 })];\n        _this.stateSpec = null;\n        _this.states = null;\n        _this.numConstants = null;\n        return _this;\n    }\n    RNN.prototype.getStates = function () {\n        if (this.states == null) {\n            var numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n            return _.range(numStates).map(function (x) {\n                return null;\n            });\n        } else {\n            return this.states;\n        }\n    };\n    RNN.prototype.setStates = function (states) {\n        this.states = states;\n    };\n    RNN.prototype.computeOutputShape = function (inputShape) {\n        if (generic_utils.isArrayOfShapes(inputShape)) {\n            inputShape = inputShape[0];\n        }\n        inputShape = inputShape;\n        var stateSize = this.cell.stateSize;\n        if (!Array.isArray(stateSize)) {\n            stateSize = [stateSize];\n        }\n        var outputDim = stateSize[0];\n        var outputShape;\n        if (this.returnSequences) {\n            outputShape = [inputShape[0], inputShape[1], outputDim];\n        } else {\n            outputShape = [inputShape[0], outputDim];\n        }\n        if (this.returnState) {\n            var stateShape = [];\n            for (var _i = 0, stateSize_1 = stateSize; _i < stateSize_1.length; _i++) {\n                var dim = stateSize_1[_i];\n                stateShape.push([inputShape[0], dim]);\n            }\n            return [outputShape].concat(stateShape);\n        } else {\n            return outputShape;\n        }\n    };\n    RNN.prototype.computeMask = function (inputs, mask) {\n        throw new errors_1.NotImplementedError('computeMask has not been implemented for RNN yet');\n    };\n    RNN.prototype.build = function (inputShape) {\n        var constantShape = null;\n        if (this.numConstants != null) {\n            throw new errors_1.NotImplementedError('Constants support is not implemented in RNN yet.');\n        }\n        if (generic_utils.isArrayOfShapes(inputShape)) {\n            inputShape = inputShape[0];\n        }\n        inputShape = inputShape;\n        var batchSize = this.stateful ? inputShape[0] : null;\n        var inputDim = inputShape[inputShape.length - 1];\n        this.inputSpec[0] = new topology_1.InputSpec({ shape: [batchSize, null, inputDim] });\n        var stepInputShape = [inputShape[0]].concat(inputShape.slice(2));\n        if (constantShape != null) {\n            throw new errors_1.NotImplementedError('Constants support is not implemented in RNN yet.');\n        } else {\n            this.cell.build(stepInputShape);\n        }\n        var stateSize;\n        if (Array.isArray(this.cell.stateSize)) {\n            stateSize = this.cell.stateSize;\n        } else {\n            stateSize = [this.cell.stateSize];\n        }\n        if (this.stateSpec != null) {\n            if (!_.isEqual(this.stateSpec.map(function (spec) {\n                return spec.shape[spec.shape.length - 1];\n            }), stateSize)) {\n                throw new errors_1.ValueError(\"An initialState was passed that is not compatible with \" + (\"cell.stateSize. Received stateSpec=\" + this.stateSpec + \"; \") + (\"However cell.stateSize is \" + this.cell.stateSize));\n            }\n        } else {\n            this.stateSpec = stateSize.map(function (dim) {\n                return new topology_1.InputSpec({ shape: [null, dim] });\n            });\n        }\n        if (this.stateful) {\n            throw new errors_1.NotImplementedError('stateful RNN layer is not implemented yet');\n        }\n    };\n    RNN.prototype.resetStates = function (states) {\n        if (!this.stateful) {\n            throw new errors_1.AttributeError('Cannot call resetState() on an RNN Layer that is not stateful.');\n        }\n        var batchSize = this.inputSpec[0].shape[0];\n        if (batchSize == null) {\n            throw new errors_1.ValueError('If an RNN is stateful, it needs to know its batch size. Specify ' + 'the batch size of your input tensors: \\n' + '- If using a Sequential model, specify the batch size by passing ' + 'a `batchInputShape` option to your first layer.\\n' + '- If using the functional API, specify the batch size by ' + 'passing a `batchShape` option to your Input layer.');\n        }\n        if (this.states == null) {\n            if (Array.isArray(this.cell.stateSize)) {\n                this.states = this.cell.stateSize.map(function (dim) {\n                    return K.zeros([batchSize, dim]);\n                });\n            } else {\n                this.states = [K.zeros([batchSize, this.cell.stateSize])];\n            }\n        } else if (states == null) {\n            if (Array.isArray(this.cell.stateSize)) {\n                this.states = this.cell.stateSize.map(function (dim) {\n                    return K.zeros([batchSize, dim]);\n                });\n            } else {\n                this.states[0] = K.zeros([batchSize, this.cell.stateSize]);\n            }\n        } else {\n            if (!Array.isArray(states)) {\n                states = [states];\n            }\n            if (states.length !== this.states.length) {\n                throw new errors_1.ValueError(\"Layer \" + this.name + \" expects \" + this.states.length + \" state(s), \" + (\"but it received \" + states.length + \" state value(s). Input \") + (\"received: \" + states));\n            }\n            for (var index = 0; index < this.states.length; ++index) {\n                var value = states[index];\n                var dim = Array.isArray(this.cell.stateSize) ? this.cell.stateSize[index] : this.cell.stateSize;\n                var expectedShape = [batchSize, dim];\n                if (!_.isEqual(value.shape, expectedShape)) {\n                    throw new errors_1.ValueError(\"State \" + index + \" is incompatible with layer \" + this.name + \": \" + (\"expected shape=\" + expectedShape + \", received shape=\" + value.shape));\n                }\n                this.states[index] = value;\n            }\n        }\n    };\n    RNN.prototype.standardizeArgs = function (inputs, initialState, constants) {\n        if (Array.isArray(inputs)) {\n            if (initialState != null || constants != null) {\n                throw new errors_1.ValueError('When inputs is an array, neither initialState or constants ' + 'should be provided');\n            }\n            if (this.numConstants != null) {\n                constants = inputs.slice(inputs.length - this.numConstants, inputs.length);\n                inputs = inputs.slice(0, inputs.length - this.numConstants);\n            }\n            if (inputs.length > 1) {\n                initialState = inputs.slice(1, inputs.length);\n            }\n            inputs = inputs[0];\n        }\n        function toListOrNull(x) {\n            if (x == null || Array.isArray(x)) {\n                return x;\n            } else {\n                return [x];\n            }\n        }\n        initialState = toListOrNull(initialState);\n        constants = toListOrNull(constants);\n        return { inputs: inputs, initialState: initialState, constants: constants };\n    };\n    RNN.prototype.apply = function (inputs, kwargs) {\n        var initialState = kwargs == null ? null : kwargs['initialState'];\n        var constants = kwargs == null ? null : kwargs['constants'];\n        if (kwargs == null) {\n            kwargs = {};\n        }\n        var standardized = this.standardizeArgs(inputs, initialState, constants);\n        inputs = standardized.inputs;\n        initialState = standardized.initialState;\n        constants = standardized.constants;\n        var additionalInputs = [];\n        var additionalSpecs = [];\n        if (initialState != null) {\n            kwargs['initialState'] = initialState;\n            additionalInputs = additionalInputs.concat(initialState);\n            this.stateSpec = [];\n            for (var _i = 0, initialState_1 = initialState; _i < initialState_1.length; _i++) {\n                var state = initialState_1[_i];\n                this.stateSpec.push(new topology_1.InputSpec({ shape: state.shape }));\n            }\n            additionalSpecs = additionalSpecs.concat(this.stateSpec);\n        }\n        if (constants != null) {\n            kwargs['constants'] = constants;\n            additionalInputs = additionalInputs.concat(constants);\n            this.numConstants = constants.length;\n        }\n        var isTensor = additionalInputs[0] instanceof types_1.SymbolicTensor;\n        if (isTensor) {\n            var fullInput = [inputs].concat(additionalInputs);\n            var fullInputSpec = this.inputSpec.concat(additionalSpecs);\n            var originalInputSpec = this.inputSpec;\n            this.inputSpec = fullInputSpec;\n            var output = _super.prototype.apply.call(this, fullInput, kwargs);\n            this.inputSpec = originalInputSpec;\n            return output;\n        } else {\n            return _super.prototype.apply.call(this, inputs, kwargs);\n        }\n    };\n    RNN.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        var mask = kwargs == null ? null : kwargs['mask'];\n        var training = kwargs == null ? null : kwargs['training'];\n        var initialState = kwargs == null ? null : kwargs['initialState'];\n        inputs = generic_utils.getExactlyOneTensor(inputs);\n        if (initialState == null) {\n            if (this.stateful) {\n                throw new errors_1.NotImplementedError('stateful RNN layer is not implemented yet.');\n            } else {\n                initialState = this.getInitialState(inputs);\n            }\n        }\n        if (mask != null) {\n            throw new errors_1.NotImplementedError('Masking is not implemented for RNN yet');\n        }\n        var numStates = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;\n        if (initialState.length !== numStates) {\n            throw new errors_1.ValueError(\"RNN Layer has \" + numStates + \" state(s) but was passed \" + (initialState.length + \" initial state(s).\"));\n        }\n        var inputShape = inputs.shape;\n        var timesteps = inputShape[1];\n        if (this.unroll) {\n            console.warn('Ignoring unroll = true for RNN layer, due to imperative backend.');\n        }\n        var cellCallKwargs = { training: training };\n        var step = function (inputs, states) {\n            var outputs = _this.cell.call([inputs].concat(states), cellCallKwargs);\n            return [outputs[0], outputs.slice(1)];\n        };\n        var rnnOutputs = K.rnn(step, inputs, initialState, this.goBackwards, null, null, this.unroll, timesteps);\n        var lastOutput = rnnOutputs[0];\n        var outputs = rnnOutputs[1];\n        var states = rnnOutputs[2];\n        if (this.stateful) {\n            throw new errors_1.NotImplementedError('stateful RNN layer is not implemented yet');\n        }\n        var output = this.returnSequences ? outputs : lastOutput;\n        if (this.returnState) {\n            return [output].concat(states);\n        } else {\n            return output;\n        }\n    };\n    RNN.prototype.getInitialState = function (inputs) {\n        var initialState = K.zeros(inputs.shape);\n        initialState = K.sum(initialState, [1, 2]);\n        initialState = K.expandDims(initialState);\n        if (Array.isArray(this.cell.stateSize)) {\n            return this.cell.stateSize.map(function (dim) {\n                return dim > 1 ? K.tile(initialState, [1, dim]) : initialState;\n            });\n        } else {\n            return this.cell.stateSize > 1 ? [K.tile(initialState, [1, this.cell.stateSize])] : [initialState];\n        }\n    };\n    Object.defineProperty(RNN.prototype, \"trainableWeights\", {\n        get: function () {\n            if (!this.trainable) {\n                return [];\n            }\n            return this.cell.trainableWeights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RNN.prototype, \"nonTrainableWeights\", {\n        get: function () {\n            if (!this.trainable) {\n                return this.cell.weights;\n            }\n            return this.cell.nonTrainableWeights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    RNN.prototype.getConfig = function () {\n        var config = {\n            returnSequences: this.returnSequences,\n            returnState: this.returnState,\n            goBackwards: this.goBackwards,\n            stateful: this.stateful,\n            unroll: this.unroll\n        };\n        if (this.numConstants != null) {\n            config.numConstants = this.numConstants;\n        }\n        var cellConfig = this.cell.getConfig();\n        config.cell = {\n            className: this.cell.constructor.name,\n            config: cellConfig\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return RNN;\n}(topology_2.Layer);\nexports.RNN = RNN;\ngeneric_utils.ClassNameMap.register('RNN', RNN);\nvar RNNCell = function (_super) {\n    __extends(RNNCell, _super);\n    function RNNCell() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    RNNCell = __decorate([tfjs_core_1.doc({ heading: 'Layers', subheading: 'Classes' })], RNNCell);\n    return RNNCell;\n}(topology_2.Layer);\nexports.RNNCell = RNNCell;\nvar SimpleRNNCell = function (_super) {\n    __extends(SimpleRNNCell, _super);\n    function SimpleRNNCell(config) {\n        var _this = _super.call(this, config) || this;\n        _this.DEFAULT_ACTIVATION = 'tanh';\n        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        _this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        _this.units = config.units;\n        _this.activation = activations_1.getActivation(config.activation == null ? _this.DEFAULT_ACTIVATION : config.activation);\n        _this.useBias = config.useBias == null ? true : config.useBias;\n        _this.kernelInitializer = initializers_1.getInitializer(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n        _this.recurrentInitializer = initializers_1.getInitializer(config.recurrentInitializer || _this.DEFAULT_RECURRENT_INITIALIZER);\n        _this.biasInitializer = initializers_1.getInitializer(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);\n        _this.kernelRegularizer = regularizers_1.getRegularizer(config.kernelRegularizer);\n        _this.recurrentRegularizer = regularizers_1.getRegularizer(config.recurrentRegularizer);\n        _this.biasRegularizer = regularizers_1.getRegularizer(config.biasRegularizer);\n        _this.kernelConstraint = constraints_1.getConstraint(config.kernelConstraint);\n        _this.recurrentConstraint = constraints_1.getConstraint(config.recurrentConstraint);\n        _this.biasConstraint = constraints_1.getConstraint(config.biasConstraint);\n        _this.dropout = math_utils.min([1, math_utils.max([0, config.dropout == null ? 0 : config.dropout])]);\n        _this.recurrentDropout = math_utils.min([1, math_utils.max([0, config.recurrentDropout == null ? 0 : config.recurrentDropout])]);\n        _this.stateSize = _this.units;\n        return _this;\n    }\n    SimpleRNNCell.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        this.kernel = this.addWeight('kernel', [inputShape[inputShape.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        } else {\n            this.bias = null;\n        }\n        this.built = true;\n    };\n    SimpleRNNCell.prototype.call = function (inputs, kwargs) {\n        inputs = inputs;\n        if (inputs.length !== 2) {\n            throw new errors_1.ValueError(\"SimpleRNNCell expects 2 input Tensors, got \" + inputs.length + \".\");\n        }\n        var prevOutput = inputs[1];\n        inputs = inputs[0];\n        if (this.dropout !== 0 || this.recurrentDropout !== 0) {\n            throw new errors_1.NotImplementedError('Dropout is not implemented for SimpleRNNCell yet');\n        }\n        var h = K.dot(inputs, this.kernel.read());\n        if (this.bias != null) {\n            h = K.biasAdd(h, this.bias.read());\n        }\n        var output = K.add(h, K.dot(prevOutput, this.recurrentKernel.read()));\n        if (this.activation != null) {\n            output = this.activation(output);\n        }\n        return [output, output];\n    };\n    SimpleRNNCell.prototype.getConfig = function () {\n        var config = {\n            units: this.units,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return SimpleRNNCell;\n}(RNNCell);\nexports.SimpleRNNCell = SimpleRNNCell;\ngeneric_utils.ClassNameMap.register('SimpleRNNCell', SimpleRNNCell);\nvar SimpleRNN = function (_super) {\n    __extends(SimpleRNN, _super);\n    function SimpleRNN(config) {\n        var _this = this;\n        config.cell = new SimpleRNNCell(config);\n        _this = _super.call(this, config) || this;\n        return _this;\n    }\n    SimpleRNN.prototype.call = function (inputs, kwargs) {\n        var mask = kwargs == null ? null : kwargs['mask'];\n        var training = kwargs == null ? null : kwargs['training'];\n        var initialState = kwargs == null ? null : kwargs['initialState'];\n        return _super.prototype.call.call(this, inputs, { mask: mask, training: training, initialState: initialState });\n    };\n    Object.defineProperty(SimpleRNN.prototype, \"units\", {\n        get: function () {\n            return this.cell.units;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"activation\", {\n        get: function () {\n            return this.cell.activation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"useBias\", {\n        get: function () {\n            return this.cell.useBias;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"kernelInitializer\", {\n        get: function () {\n            return this.cell.kernelInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"recurrentInitializer\", {\n        get: function () {\n            return this.cell.recurrentInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"biasInitializer\", {\n        get: function () {\n            return this.cell.biasInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"kernelRegularizer\", {\n        get: function () {\n            return this.cell.kernelRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"recurrentRegularizer\", {\n        get: function () {\n            return this.cell.recurrentRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"biasRegularizer\", {\n        get: function () {\n            return this.cell.biasRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"kernelConstraint\", {\n        get: function () {\n            return this.cell.kernelConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"recurrentConstraint\", {\n        get: function () {\n            return this.cell.recurrentConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"biasConstraint\", {\n        get: function () {\n            return this.cell.biasConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"dropout\", {\n        get: function () {\n            return this.cell.dropout;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SimpleRNN.prototype, \"recurrentDropout\", {\n        get: function () {\n            return this.cell.recurrentDropout;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SimpleRNN.prototype.getConfig = function () {\n        var config = {\n            units: this.units,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return SimpleRNN;\n}(RNN);\nexports.SimpleRNN = SimpleRNN;\ngeneric_utils.ClassNameMap.register('SimpleRNN', SimpleRNN);\nvar GRUCell = function (_super) {\n    __extends(GRUCell, _super);\n    function GRUCell(config) {\n        var _this = _super.call(this, config) || this;\n        _this.DEFAULT_ACTIVATION = 'tanh';\n        _this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        _this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        _this.units = config.units;\n        _this.activation = activations_1.getActivation(config.activation === undefined ? _this.DEFAULT_ACTIVATION : config.activation);\n        _this.recurrentActivation = activations_1.getActivation(config.activation === undefined ? _this.DEFAULT_RECURRENT_ACTIVATION : config.recurrentActivation);\n        _this.useBias = config.useBias == null ? true : config.useBias;\n        _this.kernelInitializer = initializers_1.getInitializer(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n        _this.recurrentInitializer = initializers_1.getInitializer(config.recurrentInitializer || _this.DEFAULT_RECURRENT_INITIALIZER);\n        _this.biasInitializer = initializers_1.getInitializer(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);\n        _this.kernelRegularizer = regularizers_1.getRegularizer(config.kernelRegularizer);\n        _this.recurrentRegularizer = regularizers_1.getRegularizer(config.recurrentRegularizer);\n        _this.biasRegularizer = regularizers_1.getRegularizer(config.biasRegularizer);\n        _this.kernelConstraint = constraints_1.getConstraint(config.kernelConstraint);\n        _this.recurrentConstraint = constraints_1.getConstraint(config.recurrentConstraint);\n        _this.biasConstraint = constraints_1.getConstraint(config.biasConstraint);\n        _this.dropout = math_utils.min([1, math_utils.max([0, config.dropout == null ? 0 : config.dropout])]);\n        _this.recurrentDropout = math_utils.min([1, math_utils.max([0, config.recurrentDropout == null ? 0 : config.recurrentDropout])]);\n        _this.implementation = config.implementation;\n        _this.stateSize = _this.units;\n        return _this;\n    }\n    GRUCell.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var inputDim = inputShape[inputShape.length - 1];\n        this.kernel = this.addWeight('kernel', [inputDim, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [this.units * 3], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        } else {\n            this.bias = null;\n        }\n        this.built = true;\n    };\n    GRUCell.prototype.call = function (inputs, kwargs) {\n        if (this.dropout !== 0 || this.recurrentDropout !== 0) {\n            throw new errors_1.NotImplementedError('Dropout is not implemented for GRUCell yet');\n        }\n        inputs = inputs;\n        if (inputs.length !== 2) {\n            throw new errors_1.ValueError(\"GRUCell expects 2 input Tensors (inputs, h, c), got \" + (inputs.length + \".\"));\n        }\n        var hTMinus1 = inputs[1];\n        inputs = inputs[0];\n        var z;\n        var r;\n        var hh;\n        if (this.implementation === 1) {\n            var kernelZ = K.sliceAlongLastAxis(this.kernel.read(), 0, this.units);\n            var kernelR = K.sliceAlongLastAxis(this.kernel.read(), this.units, this.units);\n            var kernelH = K.sliceAlongLastAxis(this.kernel.read(), this.units * 2, this.units);\n            var recurrentKernelZ = K.sliceAlongLastAxis(this.recurrentKernel.read(), 0, this.units);\n            var recurrentKernelR = K.sliceAlongLastAxis(this.recurrentKernel.read(), this.units, this.units);\n            var recurrentKernelH = K.sliceAlongLastAxis(this.recurrentKernel.read(), this.units * 2, this.units);\n            var inputsZ = inputs;\n            var inputsR = inputs;\n            var inputsH = inputs;\n            var xZ = K.dot(inputsZ, kernelZ);\n            var xR = K.dot(inputsR, kernelR);\n            var xH = K.dot(inputsH, kernelH);\n            if (this.useBias) {\n                var biasZ = K.sliceAlongFirstAxis(this.bias.read(), 0, this.units);\n                var biasR = K.sliceAlongFirstAxis(this.bias.read(), this.units, this.units);\n                var biasH = K.sliceAlongFirstAxis(this.bias.read(), this.units * 2, this.units);\n                xZ = K.biasAdd(xZ, biasZ);\n                xR = K.biasAdd(xR, biasR);\n                xH = K.biasAdd(xH, biasH);\n            }\n            var hTMinus1Z = hTMinus1;\n            var hTMinus1R = hTMinus1;\n            var hTMinus1H = hTMinus1;\n            z = this.recurrentActivation(K.add(xZ, K.dot(hTMinus1Z, recurrentKernelZ)));\n            r = this.recurrentActivation(K.add(xR, K.dot(hTMinus1R, recurrentKernelR)));\n            hh = this.activation(K.add(xH, K.dot(K.multiply(r, hTMinus1H), recurrentKernelH)));\n        } else {\n            var matrixX = K.dot(inputs, this.kernel.read());\n            if (this.useBias) {\n                matrixX = K.biasAdd(matrixX, this.bias.read());\n            }\n            var matrixInner = K.dot(hTMinus1, K.sliceAlongLastAxis(this.recurrentKernel.read(), 0, 2 * this.units));\n            var xZ = K.sliceAlongLastAxis(matrixX, 0, this.units);\n            var xR = K.sliceAlongLastAxis(matrixX, this.units, this.units);\n            var recurrentZ = K.sliceAlongLastAxis(matrixInner, 0, this.units);\n            var recurrentR = K.sliceAlongLastAxis(matrixInner, this.units, this.units);\n            z = this.recurrentActivation(K.add(xZ, recurrentZ));\n            r = this.recurrentActivation(K.add(xR, recurrentR));\n            var xH = K.sliceAlongLastAxis(matrixX, 2 * this.units, this.units);\n            var recurrentH = K.dot(K.multiply(r, hTMinus1), K.sliceAlongLastAxis(this.recurrentKernel.read(), 2 * this.units, this.units));\n            hh = this.activation(K.add(xH, recurrentH));\n        }\n        var h = K.add(K.multiply(z, hTMinus1), K.multiply(K.scalarPlusArray(K.getScalar(1), K.neg(z)), hh));\n        return [h, h];\n    };\n    GRUCell.prototype.getConfig = function () {\n        var config = {\n            units: this.units,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n            implementation: this.implementation\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return GRUCell;\n}(RNNCell);\nexports.GRUCell = GRUCell;\ngeneric_utils.ClassNameMap.register('GRUCell', GRUCell);\nvar GRU = function (_super) {\n    __extends(GRU, _super);\n    function GRU(config) {\n        var _this = this;\n        if (config.implementation === 0) {\n            console.warn('`implementation=0` has been deprecated, and now defaults to ' + '`implementation=1`. Please update your layer call.');\n        }\n        config.cell = new GRUCell(config);\n        _this = _super.call(this, config) || this;\n        return _this;\n    }\n    GRU.prototype.call = function (inputs, kwargs) {\n        var mask = kwargs == null ? null : kwargs['mask'];\n        var training = kwargs == null ? null : kwargs['training'];\n        var initialState = kwargs == null ? null : kwargs['initialState'];\n        return _super.prototype.call.call(this, inputs, { mask: mask, training: training, initialState: initialState });\n    };\n    Object.defineProperty(GRU.prototype, \"units\", {\n        get: function () {\n            return this.cell.units;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"activation\", {\n        get: function () {\n            return this.cell.activation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"useBias\", {\n        get: function () {\n            return this.cell.useBias;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"kernelInitializer\", {\n        get: function () {\n            return this.cell.kernelInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"recurrentInitializer\", {\n        get: function () {\n            return this.cell.recurrentInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"biasInitializer\", {\n        get: function () {\n            return this.cell.biasInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"kernelRegularizer\", {\n        get: function () {\n            return this.cell.kernelRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"recurrentRegularizer\", {\n        get: function () {\n            return this.cell.recurrentRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"biasRegularizer\", {\n        get: function () {\n            return this.cell.biasRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"kernelConstraint\", {\n        get: function () {\n            return this.cell.kernelConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"recurrentConstraint\", {\n        get: function () {\n            return this.cell.recurrentConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"biasConstraint\", {\n        get: function () {\n            return this.cell.biasConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"dropout\", {\n        get: function () {\n            return this.cell.dropout;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"recurrentDropout\", {\n        get: function () {\n            return this.cell.recurrentDropout;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GRU.prototype, \"implementation\", {\n        get: function () {\n            return this.cell.implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GRU.prototype.getConfig = function () {\n        var config = {\n            units: this.units,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n            implementation: this.implementation\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    GRU.fromConfig = function (cls, config) {\n        if (config['implmentation'] === 0) {\n            config['implementation'] = 1;\n        }\n        return new cls(config);\n    };\n    return GRU;\n}(RNN);\nexports.GRU = GRU;\ngeneric_utils.ClassNameMap.register('GRU', GRU);\nvar LSTMCell = function (_super) {\n    __extends(LSTMCell, _super);\n    function LSTMCell(config) {\n        var _this = _super.call(this, config) || this;\n        _this.DEFAULT_ACTIVATION = 'tanh';\n        _this.DEFAULT_RECURRENT_ACTIVATION = 'hardSigmoid';\n        _this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n        _this.DEFAULT_RECURRENT_INITIALIZER = 'orthogonal';\n        _this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n        _this.units = config.units;\n        _this.activation = activations_1.getActivation(config.activation === undefined ? _this.DEFAULT_ACTIVATION : config.activation);\n        _this.recurrentActivation = activations_1.getActivation(config.activation === undefined ? _this.DEFAULT_RECURRENT_ACTIVATION : config.recurrentActivation);\n        _this.useBias = config.useBias == null ? true : config.useBias;\n        _this.kernelInitializer = initializers_1.getInitializer(config.kernelInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n        _this.recurrentInitializer = initializers_1.getInitializer(config.recurrentInitializer || _this.DEFAULT_RECURRENT_INITIALIZER);\n        _this.biasInitializer = initializers_1.getInitializer(config.biasInitializer || _this.DEFAULT_BIAS_INITIALIZER);\n        _this.unitForgetBias = config.unitForgetBias;\n        _this.kernelRegularizer = regularizers_1.getRegularizer(config.kernelRegularizer);\n        _this.recurrentRegularizer = regularizers_1.getRegularizer(config.recurrentRegularizer);\n        _this.biasRegularizer = regularizers_1.getRegularizer(config.biasRegularizer);\n        _this.kernelConstraint = constraints_1.getConstraint(config.kernelConstraint);\n        _this.recurrentConstraint = constraints_1.getConstraint(config.recurrentConstraint);\n        _this.biasConstraint = constraints_1.getConstraint(config.biasConstraint);\n        _this.dropout = math_utils.min([1, math_utils.max([0, config.dropout == null ? 0 : config.dropout])]);\n        _this.recurrentDropout = math_utils.min([1, math_utils.max([0, config.recurrentDropout == null ? 0 : config.recurrentDropout])]);\n        _this.implementation = config.implementation;\n        _this.stateSize = [_this.units, _this.units];\n        return _this;\n    }\n    LSTMCell.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var inputDim = inputShape[inputShape.length - 1];\n        this.kernel = this.addWeight('kernel', [inputDim, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n        this.recurrentKernel = this.addWeight('recurrent_kernel', [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, true, this.recurrentConstraint);\n        var biasInitializer;\n        if (this.useBias) {\n            if (this.unitForgetBias) {\n                var capturedBiasInit_1 = this.biasInitializer;\n                var capturedUnits_1 = this.units;\n                biasInitializer = new (function (_super) {\n                    __extends(CustomInit, _super);\n                    function CustomInit() {\n                        return _super !== null && _super.apply(this, arguments) || this;\n                    }\n                    CustomInit.prototype.apply = function (shape, dtype) {\n                        var bI = capturedBiasInit_1.apply([capturedUnits_1]);\n                        var bF = new initializers_1.Ones().apply([capturedUnits_1]);\n                        var bCAndH = capturedBiasInit_1.apply([capturedUnits_1 * 2]);\n                        return K.concatAlongFirstAxis(K.concatAlongFirstAxis(bI, bF), bCAndH);\n                    };\n                    return CustomInit;\n                }(initializers_1.Initializer))();\n            } else {\n                biasInitializer = this.biasInitializer;\n            }\n            this.bias = this.addWeight('bias', [this.units * 4], null, biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        } else {\n            this.bias = null;\n        }\n        this.built = true;\n    };\n    LSTMCell.prototype.call = function (inputs, kwargs) {\n        if (this.dropout !== 0 || this.recurrentDropout !== 0) {\n            throw new errors_1.NotImplementedError('Dropout is not implemented for LSTMCell yet');\n        }\n        inputs = inputs;\n        if (inputs.length !== 3) {\n            throw new errors_1.ValueError(\"LSTMCell expects 3 input Tensors (inputs, h, c), got \" + (inputs.length + \".\"));\n        }\n        var hTMinus1 = inputs[1];\n        var cTMinus1 = inputs[2];\n        inputs = inputs[0];\n        var i;\n        var f;\n        var c;\n        var o;\n        if (this.implementation === 1) {\n            var kernelI = K.sliceAlongLastAxis(this.kernel.read(), 0, this.units);\n            var kernelF = K.sliceAlongLastAxis(this.kernel.read(), this.units, this.units);\n            var kernelC = K.sliceAlongLastAxis(this.kernel.read(), this.units * 2, this.units);\n            var kernelO = K.sliceAlongLastAxis(this.kernel.read(), this.units * 3, this.units);\n            var recurrentKernelI = K.sliceAlongLastAxis(this.recurrentKernel.read(), 0, this.units);\n            var recurrentKernelF = K.sliceAlongLastAxis(this.recurrentKernel.read(), this.units, this.units);\n            var recurrentKernelC = K.sliceAlongLastAxis(this.recurrentKernel.read(), this.units * 2, this.units);\n            var recurrentKernelO = K.sliceAlongLastAxis(this.recurrentKernel.read(), this.units * 3, this.units);\n            var inputsI = inputs;\n            var inputsF = inputs;\n            var inputsC = inputs;\n            var inputsO = inputs;\n            var xI = K.dot(inputsI, kernelI);\n            var xF = K.dot(inputsF, kernelF);\n            var xC = K.dot(inputsC, kernelC);\n            var xO = K.dot(inputsO, kernelO);\n            if (this.useBias) {\n                var biasI = K.sliceAlongFirstAxis(this.bias.read(), 0, this.units);\n                var biasF = K.sliceAlongFirstAxis(this.bias.read(), this.units, this.units);\n                var biasC = K.sliceAlongFirstAxis(this.bias.read(), this.units * 2, this.units);\n                var biasO = K.sliceAlongFirstAxis(this.bias.read(), this.units * 3, this.units);\n                xI = K.biasAdd(xI, biasI);\n                xF = K.biasAdd(xF, biasF);\n                xC = K.biasAdd(xC, biasC);\n                xO = K.biasAdd(xO, biasO);\n            }\n            var hTMinus1I = hTMinus1;\n            var hTMinus1F = hTMinus1;\n            var hTMinus1C = hTMinus1;\n            var hTMinus1O = hTMinus1;\n            i = this.recurrentActivation(K.add(xI, K.dot(hTMinus1I, recurrentKernelI)));\n            f = this.recurrentActivation(K.add(xF, K.dot(hTMinus1F, recurrentKernelF)));\n            c = K.add(K.multiply(f, cTMinus1), K.multiply(i, this.activation(K.add(xC, K.dot(hTMinus1C, recurrentKernelC)))));\n            o = this.recurrentActivation(K.add(xO, K.dot(hTMinus1O, recurrentKernelO)));\n        } else {\n            var z = K.dot(inputs, this.kernel.read());\n            z = K.add(z, K.dot(hTMinus1, this.recurrentKernel.read()));\n            if (this.useBias) {\n                z = K.biasAdd(z, this.bias.read());\n            }\n            var z0 = K.sliceAlongLastAxis(z, 0, this.units);\n            var z1 = K.sliceAlongLastAxis(z, this.units, this.units);\n            var z2 = K.sliceAlongLastAxis(z, this.units * 2, this.units);\n            var z3 = K.sliceAlongLastAxis(z, this.units * 3, this.units);\n            i = this.recurrentActivation(z0);\n            f = this.recurrentActivation(z1);\n            c = K.add(K.multiply(f, cTMinus1), K.multiply(i, this.activation(z2)));\n            o = this.recurrentActivation(z3);\n        }\n        var h = K.multiply(o, this.activation(c));\n        return [h, h, c];\n    };\n    LSTMCell.prototype.getConfig = function () {\n        var config = {\n            units: this.units,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            unitForgetBias: this.unitForgetBias,\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n            implementation: this.implementation\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return LSTMCell;\n}(RNNCell);\nexports.LSTMCell = LSTMCell;\ngeneric_utils.ClassNameMap.register('LSTMCell', LSTMCell);\nvar LSTM = function (_super) {\n    __extends(LSTM, _super);\n    function LSTM(config) {\n        var _this = this;\n        if (config.implementation === 0) {\n            console.warn('`implementation=0` has been deprecated, and now defaults to ' + '`implementation=1`. Please update your layer call.');\n        }\n        config.cell = new LSTMCell(config);\n        _this = _super.call(this, config) || this;\n        return _this;\n    }\n    LSTM.prototype.call = function (inputs, kwargs) {\n        var mask = kwargs == null ? null : kwargs['mask'];\n        var training = kwargs == null ? null : kwargs['training'];\n        var initialState = kwargs == null ? null : kwargs['initialState'];\n        return _super.prototype.call.call(this, inputs, { mask: mask, training: training, initialState: initialState });\n    };\n    Object.defineProperty(LSTM.prototype, \"units\", {\n        get: function () {\n            return this.cell.units;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"activation\", {\n        get: function () {\n            return this.cell.activation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"useBias\", {\n        get: function () {\n            return this.cell.useBias;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"kernelInitializer\", {\n        get: function () {\n            return this.cell.kernelInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"recurrentInitializer\", {\n        get: function () {\n            return this.cell.recurrentInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"biasInitializer\", {\n        get: function () {\n            return this.cell.biasInitializer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"unitForgetBias\", {\n        get: function () {\n            return this.cell.unitForgetBias;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"kernelRegularizer\", {\n        get: function () {\n            return this.cell.kernelRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"recurrentRegularizer\", {\n        get: function () {\n            return this.cell.recurrentRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"biasRegularizer\", {\n        get: function () {\n            return this.cell.biasRegularizer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"kernelConstraint\", {\n        get: function () {\n            return this.cell.kernelConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"recurrentConstraint\", {\n        get: function () {\n            return this.cell.recurrentConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"biasConstraint\", {\n        get: function () {\n            return this.cell.biasConstraint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"dropout\", {\n        get: function () {\n            return this.cell.dropout;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"recurrentDropout\", {\n        get: function () {\n            return this.cell.recurrentDropout;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LSTM.prototype, \"implementation\", {\n        get: function () {\n            return this.cell.implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LSTM.prototype.getConfig = function () {\n        var config = {\n            units: this.units,\n            activation: activations_1.serializeActivation(this.activation),\n            useBias: this.useBias,\n            kernelInitializer: initializers_1.serializeInitializer(this.kernelInitializer),\n            recurrentInitializer: initializers_1.serializeInitializer(this.recurrentInitializer),\n            biasInitializer: initializers_1.serializeInitializer(this.biasInitializer),\n            unitForgetBias: this.unitForgetBias,\n            kernelRegularizer: regularizers_1.serializeRegularizer(this.kernelRegularizer),\n            recurrentRegularizer: regularizers_1.serializeRegularizer(this.recurrentRegularizer),\n            biasRegularizer: regularizers_1.serializeRegularizer(this.biasRegularizer),\n            activityRegularizer: regularizers_1.serializeRegularizer(this.activityRegularizer),\n            kernelConstraint: constraints_1.serializeConstraint(this.kernelConstraint),\n            recurrentConstraint: constraints_1.serializeConstraint(this.recurrentConstraint),\n            biasConstraint: constraints_1.serializeConstraint(this.biasConstraint),\n            dropout: this.dropout,\n            recurrentDropout: this.recurrentDropout,\n            implementation: this.implementation\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    LSTM.fromConfig = function (cls, config) {\n        if (config['implmentation'] === 0) {\n            config['implementation'] = 1;\n        }\n        return new cls(config);\n    };\n    return LSTM;\n}(RNN);\nexports.LSTM = LSTM;\ngeneric_utils.ClassNameMap.register('LSTM', LSTM);\nvar StackedRNNCells = function (_super) {\n    __extends(StackedRNNCells, _super);\n    function StackedRNNCells(config) {\n        var _this = _super.call(this, config) || this;\n        _this.cells = config.cells;\n        return _this;\n    }\n    Object.defineProperty(StackedRNNCells.prototype, \"stateSize\", {\n        get: function () {\n            var stateSize = [];\n            for (var _i = 0, _a = this.cells.slice().reverse(); _i < _a.length; _i++) {\n                var cell = _a[_i];\n                if (Array.isArray(cell.stateSize)) {\n                    stateSize.push.apply(stateSize, cell.stateSize);\n                } else {\n                    stateSize.push(cell.stateSize);\n                }\n            }\n            return stateSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StackedRNNCells.prototype.call = function (inputs, kwargs) {\n        inputs = inputs;\n        var states = inputs.slice(1);\n        var nestedStates = [];\n        for (var _i = 0, _a = this.cells.slice().reverse(); _i < _a.length; _i++) {\n            var cell = _a[_i];\n            if (Array.isArray(cell.stateSize)) {\n                nestedStates.push(states.splice(0, cell.stateSize.length));\n            } else {\n                nestedStates.push(states.splice(0, 1));\n            }\n        }\n        nestedStates.reverse();\n        var newNestedStates = [];\n        var callInputs;\n        for (var i = 0; i < this.cells.length; ++i) {\n            var cell = this.cells[i];\n            states = nestedStates[i];\n            if (i === 0) {\n                callInputs = [inputs[0]].concat(states);\n            } else {\n                callInputs = [callInputs[0]].concat(states);\n            }\n            callInputs = cell.call(callInputs, kwargs);\n            newNestedStates.push(callInputs.slice(1));\n        }\n        states = [];\n        for (var _b = 0, _c = newNestedStates.slice().reverse(); _b < _c.length; _b++) {\n            var cellStates = _c[_b];\n            states.push.apply(states, cellStates);\n        }\n        return [callInputs[0]].concat(states);\n    };\n    StackedRNNCells.prototype.build = function (inputShape) {\n        if (generic_utils.isArrayOfShapes(inputShape)) {\n            inputShape = inputShape[0];\n        }\n        inputShape = inputShape;\n        var outputDim;\n        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {\n            var cell = _a[_i];\n            cell.build(inputShape);\n            if (Array.isArray(cell.stateSize)) {\n                outputDim = cell.stateSize[0];\n            } else {\n                outputDim = cell.stateSize;\n            }\n            inputShape = [inputShape[0], outputDim];\n        }\n        this.built = true;\n    };\n    StackedRNNCells.prototype.getConfig = function () {\n        var cellConfigs = [];\n        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {\n            var cell = _a[_i];\n            cellConfigs.push({\n                'className': this.constructor.name,\n                'config': cell.getConfig()\n            });\n        }\n        var config = { 'cells': cellConfigs };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    StackedRNNCells.fromConfig = function (cls, config, customObjects) {\n        if (customObjects === void 0) {\n            customObjects = {};\n        }\n        var cells = [];\n        for (var _i = 0, _a = config['cells']; _i < _a.length; _i++) {\n            var cellConfig = _a[_i];\n            cells.push(serialization_1.deserialize(cellConfig, customObjects));\n        }\n        return new cls({ cells: cells });\n    };\n    Object.defineProperty(StackedRNNCells.prototype, \"trainableWeights\", {\n        get: function () {\n            if (!this.trainable) {\n                return [];\n            }\n            var weights = [];\n            for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {\n                var cell = _a[_i];\n                weights.push.apply(weights, cell.trainableWeights);\n            }\n            return weights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StackedRNNCells.prototype, \"nonTrainableWeights\", {\n        get: function () {\n            var weights = [];\n            for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {\n                var cell = _a[_i];\n                weights.push.apply(weights, cell.nonTrainableWeights);\n            }\n            if (!this.trainable) {\n                var trainableWeights = [];\n                for (var _b = 0, _c = this.cells; _b < _c.length; _b++) {\n                    var cell = _c[_b];\n                    trainableWeights.push.apply(trainableWeights, cell.trainableWeights);\n                }\n                return trainableWeights.concat(weights);\n            }\n            return weights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StackedRNNCells.prototype.getWeights = function () {\n        var weights = [];\n        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {\n            var cell = _a[_i];\n            weights.push.apply(weights, cell.weights);\n        }\n        return K.batchGetValue(weights);\n    };\n    StackedRNNCells.prototype.setWeights = function (weights) {\n        var tuples = [];\n        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {\n            var cell = _a[_i];\n            var numParams = cell.weights.length;\n            var inputWeights = weights.splice(numParams);\n            for (var i = 0; i < cell.weights.length; ++i) {\n                tuples.push([cell.weights[i], inputWeights[i]]);\n            }\n        }\n        K.batchSetValue(tuples);\n    };\n    return StackedRNNCells;\n}(RNNCell);\nexports.StackedRNNCells = StackedRNNCells;\ngeneric_utils.ClassNameMap.register('StackedRNNCells', StackedRNNCells);\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/layers/recurrent.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/layers/serialization.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/serialization.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar generic_utils_1 = __webpack_require__(/*! ../utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nfunction deserialize(config, customObjects) {\n    if (customObjects === void 0) {\n        customObjects = {};\n    }\n    return generic_utils_1.deserializeKerasObject(config, generic_utils_1.ClassNameMap.getMap().pythonClassNameMap, customObjects, 'layer');\n}\nexports.deserialize = deserialize;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/layers/serialization.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/layers/wrappers.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/layers/wrappers.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar K = __webpack_require__(/*! ../backend/tfjs_backend */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\");\nvar topology_1 = __webpack_require__(/*! ../engine/topology */ \"./node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js\");\nvar errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nvar generic_utils = __webpack_require__(/*! ../utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar serialization_1 = __webpack_require__(/*! ./serialization */ \"./node_modules/@tensorflow/tfjs-layers/dist/layers/serialization.js\");\nvar Wrapper = function (_super) {\n    __extends(Wrapper, _super);\n    function Wrapper(config) {\n        var _this = _super.call(this, config) || this;\n        _this.layer = config.layer;\n        _this.inputMap = {};\n        return _this;\n    }\n    Wrapper.prototype.build = function (inputShape) {\n        this.built = true;\n    };\n    Object.defineProperty(Wrapper.prototype, \"trainable\", {\n        get: function () {\n            if (this.layer != null) {\n                return this.layer.trainable;\n            } else {\n                return false;\n            }\n        },\n        set: function (value) {\n            if (this.layer != null) {\n                this.layer.trainable = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Wrapper.prototype, \"trainableWeights\", {\n        get: function () {\n            return this.layer.trainableWeights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Wrapper.prototype, \"nonTrainableWeights\", {\n        get: function () {\n            return this.layer.nonTrainableWeights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Wrapper.prototype, \"updates\", {\n        get: function () {\n            return this.layer._updates;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Wrapper.prototype, \"losses\", {\n        get: function () {\n            return this.layer.losses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Wrapper.prototype.getWeights = function () {\n        return this.layer.getWeights();\n    };\n    Wrapper.prototype.setWeights = function (weights) {\n        this.layer.setWeights(weights);\n    };\n    Wrapper.prototype.getConfig = function () {\n        var config = {\n            'layer': {\n                'className': this.layer.constructor.name,\n                'config': this.layer.getConfig()\n            }\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    Wrapper.fromConfig = function (cls, config, customObjects) {\n        if (customObjects === void 0) {\n            customObjects = {};\n        }\n        var layerConfig = config['layer'];\n        var layer = serialization_1.deserialize(layerConfig, customObjects);\n        delete config['layer'];\n        var newConfig = { layer: layer };\n        Object.assign(newConfig, config);\n        return new cls(newConfig);\n    };\n    return Wrapper;\n}(topology_1.Layer);\nexports.Wrapper = Wrapper;\nvar TimeDistributed = function (_super) {\n    __extends(TimeDistributed, _super);\n    function TimeDistributed(config) {\n        var _this = _super.call(this, config) || this;\n        _this.supportsMasking = true;\n        return _this;\n    }\n    TimeDistributed.prototype.build = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        if (inputShape.length < 3) {\n            throw new errors_1.ValueError(\"TimeDistributed layer expects an input shape >= 3D, but received \" + (\"input shape \" + JSON.stringify(inputShape)));\n        }\n        this.inputSpec = [{ shape: inputShape }];\n        var childInputShape = [inputShape[0]].concat(inputShape.slice(2));\n        if (!this.layer.built) {\n            this.layer.build(childInputShape);\n            this.layer.built = true;\n        }\n        _super.prototype.build.call(this, inputShape);\n    };\n    TimeDistributed.prototype.computeOutputShape = function (inputShape) {\n        inputShape = generic_utils.getExactlyOneShape(inputShape);\n        var childInputShape = [inputShape[0]].concat(inputShape.slice(2));\n        var childOutputShape = this.layer.computeOutputShape(childInputShape);\n        var timesteps = inputShape[1];\n        return [childOutputShape[0], timesteps].concat(childOutputShape.slice(1));\n    };\n    TimeDistributed.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        inputs = generic_utils.getExactlyOneTensor(inputs);\n        var step = function (inputs, states) {\n            var output = _this.layer.call(inputs, kwargs);\n            return [output, []];\n        };\n        var rnnOutputs = K.rnn(step, inputs, [], false, null, null, false, inputs.shape[1]);\n        var y = rnnOutputs[1];\n        return y;\n    };\n    return TimeDistributed;\n}(Wrapper);\nexports.TimeDistributed = TimeDistributed;\ngeneric_utils.ClassNameMap.register('TimeDistributed', TimeDistributed);\nvar BidirectionalMergeMode;\n(function (BidirectionalMergeMode) {\n    BidirectionalMergeMode[BidirectionalMergeMode[\"SUM\"] = 0] = \"SUM\";\n    BidirectionalMergeMode[BidirectionalMergeMode[\"MUL\"] = 1] = \"MUL\";\n    BidirectionalMergeMode[BidirectionalMergeMode[\"CONCAT\"] = 2] = \"CONCAT\";\n    BidirectionalMergeMode[BidirectionalMergeMode[\"AVE\"] = 3] = \"AVE\";\n})(BidirectionalMergeMode = exports.BidirectionalMergeMode || (exports.BidirectionalMergeMode = {}));\ngeneric_utils.SerializableEnumRegistry.register('merge_mode', {\n    'sum': BidirectionalMergeMode.SUM,\n    'mul': BidirectionalMergeMode.MUL,\n    'concat': BidirectionalMergeMode.CONCAT,\n    'ave': BidirectionalMergeMode.AVE\n});\nvar Bidirectional = function (_super) {\n    __extends(Bidirectional, _super);\n    function Bidirectional(config) {\n        var _this = _super.call(this, config) || this;\n        _this.forwardLayer = config.layer;\n        var layerConfig = config.layer.getConfig();\n        layerConfig['goBackwards'] = layerConfig['goBackwards'] === true ? false : true;\n        _this.backwardLayer = serialization_1.deserialize({ className: config.layer.constructor.name, config: layerConfig });\n        _this.forwardLayer.name = 'forward_' + _this.forwardLayer.name;\n        _this.backwardLayer.name = 'backward_' + _this.backwardLayer.name;\n        _this.mergeMode = config.mergeMode;\n        if (config.weights) {\n            throw new errors_1.NotImplementedError('weights support is not implemented for Bidirectional layer yet.');\n        }\n        _this._stateful = config.layer.stateful;\n        _this.returnSequences = config.layer.returnSequences;\n        _this.returnState = config.layer.returnState;\n        _this.supportsMasking = true;\n        _this._trainable = true;\n        _this.inputSpec = config.layer.inputSpec;\n        return _this;\n    }\n    Object.defineProperty(Bidirectional.prototype, \"trainable\", {\n        get: function () {\n            return this._trainable;\n        },\n        set: function (value) {\n            this._trainable = value;\n            if (this.forwardLayer != null) {\n                this.forwardLayer.trainable = value;\n            }\n            if (this.backwardLayer != null) {\n                this.backwardLayer.trainable = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Bidirectional.prototype.getWeights = function () {\n        return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());\n    };\n    Bidirectional.prototype.setWeights = function (weights) {\n        var numWeights = weights.length;\n        var numeightsOver2 = Math.floor(numWeights / 2);\n        this.forwardLayer.setWeights(weights.slice(0, numeightsOver2));\n        this.backwardLayer.setWeights(weights.slice(numeightsOver2));\n    };\n    Bidirectional.prototype.computeOutputShape = function (inputShape) {\n        var layerShapes = this.forwardLayer.computeOutputShape(inputShape);\n        if (!(Array.isArray(layerShapes) && Array.isArray(layerShapes[0]))) {\n            layerShapes = [layerShapes];\n        }\n        layerShapes = layerShapes;\n        var outputShape;\n        var outputShapes;\n        var stateShape;\n        if (this.returnState) {\n            stateShape = layerShapes.slice(1);\n            outputShape = layerShapes[0];\n        } else {\n            outputShape = layerShapes[0];\n        }\n        outputShape = outputShape;\n        if (this.mergeMode === BidirectionalMergeMode.CONCAT) {\n            outputShape[outputShape.length - 1] *= 2;\n            outputShapes = [outputShape];\n        } else if (this.mergeMode == null) {\n            outputShapes = [outputShape, outputShape.slice()];\n        } else {\n            outputShapes = [outputShape];\n        }\n        if (this.returnState) {\n            if (this.mergeMode == null) {\n                return outputShapes.concat(stateShape).concat(stateShape.slice());\n            }\n            return [outputShape].concat(stateShape).concat(stateShape.slice());\n        }\n        return generic_utils.singletonOrArray(outputShapes);\n    };\n    Bidirectional.prototype.apply = function (inputs, kwargs) {\n        var initialState = null;\n        if (kwargs != null) {\n            initialState = kwargs['initialState'];\n        }\n        if (Array.isArray(inputs)) {\n            initialState = inputs.slice(1);\n            inputs = inputs[0];\n        }\n        if (initialState == null || initialState.length === 0) {\n            var applyOutputs = _super.prototype.apply.call(this, inputs, kwargs);\n            return applyOutputs;\n        } else {\n            throw new errors_1.NotImplementedError('The support for initial states is not implemented for ' + 'Bidirectional layers yet.');\n        }\n    };\n    Bidirectional.prototype.call = function (inputs, kwargs) {\n        if (kwargs['mask'] != null) {\n            throw new errors_1.NotImplementedError('The support for masking is not implemented for ' + 'Bidirectional layers yet.');\n        }\n        if (kwargs['initialState'] != null) {\n            throw new errors_1.NotImplementedError('The support for initial states is not implemented for ' + 'Bidirectional layers yet.');\n        }\n        var y = this.forwardLayer.call(inputs, kwargs);\n        var yRev = this.backwardLayer.call(inputs, kwargs);\n        var states;\n        if (this.returnState) {\n            if (Array.isArray(y)) {\n                states = y.slice(1).concat(yRev.slice(1));\n            } else {}\n            y = y[0];\n            yRev = yRev[0];\n        }\n        if (this.returnSequences) {\n            yRev = K.reverse(yRev, 1);\n        }\n        var output;\n        if (this.mergeMode === BidirectionalMergeMode.CONCAT) {\n            output = K.concatenate([y, yRev]);\n        } else if (this.mergeMode === BidirectionalMergeMode.SUM) {\n            output = K.add(y, yRev);\n        } else if (this.mergeMode === BidirectionalMergeMode.AVE) {\n            output = K.scalarTimesArray(K.getScalar(0.5), K.add(y, yRev));\n        } else if (this.mergeMode === BidirectionalMergeMode.MUL) {\n            output = K.multiply(y, yRev);\n        } else if (this.mergeMode == null) {\n            output = [y, yRev];\n        }\n        if (this.returnState) {\n            if (this.mergeMode == null) {\n                return output.concat(states);\n            }\n            return [output].concat(states);\n        }\n        return output;\n    };\n    Bidirectional.prototype.resetStates = function (states) {\n        this.forwardLayer.resetStates();\n        this.backwardLayer.resetStates();\n    };\n    Bidirectional.prototype.build = function (inputShape) {\n        var _this = this;\n        K.nameScope(this.forwardLayer.name, function () {\n            _this.forwardLayer.build(inputShape);\n        });\n        K.nameScope(this.backwardLayer.name, function () {\n            _this.backwardLayer.build(inputShape);\n        });\n        this.built = true;\n    };\n    Object.defineProperty(Bidirectional.prototype, \"trainableWeights\", {\n        get: function () {\n            return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Bidirectional.prototype, \"nonTrainableWeights\", {\n        get: function () {\n            return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Bidirectional;\n}(Wrapper);\nexports.Bidirectional = Bidirectional;\ngeneric_utils.ClassNameMap.register('Bidirectional', Bidirectional);\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/layers/wrappers.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/losses.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/losses.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar K = __webpack_require__(/*! ./backend/tfjs_backend */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\");\nvar errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nfunction meanSquaredError(yTrue, yPred) {\n    return K.mean(K.square(K.subtract(yPred, yTrue)), -1);\n}\nexports.meanSquaredError = meanSquaredError;\nfunction meanAbsoluteError(yTrue, yPred) {\n    return K.mean(K.abs(K.subtract(yPred, yTrue)), -1);\n}\nexports.meanAbsoluteError = meanAbsoluteError;\nfunction meanAbsolutePercentageError(yTrue, yPred) {\n    var diff = K.subtract(yTrue, yPred);\n    var clippedTrue = K.clip(K.abs(yTrue), K.epsilon(), Number.MAX_VALUE);\n    var absResult = K.abs(K.divide(diff, clippedTrue));\n    return K.scalarTimesArray(K.getScalar(100.0), K.mean(absResult, -1));\n}\nexports.meanAbsolutePercentageError = meanAbsolutePercentageError;\nfunction meanSquaredLogarithmicError(yTrue, yPred) {\n    var one = K.getScalar(1.0);\n    var clippedPred = K.clip(yPred, K.epsilon(), Number.MAX_VALUE);\n    var firstLog = K.log(K.scalarPlusArray(one, clippedPred));\n    var clippedTrue = K.clip(yTrue, K.epsilon(), Number.MAX_VALUE);\n    var secondLog = K.log(K.scalarPlusArray(one, clippedTrue));\n    return K.mean(K.square(K.subtract(firstLog, secondLog)), -1);\n}\nexports.meanSquaredLogarithmicError = meanSquaredLogarithmicError;\nfunction squaredHinge(yTrue, yPred) {\n    var zeroTensor = K.getScalar(0.0);\n    var one = K.getScalar(1.0);\n    var maxResult = K.maximum(zeroTensor, K.subtract(one, K.multiply(yTrue, yPred)));\n    return K.mean(K.square(maxResult), -1);\n}\nexports.squaredHinge = squaredHinge;\nfunction hinge(yTrue, yPred) {\n    var zeroTensor = K.getScalar(0.0);\n    var one = K.getScalar(1.0);\n    var maxResult = K.maximum(zeroTensor, K.subtract(one, K.multiply(yTrue, yPred)));\n    return K.mean(maxResult, -1);\n}\nexports.hinge = hinge;\nfunction categoricalHinge(yTrue, yPred) {\n    var zeroTensor = K.getScalar(0.0);\n    var one = K.getScalar(1.0);\n    var pos = K.sum(K.multiply(yTrue, yPred), -1);\n    var neg = K.max(K.multiply(K.subtract(one, yTrue), yPred), -1);\n    return K.maximum(zeroTensor, K.scalarPlusArray(one, K.subtract(neg, pos)));\n}\nexports.categoricalHinge = categoricalHinge;\nfunction logcosh(yTrue, yPred) {\n    var log2 = K.getScalar(Math.log(2.0));\n    var predictionDiff = K.subtract(yPred, yTrue);\n    var logcoshResult = K.subtract(K.add(predictionDiff, K.softplus(K.scalarTimesArray(K.getScalar(-2.0), predictionDiff))), log2);\n    return K.mean(logcoshResult, -1);\n}\nexports.logcosh = logcosh;\nfunction categoricalCrossentropy(yTrue, yPred) {\n    return K.categoricalCrossentropy(yTrue, yPred);\n}\nexports.categoricalCrossentropy = categoricalCrossentropy;\nfunction sparseCategoricalCrossentropy(yTrue, yPred) {\n    return K.sparseCategoricalCrossentropy(yTrue, yPred);\n}\nexports.sparseCategoricalCrossentropy = sparseCategoricalCrossentropy;\nfunction binaryCrossentropy(yTrue, yPred) {\n    return K.mean(K.binaryCrossentropy(yTrue, yPred), -1);\n}\nexports.binaryCrossentropy = binaryCrossentropy;\nfunction kullbackLeiblerDivergence(yTrue, yPred) {\n    var clippedTrue = K.clip(yTrue, K.epsilon(), 1);\n    var clippedPred = K.clip(yPred, K.epsilon(), 1);\n    return K.sum(K.multiply(yTrue, K.log(K.divide(clippedTrue, clippedPred))), -1);\n}\nexports.kullbackLeiblerDivergence = kullbackLeiblerDivergence;\nfunction poisson(yTrue, yPred) {\n    var logPred = K.log(K.scalarPlusArray(K.getScalar(K.epsilon()), yPred));\n    return K.mean(K.subtract(yPred, K.multiply(yTrue, logPred)), -1);\n}\nexports.poisson = poisson;\nfunction cosineProximity(yTrue, yPred) {\n    var trueNormalized = K.l2Normalize(yTrue, -1);\n    var predNormalized = K.l2Normalize(yPred, -1);\n    var trueXPred = K.multiply(trueNormalized, predNormalized);\n    return K.neg(K.sum(trueXPred, -1));\n}\nexports.cosineProximity = cosineProximity;\nexports.mse = meanSquaredError;\nexports.MSE = meanSquaredError;\nexports.mae = meanAbsoluteError;\nexports.MAE = meanAbsoluteError;\nexports.mape = meanAbsolutePercentageError;\nexports.MAPE = meanAbsolutePercentageError;\nexports.msle = meanSquaredLogarithmicError;\nexports.MSLE = meanSquaredLogarithmicError;\nexports.kld = kullbackLeiblerDivergence;\nexports.KLD = kullbackLeiblerDivergence;\nexports.cosine = cosineProximity;\nfunction get(identifier) {\n    var lossesMap = {\n        meanSquaredError: meanSquaredError,\n        meanAbsoluteError: meanAbsoluteError,\n        meanAbsolutePercentageError: meanAbsolutePercentageError,\n        meanSquaredLogarithmicError: meanSquaredLogarithmicError,\n        squaredHinge: squaredHinge,\n        hinge: hinge,\n        categoricalHinge: categoricalHinge,\n        logcosh: logcosh,\n        categoricalCrossentropy: categoricalCrossentropy,\n        sparseCategoricalCrossentropy: sparseCategoricalCrossentropy,\n        binaryCrossentropy: binaryCrossentropy,\n        kullbackLeiblerDivergence: kullbackLeiblerDivergence,\n        poisson: poisson,\n        cosineProximity: cosineProximity\n    };\n    if (identifier in lossesMap) {\n        return lossesMap[identifier];\n    }\n    throw new errors_1.ValueError(\"Unknown loss \" + identifier);\n}\nexports.get = get;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/losses.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/metrics.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/metrics.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar K = __webpack_require__(/*! ./backend/tfjs_backend */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\");\nvar errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nvar losses_1 = __webpack_require__(/*! ./losses */ \"./node_modules/@tensorflow/tfjs-layers/dist/losses.js\");\nfunction binaryAccuracy(yTrue, yPred) {\n    var threshold = K.scalarTimesArray(K.getScalar(0.5), tfjs_core_1.onesLike(yPred));\n    var yPredThresholded = K.cast(K.greater(yPred, threshold), yTrue.dtype);\n    return K.mean(K.equal(yTrue, yPredThresholded), -1);\n}\nexports.binaryAccuracy = binaryAccuracy;\nfunction categoricalAccuracy(yTrue, yPred) {\n    return K.cast(K.equal(K.argmax(yTrue, -1), K.argmax(yPred, -1)), 'float32');\n}\nexports.categoricalAccuracy = categoricalAccuracy;\nfunction binaryCrossentropy(yTrue, yPred) {\n    throw new errors_1.NotImplementedError();\n}\nexports.binaryCrossentropy = binaryCrossentropy;\nfunction categoricalCrossentropy(yTrue, yPred) {\n    throw new errors_1.NotImplementedError();\n}\nexports.categoricalCrossentropy = categoricalCrossentropy;\nfunction sparseCategoricalAccuracy(yTrue, yPred) {\n    throw new errors_1.NotImplementedError();\n}\nexports.sparseCategoricalAccuracy = sparseCategoricalAccuracy;\nfunction sparseCategoricalCrossentropy(yTrue, yPred) {\n    throw new errors_1.NotImplementedError();\n}\nexports.sparseCategoricalCrossentropy = sparseCategoricalCrossentropy;\nfunction topKCategoricalAccuracy(yTrue, yPred) {\n    throw new errors_1.NotImplementedError();\n}\nexports.topKCategoricalAccuracy = topKCategoricalAccuracy;\nfunction sparseTopKCategoricalAccuracy(yTrue, yPred) {\n    throw new errors_1.NotImplementedError();\n}\nexports.sparseTopKCategoricalAccuracy = sparseTopKCategoricalAccuracy;\nexports.mse = losses_1.meanSquaredError;\nexports.MSE = losses_1.meanSquaredError;\nexports.mae = losses_1.meanAbsoluteError;\nexports.MAE = losses_1.meanAbsoluteError;\nexports.mape = losses_1.meanAbsolutePercentageError;\nexports.MAPE = losses_1.meanAbsolutePercentageError;\nexports.cosine = losses_1.cosineProximity;\nfunction get(identifier) {\n    var metricsMap = {\n        binaryAccuracy: binaryAccuracy,\n        categoricalAccuracy: categoricalAccuracy,\n        mse: exports.mse,\n        MSE: exports.MSE,\n        mae: exports.mae,\n        MAE: exports.MAE,\n        mape: exports.mape,\n        MAPE: exports.MAPE,\n        cosine: exports.cosine\n    };\n    if (typeof identifier === 'string' && identifier in metricsMap) {\n        return metricsMap[identifier];\n    } else if (typeof identifier !== 'string' && identifier != null) {\n        return identifier;\n    } else {\n        throw new errors_1.ValueError(\"Unknown metric \" + identifier);\n    }\n}\nexports.get = get;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/metrics.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/models.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/models.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : new P(function (resolve) {\n                resolve(result.value);\n            }).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n    var _ = { label: 0, sent: function () {\n            if (t[0] & 1) throw t[1];return t[1];\n        }, trys: [], ops: [] },\n        f,\n        y,\n        t,\n        g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n    }), g;\n    function verb(n) {\n        return function (v) {\n            return step([n, v]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0:case 1:\n                    t = op;break;\n                case 4:\n                    _.label++;return { value: op[1], done: false };\n                case 5:\n                    _.label++;y = op[1];op = [0];continue;\n                case 7:\n                    op = _.ops.pop();_.trys.pop();continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];t = op;break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];_.ops.push(op);break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [6, e];y = 0;\n        } finally {\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar K = __webpack_require__(/*! ./backend/tfjs_backend */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\");\nvar topology_1 = __webpack_require__(/*! ./engine/topology */ \"./node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js\");\nvar training_1 = __webpack_require__(/*! ./engine/training */ \"./node_modules/@tensorflow/tfjs-layers/dist/engine/training.js\");\nvar errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nvar serialization_1 = __webpack_require__(/*! ./layers/serialization */ \"./node_modules/@tensorflow/tfjs-layers/dist/layers/serialization.js\");\nvar generic_utils = __webpack_require__(/*! ./utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar serialization_utils_1 = __webpack_require__(/*! ./utils/serialization_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/serialization_utils.js\");\nfunction modelFromJSON(modelAndWeightsConfig, customObjects) {\n    return __awaiter(this, void 0, void 0, function () {\n        var modelTopology, tsConfig, model, weightValues, skipMismatches, isNamedTensorMap;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    modelTopology = modelAndWeightsConfig.modelTopology;\n                    if (modelTopology['model_config'] != null) {\n                        modelTopology = modelTopology['model_config'];\n                    }\n                    tsConfig = serialization_utils_1.convertPythonicToTs(modelTopology);\n                    model = serialization_1.deserialize(tsConfig, customObjects);\n                    if (!(modelAndWeightsConfig.weightsManifest != null)) return [3, 2];\n                    return [4, tfjs_core_1.loadWeights(modelAndWeightsConfig.weightsManifest, modelAndWeightsConfig.pathPrefix, model.weights.map(function (weight) {\n                        return weight.name;\n                    }))];\n                case 1:\n                    weightValues = _a.sent();\n                    skipMismatches = null;\n                    isNamedTensorMap = true;\n                    model.loadWeights(weightValues, skipMismatches, isNamedTensorMap);\n                    _a.label = 2;\n                case 2:\n                    return [2, model];\n            }\n        });\n    });\n}\nexports.modelFromJSON = modelFromJSON;\nfunction loadModelInternal(modelConfigPath) {\n    return __awaiter(this, void 0, void 0, function () {\n        var modelConfigRequest, modelConfig;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    return [4, fetch(modelConfigPath)];\n                case 1:\n                    modelConfigRequest = _a.sent();\n                    return [4, modelConfigRequest.json()];\n                case 2:\n                    modelConfig = _a.sent();\n                    if (modelConfig['modelTopology'] == null) {\n                        throw new errors_1.ValueError('Missing field \"modelTopology\" from model JSON at path' + modelConfigPath);\n                    }\n                    if (modelConfig['weightsManifest'] == null) {\n                        throw new errors_1.ValueError('Missing field \"weightsManifest\" from model JSON at path' + modelConfigPath);\n                    }\n                    modelConfig.pathPrefix = modelConfigPath.substring(0, modelConfigPath.lastIndexOf('/'));\n                    return [2, modelFromJSON(modelConfig)];\n            }\n        });\n    });\n}\nexports.loadModelInternal = loadModelInternal;\nvar Sequential = function (_super) {\n    __extends(Sequential, _super);\n    function Sequential(config) {\n        var _this = _super.call(this, { inputs: [], outputs: [] }) || this;\n        config = config || {};\n        _this.trainable = true;\n        _this._updatable = true;\n        _this.built = false;\n        _this.name = config.name != null ? config.name : K.getUid('sequential_');\n        if (config.layers != null) {\n            for (var _i = 0, _a = config.layers; _i < _a.length; _i++) {\n                var layer = _a[_i];\n                _this.add(layer);\n            }\n        }\n        return _this;\n    }\n    Sequential_1 = Sequential;\n    Sequential.prototype.add = function (layer) {\n        if (this.outputs.length === 0) {\n            if (layer.inboundNodes.length === 0) {\n                if (layer.batchInputShape == null) {\n                    throw new errors_1.ValueError('The first layer in a Sequential model must ' + 'get an `inputShape` or `batchInputShape` argument.');\n                }\n                var x = topology_1.Input({\n                    batchShape: layer.batchInputShape,\n                    dtype: layer.dtype,\n                    name: layer.name + '_input'\n                });\n                layer.apply(x);\n            }\n            if (layer.inboundNodes.length !== 1) {\n                throw new errors_1.ValueError('A layer added to a Sequential model must not already be ' + (\"connected somewhere else. Model received layer \" + layer.name + \" \") + (\"which has \" + layer.inboundNodes.length + \" pre-existing inbound \") + 'connections.');\n            }\n            if (layer.inboundNodes[0].outputTensors.length !== 1) {\n                throw new errors_1.ValueError('All layers in a Sequential model ' + 'should have a single output tensor. ' + 'For multi-output layers, ' + 'use the functional API.');\n            }\n            this.outputs = [layer.inboundNodes[0].outputTensors[0]];\n            this.inputs = topology_1.getSourceInputs(this.outputs[0]);\n            new topology_1.Node({\n                outboundLayer: this,\n                inboundLayers: [],\n                nodeIndices: [],\n                tensorIndices: [],\n                inputTensors: this.inputs,\n                outputTensors: this.outputs,\n                inputMasks: generic_utils.pyListRepeat(null, this.inputs.length),\n                outputMasks: [null],\n                inputShapes: this.inputs.map(function (x) {\n                    return x.shape;\n                }),\n                outputShapes: this.outputs[0].shape\n            });\n        } else {\n            var outputTensor = layer.apply(this.outputs[0]);\n            if (Array.isArray(outputTensor)) {\n                throw new TypeError('All layers in a Sequential model ' + 'should have a single output tensor. ' + 'For multi-output layers, ' + 'use the functional API.');\n            }\n            this.outputs = [outputTensor];\n            this.inboundNodes[0].outputTensors = this.outputs;\n            this.inboundNodes[0].outputShapes = [this.outputs[0].shape];\n        }\n        this.layers.push(layer);\n        this.built = false;\n    };\n    Sequential.prototype.pop = function () {\n        if (this.layers.length === 0) {\n            throw new TypeError('There are no layers in the model.');\n        }\n        this.layers.pop();\n        if (this.layers.length === 0) {\n            this.outputs = [];\n            this.inboundNodes = [];\n            this.outboundNodes = [];\n        } else {\n            var lastLayerIndex = this.layers.length - 1;\n            this.layers[lastLayerIndex].outboundNodes = [];\n            this.outputs = [this.layers[lastLayerIndex].output];\n            this.inboundNodes[0].outputTensors = this.outputs;\n            this.inboundNodes[0].outputShapes = [this.outputs[0].shape];\n        }\n    };\n    Sequential.prototype.call = function (inputs, kwargs) {\n        if (this.model == null) {\n            this.build();\n        }\n        return this.model.call(inputs, kwargs);\n    };\n    Sequential.prototype.build = function (inputShape) {\n        if (this.inputs.length === 0 || this.outputs.length === 0) {\n            throw new TypeError('Sequential model cannot be built: model is empty.' + ' Add some layers first.');\n        }\n        this.model = new training_1.Model({\n            inputs: this.inputs,\n            outputs: this.outputs[0],\n            name: this.name + '_model'\n        });\n        this.model.trainable = this.trainable;\n        this.model.updatable = this.updatable;\n        this.supportsMasking = this.model.supportsMasking;\n        this.inputLayers = this.model.inputLayers;\n        this.inputLayersNodeIndices = this.model.inputLayersNodeIndices;\n        this.inputLayersTensorIndices = this.model.inputLayersTensorIndices;\n        this.outputLayers = this.model.outputLayers;\n        this.outputLayersNodeIndices = this.model.outputLayersNodeIndices;\n        this.outputLayersTensorIndices = this.model.outputLayersTensorIndices;\n        this.nodesByDepth = this.model.nodesByDepth;\n        this.containerNodes = this.model.containerNodes;\n        this.outputNames = this.model.outputNames;\n        this.inputNames = this.model.inputNames;\n        this.built = true;\n    };\n    Sequential.prototype.setWeights = function (weights) {\n        if (this.model == null) {\n            this.build();\n        }\n        this.model.setWeights(weights);\n    };\n    Object.defineProperty(Sequential.prototype, \"updatable\", {\n        get: function () {\n            return this._updatable;\n        },\n        set: function (value) {\n            if (this.built) {\n                this.model.updatable = value;\n            }\n            this._updatable = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Sequential.prototype.evaluate = function (x, y, config) {\n        if (config === void 0) {\n            config = {};\n        }\n        if (!this.built) {\n            throw new errors_1.RuntimeError('The model needs to be compiled before being used.');\n        }\n        return this.model.evaluate(x, y, config);\n    };\n    Sequential.prototype.predict = function (x, config) {\n        if (config === void 0) {\n            config = {};\n        }\n        if (this.model == null) {\n            this.build();\n        }\n        return this.model.predict(x, config);\n    };\n    Sequential.prototype.predictOnBatch = function (x) {\n        if (this.model == null) {\n            this.build();\n        }\n        return this.model.predictOnBatch(x);\n    };\n    Sequential.prototype.compile = function (config) {\n        this.build();\n        this.model.compile(config);\n        this.optimizer = this.model.optimizer;\n        this.loss = this.model.loss;\n        this.metrics = this.model.metrics;\n        this.metricsTensors = this.model.metricsTensors;\n        this.metricsNames = this.model.metricsNames;\n    };\n    Sequential.prototype.fit = function (x, y, config) {\n        if (config === void 0) {\n            config = {};\n        }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (!this.built) {\n                    throw new errors_1.RuntimeError('The model needs to be compiled before ' + 'being used.');\n                }\n                return [2, this.model.fit(x, y, config)];\n            });\n        });\n    };\n    Sequential.fromConfig = function (cls, config) {\n        var model = new cls({});\n        if (!(model instanceof Sequential_1)) {\n            throw new errors_1.ValueError(\"Sequential.fromConfig called on non-Sequential input: \" + model);\n        }\n        if (!(config instanceof Array)) {\n            throw new errors_1.ValueError(\"Sequential.fromConfig called without an array of configs\");\n        }\n        if (!(config[0].className != null) || config[0]['className'] === 'Merge') {\n            throw new errors_1.ValueError('Legacy serialization format not supported yet.');\n        }\n        for (var _i = 0, _a = config; _i < _a.length; _i++) {\n            var conf = _a[_i];\n            var layer = serialization_1.deserialize(conf);\n            model.add(layer);\n        }\n        return model;\n    };\n    __decorate([tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes' })], Sequential.prototype, \"add\", null);\n    __decorate([tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [2] })], Sequential.prototype, \"evaluate\", null);\n    __decorate([tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [1] })], Sequential.prototype, \"predict\", null);\n    __decorate([tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes', configParamIndices: [2] })], Sequential.prototype, \"fit\", null);\n    Sequential = Sequential_1 = __decorate([tfjs_core_1.doc({ heading: 'Models', subheading: 'Classes' })], Sequential);\n    return Sequential;\n    var Sequential_1;\n}(training_1.Model);\nexports.Sequential = Sequential;\ngeneric_utils.ClassNameMap.register('Sequential', Sequential);\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/models.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/optimizers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/optimizers.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar K = __webpack_require__(/*! ./backend/tfjs_backend */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\");\nvar errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nvar generic_utils_1 = __webpack_require__(/*! ./utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar LayersOptimizer = function () {\n    function LayersOptimizer(config) {\n        if (config instanceof tfjs_core_1.Optimizer) {\n            this.createdFromCoreOptimizer = true;\n            this.constructFromCoreOptimizer(config);\n        } else {\n            this.createdFromCoreOptimizer = false;\n            this.clipnorm = config.clipnorm;\n            this.clipvalue = config.clipvalue;\n            this.constructFromConfig(config);\n        }\n    }\n    LayersOptimizer.prototype.getConfig = function () {\n        if (this.createdFromCoreOptimizer) {\n            throw new errors_1.NotImplementedError('getConfig() for a LayersOptimizer constructed from a core ' + 'Optimizer is not supported yet.');\n        }\n        var config = {};\n        if (this.clipnorm != null) {\n            config['clipnorm'] = this.clipnorm;\n        }\n        if (this.clipvalue != null) {\n            config['clipvalue'] = this.clipvalue;\n        }\n        return config;\n    };\n    LayersOptimizer.prototype.updateVariables = function (lossFn, params) {\n        var variables = params.map(function (param) {\n            return param.read();\n        });\n        return this.optimizer.minimize(lossFn, true, variables);\n    };\n    LayersOptimizer.fromConfig = function (cls, config) {\n        return new cls(config);\n    };\n    return LayersOptimizer;\n}();\nexports.LayersOptimizer = LayersOptimizer;\nvar SGD = function (_super) {\n    __extends(SGD, _super);\n    function SGD(config) {\n        return _super.call(this, config) || this;\n    }\n    SGD.prototype.constructFromConfig = function (config) {\n        this.lr = config.lr == null ? 0.01 : config.lr;\n        if (this.lr < 0) {\n            throw new errors_1.ValueError(\"Invalid lr (\" + this.lr + \"). Must be >= 0 or undefined.\");\n        }\n        this.momentum = config.momentum == null ? 0.0 : config.momentum;\n        if (this.momentum < 0) {\n            throw new errors_1.ValueError(\"Invalid momentum (\" + this.momentum + \"). Must be >= 0 or undefined.\");\n        }\n        if (this.momentum !== 0) {\n            throw new errors_1.NotImplementedError('SGD momentum is not implemented yet.');\n        }\n        this.decay = config.decay == null ? 0.0 : config.decay;\n        if (this.decay < 0) {\n            throw new errors_1.ValueError(\"Invalid decay (\" + this.decay + \"). Must be >= 0 or undefined.\");\n        }\n        if (this.decay !== 0) {\n            throw new errors_1.NotImplementedError('SGD decay is not implemented yet');\n        }\n        this.nesterov = config.nesterov == null ? false : config.nesterov;\n        if (this.nesterov !== false) {\n            throw new errors_1.NotImplementedError('SGD nesterov is not implemented yet');\n        }\n        this.optimizer = tfjs_core_1.train.sgd(this.lr);\n    };\n    SGD.prototype.constructFromCoreOptimizer = function (optimizer) {\n        if (!(optimizer instanceof tfjs_core_1.SGDOptimizer)) {\n            throw new errors_1.ValueError('Cannot construct SGD from a non-SGD core optimizer');\n        }\n        this.optimizer = optimizer;\n    };\n    SGD.prototype.getConfig = function () {\n        var config = {\n            lr: this.lr,\n            momentum: this.momentum,\n            decay: this.decay,\n            nestorv: this.nesterov\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return SGD;\n}(LayersOptimizer);\nexports.SGD = SGD;\ngeneric_utils_1.ClassNameMap.register('SGD', SGD);\nvar Adam = function (_super) {\n    __extends(Adam, _super);\n    function Adam(config) {\n        return _super.call(this, config) || this;\n    }\n    Adam.prototype.constructFromConfig = function (config) {\n        this.lr = config.lr == null ? 0.001 : config.lr;\n        this.beta1 = config.beta_1 == null ? 0.9 : config.beta_1;\n        this.beta2 = config.beta_2 == null ? 0.999 : config.beta_2;\n        this.epsilon = config.epsilon == null ? K.epsilon() : config.epsilon;\n        this.decay = config.decay == null ? 0 : config.decay;\n        if (this.decay !== 0.0) {\n            throw new errors_1.NotImplementedError('Adam decay is not implemented yet');\n        }\n        this.amsgrad = config.amsgrad == null ? false : config.amsgrad;\n        if (this.amsgrad !== false) {\n            throw new errors_1.NotImplementedError('Adam amsgrad is not implemented yet');\n        }\n        this.optimizer = tfjs_core_1.train.adam(this.lr, this.beta1, this.beta2, this.epsilon);\n    };\n    Adam.prototype.constructFromCoreOptimizer = function (optimizer) {\n        if (!(optimizer instanceof tfjs_core_1.AdamOptimizer)) {\n            throw new errors_1.ValueError('Cannot construct Adam from a non-Adam core optimizer');\n        }\n        this.optimizer = optimizer;\n    };\n    Adam.prototype.getConfig = function () {\n        var config = {\n            lr: this.lr,\n            beta1: this.beta1,\n            beta2: this.beta2,\n            decay: this.decay,\n            epsilon: this.epsilon,\n            amsgrad: this.amsgrad\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return Adam;\n}(LayersOptimizer);\nexports.Adam = Adam;\ngeneric_utils_1.ClassNameMap.register('Adam', Adam);\nvar RMSProp = function (_super) {\n    __extends(RMSProp, _super);\n    function RMSProp(config) {\n        return _super.call(this, config) || this;\n    }\n    RMSProp.prototype.constructFromConfig = function (config) {\n        this.lr = config.lr == null ? 0.001 : config.lr;\n        this.rho = config.rho == null ? 0.9 : config.rho;\n        this.epsilon = config.epsilon == null ? K.epsilon() : config.epsilon;\n        if (config.decay != null) {\n            throw new errors_1.NotImplementedError('RMSProp decay is not implemented yet');\n        }\n        this.optimizer = tfjs_core_1.train.rmsprop(this.lr, this.rho, null, this.epsilon);\n    };\n    RMSProp.prototype.constructFromCoreOptimizer = function (optimizer) {\n        if (!(optimizer instanceof tfjs_core_1.RMSPropOptimizer)) {\n            throw new errors_1.ValueError('Cannot construct RMSProp from a non-RMSProp core optimizer');\n        }\n        this.optimizer = optimizer;\n    };\n    RMSProp.prototype.getConfig = function () {\n        var config = {\n            lr: this.lr,\n            rho: this.rho,\n            decay: this.decay,\n            epsilon: this.epsilon\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return RMSProp;\n}(LayersOptimizer);\nexports.RMSProp = RMSProp;\ngeneric_utils_1.ClassNameMap.register('RMSProp', RMSProp);\nvar Adagrad = function (_super) {\n    __extends(Adagrad, _super);\n    function Adagrad(config) {\n        return _super.call(this, config) || this;\n    }\n    Adagrad.prototype.constructFromConfig = function (config) {\n        this.lr = config.lr == null ? 0.01 : config.lr;\n        this.epsilon = config.epsilon == null ? K.epsilon() : config.epsilon;\n        this.decay = config.decay == null ? 0 : config.decay;\n        if (this.decay !== 0) {\n            throw new errors_1.NotImplementedError('Adagrad decay is not implemented yet');\n        }\n        this.optimizer = tfjs_core_1.train.adagrad(this.lr);\n    };\n    Adagrad.prototype.constructFromCoreOptimizer = function (optimizer) {\n        if (!(optimizer instanceof tfjs_core_1.AdagradOptimizer)) {\n            throw new errors_1.ValueError('Cannot construct Adagrad from a non-Adagrad core optimizer');\n        }\n        this.optimizer = optimizer;\n    };\n    Adagrad.prototype.getConfig = function () {\n        var config = {\n            lr: this.lr,\n            decay: this.decay,\n            epsilon: this.epsilon\n        };\n        var baseConfig = _super.prototype.getConfig.call(this);\n        Object.assign(config, baseConfig);\n        return config;\n    };\n    return Adagrad;\n}(LayersOptimizer);\nexports.Adagrad = Adagrad;\ngeneric_utils_1.ClassNameMap.register('Adagrad', Adagrad);\nexports.adagrad = Adagrad;\nexports.adam = Adam;\nexports.rmsprop = RMSProp;\nexports.sgd = SGD;\nfunction get(identifier) {\n    var coreOptimizerToConstructorMap = {\n        'AdagradOptimizer': Adagrad,\n        'AdamOptimizer': Adam,\n        'RMSPropOptimizer': RMSProp,\n        'SGDOptimizer': SGD\n    };\n    var optimizerMap = { Adagrad: Adagrad, Adam: Adam, RMSProp: RMSProp, SGD: SGD, adagrad: exports.adagrad, adam: exports.adam, rmsprop: exports.rmsprop, sgd: exports.sgd };\n    if (typeof identifier === 'string') {\n        if (identifier in optimizerMap) {\n            return optimizerMap[identifier];\n        }\n        throw new errors_1.ValueError(\"Unknown Optimizer \" + identifier);\n    } else {\n        var coreOptimizerTypeName = identifier.constructor.name;\n        if (coreOptimizerTypeName in coreOptimizerToConstructorMap) {\n            return coreOptimizerToConstructorMap[coreOptimizerTypeName];\n        }\n        throw new errors_1.ValueError(\"Unsupported core optimizer type: \" + coreOptimizerTypeName);\n    }\n}\nexports.get = get;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/optimizers.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/regularizers.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/regularizers.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __extends = this && this.__extends || function () {\n    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n    } || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar K = __webpack_require__(/*! ./backend/tfjs_backend */ \"./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js\");\nvar generic_utils_1 = __webpack_require__(/*! ./utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar Regularizer = function () {\n    function Regularizer() {}\n    return Regularizer;\n}();\nexports.Regularizer = Regularizer;\nvar L1L2 = function (_super) {\n    __extends(L1L2, _super);\n    function L1L2(config) {\n        var _this = _super.call(this) || this;\n        var l1 = config == null || config.l1 == null ? 0.01 : config.l1;\n        var l2 = config == null || config.l2 == null ? 0.01 : config.l2;\n        _this.hasL1 = l1 !== 0;\n        _this.hasL2 = l2 !== 0;\n        _this.l1 = K.getScalar(l1);\n        _this.l2 = K.getScalar(l2);\n        return _this;\n    }\n    L1L2_1 = L1L2;\n    L1L2.prototype.apply = function (x) {\n        var regularization = tfjs_core_1.zeros([1]);\n        if (this.hasL1) {\n            regularization = K.add(regularization, K.sum(K.scalarTimesArray(this.l1, K.abs(x))));\n        }\n        if (this.hasL2) {\n            regularization = K.add(regularization, K.sum(K.scalarTimesArray(this.l2, K.square(x))));\n        }\n        return regularization.asScalar();\n    };\n    L1L2.prototype.getConfig = function () {\n        return { 'l1': this.l1.dataSync()[0], 'l2': this.l2.dataSync()[0] };\n    };\n    L1L2.fromConfig = function (cls, config) {\n        return new L1L2_1({ l1: config.l1, l2: config.l2 });\n    };\n    L1L2 = L1L2_1 = __decorate([tfjs_core_1.doc({ heading: 'Regularizers', namespace: 'regularizers' })], L1L2);\n    return L1L2;\n    var L1L2_1;\n}(Regularizer);\nexports.L1L2 = L1L2;\ngeneric_utils_1.ClassNameMap.register('L1L2', L1L2);\nfunction l1(config) {\n    return new L1L2({ l1: config != null ? config.l1 : null, l2: 0 });\n}\nexports.l1 = l1;\nfunction l2(config) {\n    return new L1L2({ l2: config != null ? config.l2 : null, l1: 0 });\n}\nexports.l2 = l2;\nexports.REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'l1l2': 'L1L2'\n};\nfunction serializeRegularizer(constraint) {\n    return generic_utils_1.serializeKerasObject(constraint);\n}\nexports.serializeRegularizer = serializeRegularizer;\nfunction deserializeRegularizer(config, customObjects) {\n    if (customObjects === void 0) {\n        customObjects = {};\n    }\n    return generic_utils_1.deserializeKerasObject(config, generic_utils_1.ClassNameMap.getMap().pythonClassNameMap, customObjects, 'regularizer');\n}\nexports.deserializeRegularizer = deserializeRegularizer;\nfunction getRegularizer(identifier) {\n    if (identifier == null) {\n        return null;\n    }\n    if (typeof identifier === 'string') {\n        var className = identifier in exports.REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? exports.REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n        var config = { className: className, config: {} };\n        return deserializeRegularizer(config);\n    } else if (identifier instanceof Regularizer) {\n        return identifier;\n    } else {\n        return deserializeRegularizer(identifier);\n    }\n}\nexports.getRegularizer = getRegularizer;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/regularizers.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/types.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/types.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar common_1 = __webpack_require__(/*! ./common */ \"./node_modules/@tensorflow/tfjs-layers/dist/common.js\");\nvar DType;\n(function (DType) {\n    DType[\"float32\"] = \"float32\";\n    DType[\"int32\"] = \"int32\";\n    DType[\"bool\"] = \"bool\";\n})(DType = exports.DType || (exports.DType = {}));\nvar _nextUniqueTensorId = 0;\nvar SymbolicTensor = function () {\n    function SymbolicTensor(dtype, shape, sourceLayer, inputs, callArgs, name, outputTensorIndex) {\n        this.dtype = dtype;\n        this.shape = shape;\n        this.sourceLayer = sourceLayer;\n        this.inputs = inputs;\n        this.callArgs = callArgs;\n        this.outputTensorIndex = outputTensorIndex;\n        this.id = _nextUniqueTensorId++;\n        if (name != null) {\n            this.name = common_1.getUniqueTensorName(name);\n        }\n    }\n    SymbolicTensor = __decorate([tfjs_core_1.doc({ heading: 'Models', 'subheading': 'Classes' })], SymbolicTensor);\n    return SymbolicTensor;\n}();\nexports.SymbolicTensor = SymbolicTensor;\nvar ConcreteTensor = function () {\n    function ConcreteTensor(val, name) {\n        this.dtype = DType.float32;\n        this.shape = val.shape;\n        this.val = val;\n        this.id = _nextUniqueTensorId++;\n        if (name != null) {\n            this.name = common_1.getUniqueTensorName(name);\n        }\n    }\n    ConcreteTensor.prototype.value = function () {\n        return this.val;\n    };\n    return ConcreteTensor;\n}();\nexports.ConcreteTensor = ConcreteTensor;\nfunction checkShapesMatch(x, y) {\n    if (x.shape.toString() !== y.shape.toString()) {\n        throw new Error('Shape mismatch: ' + JSON.stringify(x.shape) + ' vs. ' + JSON.stringify(y.shape));\n    }\n}\nfunction getValueTensor(val) {\n    return val instanceof ConcreteTensor ? val.value() : val;\n}\nvar DEFAULT_VARIABLE_NAME_PREFIX = 'Variable';\nvar LayerVariable = function () {\n    function LayerVariable(val, dtype, name, trainable, constraint) {\n        if (dtype === void 0) {\n            dtype = DType.float32;\n        }\n        if (name === void 0) {\n            name = DEFAULT_VARIABLE_NAME_PREFIX;\n        }\n        if (trainable === void 0) {\n            trainable = true;\n        }\n        if (constraint === void 0) {\n            constraint = null;\n        }\n        this.dtype = dtype == null ? DType.float32 : dtype;\n        this.shape = val.shape;\n        this.id = _nextUniqueTensorId++;\n        this.name = common_1.getUniqueTensorName(name == null ? DEFAULT_VARIABLE_NAME_PREFIX : name);\n        this.trainable = trainable;\n        this.constraint = constraint;\n        this.val = tfjs_core_1.variable(getValueTensor(val), this.trainable, this.name, this.dtype);\n    }\n    LayerVariable.prototype.read = function () {\n        return this.val;\n    };\n    LayerVariable.prototype.write = function (newVal) {\n        checkShapesMatch(this.val, newVal);\n        this.val.assign(getValueTensor(newVal));\n        if (this.constraint != null) {\n            this.val.assign(this.constraint.apply(this.val));\n        }\n        return this;\n    };\n    return LayerVariable;\n}();\nexports.LayerVariable = LayerVariable;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/types.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/utils/conv_utils.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/utils/conv_utils.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nvar generic_utils_1 = __webpack_require__(/*! ./generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nvar math_utils_1 = __webpack_require__(/*! ./math_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/math_utils.js\");\nfunction normalizeArray(value, n, name) {\n    if (typeof value === 'number') {\n        return generic_utils_1.pyListRepeat(value, n);\n    } else {\n        if (value.length !== n) {\n            throw new errors_1.ValueError(\"The \" + name + \" argument must be a tuple of \" + n + \" integers. Received: \" + (value.length + \" elements.\"));\n        }\n        for (var i = 0; i < n; ++i) {\n            var singleValue = value[i];\n            if (!math_utils_1.isInteger(singleValue)) {\n                throw new errors_1.ValueError(\"The \" + name + \" argument must be a tuple of \" + n + \" integers. Received: \" + (JSON.stringify(value) + \" including a non-integer number \") + (\"\" + singleValue));\n            }\n        }\n        return value;\n    }\n}\nexports.normalizeArray = normalizeArray;\nfunction convOutputLength(inputLength, fliterSize, padding, stride, dilation) {\n    if (dilation === void 0) {\n        dilation = 1;\n    }\n    if (inputLength == null) {\n        return inputLength;\n    }\n    var dilatedFilterSize = fliterSize + (fliterSize - 1) * (dilation - 1);\n    var outputLength;\n    if (padding === 'same') {\n        outputLength = inputLength;\n    } else {\n        outputLength = inputLength - dilatedFilterSize + 1;\n    }\n    return Math.floor((outputLength + stride - 1) / stride);\n}\nexports.convOutputLength = convOutputLength;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/utils/conv_utils.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\nvar errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nvar types_1 = __webpack_require__(/*! ../types */ \"./node_modules/@tensorflow/tfjs-layers/dist/types.js\");\nfunction pyListRepeat(value, numValues) {\n    if (Array.isArray(value)) {\n        var newArray = [];\n        for (var i = 0; i < numValues; i++) {\n            newArray = newArray.concat(value);\n        }\n        return newArray;\n    } else {\n        var newArray = new Array(numValues);\n        newArray.fill(value);\n        return newArray;\n    }\n}\nexports.pyListRepeat = pyListRepeat;\nfunction pyGetAttr(obj, attrName, defaultValue) {\n    if (attrName in obj) {\n        return obj[attrName];\n    }\n    if (_.isUndefined(defaultValue)) {\n        throw new errors_1.AttributeError('pyGetAttr: Attempting to get attribute ' + attrName + 'with no default value defined');\n    }\n    return defaultValue;\n}\nexports.pyGetAttr = pyGetAttr;\nfunction pyNormalizeArrayIndex(x, index) {\n    if (x == null || index == null) {\n        throw new errors_1.ValueError(\"Must provide a valid array and index for \" + (\"pyNormalizeArrayIndex(). Got array \" + x + \" and index \" + index + \".\"));\n    }\n    var errMsg = \"Index \" + index + \" out of range for array of length \" + x.length;\n    if (index < 0) {\n        if (index < -x.length) {\n            throw new errors_1.IndexError(errMsg);\n        }\n        return x.length + index;\n    }\n    if (index >= x.length) {\n        throw new errors_1.IndexError(errMsg);\n    }\n    return index;\n}\nexports.pyNormalizeArrayIndex = pyNormalizeArrayIndex;\nfunction assert(val, message) {\n    if (!val) {\n        throw new errors_1.AssertionError(message);\n    }\n}\nexports.assert = assert;\nfunction count(array, refernce) {\n    var counter = 0;\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n        var item = array_1[_i];\n        if (item === refernce) {\n            counter++;\n        }\n    }\n    return counter;\n}\nexports.count = count;\nvar ClassNameMap = function () {\n    function ClassNameMap() {\n        this.pythonClassNameMap = {};\n    }\n    ClassNameMap.getMap = function () {\n        if (ClassNameMap.instance == null) {\n            ClassNameMap.instance = new ClassNameMap();\n        }\n        return ClassNameMap.instance;\n    };\n    ClassNameMap.register = function (className, cls) {\n        this.getMap().pythonClassNameMap[className] = [cls, cls.fromConfig];\n    };\n    return ClassNameMap;\n}();\nexports.ClassNameMap = ClassNameMap;\nvar SerializableEnumRegistry = function () {\n    function SerializableEnumRegistry() {\n        this.enumRegistry = {};\n    }\n    SerializableEnumRegistry.getMap = function () {\n        if (SerializableEnumRegistry.instance == null) {\n            SerializableEnumRegistry.instance = new SerializableEnumRegistry();\n        }\n        return SerializableEnumRegistry.instance;\n    };\n    SerializableEnumRegistry.register = function (fieldName, enumCls) {\n        if (SerializableEnumRegistry.contains(fieldName)) {\n            throw new errors_1.ValueError(\"Attempting to register a repeated enum: \" + fieldName);\n        }\n        this.getMap().enumRegistry[fieldName] = enumCls;\n    };\n    SerializableEnumRegistry.contains = function (fieldName) {\n        return fieldName in this.getMap().enumRegistry;\n    };\n    SerializableEnumRegistry.lookup = function (fieldName, value) {\n        return this.getMap().enumRegistry[fieldName][value];\n    };\n    SerializableEnumRegistry.reverseLookup = function (fieldName, value) {\n        var enumMap = this.getMap().enumRegistry[fieldName];\n        for (var candidateString in enumMap) {\n            if (enumMap[candidateString] === value) {\n                return candidateString;\n            }\n        }\n        throw new errors_1.ValueError(\"Could not find serialization string for \" + value);\n    };\n    return SerializableEnumRegistry;\n}();\nexports.SerializableEnumRegistry = SerializableEnumRegistry;\nfunction singletonOrArray(xs) {\n    if (xs.length === 1) {\n        return xs[0];\n    }\n    return xs;\n}\nexports.singletonOrArray = singletonOrArray;\nfunction toList(x) {\n    if (Array.isArray(x)) {\n        return x;\n    }\n    return [x];\n}\nexports.toList = toList;\nfunction objectListUid(objs) {\n    var objectList = toList(objs);\n    var retVal = '';\n    for (var _i = 0, objectList_1 = objectList; _i < objectList_1.length; _i++) {\n        var obj = objectList_1[_i];\n        if (obj.id == null) {\n            throw new errors_1.ValueError(\"Object \" + obj + \" passed to objectListUid without an id\");\n        }\n        if (retVal !== '') {\n            retVal = retVal + ', ';\n        }\n        retVal = retVal + Math.abs(obj.id);\n    }\n    return retVal;\n}\nexports.objectListUid = objectListUid;\nfunction isArrayOfShapes(x) {\n    return Array.isArray(x) && Array.isArray(x[0]);\n}\nexports.isArrayOfShapes = isArrayOfShapes;\nfunction normalizeShapeList(x) {\n    if (x.length === 0) {\n        return [];\n    }\n    if (!Array.isArray(x[0])) {\n        return [x];\n    }\n    return x;\n}\nexports.normalizeShapeList = normalizeShapeList;\nfunction isAllNullOrUndefined(iterableOrElement) {\n    return _.every(toList(iterableOrElement), function (x) {\n        return _.isNull(x) || _.isUndefined(x);\n    });\n}\nexports.isAllNullOrUndefined = isAllNullOrUndefined;\nfunction toSnakeCase(name) {\n    var intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');\n    var insecure = intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n    if (insecure[0] !== '_') {\n        return insecure;\n    }\n    return 'private' + insecure;\n}\nexports.toSnakeCase = toSnakeCase;\nfunction toCamelCase(identifier) {\n    if (identifier.length <= 1) {\n        return identifier;\n    }\n    if (identifier.indexOf('_') === -1) {\n        return identifier;\n    }\n    return identifier.replace(/[_]+(\\w|$)/g, function (m, p1) {\n        return p1.toUpperCase();\n    });\n}\nexports.toCamelCase = toCamelCase;\nvar _GLOBAL_CUSTOM_OBJECTS = {};\nfunction serializeKerasObject(instance) {\n    if (instance === null || instance === undefined) {\n        return null;\n    }\n    if (instance.getConfig != null) {\n        return { className: instance.constructor.name, config: instance.getConfig() };\n    }\n    if (instance.name != null) {\n        return instance.name;\n    }\n    throw new errors_1.ValueError(\"Cannot serialize \" + instance);\n}\nexports.serializeKerasObject = serializeKerasObject;\nfunction deserializeKerasObject(identifier, moduleObjects, customObjects, printableModuleName) {\n    if (moduleObjects === void 0) {\n        moduleObjects = {};\n    }\n    if (customObjects === void 0) {\n        customObjects = {};\n    }\n    if (printableModuleName === void 0) {\n        printableModuleName = 'object';\n    }\n    if (typeof identifier === 'string') {\n        var functionName = identifier;\n        var fn = void 0;\n        if (functionName in customObjects) {\n            fn = customObjects[functionName];\n        } else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n            fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n        } else {\n            fn = moduleObjects[functionName];\n            if (fn == null) {\n                throw new errors_1.ValueError(\"Unknown \" + printableModuleName + \": \" + identifier);\n            }\n        }\n        return fn;\n    } else {\n        var config = identifier;\n        if (config.className == null || config.config == null) {\n            throw new errors_1.ValueError(printableModuleName + \": Improper config format: \" + (JSON.stringify(config) + \".\\n\") + \"'className' and 'config' must set.\");\n        }\n        var className = config.className;\n        var cls = void 0,\n            fromConfig = void 0;\n        if (_.has(customObjects, className)) {\n            _a = customObjects.get(className), cls = _a[0], fromConfig = _a[1];\n        } else if (_.has(_GLOBAL_CUSTOM_OBJECTS, className)) {\n            _b = _GLOBAL_CUSTOM_OBJECTS.className, cls = _b[0], fromConfig = _b[1];\n        } else if (_.has(moduleObjects, className)) {\n            _c = moduleObjects[className], cls = _c[0], fromConfig = _c[1];\n        }\n        if (cls == null) {\n            throw new errors_1.ValueError(\"Unknown \" + printableModuleName + \": \" + className);\n        }\n        if (fromConfig != null) {\n            var customObjectsCombined = {};\n            for (var _i = 0, _d = Object.keys(_GLOBAL_CUSTOM_OBJECTS); _i < _d.length; _i++) {\n                var key = _d[_i];\n                customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n            }\n            for (var _e = 0, _f = Object.keys(customObjects); _e < _f.length; _e++) {\n                var key = _f[_e];\n                customObjectsCombined[key] = customObjects[key];\n            }\n            var nestedConfig = config.config;\n            nestedConfig.customObjects = customObjectsCombined;\n            var backupCustomObjects = __assign({}, _GLOBAL_CUSTOM_OBJECTS);\n            for (var _g = 0, _h = Object.keys(customObjects); _g < _h.length; _g++) {\n                var key = _h[_g];\n                _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n            }\n            var returnObj = fromConfig(cls, config.config);\n            _GLOBAL_CUSTOM_OBJECTS = __assign({}, backupCustomObjects);\n            return returnObj;\n        } else {\n            var backupCustomObjects = __assign({}, _GLOBAL_CUSTOM_OBJECTS);\n            for (var _j = 0, _k = Object.keys(customObjects); _j < _k.length; _j++) {\n                var key = _k[_j];\n                _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n            }\n            var returnObj = new cls(config.config);\n            _GLOBAL_CUSTOM_OBJECTS = __assign({}, backupCustomObjects);\n            return returnObj;\n        }\n    }\n    var _a, _b, _c;\n}\nexports.deserializeKerasObject = deserializeKerasObject;\nfunction getExactlyOneTensor(xs) {\n    var x;\n    if (Array.isArray(xs)) {\n        if (xs.length !== 1) {\n            throw new errors_1.ValueError(\"Expected Tensor length to be 1; got \" + xs.length);\n        }\n        x = xs[0];\n    } else {\n        x = xs;\n    }\n    return x;\n}\nexports.getExactlyOneTensor = getExactlyOneTensor;\nfunction getExactlyOneShape(shapes) {\n    if (Array.isArray(shapes) && Array.isArray(shapes[0])) {\n        if (shapes.length === 1) {\n            shapes = shapes;\n            return shapes[0];\n        } else {\n            throw new errors_1.ValueError(\"Expected exactly 1 Shape; got \" + shapes.length);\n        }\n    } else {\n        return shapes;\n    }\n}\nexports.getExactlyOneShape = getExactlyOneShape;\nfunction numberCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\nexports.numberCompare = numberCompare;\nfunction reverseNumberCompare(a, b) {\n    return -1 * numberCompare(a, b);\n}\nexports.reverseNumberCompare = reverseNumberCompare;\nfunction stringToDType(dtype) {\n    switch (dtype) {\n        case 'float32':\n            return types_1.DType.float32;\n        default:\n            throw new errors_1.ValueError(\"Invalid dtype: \" + dtype);\n    }\n}\nexports.stringToDType = stringToDType;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/utils/math_utils.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/utils/math_utils.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar tfjs_core_1 = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nfunction isInteger(x) {\n    return x === parseInt(x.toString(), 10);\n}\nexports.isInteger = isInteger;\nfunction arrayProd(array, begin, end) {\n    if (begin == null) {\n        begin = 0;\n    }\n    if (end == null) {\n        end = array.length;\n    }\n    var prod = 1;\n    for (var i = begin; i < end; ++i) {\n        prod *= array[i];\n    }\n    return prod;\n}\nexports.arrayProd = arrayProd;\nfunction toArray1D(array) {\n    array = Array.isArray(array) ? new Float32Array(array) : array;\n    return tfjs_core_1.tensor1d(array);\n}\nfunction min(array) {\n    return tfc.min(toArray1D(array)).dataSync()[0];\n}\nexports.min = min;\nfunction max(array) {\n    return tfc.max(toArray1D(array)).dataSync()[0];\n}\nexports.max = max;\nfunction sum(array) {\n    return tfc.sum(toArray1D(array)).dataSync()[0];\n}\nexports.sum = sum;\nfunction mean(array) {\n    return sum(array) / array.length;\n}\nexports.mean = mean;\nfunction variance(array) {\n    var demeaned = tfc.sub(toArray1D(array), tfjs_core_1.scalar(mean(array)));\n    var sumSquare = tfc.sum(tfc.mulStrict(demeaned, demeaned)).dataSync()[0];\n    return sumSquare / array.length;\n}\nexports.variance = variance;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/utils/math_utils.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/utils/serialization_utils.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/utils/serialization_utils.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar errors_1 = __webpack_require__(/*! ../errors */ \"./node_modules/@tensorflow/tfjs-layers/dist/errors.js\");\nvar generic_utils = __webpack_require__(/*! ../utils/generic_utils */ \"./node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js\");\nfunction isArrayItemInputOrOutputName(key, index, value) {\n    return (key === 'inboundNodes' || key === 'outputLayers' || key === 'inputLayers') && index === 0 && typeof value === 'string';\n}\nfunction convertPythonicToTs(pythonicConfig, key) {\n    if (pythonicConfig === null) {\n        return null;\n    } else if (typeof pythonicConfig === 'string') {\n        return generic_utils.toCamelCase(pythonicConfig);\n    } else if (typeof pythonicConfig === 'number' || typeof pythonicConfig === 'boolean') {\n        return pythonicConfig;\n    } else if (pythonicConfig instanceof Array) {\n        var tsArray = [];\n        var arrayLength = pythonicConfig.length;\n        for (var i = 0; i < arrayLength; ++i) {\n            var item = pythonicConfig[i];\n            if (isArrayItemInputOrOutputName(key, i, item)) {\n                tsArray.push(item);\n            } else {\n                tsArray.push(convertPythonicToTs(item, key));\n            }\n        }\n        return tsArray;\n    } else {\n        var tsDict = {};\n        for (var _i = 0, _a = Object.keys(pythonicConfig); _i < _a.length; _i++) {\n            var pythonicKey = _a[_i];\n            var pythonicValue = pythonicConfig[pythonicKey];\n            if (pythonicKey === 'name' && typeof pythonicValue === 'string') {\n                tsDict[pythonicKey] = pythonicValue;\n            } else {\n                var tsKey = generic_utils.toCamelCase(pythonicKey);\n                if (generic_utils.SerializableEnumRegistry.contains(pythonicKey)) {\n                    var enumValue = generic_utils.SerializableEnumRegistry.lookup(pythonicKey, pythonicValue);\n                    if (enumValue != null) {\n                        tsDict[tsKey] = enumValue;\n                    } else {\n                        throw new errors_1.ValueError(\"Unkown value \" + pythonicValue + \" for \" + pythonicKey + \" Enum\");\n                    }\n                } else {\n                    tsDict[tsKey] = convertPythonicToTs(pythonicValue, tsKey);\n                }\n            }\n        }\n        return tsDict;\n    }\n}\nexports.convertPythonicToTs = convertPythonicToTs;\nfunction convertTsToPythonic(tsConfig, key) {\n    if (tsConfig === null || tsConfig === undefined) {\n        return null;\n    } else if (typeof tsConfig === 'string') {\n        return generic_utils.toSnakeCase(tsConfig);\n    } else if (typeof tsConfig === 'number' || typeof tsConfig === 'boolean') {\n        return tsConfig;\n    } else if (tsConfig instanceof Array) {\n        var pyArray = [];\n        var arrayLength = tsConfig.length;\n        for (var i = 0; i < arrayLength; ++i) {\n            var item = tsConfig[i];\n            if (isArrayItemInputOrOutputName(key, i, item)) {\n                pyArray.push(item);\n            } else {\n                pyArray.push(convertTsToPythonic(item, key));\n            }\n        }\n        return pyArray;\n    } else {\n        var pyDict = {};\n        for (var _i = 0, _a = Object.keys(tsConfig); _i < _a.length; _i++) {\n            var tsKey = _a[_i];\n            var tsValue = tsConfig[tsKey];\n            var pyKey = generic_utils.toSnakeCase(tsKey);\n            if ((tsKey === 'name' || tsKey === 'className') && typeof tsValue === 'string') {\n                pyDict[pyKey] = tsValue;\n            } else {\n                if (generic_utils.SerializableEnumRegistry.contains(pyKey)) {\n                    var enumString = generic_utils.SerializableEnumRegistry.reverseLookup(pyKey, tsValue);\n                    pyDict[pyKey] = enumString;\n                } else {\n                    pyDict[pyKey] = convertTsToPythonic(tsValue, tsKey);\n                }\n            }\n        }\n        return pyDict;\n    }\n}\nexports.convertTsToPythonic = convertTsToPythonic;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/utils/serialization_utils.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-layers/dist/version.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-layers/dist/version.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar version = '0.1.2';\nexports.version = version;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs-layers/dist/version.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/dist/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\"));\n__export(__webpack_require__(/*! @tensorflow/tfjs-layers */ \"./node_modules/@tensorflow/tfjs-layers/dist/index.js\"));\nvar tfjs_core_1 = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\nvar tfjs_layers_1 = __webpack_require__(/*! @tensorflow/tfjs-layers */ \"./node_modules/@tensorflow/tfjs-layers/dist/index.js\");\nvar version_1 = __webpack_require__(/*! ./version */ \"./node_modules/@tensorflow/tfjs/dist/version.js\");\nexports.version = {\n    'tfjs-core': tfjs_core_1.version_core,\n    'tfjs-layers': tfjs_layers_1.version_layers,\n    'tfjs': version_1.version\n};\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs/dist/index.js?");

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs/dist/version.js":
/*!*******************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs/dist/version.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar version = '0.6.1';\nexports.version = version;\n\n//# sourceURL=webpack:///./node_modules/@tensorflow/tfjs/dist/version.js?");

/***/ }),

/***/ "./node_modules/protobufjs/minimal.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/minimal.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// minimal library entry point.\n\n\n\nmodule.exports = __webpack_require__(/*! ./src/index-minimal */ \"./node_modules/protobufjs/src/index-minimal.js\");\n\n//# sourceURL=webpack:///./node_modules/protobufjs/minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/index-minimal.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/index-minimal.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar protobuf = exports;\n\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer = __webpack_require__(/*! ./writer */ \"./node_modules/protobufjs/src/writer.js\");\nprotobuf.BufferWriter = __webpack_require__(/*! ./writer_buffer */ \"./node_modules/protobufjs/src/writer_buffer.js\");\nprotobuf.Reader = __webpack_require__(/*! ./reader */ \"./node_modules/protobufjs/src/reader.js\");\nprotobuf.BufferReader = __webpack_require__(/*! ./reader_buffer */ \"./node_modules/protobufjs/src/reader_buffer.js\");\n\n// Utility\nprotobuf.util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\nprotobuf.rpc = __webpack_require__(/*! ./rpc */ \"./node_modules/protobufjs/src/rpc.js\");\nprotobuf.roots = __webpack_require__(/*! ./roots */ \"./node_modules/protobufjs/src/roots.js\");\nprotobuf.configure = configure;\n\n/* istanbul ignore next */\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\nfunction configure() {\n  protobuf.Reader._configure(protobuf.BufferReader);\n  protobuf.util._configure();\n}\n\n// Configure serialization\nprotobuf.Writer._configure(protobuf.BufferWriter);\nconfigure();\n\n//# sourceURL=webpack:///./node_modules/protobufjs/src/index-minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/reader.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/reader.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = Reader;\n\nvar util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\nvar BufferReader; // cyclic\n\nvar LongBits = util.LongBits,\n    utf8 = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\nfunction Reader(buffer) {\n\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\n    this.buf = buffer;\n\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\n    this.pos = 0;\n\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\" ? function create_typed_array(buffer) {\n    if (buffer instanceof Uint8Array || Array.isArray(buffer)) return new Reader(buffer);\n    throw Error(\"illegal buffer\");\n}\n/* istanbul ignore next */\n: function create_array(buffer) {\n    if (Array.isArray(buffer)) return new Reader(buffer);\n    throw Error(\"illegal buffer\");\n};\n\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\nReader.create = util.Buffer ? function create_buffer_setup(buffer) {\n    return (Reader.create = function create_buffer(buffer) {\n        return util.Buffer.isBuffer(buffer) ? new BufferReader(buffer)\n        /* istanbul ignore next */\n        : create_array(buffer);\n    })(buffer);\n}\n/* istanbul ignore next */\n: create_array;\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */util.Array.prototype.slice;\n\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\nReader.prototype.uint32 = function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (this.buf[this.pos] & 127) >>> 0;if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n}();\n\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) {\n        // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128) return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;\n        if (this.buf[this.pos++] < 128) return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len) throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128) return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) {\n        // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128) return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len) throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128) return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\n\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\n\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\n\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) {\n    // note that this uses `end`, not `pos`\n    return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;\n}\n\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64() /* this: Reader */{\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len) throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\n\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\n\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len) throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start = this.pos,\n        end = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len) throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n    ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);\n};\n\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len) throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len) throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\nReader.prototype.skipType = function (wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            do {\n                // eslint-disable-line no-constant-condition\n                if ((wireType = this.uint32() & 7) === 4) break;\n                this.skipType(wireType);\n            } while (true);\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function (BufferReader_) {\n    BufferReader = BufferReader_;\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */\"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n\n//# sourceURL=webpack:///./node_modules/protobufjs/src/reader.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/reader_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/reader_buffer.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = __webpack_require__(/*! ./reader */ \"./node_modules/protobufjs/src/reader.js\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\n}\n\n/* istanbul ignore else */\nif (util.Buffer) BufferReader.prototype._slice = util.Buffer.prototype.slice;\n\n/**\r\n * @override\r\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\n\n//# sourceURL=webpack:///./node_modules/protobufjs/src/reader_buffer.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/roots.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/roots.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {};\n\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\n\n//# sourceURL=webpack:///./node_modules/protobufjs/src/roots.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/rpc.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/src/rpc.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\n\nvar rpc = exports;\n\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\n\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\n\nrpc.Service = __webpack_require__(/*! ./rpc/service */ \"./node_modules/protobufjs/src/rpc/service.js\");\n\n//# sourceURL=webpack:///./node_modules/protobufjs/src/rpc.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/rpc/service.js":
/*!****************************************************!*\
  !*** ./node_modules/protobufjs/src/rpc/service.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = Service;\n\nvar util = __webpack_require__(/*! ../util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {TRes} [response] Response message\r\n * @returns {undefined}\r\n */\n\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\n\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\") throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {RPCImpl|null}\r\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request) throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback) return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function () {\n            callback(Error(\"already ended\"));\n        }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(method, requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(), function rpcCallback(err, response) {\n\n            if (err) {\n                self.emit(\"error\", err, method);\n                return callback(err);\n            }\n\n            if (response === null) {\n                self.end( /* endedByRPC */true);\n                return undefined;\n            }\n\n            if (!(response instanceof responseCtor)) {\n                try {\n                    response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                } catch (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n            }\n\n            self.emit(\"data\", response, method);\n            return callback(null, response);\n        });\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function () {\n            callback(err);\n        }, 0);\n        return undefined;\n    }\n};\n\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n\n//# sourceURL=webpack:///./node_modules/protobufjs/src/rpc/service.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/util/longbits.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/util/longbits.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = LongBits;\n\nvar util = __webpack_require__(/*! ../util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\n    this.lo = lo >>> 0;\n\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function () {\n    return 0;\n};\nzero.zzEncode = zero.zzDecode = function () {\n    return this;\n};\nzero.length = function () {\n    return 1;\n};\n\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0) return zero;\n    var sign = value < 0;\n    if (sign) value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295) hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\") return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long) value = util.Long.fromString(value);else return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi >>> 0;\n        if (!lo) hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n    /* istanbul ignore next */\n    : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash) return zero;\n    return new LongBits((charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0, (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0);\n};\n\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);\n};\n\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask = this.hi >> 31;\n    this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo = (this.lo << 1 ^ mask) >>> 0;\n    return this;\n};\n\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi = (this.hi >>> 1 ^ mask) >>> 0;\n    return this;\n};\n\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\nLongBits.prototype.length = function length() {\n    var part0 = this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 = this.hi >>> 24;\n    return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;\n};\n\n//# sourceURL=webpack:///./node_modules/protobufjs/src/util/longbits.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/util/minimal.js":
/*!*****************************************************!*\
  !*** ./node_modules/protobufjs/src/util/minimal.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\n\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = __webpack_require__(/*! @protobufjs/aspromise */ \"./node_modules/@protobufjs/aspromise/index.js\");\n\n// converts to / from base64 encoded strings\nutil.base64 = __webpack_require__(/*! @protobufjs/base64 */ \"./node_modules/@protobufjs/base64/index.js\");\n\n// base class of rpc.Service\nutil.EventEmitter = __webpack_require__(/*! @protobufjs/eventemitter */ \"./node_modules/@protobufjs/eventemitter/index.js\");\n\n// float handling accross browsers\nutil.float = __webpack_require__(/*! @protobufjs/float */ \"./node_modules/@protobufjs/float/index.js\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = __webpack_require__(/*! @protobufjs/inquire */ \"./node_modules/@protobufjs/inquire/index.js\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = __webpack_require__(/*! @protobufjs/utf8 */ \"./node_modules/@protobufjs/utf8/index.js\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = __webpack_require__(/*! @protobufjs/pool */ \"./node_modules/@protobufjs/pool/index.js\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = __webpack_require__(/*! ./longbits */ \"./node_modules/protobufjs/src/util/longbits.js\");\n\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */[]; // used on prototypes\n\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */{}; // used on prototypes\n\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n * @const\r\n */\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\n\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\nutil.isset =\n\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\n\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\nutil.Buffer = function () {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n}();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === \"undefined\" ? sizeOrArray : new Uint8Array(sizeOrArray);\n};\n\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\n\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\nutil.Long = /* istanbul ignore next */global.dcodeIO && /* istanbul ignore next */global.dcodeIO.Long || util.inquire(\"long\");\n\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\nutil.longToHash = function longToHash(value) {\n    return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;\n};\n\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long) return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\nfunction merge(dst, src, ifNotSet) {\n    // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i) if (dst[keys[i]] === undefined || !ifNotSet) dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError)) return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function () {\n                return message;\n            } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);else Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties) merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function () {\n            return name;\n        } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\n\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\n\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i) fieldMap[fieldNames[i]] = 1;\n\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\n    return function () {\n        // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i) if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null) return keys[i];\n    };\n};\n\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\n    return function (name) {\n        for (var i = 0; i < fieldNames.length; ++i) if (fieldNames[i] !== name) delete this[fieldNames[i]];\n    };\n};\n\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\nutil._configure = function () {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n    /* istanbul ignore next */\n    function Buffer_from(value, encoding) {\n        return new Buffer(value, encoding);\n    };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n    /* istanbul ignore next */\n    function Buffer_allocUnsafe(size) {\n        return new Buffer(size);\n    };\n};\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/protobufjs/src/util/minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/writer.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/writer.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = Writer;\n\nvar util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits = util.LongBits,\n    base64 = util.base64,\n    utf8 = util.utf8;\n\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\nfunction Op(fn, len, val) {\n\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\n    this.fn = fn;\n\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\n    this.len = len;\n\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\n    this.next = undefined;\n\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @ignore\r\n */\nfunction State(writer) {\n\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\n    this.head = writer.head;\n\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\n    this.tail = writer.tail;\n\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\n    this.len = writer.len;\n\n    /**\r\n     * Next state.\r\n     * @type {State|null}\r\n     */\n    this.next = writer.states;\n}\n\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\nfunction Writer() {\n\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\n    this.len = 0;\n\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\n    this.tail = this.head;\n\n    /**\r\n     * Linked forked states.\r\n     * @type {Object|null}\r\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\nWriter.create = util.Buffer ? function create_buffer_setup() {\n    return (Writer.create = function create_buffer() {\n        return new BufferWriter();\n    })();\n}\n/* istanbul ignore next */\n: function create_array() {\n    return new Writer();\n};\n\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array) Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;\n    return this;\n};\n\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n    : this.uint32(value);\n};\n\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos] = val & 255;\n    buf[pos + 1] = val >>> 8 & 255;\n    buf[pos + 2] = val >>> 16 & 255;\n    buf[pos + 3] = val >>> 24;\n}\n\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {\n    buf.set(val, pos); // also works for plain array values\n}\n/* istanbul ignore next */\n: function writeBytes_for(val, buf, pos) {\n    for (var i = 0; i < val.length; ++i) buf[pos + i] = val[i];\n};\n\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len) return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);\n};\n\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head = this.states.head;\n        this.tail = this.states.tail;\n        this.len = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len = 0;\n    }\n    return this;\n};\n\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next,\n        // skip noop\n    buf = this.constructor.alloc(this.len),\n        pos = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function (BufferWriter_) {\n    BufferWriter = BufferWriter_;\n};\n\n//# sourceURL=webpack:///./node_modules/protobufjs/src/writer.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/writer_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/writer_buffer.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = __webpack_require__(/*! ./writer */ \"./node_modules/protobufjs/src/writer.js\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\nvar Buffer = util.Buffer;\n\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\nBufferWriter.alloc = function alloc_buffer(size) {\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\n};\n\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\" ? function writeBytesBuffer_set(val, buf, pos) {\n    buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n    // also works for plain array values\n}\n/* istanbul ignore next */\n: function writeBytesBuffer_copy(val, buf, pos) {\n    if (val.copy) // Buffer values\n        val.copy(buf, pos, 0, val.length);else for (var i = 0; i < val.length;) // plain array values\n    buf[pos++] = val[i++];\n};\n\n/**\r\n * @override\r\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value)) value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len) this._push(writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);else buf.utf8Write(val, pos);\n}\n\n/**\r\n * @override\r\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = Buffer.byteLength(value);\n    this.uint32(len);\n    if (len) this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\n\n//# sourceURL=webpack:///./node_modules/protobufjs/src/writer_buffer.js?");

/***/ }),

/***/ "./node_modules/seedrandom/index.js":
/*!******************************************!*\
  !*** ./node_modules/seedrandom/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = __webpack_require__(/*! ./lib/alea */ \"./node_modules/seedrandom/lib/alea.js\");\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = __webpack_require__(/*! ./lib/xor128 */ \"./node_modules/seedrandom/lib/xor128.js\");\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = __webpack_require__(/*! ./lib/xorwow */ \"./node_modules/seedrandom/lib/xorwow.js\");\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = __webpack_require__(/*! ./lib/xorshift7 */ \"./node_modules/seedrandom/lib/xorshift7.js\");\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = __webpack_require__(/*! ./lib/xor4096 */ \"./node_modules/seedrandom/lib/xor4096.js\");\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = __webpack_require__(/*! ./lib/tychei */ \"./node_modules/seedrandom/lib/tychei.js\");\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = __webpack_require__(/*! ./seedrandom */ \"./node_modules/seedrandom/seedrandom.js\");\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n\n//# sourceURL=webpack:///./node_modules/seedrandom/index.js?");

/***/ }),

/***/ "./node_modules/seedrandom/lib/alea.js":
/*!*********************************************!*\
  !*** ./node_modules/seedrandom/lib/alea.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n(function (global, module, define) {\n\n  function Alea(seed) {\n    var me = this,\n        mash = Mash();\n\n    me.next = function () {\n      var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n      me.s0 = me.s1;\n      me.s1 = me.s2;\n      return me.s2 = t - (me.c = t | 0);\n    };\n\n    // Apply the seeding algorithm from Baagoe.\n    me.c = 1;\n    me.s0 = mash(' ');\n    me.s1 = mash(' ');\n    me.s2 = mash(' ');\n    me.s0 -= mash(seed);\n    if (me.s0 < 0) {\n      me.s0 += 1;\n    }\n    me.s1 -= mash(seed);\n    if (me.s1 < 0) {\n      me.s1 += 1;\n    }\n    me.s2 -= mash(seed);\n    if (me.s2 < 0) {\n      me.s2 += 1;\n    }\n    mash = null;\n  }\n\n  function copy(f, t) {\n    t.c = f.c;\n    t.s0 = f.s0;\n    t.s1 = f.s1;\n    t.s2 = f.s2;\n    return t;\n  }\n\n  function impl(seed, opts) {\n    var xg = new Alea(seed),\n        state = opts && opts.state,\n        prng = xg.next;\n    prng.int32 = function () {\n      return xg.next() * 0x100000000 | 0;\n    };\n    prng.double = function () {\n      return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n    };\n    prng.quick = prng;\n    if (state) {\n      if (typeof state == 'object') copy(state, xg);\n      prng.state = function () {\n        return copy(xg, {});\n      };\n    }\n    return prng;\n  }\n\n  function Mash() {\n    var n = 0xefc8249d;\n\n    var mash = function (data) {\n      data = data.toString();\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n\n    return mash;\n  }\n\n  if (module && module.exports) {\n    module.exports = impl;\n  } else if (__webpack_require__(/*! !webpack amd define */ \"./node_modules/webpack/buildin/amd-define.js\") && __webpack_require__(/*! !webpack amd options */ \"./node_modules/webpack/buildin/amd-options.js\")) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return impl;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {\n    this.alea = impl;\n  }\n})(this, typeof module == 'object' && module, // present in node.js\n__webpack_require__(/*! !webpack amd define */ \"./node_modules/webpack/buildin/amd-define.js\") // present with an AMD loader\n);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))\n\n//# sourceURL=webpack:///./node_modules/seedrandom/lib/alea.js?");

/***/ }),

/***/ "./node_modules/seedrandom/lib/tychei.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/lib/tychei.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function (global, module, define) {\n\n  function XorGen(seed) {\n    var me = this,\n        strseed = '';\n\n    // Set up generator function.\n    me.next = function () {\n      var b = me.b,\n          c = me.c,\n          d = me.d,\n          a = me.a;\n      b = b << 25 ^ b >>> 7 ^ c;\n      c = c - d | 0;\n      d = d << 24 ^ d >>> 8 ^ a;\n      a = a - b | 0;\n      me.b = b = b << 20 ^ b >>> 12 ^ c;\n      me.c = c = c - d | 0;\n      me.d = d << 16 ^ c >>> 16 ^ a;\n      return me.a = a - b | 0;\n    };\n\n    /* The following is non-inverted tyche, which has better internal\n     * bit diffusion, but which is about 25% slower than tyche-i in JS.\n    me.next = function() {\n      var a = me.a, b = me.b, c = me.c, d = me.d;\n      a = (me.a + me.b | 0) >>> 0;\n      d = me.d ^ a; d = d << 16 ^ d >>> 16;\n      c = me.c + d | 0;\n      b = me.b ^ c; b = b << 12 ^ d >>> 20;\n      me.a = a = a + b | 0;\n      d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n      me.c = c = c + d | 0;\n      b = b ^ c;\n      return me.b = (b << 7 ^ b >>> 25);\n    }\n    */\n\n    me.a = 0;\n    me.b = 0;\n    me.c = 2654435769 | 0;\n    me.d = 1367130551;\n\n    if (seed === Math.floor(seed)) {\n      // Integer seed.\n      me.a = seed / 0x100000000 | 0;\n      me.b = seed | 0;\n    } else {\n      // String seed.\n      strseed += seed;\n    }\n\n    // Mix in string seed, then discard an initial batch of 64 values.\n    for (var k = 0; k < strseed.length + 20; k++) {\n      me.b ^= strseed.charCodeAt(k) | 0;\n      me.next();\n    }\n  }\n\n  function copy(f, t) {\n    t.a = f.a;\n    t.b = f.b;\n    t.c = f.c;\n    t.d = f.d;\n    return t;\n  };\n\n  function impl(seed, opts) {\n    var xg = new XorGen(seed),\n        state = opts && opts.state,\n        prng = function () {\n      return (xg.next() >>> 0) / 0x100000000;\n    };\n    prng.double = function () {\n      do {\n        var top = xg.next() >>> 11,\n            bot = (xg.next() >>> 0) / 0x100000000,\n            result = (top + bot) / (1 << 21);\n      } while (result === 0);\n      return result;\n    };\n    prng.int32 = xg.next;\n    prng.quick = prng;\n    if (state) {\n      if (typeof state == 'object') copy(state, xg);\n      prng.state = function () {\n        return copy(xg, {});\n      };\n    }\n    return prng;\n  }\n\n  if (module && module.exports) {\n    module.exports = impl;\n  } else if (__webpack_require__(/*! !webpack amd define */ \"./node_modules/webpack/buildin/amd-define.js\") && __webpack_require__(/*! !webpack amd options */ \"./node_modules/webpack/buildin/amd-options.js\")) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return impl;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {\n    this.tychei = impl;\n  }\n})(this, typeof module == 'object' && module, // present in node.js\n__webpack_require__(/*! !webpack amd define */ \"./node_modules/webpack/buildin/amd-define.js\") // present with an AMD loader\n);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))\n\n//# sourceURL=webpack:///./node_modules/seedrandom/lib/tychei.js?");

/***/ }),

/***/ "./node_modules/seedrandom/lib/xor128.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/lib/xor128.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function (global, module, define) {\n\n  function XorGen(seed) {\n    var me = this,\n        strseed = '';\n\n    me.x = 0;\n    me.y = 0;\n    me.z = 0;\n    me.w = 0;\n\n    // Set up generator function.\n    me.next = function () {\n      var t = me.x ^ me.x << 11;\n      me.x = me.y;\n      me.y = me.z;\n      me.z = me.w;\n      return me.w ^= me.w >>> 19 ^ t ^ t >>> 8;\n    };\n\n    if (seed === (seed | 0)) {\n      // Integer seed.\n      me.x = seed;\n    } else {\n      // String seed.\n      strseed += seed;\n    }\n\n    // Mix in string seed, then discard an initial batch of 64 values.\n    for (var k = 0; k < strseed.length + 64; k++) {\n      me.x ^= strseed.charCodeAt(k) | 0;\n      me.next();\n    }\n  }\n\n  function copy(f, t) {\n    t.x = f.x;\n    t.y = f.y;\n    t.z = f.z;\n    t.w = f.w;\n    return t;\n  }\n\n  function impl(seed, opts) {\n    var xg = new XorGen(seed),\n        state = opts && opts.state,\n        prng = function () {\n      return (xg.next() >>> 0) / 0x100000000;\n    };\n    prng.double = function () {\n      do {\n        var top = xg.next() >>> 11,\n            bot = (xg.next() >>> 0) / 0x100000000,\n            result = (top + bot) / (1 << 21);\n      } while (result === 0);\n      return result;\n    };\n    prng.int32 = xg.next;\n    prng.quick = prng;\n    if (state) {\n      if (typeof state == 'object') copy(state, xg);\n      prng.state = function () {\n        return copy(xg, {});\n      };\n    }\n    return prng;\n  }\n\n  if (module && module.exports) {\n    module.exports = impl;\n  } else if (__webpack_require__(/*! !webpack amd define */ \"./node_modules/webpack/buildin/amd-define.js\") && __webpack_require__(/*! !webpack amd options */ \"./node_modules/webpack/buildin/amd-options.js\")) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return impl;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {\n    this.xor128 = impl;\n  }\n})(this, typeof module == 'object' && module, // present in node.js\n__webpack_require__(/*! !webpack amd define */ \"./node_modules/webpack/buildin/amd-define.js\") // present with an AMD loader\n);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))\n\n//# sourceURL=webpack:///./node_modules/seedrandom/lib/xor128.js?");

/***/ }),

/***/ "./node_modules/seedrandom/lib/xor4096.js":
/*!************************************************!*\
  !*** ./node_modules/seedrandom/lib/xor4096.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function (global, module, define) {\n\n  function XorGen(seed) {\n    var me = this;\n\n    // Set up generator function.\n    me.next = function () {\n      var w = me.w,\n          X = me.X,\n          i = me.i,\n          t,\n          v;\n      // Update Weyl generator.\n      me.w = w = w + 0x61c88647 | 0;\n      // Update xor generator.\n      v = X[i + 34 & 127];\n      t = X[i = i + 1 & 127];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      // Update Xor generator array state.\n      v = X[i] = v ^ t;\n      me.i = i;\n      // Result is the combination.\n      return v + (w ^ w >>> 16) | 0;\n    };\n\n    function init(me, seed) {\n      var t,\n          v,\n          i,\n          j,\n          w,\n          X = [],\n          limit = 128;\n      if (seed === (seed | 0)) {\n        // Numeric seeds initialize v, which is used to generates X.\n        v = seed;\n        seed = null;\n      } else {\n        // String seeds are mixed into v and X one character at a time.\n        seed = seed + '\\0';\n        v = 0;\n        limit = Math.max(limit, seed.length);\n      }\n      // Initialize circular array and weyl value.\n      for (i = 0, j = -32; j < limit; ++j) {\n        // Put the unicode characters into the array, and shuffle them.\n        if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n        // After 32 shuffles, take v as the starting w value.\n        if (j === 0) w = v;\n        v ^= v << 10;\n        v ^= v >>> 15;\n        v ^= v << 4;\n        v ^= v >>> 13;\n        if (j >= 0) {\n          w = w + 0x61c88647 | 0; // Weyl.\n          t = X[j & 127] ^= v + w; // Combine xor and weyl to init array.\n          i = 0 == t ? i + 1 : 0; // Count zeroes.\n        }\n      }\n      // We have detected all zeroes; make the key nonzero.\n      if (i >= 128) {\n        X[(seed && seed.length || 0) & 127] = -1;\n      }\n      // Run the generator 512 times to further mix the state before using it.\n      // Factoring this as a function slows the main generator, so it is just\n      // unrolled here.  The weyl generator is not advanced while warming up.\n      i = 127;\n      for (j = 4 * 128; j > 0; --j) {\n        v = X[i + 34 & 127];\n        t = X[i = i + 1 & 127];\n        v ^= v << 13;\n        t ^= t << 17;\n        v ^= v >>> 15;\n        t ^= t >>> 12;\n        X[i] = v ^ t;\n      }\n      // Storing state as object members is faster than using closure variables.\n      me.w = w;\n      me.X = X;\n      me.i = i;\n    }\n\n    init(me, seed);\n  }\n\n  function copy(f, t) {\n    t.i = f.i;\n    t.w = f.w;\n    t.X = f.X.slice();\n    return t;\n  };\n\n  function impl(seed, opts) {\n    if (seed == null) seed = +new Date();\n    var xg = new XorGen(seed),\n        state = opts && opts.state,\n        prng = function () {\n      return (xg.next() >>> 0) / 0x100000000;\n    };\n    prng.double = function () {\n      do {\n        var top = xg.next() >>> 11,\n            bot = (xg.next() >>> 0) / 0x100000000,\n            result = (top + bot) / (1 << 21);\n      } while (result === 0);\n      return result;\n    };\n    prng.int32 = xg.next;\n    prng.quick = prng;\n    if (state) {\n      if (state.X) copy(state, xg);\n      prng.state = function () {\n        return copy(xg, {});\n      };\n    }\n    return prng;\n  }\n\n  if (module && module.exports) {\n    module.exports = impl;\n  } else if (__webpack_require__(/*! !webpack amd define */ \"./node_modules/webpack/buildin/amd-define.js\") && __webpack_require__(/*! !webpack amd options */ \"./node_modules/webpack/buildin/amd-options.js\")) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return impl;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {\n    this.xor4096 = impl;\n  }\n})(this, // window object or global\ntypeof module == 'object' && module, // present in node.js\n__webpack_require__(/*! !webpack amd define */ \"./node_modules/webpack/buildin/amd-define.js\") // present with an AMD loader\n);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))\n\n//# sourceURL=webpack:///./node_modules/seedrandom/lib/xor4096.js?");

/***/ }),

/***/ "./node_modules/seedrandom/lib/xorshift7.js":
/*!**************************************************!*\
  !*** ./node_modules/seedrandom/lib/xorshift7.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function (global, module, define) {\n\n  function XorGen(seed) {\n    var me = this;\n\n    // Set up generator function.\n    me.next = function () {\n      // Update xor generator.\n      var X = me.x,\n          i = me.i,\n          t,\n          v,\n          w;\n      t = X[i];t ^= t >>> 7;v = t ^ t << 24;\n      t = X[i + 1 & 7];v ^= t ^ t >>> 10;\n      t = X[i + 3 & 7];v ^= t ^ t >>> 3;\n      t = X[i + 4 & 7];v ^= t ^ t << 7;\n      t = X[i + 7 & 7];t = t ^ t << 13;v ^= t ^ t << 9;\n      X[i] = v;\n      me.i = i + 1 & 7;\n      return v;\n    };\n\n    function init(me, seed) {\n      var j,\n          w,\n          X = [];\n\n      if (seed === (seed | 0)) {\n        // Seed state array using a 32-bit integer.\n        w = X[0] = seed;\n      } else {\n        // Seed state using a string.\n        seed = '' + seed;\n        for (j = 0; j < seed.length; ++j) {\n          X[j & 7] = X[j & 7] << 15 ^ seed.charCodeAt(j) + X[j + 1 & 7] << 13;\n        }\n      }\n      // Enforce an array length of 8, not all zeroes.\n      while (X.length < 8) X.push(0);\n      for (j = 0; j < 8 && X[j] === 0; ++j);\n      if (j == 8) w = X[7] = -1;else w = X[j];\n\n      me.x = X;\n      me.i = 0;\n\n      // Discard an initial 256 values.\n      for (j = 256; j > 0; --j) {\n        me.next();\n      }\n    }\n\n    init(me, seed);\n  }\n\n  function copy(f, t) {\n    t.x = f.x.slice();\n    t.i = f.i;\n    return t;\n  }\n\n  function impl(seed, opts) {\n    if (seed == null) seed = +new Date();\n    var xg = new XorGen(seed),\n        state = opts && opts.state,\n        prng = function () {\n      return (xg.next() >>> 0) / 0x100000000;\n    };\n    prng.double = function () {\n      do {\n        var top = xg.next() >>> 11,\n            bot = (xg.next() >>> 0) / 0x100000000,\n            result = (top + bot) / (1 << 21);\n      } while (result === 0);\n      return result;\n    };\n    prng.int32 = xg.next;\n    prng.quick = prng;\n    if (state) {\n      if (state.x) copy(state, xg);\n      prng.state = function () {\n        return copy(xg, {});\n      };\n    }\n    return prng;\n  }\n\n  if (module && module.exports) {\n    module.exports = impl;\n  } else if (__webpack_require__(/*! !webpack amd define */ \"./node_modules/webpack/buildin/amd-define.js\") && __webpack_require__(/*! !webpack amd options */ \"./node_modules/webpack/buildin/amd-options.js\")) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return impl;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {\n    this.xorshift7 = impl;\n  }\n})(this, typeof module == 'object' && module, // present in node.js\n__webpack_require__(/*! !webpack amd define */ \"./node_modules/webpack/buildin/amd-define.js\") // present with an AMD loader\n);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))\n\n//# sourceURL=webpack:///./node_modules/seedrandom/lib/xorshift7.js?");

/***/ }),

/***/ "./node_modules/seedrandom/lib/xorwow.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/lib/xorwow.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function (global, module, define) {\n\n  function XorGen(seed) {\n    var me = this,\n        strseed = '';\n\n    // Set up generator function.\n    me.next = function () {\n      var t = me.x ^ me.x >>> 2;\n      me.x = me.y;me.y = me.z;me.z = me.w;me.w = me.v;\n      return (me.d = me.d + 362437 | 0) + (me.v = me.v ^ me.v << 4 ^ (t ^ t << 1)) | 0;\n    };\n\n    me.x = 0;\n    me.y = 0;\n    me.z = 0;\n    me.w = 0;\n    me.v = 0;\n\n    if (seed === (seed | 0)) {\n      // Integer seed.\n      me.x = seed;\n    } else {\n      // String seed.\n      strseed += seed;\n    }\n\n    // Mix in string seed, then discard an initial batch of 64 values.\n    for (var k = 0; k < strseed.length + 64; k++) {\n      me.x ^= strseed.charCodeAt(k) | 0;\n      if (k == strseed.length) {\n        me.d = me.x << 10 ^ me.x >>> 4;\n      }\n      me.next();\n    }\n  }\n\n  function copy(f, t) {\n    t.x = f.x;\n    t.y = f.y;\n    t.z = f.z;\n    t.w = f.w;\n    t.v = f.v;\n    t.d = f.d;\n    return t;\n  }\n\n  function impl(seed, opts) {\n    var xg = new XorGen(seed),\n        state = opts && opts.state,\n        prng = function () {\n      return (xg.next() >>> 0) / 0x100000000;\n    };\n    prng.double = function () {\n      do {\n        var top = xg.next() >>> 11,\n            bot = (xg.next() >>> 0) / 0x100000000,\n            result = (top + bot) / (1 << 21);\n      } while (result === 0);\n      return result;\n    };\n    prng.int32 = xg.next;\n    prng.quick = prng;\n    if (state) {\n      if (typeof state == 'object') copy(state, xg);\n      prng.state = function () {\n        return copy(xg, {});\n      };\n    }\n    return prng;\n  }\n\n  if (module && module.exports) {\n    module.exports = impl;\n  } else if (__webpack_require__(/*! !webpack amd define */ \"./node_modules/webpack/buildin/amd-define.js\") && __webpack_require__(/*! !webpack amd options */ \"./node_modules/webpack/buildin/amd-options.js\")) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return impl;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {\n    this.xorwow = impl;\n  }\n})(this, typeof module == 'object' && module, // present in node.js\n__webpack_require__(/*! !webpack amd define */ \"./node_modules/webpack/buildin/amd-define.js\") // present with an AMD loader\n);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))\n\n//# sourceURL=webpack:///./node_modules/seedrandom/lib/xorwow.js?");

/***/ }),

/***/ "./node_modules/seedrandom/seedrandom.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/seedrandom.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*\nCopyright 2014 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (pool, math) {\n  //\n  // The following constants are related to IEEE 754 limits.\n  //\n  var global = this,\n      width = 256,\n      // each RC4 output is 0 <= x < 256\n  chunks = 6,\n      // at least six RC4 outputs for each double\n  digits = 52,\n      // there are 52 significant digits in a double\n  rngname = 'random',\n      // rngname: name for Math.random and Math.seedrandom\n  startdenom = math.pow(width, chunks),\n      significance = math.pow(2, digits),\n      overflow = significance * 2,\n      mask = width - 1,\n      nodecrypto; // node.js crypto module, initialized at the bottom.\n\n  //\n  // seedrandom()\n  // This is the seedrandom function described above.\n  //\n  function seedrandom(seed, options, callback) {\n    var key = [];\n    options = options == true ? { entropy: true } : options || {};\n\n    // Flatten the seed string or build one from local entropy if needed.\n    var shortseed = mixkey(flatten(options.entropy ? [seed, tostring(pool)] : seed == null ? autoseed() : seed, 3), key);\n\n    // Use the seed to initialize an ARC4 generator.\n    var arc4 = new ARC4(key);\n\n    // This function returns a random double in [0, 1) that contains\n    // randomness in every bit of the mantissa of the IEEE 754 value.\n    var prng = function () {\n      var n = arc4.g(chunks),\n          // Start with a numerator n < 2 ^ 48\n      d = startdenom,\n          //   and denominator d = 2 ^ 48.\n      x = 0; //   and no 'extra last byte'.\n      while (n < significance) {\n        // Fill up all significant digits by\n        n = (n + x) * width; //   shifting numerator and\n        d *= width; //   denominator and generating a\n        x = arc4.g(1); //   new least-significant-byte.\n      }\n      while (n >= overflow) {\n        // To avoid rounding up, before adding\n        n /= 2; //   last byte, shift everything\n        d /= 2; //   right using integer math until\n        x >>>= 1; //   we have exactly the desired bits.\n      }\n      return (n + x) / d; // Form the number within [0, 1).\n    };\n\n    prng.int32 = function () {\n      return arc4.g(4) | 0;\n    };\n    prng.quick = function () {\n      return arc4.g(4) / 0x100000000;\n    };\n    prng.double = prng;\n\n    // Mix the randomness into accumulated entropy.\n    mixkey(tostring(arc4.S), pool);\n\n    // Calling convention: what to return as a function of prng, seed, is_math.\n    return (options.pass || callback || function (prng, seed, is_math_call, state) {\n      if (state) {\n        // Load the arc4 state from the given state if it has an S array.\n        if (state.S) {\n          copy(state, arc4);\n        }\n        // Only provide the .state method if requested via options.state.\n        prng.state = function () {\n          return copy(arc4, {});\n        };\n      }\n\n      // If called as a method of Math (Math.seedrandom()), mutate\n      // Math.random because that is how seedrandom.js has worked since v1.0.\n      if (is_math_call) {\n        math[rngname] = prng;return seed;\n      }\n\n      // Otherwise, it is a newer calling convention, so return the\n      // prng directly.\n      else return prng;\n    })(prng, shortseed, 'global' in options ? options.global : this == math, options.state);\n  }\n  math['seed' + rngname] = seedrandom;\n\n  //\n  // ARC4\n  //\n  // An ARC4 implementation.  The constructor takes a key in the form of\n  // an array of at most (width) integers that should be 0 <= x < (width).\n  //\n  // The g(count) method returns a pseudorandom integer that concatenates\n  // the next (count) outputs from ARC4.  Its return value is a number x\n  // that is in the range 0 <= x < (width ^ count).\n  //\n  function ARC4(key) {\n    var t,\n        keylen = key.length,\n        me = this,\n        i = 0,\n        j = me.i = me.j = 0,\n        s = me.S = [];\n\n    // The empty key [] is treated as [0].\n    if (!keylen) {\n      key = [keylen++];\n    }\n\n    // Set up S using the standard key scheduling algorithm.\n    while (i < width) {\n      s[i] = i++;\n    }\n    for (i = 0; i < width; i++) {\n      s[i] = s[j = mask & j + key[i % keylen] + (t = s[i])];\n      s[j] = t;\n    }\n\n    // The \"g\" method returns the next (count) outputs as one number.\n    (me.g = function (count) {\n      // Using instance members instead of closure state nearly doubles speed.\n      var t,\n          r = 0,\n          i = me.i,\n          j = me.j,\n          s = me.S;\n      while (count--) {\n        t = s[i = mask & i + 1];\n        r = r * width + s[mask & (s[i] = s[j = mask & j + t]) + (s[j] = t)];\n      }\n      me.i = i;me.j = j;\n      return r;\n      // For robust unpredictability, the function call below automatically\n      // discards an initial batch of values.  This is called RC4-drop[256].\n      // See http://google.com/search?q=rsa+fluhrer+response&btnI\n    })(width);\n  }\n\n  //\n  // copy()\n  // Copies internal state of ARC4 to or from a plain object.\n  //\n  function copy(f, t) {\n    t.i = f.i;\n    t.j = f.j;\n    t.S = f.S.slice();\n    return t;\n  };\n\n  //\n  // flatten()\n  // Converts an object tree to nested arrays of strings.\n  //\n  function flatten(obj, depth) {\n    var result = [],\n        typ = typeof obj,\n        prop;\n    if (depth && typ == 'object') {\n      for (prop in obj) {\n        try {\n          result.push(flatten(obj[prop], depth - 1));\n        } catch (e) {}\n      }\n    }\n    return result.length ? result : typ == 'string' ? obj : obj + '\\0';\n  }\n\n  //\n  // mixkey()\n  // Mixes a string seed into a key that is an array of integers, and\n  // returns a shortened string seed that is equivalent to the result key.\n  //\n  function mixkey(seed, key) {\n    var stringseed = seed + '',\n        smear,\n        j = 0;\n    while (j < stringseed.length) {\n      key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);\n    }\n    return tostring(key);\n  }\n\n  //\n  // autoseed()\n  // Returns an object for autoseeding, using window.crypto and Node crypto\n  // module if available.\n  //\n  function autoseed() {\n    try {\n      var out;\n      if (nodecrypto && (out = nodecrypto.randomBytes)) {\n        // The use of 'out' to remember randomBytes makes tight minified code.\n        out = out(width);\n      } else {\n        out = new Uint8Array(width);\n        (global.crypto || global.msCrypto).getRandomValues(out);\n      }\n      return tostring(out);\n    } catch (e) {\n      var browser = global.navigator,\n          plugins = browser && browser.plugins;\n      return [+new Date(), global, plugins, global.screen, tostring(pool)];\n    }\n  }\n\n  //\n  // tostring()\n  // Converts an array of charcodes to a string\n  //\n  function tostring(a) {\n    return String.fromCharCode.apply(0, a);\n  }\n\n  //\n  // When seedrandom.js is loaded, we immediately mix a few bits\n  // from the built-in RNG into the entropy pool.  Because we do\n  // not want to interfere with deterministic PRNG state later,\n  // seedrandom will not call math.random on its own again after\n  // initialization.\n  //\n  mixkey(math.random(), pool);\n\n  //\n  // Nodejs and AMD support: export the implementation as a module using\n  // either convention.\n  //\n  if (typeof module == 'object' && module.exports) {\n    module.exports = seedrandom;\n    // When in node.js, try using crypto package for autoseeding.\n    try {\n      nodecrypto = __webpack_require__(/*! crypto */ 1);\n    } catch (ex) {}\n  } else if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return seedrandom;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n\n  // End anonymous scope, and pass initial values.\n})([], // pool: entropy pool starts empty\nMath // math: package containing random, pow, and seedrandom\n);\n\n//# sourceURL=webpack:///./node_modules/seedrandom/seedrandom.js?");

/***/ }),

/***/ "./node_modules/underscore/underscore.js":
/*!***********************************************!*\
  !*** ./node_modules/underscore/underscore.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function () {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype,\n      ObjProto = Object.prototype,\n      FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var push = ArrayProto.push,\n      slice = ArrayProto.slice,\n      toString = ObjProto.toString,\n      hasOwnProperty = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var nativeIsArray = Array.isArray,\n      nativeKeys = Object.keys,\n      nativeBind = FuncProto.bind,\n      nativeCreate = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function () {};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function (obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (true) {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {}\n\n  // Current version.\n  _.VERSION = '1.8.3';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function (func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1:\n        return function (value) {\n          return func.call(context, value);\n        };\n      case 2:\n        return function (value, other) {\n          return func.call(context, value, other);\n        };\n      case 3:\n        return function (value, index, collection) {\n          return func.call(context, value, index, collection);\n        };\n      case 4:\n        return function (accumulator, value, index, collection) {\n          return func.call(context, accumulator, value, index, collection);\n        };\n    }\n    return function () {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function (value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n  };\n  _.iteratee = function (value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function (keysFunc, undefinedOnly) {\n    return function (obj) {\n      var length = arguments.length;\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function (prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor();\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var property = function (key) {\n    return function (obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = property('length');\n  var isArrayLike = function (collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function (obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function (obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function (obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function (obj, predicate, context) {\n    var key;\n    if (isArrayLike(obj)) {\n      key = _.findIndex(obj, predicate, context);\n    } else {\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function (obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function (value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function (obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function (obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function (obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function (obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function (obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function (value) {\n      var func = isFunc ? method : value[method];\n      return func == null ? func : func.apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function (obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function (obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function (obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function (obj, iteratee, context) {\n    var result = -Infinity,\n        lastComputed = -Infinity,\n        value,\n        computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function (value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function (obj, iteratee, context) {\n    var result = Infinity,\n        lastComputed = Infinity,\n        value,\n        computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function (value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function (obj) {\n    var set = isArrayLike(obj) ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function (obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function (obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function (value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function (left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function (behavior) {\n    return function (obj, iteratee, context) {\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function (value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function (result, value, key) {\n    if (_.has(result, key)) result[key].push(value);else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function (result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function (result, value, key) {\n    if (_.has(result, key)) result[key]++;else result[key] = 1;\n  });\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function (obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function (obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function (obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var pass = [],\n        fail = [];\n    _.each(obj, function (value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function (array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function (array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function (array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function (array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function (array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function (input, shallow, strict, startIndex) {\n    var output = [],\n        idx = 0;\n    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0,\n            len = value.length;\n        output.length += len;\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function (array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function (array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function (array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function () {\n    return _.uniq(flatten(arguments, true, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function (array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function (array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function (value) {\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function () {\n    return _.unzip(arguments);\n  };\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices\n  _.unzip = function (array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function (list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions\n  function createPredicateIndexFinder(dir) {\n    return function (array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a predicate test\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function (array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0,\n        high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1;else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function (array, item, idx) {\n      var i = 0,\n          length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n          i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  }\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function (start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments\n  var executeBound = function (sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function (func, context) {\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var args = slice.call(arguments, 2);\n    var bound = function () {\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function (func) {\n    var boundArgs = slice.call(arguments, 1);\n    var bound = function () {\n      var position = 0,\n          length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function (obj) {\n    var i,\n        length = arguments.length,\n        key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function (func, hasher) {\n    var memoize = function (key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function (func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function () {\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function (func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function () {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function () {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function (func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function () {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function () {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function (func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function (predicate) {\n    return function () {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function () {\n    var args = arguments;\n    var start = args.length - 1;\n    return function () {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function (times, func) {\n    return function () {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function (times, func) {\n    var memo;\n    return function () {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  function collectNonEnumProps(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function (obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function (obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function (obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object\n  // In contrast to _.map it returns an object\n  _.mapObject = function (obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = _.keys(obj),\n        length = keys.length,\n        results = {},\n        currentKey;\n    for (var index = 0; index < length; index++) {\n      currentKey = keys[index];\n      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function (obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function (obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function (obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s)\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test\n  _.findKey = function (obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj),\n        key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function (object, oiteratee, context) {\n    var result = {},\n        obj = object,\n        iteratee,\n        keys;\n    if (obj == null) return result;\n    if (_.isFunction(oiteratee)) {\n      keys = _.allKeys(obj);\n      iteratee = optimizeCb(oiteratee, context);\n    } else {\n      keys = flatten(arguments, false, false, 1);\n      iteratee = function (value, key, obj) {\n        return key in obj;\n      };\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  };\n\n  // Return a copy of the object without the blacklisted properties.\n  _.omit = function (obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(flatten(arguments, false, false, 1), String);\n      iteratee = function (value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function (prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function (obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function (obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function (object, attrs) {\n    var keys = _.keys(attrs),\n        length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function (a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor,\n          bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && 'constructor' in a && 'constructor' in b) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a),\n          key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function (a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function (obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function (obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function (obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function (obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function (name) {\n    _['is' + name] = function (obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function (obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), and in Safari 8 (#1929).\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    _.isFunction = function (obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function (obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function (obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function (obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function (obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function (obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function (obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function () {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function (value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function (value) {\n    return function () {\n      return value;\n    };\n  };\n\n  _.noop = function () {};\n\n  _.property = property;\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function (obj) {\n    return obj == null ? function () {} : function (key) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function (attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function (obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function (n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function (min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function () {\n    return new Date().getTime();\n  };\n\n  // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function (map) {\n    var escaper = function (match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function (string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function (object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function (prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate: /<%([\\s\\S]+?)%>/g,\n    interpolate: /<%=([\\s\\S]+?)%>/g,\n    escape: /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\": \"'\",\n    '\\\\': '\\\\',\n    '\\r': 'r',\n    '\\n': 'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function (match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function (text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" + \"print=function(){__p+=__j.call(arguments,'');};\\n\" + source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function (data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function (obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function (instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function (obj) {\n    _.each(_.functions(obj), function (name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function () {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function () {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function (name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function () {\n      return result(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function () {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function () {\n    return '' + this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return _;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n}).call(this);\n\n//# sourceURL=webpack:///./node_modules/underscore/underscore.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/amd-define.js":
/*!***************************************!*\
  !*** (webpack)/buildin/amd-define.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function() {\r\n\tthrow new Error(\"define cannot be used indirect\");\r\n};\r\n\n\n//# sourceURL=webpack:///(webpack)/buildin/amd-define.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n\n/* WEBPACK VAR INJECTION */}.call(this, {}))\n\n//# sourceURL=webpack:///(webpack)/buildin/amd-options.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = function () {\n\treturn this;\n}();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function (module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function () {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function () {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function () {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n//# sourceURL=webpack:///(webpack)/buildin/module.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs */ \"./node_modules/@tensorflow/tfjs/dist/index.js\");\n/* harmony import */ var _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"./node_modules/@tensorflow/tfjs-core/dist/index.js\");\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _tensorflow_tfjs_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tensorflow/tfjs-converter */ \"./node_modules/@tensorflow/tfjs-converter/dist/index.js\");\n/* harmony import */ var _tensorflow_tfjs_converter__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_tensorflow_tfjs_converter__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\nconst MODEL_URL = 'tensorflowjs_model.pb';\nconst WEIGHTS_URL = 'weights_manifest.json';\n\nwindow.onload = function () {\n  async function predict() {\n    try {\n      const model = await Object(_tensorflow_tfjs_converter__WEBPACK_IMPORTED_MODULE_2__[\"loadFrozenModel\"])(MODEL_URL, WEIGHTS_URL);\n      var xs = _tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__[\"tensor2d\"]([pixels]);\n      var output = model.execute({ x: xs });\n      return output;\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  var digit_probs = [];\n  for (var i = 0; i < 10; i++) {\n    digit_probs.push(document.getElementById(`n${i}`));\n    digit_probs[i].innerHTML = \"\";\n  }\n\n  // enakai's Handwriting recognizer\n  // See https://github.com/enakai00/jupyter_tfbook/blob/master/Chapter05/Handwriting%20recognizer.ipynb\n  const HEIGHT = 28;\n  const WIDTH = 28;\n  var pixels = [];\n  for (var i = 0; i < HEIGHT * WIDTH; i++) {\n    pixels[i] = 0;\n  }\n  var canvas = document.querySelector(\"canvas\");\n\n  canvas.addEventListener(\"mousemove\", e => {\n    if (e.buttons == 1) {\n      canvas.getContext(\"2d\").fillStyle = \"rgb(0,0,0)\";\n      canvas.getContext(\"2d\").fillRect(e.offsetX, e.offsetY, 8, 8);\n\n      var x = Math.floor(e.offsetY * 0.2);\n      var y = Math.floor(e.offsetX * 0.2) + 1;\n\n      for (var dy = 0; dy < 2; dy++) {\n        for (var dx = 0; dx < 2; dx++) {\n          if (x + dx < WIDTH && y + dy < HEIGHT) {\n            pixels[y + dy + (x + dx) * HEIGHT] = 1;\n          }\n        }\n      }\n    }\n  });\n\n  document.getElementById('clear_value').onclick = () => {\n    canvas.getContext(\"2d\").fillStyle = \"rgb(255,255,255)\";\n    canvas.getContext(\"2d\").fillRect(0, 0, 140, 140);\n    for (var i = 0; i < 28 * 28; i++) pixels[i] = 0;\n  };\n\n  document.getElementById('inference').onclick = () => {\n    predict().then(value => {\n      var result = value.dataSync();\n      var y_pred = Array.prototype.slice.call(result);\n\n      var argmax = 0;\n      digit_probs[argmax].innerHTML = y_pred[argmax].toFixed(3);\n      digit_probs[argmax].style.color = \"black\";\n      for (var i = 1; i < y_pred.length; i++) {\n        digit_probs[i].style.color = \"black\";\n        digit_probs[i].innerHTML = y_pred[i].toFixed(4);\n        if (y_pred[i] > y_pred[argmax]) {\n          argmax = i;\n        }\n      }\n      console.log(argmax);\n      digit_probs[argmax].style.color = \"red\";\n    });\n  };\n};\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ 0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! /Users/akimach/Projects/tensorflow-1.7-sampler/tfjs-mnist-2/src/index.js */\"./src/index.js\");\n\n\n//# sourceURL=webpack:///multi_./src/index.js?");

/***/ }),

/***/ 1:
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//# sourceURL=webpack:///crypto_(ignored)?");

/***/ })

/******/ });